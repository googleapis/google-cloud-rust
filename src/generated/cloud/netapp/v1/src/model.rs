// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gaxi;
extern crate lazy_static;
extern crate location;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// ListActiveDirectoriesRequest for requesting multiple active directories.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListActiveDirectoriesRequest {
    /// Required. Parent value for ListActiveDirectoriesRequest
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Requested page size. Server may return fewer items than requested.
    /// If unspecified, the server will pick an appropriate default.
    pub page_size: i32,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Filtering results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Hint for how to order the results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListActiveDirectoriesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListActiveDirectoriesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListActiveDirectoriesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListActiveDirectoriesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListActiveDirectoriesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListActiveDirectoriesRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListActiveDirectoriesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ListActiveDirectoriesRequest"
    }
}

/// ListActiveDirectoriesResponse contains all the active directories requested.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListActiveDirectoriesResponse {
    /// The list of active directories.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub active_directories: std::vec::Vec<crate::model::ActiveDirectory>,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListActiveDirectoriesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListActiveDirectoriesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [active_directories][crate::model::ListActiveDirectoriesResponse::active_directories].
    pub fn set_active_directories<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ActiveDirectory>,
    {
        use std::iter::Iterator;
        self.active_directories = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListActiveDirectoriesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListActiveDirectoriesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ListActiveDirectoriesResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListActiveDirectoriesResponse {
    type PageItem = crate::model::ActiveDirectory;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.active_directories
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// GetActiveDirectory for getting a single active directory.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetActiveDirectoryRequest {
    /// Required. Name of the active directory.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetActiveDirectoryRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetActiveDirectoryRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetActiveDirectoryRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.GetActiveDirectoryRequest"
    }
}

/// CreateActiveDirectoryRequest for creating an active directory.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateActiveDirectoryRequest {
    /// Required. Value for parent.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Fields of the to be created active directory.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub active_directory: std::option::Option<crate::model::ActiveDirectory>,

    /// Required. ID of the active directory to create. Must be unique within the
    /// parent resource. Must contain only letters, numbers and hyphen, with the
    /// first character a letter , the last a letter or a number, and a 63
    /// character maximum.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub active_directory_id: std::string::String,
}

impl CreateActiveDirectoryRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateActiveDirectoryRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [active_directory][crate::model::CreateActiveDirectoryRequest::active_directory].
    pub fn set_active_directory<
        T: std::convert::Into<std::option::Option<crate::model::ActiveDirectory>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.active_directory = v.into();
        self
    }

    /// Sets the value of [active_directory_id][crate::model::CreateActiveDirectoryRequest::active_directory_id].
    pub fn set_active_directory_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.active_directory_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateActiveDirectoryRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.CreateActiveDirectoryRequest"
    }
}

/// UpdateActiveDirectoryRequest for updating an active directory.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateActiveDirectoryRequest {
    /// Required. Field mask is used to specify the fields to be overwritten in the
    /// Active Directory resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The volume being updated
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub active_directory: std::option::Option<crate::model::ActiveDirectory>,
}

impl UpdateActiveDirectoryRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateActiveDirectoryRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [active_directory][crate::model::UpdateActiveDirectoryRequest::active_directory].
    pub fn set_active_directory<
        T: std::convert::Into<std::option::Option<crate::model::ActiveDirectory>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.active_directory = v.into();
        self
    }
}

impl wkt::message::Message for UpdateActiveDirectoryRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.UpdateActiveDirectoryRequest"
    }
}

/// DeleteActiveDirectoryRequest for deleting a single active directory.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteActiveDirectoryRequest {
    /// Required. Name of the active directory.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteActiveDirectoryRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteActiveDirectoryRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteActiveDirectoryRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.DeleteActiveDirectoryRequest"
    }
}

/// ActiveDirectory is the public representation of the active directory config.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ActiveDirectory {
    /// Identifier. The resource name of the active directory.
    /// Format:
    /// `projects/{project_number}/locations/{location_id}/activeDirectories/{active_directory_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Create time of the active directory.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The state of the AD.
    pub state: crate::model::active_directory::State,

    /// Required. Name of the Active Directory domain
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub domain: std::string::String,

    /// The Active Directory site the service will limit Domain Controller
    /// discovery too.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub site: std::string::String,

    /// Required. Comma separated list of DNS server IP addresses for the Active
    /// Directory domain.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub dns: std::string::String,

    /// Required. NetBIOSPrefix is used as a prefix for SMB server name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub net_bios_prefix: std::string::String,

    /// The Organizational Unit (OU) within the Windows Active Directory the user
    /// belongs to.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub organizational_unit: std::string::String,

    /// If enabled, AES encryption will be enabled for SMB communication.
    pub aes_encryption: bool,

    /// Required. Username of the Active Directory domain administrator.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub username: std::string::String,

    /// Required. Password of the Active Directory domain administrator.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub password: std::string::String,

    /// Optional. Users to be added to the Built-in Backup Operator active
    /// directory group.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub backup_operators: std::vec::Vec<std::string::String>,

    /// Optional. Users to be added to the Built-in Admininstrators group.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub administrators: std::vec::Vec<std::string::String>,

    /// Optional. Domain users to be given the SeSecurityPrivilege.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub security_operators: std::vec::Vec<std::string::String>,

    /// Name of the active directory machine. This optional parameter is used only
    /// while creating kerberos volume
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub kdc_hostname: std::string::String,

    /// KDC server IP address for the active directory machine.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub kdc_ip: std::string::String,

    /// If enabled, will allow access to local users and LDAP users. If access is
    /// needed for only LDAP users, it has to be disabled.
    pub nfs_users_with_ldap: bool,

    /// Description of the active directory.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Specifies whether or not the LDAP traffic needs to be signed.
    pub ldap_signing: bool,

    /// If enabled, traffic between the SMB server to Domain Controller (DC) will
    /// be encrypted.
    pub encrypt_dc_connections: bool,

    /// Labels for the active directory.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Output only. The state details of the Active Directory.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub state_details: std::string::String,
}

impl ActiveDirectory {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ActiveDirectory::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::ActiveDirectory::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [state][crate::model::ActiveDirectory::state].
    pub fn set_state<T: std::convert::Into<crate::model::active_directory::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [domain][crate::model::ActiveDirectory::domain].
    pub fn set_domain<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.domain = v.into();
        self
    }

    /// Sets the value of [site][crate::model::ActiveDirectory::site].
    pub fn set_site<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.site = v.into();
        self
    }

    /// Sets the value of [dns][crate::model::ActiveDirectory::dns].
    pub fn set_dns<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.dns = v.into();
        self
    }

    /// Sets the value of [net_bios_prefix][crate::model::ActiveDirectory::net_bios_prefix].
    pub fn set_net_bios_prefix<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.net_bios_prefix = v.into();
        self
    }

    /// Sets the value of [organizational_unit][crate::model::ActiveDirectory::organizational_unit].
    pub fn set_organizational_unit<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.organizational_unit = v.into();
        self
    }

    /// Sets the value of [aes_encryption][crate::model::ActiveDirectory::aes_encryption].
    pub fn set_aes_encryption<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.aes_encryption = v.into();
        self
    }

    /// Sets the value of [username][crate::model::ActiveDirectory::username].
    pub fn set_username<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.username = v.into();
        self
    }

    /// Sets the value of [password][crate::model::ActiveDirectory::password].
    pub fn set_password<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.password = v.into();
        self
    }

    /// Sets the value of [kdc_hostname][crate::model::ActiveDirectory::kdc_hostname].
    pub fn set_kdc_hostname<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.kdc_hostname = v.into();
        self
    }

    /// Sets the value of [kdc_ip][crate::model::ActiveDirectory::kdc_ip].
    pub fn set_kdc_ip<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.kdc_ip = v.into();
        self
    }

    /// Sets the value of [nfs_users_with_ldap][crate::model::ActiveDirectory::nfs_users_with_ldap].
    pub fn set_nfs_users_with_ldap<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.nfs_users_with_ldap = v.into();
        self
    }

    /// Sets the value of [description][crate::model::ActiveDirectory::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [ldap_signing][crate::model::ActiveDirectory::ldap_signing].
    pub fn set_ldap_signing<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.ldap_signing = v.into();
        self
    }

    /// Sets the value of [encrypt_dc_connections][crate::model::ActiveDirectory::encrypt_dc_connections].
    pub fn set_encrypt_dc_connections<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.encrypt_dc_connections = v.into();
        self
    }

    /// Sets the value of [state_details][crate::model::ActiveDirectory::state_details].
    pub fn set_state_details<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.state_details = v.into();
        self
    }

    /// Sets the value of [backup_operators][crate::model::ActiveDirectory::backup_operators].
    pub fn set_backup_operators<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.backup_operators = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [administrators][crate::model::ActiveDirectory::administrators].
    pub fn set_administrators<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.administrators = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [security_operators][crate::model::ActiveDirectory::security_operators].
    pub fn set_security_operators<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.security_operators = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [labels][crate::model::ActiveDirectory::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for ActiveDirectory {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ActiveDirectory"
    }
}

/// Defines additional types related to [ActiveDirectory].
pub mod active_directory {
    #[allow(unused_imports)]
    use super::*;

    /// The Active Directory States
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// Unspecified Active Directory State
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// Active Directory State is Creating
        pub const CREATING: State = State::new(1);

        /// Active Directory State is Ready
        pub const READY: State = State::new(2);

        /// Active Directory State is Updating
        pub const UPDATING: State = State::new(3);

        /// Active Directory State is In use
        pub const IN_USE: State = State::new(4);

        /// Active Directory State is Deleting
        pub const DELETING: State = State::new(5);

        /// Active Directory State is Error
        pub const ERROR: State = State::new(6);

        /// Active Directory State is Diagnosing.
        pub const DIAGNOSING: State = State::new(7);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CREATING"),
                2 => std::borrow::Cow::Borrowed("READY"),
                3 => std::borrow::Cow::Borrowed("UPDATING"),
                4 => std::borrow::Cow::Borrowed("IN_USE"),
                5 => std::borrow::Cow::Borrowed("DELETING"),
                6 => std::borrow::Cow::Borrowed("ERROR"),
                7 => std::borrow::Cow::Borrowed("DIAGNOSING"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "CREATING" => std::option::Option::Some(Self::CREATING),
                "READY" => std::option::Option::Some(Self::READY),
                "UPDATING" => std::option::Option::Some(Self::UPDATING),
                "IN_USE" => std::option::Option::Some(Self::IN_USE),
                "DELETING" => std::option::Option::Some(Self::DELETING),
                "ERROR" => std::option::Option::Some(Self::ERROR),
                "DIAGNOSING" => std::option::Option::Some(Self::DIAGNOSING),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// A NetApp Backup.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Backup {
    /// Identifier. The resource name of the backup.
    /// Format:
    /// `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}/backups/{backup_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The backup state.
    pub state: crate::model::backup::State,

    /// A description of the backup with 2048 characters or less.
    /// Requests with longer descriptions will be rejected.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Output only. Size of the file system when the backup was created. When
    /// creating a new volume from the backup, the volume capacity will have to be
    /// at least as big.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub volume_usage_bytes: i64,

    /// Output only. Type of backup, manually created or created by a backup
    /// policy.
    pub backup_type: crate::model::backup::Type,

    /// Volume full name of this backup belongs to.
    /// Format:
    /// `projects/{projects_id}/locations/{location}/volumes/{volume_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub source_volume: std::string::String,

    /// If specified, backup will be created from the given snapshot.
    /// If not specified, there will be a new snapshot taken to initiate the backup
    /// creation. Format:
    /// `projects/{project_id}/locations/{location}/volumes/{volume_id}/snapshots/{snapshot_id}`
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub source_snapshot: std::option::Option<std::string::String>,

    /// Output only. The time when the backup was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Resource labels to represent user provided metadata.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Output only. Total size of all backups in a chain in bytes = baseline
    /// backup size + sum(incremental backup size)
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub chain_storage_bytes: i64,

    /// Output only. Reserved for future use
    pub satisfies_pzs: bool,

    /// Output only. Reserved for future use
    pub satisfies_pzi: bool,
}

impl Backup {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Backup::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Backup::state].
    pub fn set_state<T: std::convert::Into<crate::model::backup::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Backup::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [volume_usage_bytes][crate::model::Backup::volume_usage_bytes].
    pub fn set_volume_usage_bytes<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.volume_usage_bytes = v.into();
        self
    }

    /// Sets the value of [backup_type][crate::model::Backup::backup_type].
    pub fn set_backup_type<T: std::convert::Into<crate::model::backup::Type>>(
        mut self,
        v: T,
    ) -> Self {
        self.backup_type = v.into();
        self
    }

    /// Sets the value of [source_volume][crate::model::Backup::source_volume].
    pub fn set_source_volume<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.source_volume = v.into();
        self
    }

    /// Sets the value of [source_snapshot][crate::model::Backup::source_snapshot].
    pub fn set_source_snapshot<T: std::convert::Into<std::option::Option<std::string::String>>>(
        mut self,
        v: T,
    ) -> Self {
        self.source_snapshot = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Backup::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [chain_storage_bytes][crate::model::Backup::chain_storage_bytes].
    pub fn set_chain_storage_bytes<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.chain_storage_bytes = v.into();
        self
    }

    /// Sets the value of [satisfies_pzs][crate::model::Backup::satisfies_pzs].
    pub fn set_satisfies_pzs<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.satisfies_pzs = v.into();
        self
    }

    /// Sets the value of [satisfies_pzi][crate::model::Backup::satisfies_pzi].
    pub fn set_satisfies_pzi<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.satisfies_pzi = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::Backup::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Backup {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.Backup"
    }
}

/// Defines additional types related to [Backup].
pub mod backup {
    #[allow(unused_imports)]
    use super::*;

    /// The Backup States
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// State not set.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// Backup is being created. While in this state, the snapshot for the backup
        /// point-in-time may not have been created yet, and so the point-in-time may
        /// not have been fixed.
        pub const CREATING: State = State::new(1);

        /// Backup is being uploaded. While in this state, none of the writes to the
        /// volume will be included in the backup.
        pub const UPLOADING: State = State::new(2);

        /// Backup is available for use.
        pub const READY: State = State::new(3);

        /// Backup is being deleted.
        pub const DELETING: State = State::new(4);

        /// Backup is not valid and cannot be used for creating new volumes or
        /// restoring existing volumes.
        pub const ERROR: State = State::new(5);

        /// Backup is being updated.
        pub const UPDATING: State = State::new(6);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CREATING"),
                2 => std::borrow::Cow::Borrowed("UPLOADING"),
                3 => std::borrow::Cow::Borrowed("READY"),
                4 => std::borrow::Cow::Borrowed("DELETING"),
                5 => std::borrow::Cow::Borrowed("ERROR"),
                6 => std::borrow::Cow::Borrowed("UPDATING"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "CREATING" => std::option::Option::Some(Self::CREATING),
                "UPLOADING" => std::option::Option::Some(Self::UPLOADING),
                "READY" => std::option::Option::Some(Self::READY),
                "DELETING" => std::option::Option::Some(Self::DELETING),
                "ERROR" => std::option::Option::Some(Self::ERROR),
                "UPDATING" => std::option::Option::Some(Self::UPDATING),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Backup types.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Type(i32);

    impl Type {
        /// Unspecified backup type.
        pub const TYPE_UNSPECIFIED: Type = Type::new(0);

        /// Manual backup type.
        pub const MANUAL: Type = Type::new(1);

        /// Scheduled backup type.
        pub const SCHEDULED: Type = Type::new(2);

        /// Creates a new Type instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("TYPE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("MANUAL"),
                2 => std::borrow::Cow::Borrowed("SCHEDULED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "TYPE_UNSPECIFIED" => std::option::Option::Some(Self::TYPE_UNSPECIFIED),
                "MANUAL" => std::option::Option::Some(Self::MANUAL),
                "SCHEDULED" => std::option::Option::Some(Self::SCHEDULED),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for Type {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for Type {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// ListBackupsRequest lists backups.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListBackupsRequest {
    /// Required. The backupVault for which to retrieve backup information,
    /// in the format
    /// `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}`.
    /// To retrieve backup information for all locations, use "-" for the
    /// `{location}` value.
    /// To retrieve backup information for all backupVaults, use "-" for the
    /// `{backup_vault_id}` value.
    /// To retrieve backup information for a volume, use "-" for the
    /// `{backup_vault_id}` value and specify volume full name with the filter.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return. The service may return fewer
    /// than this value. The maximum value
    /// is 1000; values above 1000 will be coerced to 1000.
    pub page_size: i32,

    /// The next_page_token value to use if there are additional
    /// results to retrieve for this list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Sort results. Supported values are "name", "name desc" or "" (unsorted).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,

    /// The standard list filter.
    /// If specified, backups will be returned based on the attribute name that
    /// matches the filter expression. If empty, then no backups are filtered out.
    /// See <https://google.aip.dev/160>
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,
}

impl ListBackupsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListBackupsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListBackupsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListBackupsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListBackupsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListBackupsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }
}

impl wkt::message::Message for ListBackupsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ListBackupsRequest"
    }
}

/// ListBackupsResponse is the result of ListBackupsRequest.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListBackupsResponse {
    /// A list of backups in the project.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub backups: std::vec::Vec<crate::model::Backup>,

    /// The token you can use to retrieve the next page of results. Not returned
    /// if there are no more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListBackupsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListBackupsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [backups][crate::model::ListBackupsResponse::backups].
    pub fn set_backups<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Backup>,
    {
        use std::iter::Iterator;
        self.backups = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListBackupsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListBackupsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ListBackupsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListBackupsResponse {
    type PageItem = crate::model::Backup;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.backups
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// GetBackupRequest gets the state of a backup.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetBackupRequest {
    /// Required. The backup resource name, in the format
    /// `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}/backups/{backup_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetBackupRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetBackupRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetBackupRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.GetBackupRequest"
    }
}

/// CreateBackupRequest creates a backup.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateBackupRequest {
    /// Required. The NetApp backupVault to create the backups of, in the format
    /// `projects/*/locations/*/backupVaults/{backup_vault_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The ID to use for the backup.
    /// The ID must be unique within the specified backupVault.
    /// Must contain only letters, numbers and hyphen, with the first
    /// character a letter, the last a letter or a
    /// number, and a 63 character maximum.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub backup_id: std::string::String,

    /// Required. A backup resource
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub backup: std::option::Option<crate::model::Backup>,
}

impl CreateBackupRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateBackupRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [backup_id][crate::model::CreateBackupRequest::backup_id].
    pub fn set_backup_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.backup_id = v.into();
        self
    }

    /// Sets the value of [backup][crate::model::CreateBackupRequest::backup].
    pub fn set_backup<T: std::convert::Into<std::option::Option<crate::model::Backup>>>(
        mut self,
        v: T,
    ) -> Self {
        self.backup = v.into();
        self
    }
}

impl wkt::message::Message for CreateBackupRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.CreateBackupRequest"
    }
}

/// DeleteBackupRequest deletes a backup.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteBackupRequest {
    /// Required. The backup resource name, in the format
    /// `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}/backups/{backup_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteBackupRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteBackupRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteBackupRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.DeleteBackupRequest"
    }
}

/// UpdateBackupRequest updates description and/or labels for a backup.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateBackupRequest {
    /// Required. Field mask is used to specify the fields to be overwritten in the
    /// Backup resource to be updated.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The backup being updated
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub backup: std::option::Option<crate::model::Backup>,
}

impl UpdateBackupRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateBackupRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [backup][crate::model::UpdateBackupRequest::backup].
    pub fn set_backup<T: std::convert::Into<std::option::Option<crate::model::Backup>>>(
        mut self,
        v: T,
    ) -> Self {
        self.backup = v.into();
        self
    }
}

impl wkt::message::Message for UpdateBackupRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.UpdateBackupRequest"
    }
}

/// Backup Policy.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BackupPolicy {
    /// Identifier. The resource name of the backup policy.
    /// Format:
    /// `projects/{project_id}/locations/{location}/backupPolicies/{backup_policy_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Number of daily backups to keep. Note that the minimum daily backup limit
    /// is 2.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub daily_backup_limit: std::option::Option<i32>,

    /// Number of weekly backups to keep. Note that the sum of daily, weekly and
    /// monthly backups should be greater than 1.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub weekly_backup_limit: std::option::Option<i32>,

    /// Number of monthly backups to keep. Note that the sum of daily, weekly and
    /// monthly backups should be greater than 1.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub monthly_backup_limit: std::option::Option<i32>,

    /// Description of the backup policy.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub description: std::option::Option<std::string::String>,

    /// If enabled, make backups automatically according to the schedules.
    /// This will be applied to all volumes that have this policy attached and
    /// enforced on volume level. If not specified, default is true.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub enabled: std::option::Option<bool>,

    /// Output only. The total number of volumes assigned by this backup policy.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub assigned_volume_count: std::option::Option<i32>,

    /// Output only. The time when the backup policy was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Resource labels to represent user provided metadata.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Output only. The backup policy state.
    pub state: crate::model::backup_policy::State,
}

impl BackupPolicy {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::BackupPolicy::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [daily_backup_limit][crate::model::BackupPolicy::daily_backup_limit].
    pub fn set_daily_backup_limit<T: std::convert::Into<std::option::Option<i32>>>(
        mut self,
        v: T,
    ) -> Self {
        self.daily_backup_limit = v.into();
        self
    }

    /// Sets the value of [weekly_backup_limit][crate::model::BackupPolicy::weekly_backup_limit].
    pub fn set_weekly_backup_limit<T: std::convert::Into<std::option::Option<i32>>>(
        mut self,
        v: T,
    ) -> Self {
        self.weekly_backup_limit = v.into();
        self
    }

    /// Sets the value of [monthly_backup_limit][crate::model::BackupPolicy::monthly_backup_limit].
    pub fn set_monthly_backup_limit<T: std::convert::Into<std::option::Option<i32>>>(
        mut self,
        v: T,
    ) -> Self {
        self.monthly_backup_limit = v.into();
        self
    }

    /// Sets the value of [description][crate::model::BackupPolicy::description].
    pub fn set_description<T: std::convert::Into<std::option::Option<std::string::String>>>(
        mut self,
        v: T,
    ) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [enabled][crate::model::BackupPolicy::enabled].
    pub fn set_enabled<T: std::convert::Into<std::option::Option<bool>>>(mut self, v: T) -> Self {
        self.enabled = v.into();
        self
    }

    /// Sets the value of [assigned_volume_count][crate::model::BackupPolicy::assigned_volume_count].
    pub fn set_assigned_volume_count<T: std::convert::Into<std::option::Option<i32>>>(
        mut self,
        v: T,
    ) -> Self {
        self.assigned_volume_count = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::BackupPolicy::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [state][crate::model::BackupPolicy::state].
    pub fn set_state<T: std::convert::Into<crate::model::backup_policy::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::BackupPolicy::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for BackupPolicy {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.BackupPolicy"
    }
}

/// Defines additional types related to [BackupPolicy].
pub mod backup_policy {
    #[allow(unused_imports)]
    use super::*;

    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// State not set.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// BackupPolicy is being created.
        pub const CREATING: State = State::new(1);

        /// BackupPolicy is available for use.
        pub const READY: State = State::new(2);

        /// BackupPolicy is being deleted.
        pub const DELETING: State = State::new(3);

        /// BackupPolicy is not valid and cannot be used.
        pub const ERROR: State = State::new(4);

        /// BackupPolicy is being updated.
        pub const UPDATING: State = State::new(5);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CREATING"),
                2 => std::borrow::Cow::Borrowed("READY"),
                3 => std::borrow::Cow::Borrowed("DELETING"),
                4 => std::borrow::Cow::Borrowed("ERROR"),
                5 => std::borrow::Cow::Borrowed("UPDATING"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "CREATING" => std::option::Option::Some(Self::CREATING),
                "READY" => std::option::Option::Some(Self::READY),
                "DELETING" => std::option::Option::Some(Self::DELETING),
                "ERROR" => std::option::Option::Some(Self::ERROR),
                "UPDATING" => std::option::Option::Some(Self::UPDATING),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// CreateBackupPolicyRequest creates a backupPolicy.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateBackupPolicyRequest {
    /// Required. The location to create the backup policies of, in the format
    /// `projects/{project_id}/locations/{location}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. A backupPolicy resource
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub backup_policy: std::option::Option<crate::model::BackupPolicy>,

    /// Required. The ID to use for the backup policy.
    /// The ID must be unique within the specified location.
    /// Must contain only letters, numbers and hyphen, with the first
    /// character a letter, the last a letter or a
    /// number, and a 63 character maximum.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub backup_policy_id: std::string::String,
}

impl CreateBackupPolicyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateBackupPolicyRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [backup_policy][crate::model::CreateBackupPolicyRequest::backup_policy].
    pub fn set_backup_policy<
        T: std::convert::Into<std::option::Option<crate::model::BackupPolicy>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.backup_policy = v.into();
        self
    }

    /// Sets the value of [backup_policy_id][crate::model::CreateBackupPolicyRequest::backup_policy_id].
    pub fn set_backup_policy_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.backup_policy_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateBackupPolicyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.CreateBackupPolicyRequest"
    }
}

/// GetBackupPolicyRequest gets the state of a backupPolicy.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetBackupPolicyRequest {
    /// Required. The backupPolicy resource name, in the format
    /// `projects/{project_id}/locations/{location}/backupPolicies/{backup_policy_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetBackupPolicyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetBackupPolicyRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetBackupPolicyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.GetBackupPolicyRequest"
    }
}

/// ListBackupPoliciesRequest for requesting multiple backup policies.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListBackupPoliciesRequest {
    /// Required. Parent value for ListBackupPoliciesRequest
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Requested page size. Server may return fewer items than requested.
    /// If unspecified, the server will pick an appropriate default.
    pub page_size: i32,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Filtering results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Hint for how to order the results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListBackupPoliciesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListBackupPoliciesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListBackupPoliciesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListBackupPoliciesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListBackupPoliciesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListBackupPoliciesRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListBackupPoliciesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ListBackupPoliciesRequest"
    }
}

/// ListBackupPoliciesResponse contains all the backup policies requested.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListBackupPoliciesResponse {
    /// The list of backup policies.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub backup_policies: std::vec::Vec<crate::model::BackupPolicy>,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListBackupPoliciesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListBackupPoliciesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [backup_policies][crate::model::ListBackupPoliciesResponse::backup_policies].
    pub fn set_backup_policies<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::BackupPolicy>,
    {
        use std::iter::Iterator;
        self.backup_policies = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListBackupPoliciesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListBackupPoliciesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ListBackupPoliciesResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListBackupPoliciesResponse {
    type PageItem = crate::model::BackupPolicy;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.backup_policies
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// UpdateBackupPolicyRequest for updating a backup policy.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateBackupPolicyRequest {
    /// Required. Field mask is used to specify the fields to be overwritten in the
    /// Backup Policy resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The backup policy being updated
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub backup_policy: std::option::Option<crate::model::BackupPolicy>,
}

impl UpdateBackupPolicyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateBackupPolicyRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [backup_policy][crate::model::UpdateBackupPolicyRequest::backup_policy].
    pub fn set_backup_policy<
        T: std::convert::Into<std::option::Option<crate::model::BackupPolicy>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.backup_policy = v.into();
        self
    }
}

impl wkt::message::Message for UpdateBackupPolicyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.UpdateBackupPolicyRequest"
    }
}

/// DeleteBackupPolicyRequest deletes a backup policy.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteBackupPolicyRequest {
    /// Required. The backup policy resource name, in the format
    /// `projects/{project_id}/locations/{location}/backupPolicies/{backup_policy_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteBackupPolicyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteBackupPolicyRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteBackupPolicyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.DeleteBackupPolicyRequest"
    }
}

/// A NetApp BackupVault.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BackupVault {
    /// Identifier. The resource name of the backup vault.
    /// Format:
    /// `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The backup vault state.
    pub state: crate::model::backup_vault::State,

    /// Output only. Create time of the backup vault.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Description of the backup vault.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Resource labels to represent user provided metadata.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,
}

impl BackupVault {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::BackupVault::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [state][crate::model::BackupVault::state].
    pub fn set_state<T: std::convert::Into<crate::model::backup_vault::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::BackupVault::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::BackupVault::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::BackupVault::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for BackupVault {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.BackupVault"
    }
}

/// Defines additional types related to [BackupVault].
pub mod backup_vault {
    #[allow(unused_imports)]
    use super::*;

    /// The Backup Vault States
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// State not set.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// BackupVault is being created.
        pub const CREATING: State = State::new(1);

        /// BackupVault is available for use.
        pub const READY: State = State::new(2);

        /// BackupVault is being deleted.
        pub const DELETING: State = State::new(3);

        /// BackupVault is not valid and cannot be used.
        pub const ERROR: State = State::new(4);

        /// BackupVault is being updated.
        pub const UPDATING: State = State::new(5);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CREATING"),
                2 => std::borrow::Cow::Borrowed("READY"),
                3 => std::borrow::Cow::Borrowed("DELETING"),
                4 => std::borrow::Cow::Borrowed("ERROR"),
                5 => std::borrow::Cow::Borrowed("UPDATING"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "CREATING" => std::option::Option::Some(Self::CREATING),
                "READY" => std::option::Option::Some(Self::READY),
                "DELETING" => std::option::Option::Some(Self::DELETING),
                "ERROR" => std::option::Option::Some(Self::ERROR),
                "UPDATING" => std::option::Option::Some(Self::UPDATING),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// GetBackupVaultRequest gets the state of a backupVault.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetBackupVaultRequest {
    /// Required. The backupVault resource name, in the format
    /// `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetBackupVaultRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetBackupVaultRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetBackupVaultRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.GetBackupVaultRequest"
    }
}

/// ListBackupVaultsRequest lists backupVaults.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListBackupVaultsRequest {
    /// Required. The location for which to retrieve backupVault information,
    /// in the format
    /// `projects/{project_id}/locations/{location}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return.
    pub page_size: i32,

    /// The next_page_token value to use if there are additional
    /// results to retrieve for this list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Sort results. Supported values are "name", "name desc" or "" (unsorted).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,

    /// List filter.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,
}

impl ListBackupVaultsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListBackupVaultsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListBackupVaultsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListBackupVaultsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListBackupVaultsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListBackupVaultsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }
}

impl wkt::message::Message for ListBackupVaultsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ListBackupVaultsRequest"
    }
}

/// ListBackupVaultsResponse is the result of ListBackupVaultsRequest.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListBackupVaultsResponse {
    /// A list of backupVaults in the project for the specified location.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub backup_vaults: std::vec::Vec<crate::model::BackupVault>,

    /// The token you can use to retrieve the next page of results. Not returned
    /// if there are no more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListBackupVaultsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListBackupVaultsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [backup_vaults][crate::model::ListBackupVaultsResponse::backup_vaults].
    pub fn set_backup_vaults<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::BackupVault>,
    {
        use std::iter::Iterator;
        self.backup_vaults = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListBackupVaultsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListBackupVaultsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ListBackupVaultsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListBackupVaultsResponse {
    type PageItem = crate::model::BackupVault;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.backup_vaults
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// CreateBackupVaultRequest creates a backup vault.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateBackupVaultRequest {
    /// Required. The location to create the backup vaults, in the format
    /// `projects/{project_id}/locations/{location}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The ID to use for the backupVault.
    /// The ID must be unique within the specified location.
    /// Must contain only letters, numbers and hyphen, with the first
    /// character a letter, the last a letter or a
    /// number, and a 63 character maximum.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub backup_vault_id: std::string::String,

    /// Required. A backupVault resource
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub backup_vault: std::option::Option<crate::model::BackupVault>,
}

impl CreateBackupVaultRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateBackupVaultRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [backup_vault_id][crate::model::CreateBackupVaultRequest::backup_vault_id].
    pub fn set_backup_vault_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.backup_vault_id = v.into();
        self
    }

    /// Sets the value of [backup_vault][crate::model::CreateBackupVaultRequest::backup_vault].
    pub fn set_backup_vault<
        T: std::convert::Into<std::option::Option<crate::model::BackupVault>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.backup_vault = v.into();
        self
    }
}

impl wkt::message::Message for CreateBackupVaultRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.CreateBackupVaultRequest"
    }
}

/// DeleteBackupVaultRequest deletes a backupVault.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteBackupVaultRequest {
    /// Required. The backupVault resource name, in the format
    /// `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteBackupVaultRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteBackupVaultRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteBackupVaultRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.DeleteBackupVaultRequest"
    }
}

/// UpdateBackupVaultRequest updates description and/or labels for a backupVault.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateBackupVaultRequest {
    /// Required. Field mask is used to specify the fields to be overwritten in the
    /// Backup resource to be updated.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The backupVault being updated
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub backup_vault: std::option::Option<crate::model::BackupVault>,
}

impl UpdateBackupVaultRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateBackupVaultRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [backup_vault][crate::model::UpdateBackupVaultRequest::backup_vault].
    pub fn set_backup_vault<
        T: std::convert::Into<std::option::Option<crate::model::BackupVault>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.backup_vault = v.into();
        self
    }
}

impl wkt::message::Message for UpdateBackupVaultRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.UpdateBackupVaultRequest"
    }
}

/// Represents the metadata of the long-running operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OperationMetadata {
    /// Output only. The time the operation was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the operation finished running.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Server-defined resource path for the target of the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target: std::string::String,

    /// Output only. Name of the verb executed by the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub verb: std::string::String,

    /// Output only. Human-readable status of the operation, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub status_message: std::string::String,

    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have been canceled successfully
    /// have [Operation.error][] value with a
    /// [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
    /// `Code.CANCELLED`.
    ///
    /// [google.rpc.Status.code]: rpc::model::Status::code
    pub requested_cancellation: bool,

    /// Output only. API version used to start the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub api_version: std::string::String,
}

impl OperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [create_time][crate::model::OperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::OperationMetadata::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [target][crate::model::OperationMetadata::target].
    pub fn set_target<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [verb][crate::model::OperationMetadata::verb].
    pub fn set_verb<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.verb = v.into();
        self
    }

    /// Sets the value of [status_message][crate::model::OperationMetadata::status_message].
    pub fn set_status_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.status_message = v.into();
        self
    }

    /// Sets the value of [requested_cancellation][crate::model::OperationMetadata::requested_cancellation].
    pub fn set_requested_cancellation<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.requested_cancellation = v.into();
        self
    }

    /// Sets the value of [api_version][crate::model::OperationMetadata::api_version].
    pub fn set_api_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.api_version = v.into();
        self
    }
}

impl wkt::message::Message for OperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.OperationMetadata"
    }
}

/// Metadata for a given
/// [google.cloud.location.Location][google.cloud.location.Location].
///
/// [google.cloud.location.Location]: location::model::Location
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct LocationMetadata {
    /// Output only. Supported service levels in a location.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub supported_service_levels: std::vec::Vec<crate::model::ServiceLevel>,

    /// Output only. Supported flex performance in a location.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub supported_flex_performance: std::vec::Vec<crate::model::FlexPerformance>,
}

impl LocationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [supported_service_levels][crate::model::LocationMetadata::supported_service_levels].
    pub fn set_supported_service_levels<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ServiceLevel>,
    {
        use std::iter::Iterator;
        self.supported_service_levels = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [supported_flex_performance][crate::model::LocationMetadata::supported_flex_performance].
    pub fn set_supported_flex_performance<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::FlexPerformance>,
    {
        use std::iter::Iterator;
        self.supported_flex_performance = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for LocationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.LocationMetadata"
    }
}

/// GetKmsConfigRequest gets a KMS Config.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetKmsConfigRequest {
    /// Required. Name of the KmsConfig
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetKmsConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetKmsConfigRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetKmsConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.GetKmsConfigRequest"
    }
}

/// ListKmsConfigsRequest lists KMS Configs.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListKmsConfigsRequest {
    /// Required. Parent value
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return.
    pub page_size: i32,

    /// The next_page_token value to use if there are additional
    /// results to retrieve for this list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Sort results. Supported values are "name", "name desc" or "" (unsorted).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,

    /// List filter.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,
}

impl ListKmsConfigsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListKmsConfigsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListKmsConfigsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListKmsConfigsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListKmsConfigsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListKmsConfigsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }
}

impl wkt::message::Message for ListKmsConfigsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ListKmsConfigsRequest"
    }
}

/// ListKmsConfigsResponse is the response to a ListKmsConfigsRequest.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListKmsConfigsResponse {
    /// The list of KmsConfigs
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub kms_configs: std::vec::Vec<crate::model::KmsConfig>,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListKmsConfigsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListKmsConfigsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [kms_configs][crate::model::ListKmsConfigsResponse::kms_configs].
    pub fn set_kms_configs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::KmsConfig>,
    {
        use std::iter::Iterator;
        self.kms_configs = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListKmsConfigsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListKmsConfigsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ListKmsConfigsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListKmsConfigsResponse {
    type PageItem = crate::model::KmsConfig;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.kms_configs
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// CreateKmsConfigRequest creates a KMS Config.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateKmsConfigRequest {
    /// Required. Value for parent.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Id of the requesting KmsConfig. Must be unique within the parent
    /// resource. Must contain only letters, numbers and hyphen, with the first
    /// character a letter, the last a letter or a
    /// number, and a 63 character maximum.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub kms_config_id: std::string::String,

    /// Required. The required parameters to create a new KmsConfig.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub kms_config: std::option::Option<crate::model::KmsConfig>,
}

impl CreateKmsConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateKmsConfigRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [kms_config_id][crate::model::CreateKmsConfigRequest::kms_config_id].
    pub fn set_kms_config_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.kms_config_id = v.into();
        self
    }

    /// Sets the value of [kms_config][crate::model::CreateKmsConfigRequest::kms_config].
    pub fn set_kms_config<T: std::convert::Into<std::option::Option<crate::model::KmsConfig>>>(
        mut self,
        v: T,
    ) -> Self {
        self.kms_config = v.into();
        self
    }
}

impl wkt::message::Message for CreateKmsConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.CreateKmsConfigRequest"
    }
}

/// UpdateKmsConfigRequest updates a KMS Config.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateKmsConfigRequest {
    /// Required. Field mask is used to specify the fields to be overwritten in the
    /// KmsConfig resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The KmsConfig being updated
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub kms_config: std::option::Option<crate::model::KmsConfig>,
}

impl UpdateKmsConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateKmsConfigRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [kms_config][crate::model::UpdateKmsConfigRequest::kms_config].
    pub fn set_kms_config<T: std::convert::Into<std::option::Option<crate::model::KmsConfig>>>(
        mut self,
        v: T,
    ) -> Self {
        self.kms_config = v.into();
        self
    }
}

impl wkt::message::Message for UpdateKmsConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.UpdateKmsConfigRequest"
    }
}

/// DeleteKmsConfigRequest deletes a KMS Config.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteKmsConfigRequest {
    /// Required. Name of the KmsConfig.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteKmsConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteKmsConfigRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteKmsConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.DeleteKmsConfigRequest"
    }
}

/// EncryptVolumesRequest specifies the KMS config to encrypt existing volumes.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct EncryptVolumesRequest {
    /// Required. Name of the KmsConfig.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl EncryptVolumesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::EncryptVolumesRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for EncryptVolumesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.EncryptVolumesRequest"
    }
}

/// VerifyKmsConfigRequest specifies the KMS config to be validated.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct VerifyKmsConfigRequest {
    /// Required. Name of the KMS Config to be verified.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl VerifyKmsConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::VerifyKmsConfigRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for VerifyKmsConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.VerifyKmsConfigRequest"
    }
}

/// VerifyKmsConfigResponse contains the information if the config is correctly
/// and error message.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct VerifyKmsConfigResponse {
    /// Output only. If the customer key configured correctly to the encrypt
    /// volume.
    pub healthy: bool,

    /// Output only. Error message if config is not healthy.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub health_error: std::string::String,

    /// Output only. Instructions for the customers to provide the access to the
    /// encryption key.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub instructions: std::string::String,
}

impl VerifyKmsConfigResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [healthy][crate::model::VerifyKmsConfigResponse::healthy].
    pub fn set_healthy<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.healthy = v.into();
        self
    }

    /// Sets the value of [health_error][crate::model::VerifyKmsConfigResponse::health_error].
    pub fn set_health_error<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.health_error = v.into();
        self
    }

    /// Sets the value of [instructions][crate::model::VerifyKmsConfigResponse::instructions].
    pub fn set_instructions<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.instructions = v.into();
        self
    }
}

impl wkt::message::Message for VerifyKmsConfigResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.VerifyKmsConfigResponse"
    }
}

/// KmsConfig is the customer managed encryption key(CMEK) configuration.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct KmsConfig {
    /// Identifier. Name of the KmsConfig.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. Customer managed crypto key resource full name. Format:
    /// projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{key}.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub crypto_key_name: std::string::String,

    /// Output only. State of the KmsConfig.
    pub state: crate::model::kms_config::State,

    /// Output only. State details of the KmsConfig.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub state_details: std::string::String,

    /// Output only. Create time of the KmsConfig.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Description of the KmsConfig.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Labels as key value pairs
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Output only. Instructions to provide the access to the customer provided
    /// encryption key.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub instructions: std::string::String,

    /// Output only. The Service account which will have access to the customer
    /// provided encryption key.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_account: std::string::String,
}

impl KmsConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::KmsConfig::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [crypto_key_name][crate::model::KmsConfig::crypto_key_name].
    pub fn set_crypto_key_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.crypto_key_name = v.into();
        self
    }

    /// Sets the value of [state][crate::model::KmsConfig::state].
    pub fn set_state<T: std::convert::Into<crate::model::kms_config::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [state_details][crate::model::KmsConfig::state_details].
    pub fn set_state_details<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.state_details = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::KmsConfig::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::KmsConfig::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [instructions][crate::model::KmsConfig::instructions].
    pub fn set_instructions<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.instructions = v.into();
        self
    }

    /// Sets the value of [service_account][crate::model::KmsConfig::service_account].
    pub fn set_service_account<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service_account = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::KmsConfig::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for KmsConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.KmsConfig"
    }
}

/// Defines additional types related to [KmsConfig].
pub mod kms_config {
    #[allow(unused_imports)]
    use super::*;

    /// The KmsConfig States
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// Unspecified KmsConfig State
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// KmsConfig State is Ready
        pub const READY: State = State::new(1);

        /// KmsConfig State is Creating
        pub const CREATING: State = State::new(2);

        /// KmsConfig State is Deleting
        pub const DELETING: State = State::new(3);

        /// KmsConfig State is Updating
        pub const UPDATING: State = State::new(4);

        /// KmsConfig State is In Use.
        pub const IN_USE: State = State::new(5);

        /// KmsConfig State is Error
        pub const ERROR: State = State::new(6);

        /// KmsConfig State is Pending to verify crypto key access.
        pub const KEY_CHECK_PENDING: State = State::new(7);

        /// KmsConfig State is Not accessbile by the SDE service account to the
        /// crypto key.
        pub const KEY_NOT_REACHABLE: State = State::new(8);

        /// KmsConfig State is Disabling.
        pub const DISABLING: State = State::new(9);

        /// KmsConfig State is Disabled.
        pub const DISABLED: State = State::new(10);

        /// KmsConfig State is Migrating.
        /// The existing volumes are migrating from SMEK to CMEK.
        pub const MIGRATING: State = State::new(11);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("READY"),
                2 => std::borrow::Cow::Borrowed("CREATING"),
                3 => std::borrow::Cow::Borrowed("DELETING"),
                4 => std::borrow::Cow::Borrowed("UPDATING"),
                5 => std::borrow::Cow::Borrowed("IN_USE"),
                6 => std::borrow::Cow::Borrowed("ERROR"),
                7 => std::borrow::Cow::Borrowed("KEY_CHECK_PENDING"),
                8 => std::borrow::Cow::Borrowed("KEY_NOT_REACHABLE"),
                9 => std::borrow::Cow::Borrowed("DISABLING"),
                10 => std::borrow::Cow::Borrowed("DISABLED"),
                11 => std::borrow::Cow::Borrowed("MIGRATING"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "READY" => std::option::Option::Some(Self::READY),
                "CREATING" => std::option::Option::Some(Self::CREATING),
                "DELETING" => std::option::Option::Some(Self::DELETING),
                "UPDATING" => std::option::Option::Some(Self::UPDATING),
                "IN_USE" => std::option::Option::Some(Self::IN_USE),
                "ERROR" => std::option::Option::Some(Self::ERROR),
                "KEY_CHECK_PENDING" => std::option::Option::Some(Self::KEY_CHECK_PENDING),
                "KEY_NOT_REACHABLE" => std::option::Option::Some(Self::KEY_NOT_REACHABLE),
                "DISABLING" => std::option::Option::Some(Self::DISABLING),
                "DISABLED" => std::option::Option::Some(Self::DISABLED),
                "MIGRATING" => std::option::Option::Some(Self::MIGRATING),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// ListQuotaRulesRequest for listing quota rules.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListQuotaRulesRequest {
    /// Required. Parent value for ListQuotaRulesRequest
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, the server will pick an appropriate default.
    pub page_size: i32,

    /// Optional. A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. Filtering results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. Hint for how to order the results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListQuotaRulesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListQuotaRulesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListQuotaRulesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListQuotaRulesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListQuotaRulesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListQuotaRulesRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListQuotaRulesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ListQuotaRulesRequest"
    }
}

/// ListQuotaRulesResponse is the response to a ListQuotaRulesRequest.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListQuotaRulesResponse {
    /// List of quota rules
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub quota_rules: std::vec::Vec<crate::model::QuotaRule>,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListQuotaRulesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListQuotaRulesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [quota_rules][crate::model::ListQuotaRulesResponse::quota_rules].
    pub fn set_quota_rules<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::QuotaRule>,
    {
        use std::iter::Iterator;
        self.quota_rules = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListQuotaRulesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListQuotaRulesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ListQuotaRulesResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListQuotaRulesResponse {
    type PageItem = crate::model::QuotaRule;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.quota_rules
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// GetQuotaRuleRequest for getting a quota rule.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetQuotaRuleRequest {
    /// Required. Name of the quota rule
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetQuotaRuleRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetQuotaRuleRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetQuotaRuleRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.GetQuotaRuleRequest"
    }
}

/// CreateQuotaRuleRequest for creating a quota rule.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateQuotaRuleRequest {
    /// Required. Parent value for CreateQuotaRuleRequest
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Fields of the to be created quota rule.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub quota_rule: std::option::Option<crate::model::QuotaRule>,

    /// Required. ID of the quota rule to create. Must be unique within the parent
    /// resource. Must contain only letters, numbers, underscore and hyphen, with
    /// the first character a letter or underscore, the last a letter or underscore
    /// or a number, and a 63 character maximum.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub quota_rule_id: std::string::String,
}

impl CreateQuotaRuleRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateQuotaRuleRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [quota_rule][crate::model::CreateQuotaRuleRequest::quota_rule].
    pub fn set_quota_rule<T: std::convert::Into<std::option::Option<crate::model::QuotaRule>>>(
        mut self,
        v: T,
    ) -> Self {
        self.quota_rule = v.into();
        self
    }

    /// Sets the value of [quota_rule_id][crate::model::CreateQuotaRuleRequest::quota_rule_id].
    pub fn set_quota_rule_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.quota_rule_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateQuotaRuleRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.CreateQuotaRuleRequest"
    }
}

/// UpdateQuotaRuleRequest for updating a quota rule.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateQuotaRuleRequest {
    /// Optional. Field mask is used to specify the fields to be overwritten in the
    /// Quota Rule resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The quota rule being updated
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub quota_rule: std::option::Option<crate::model::QuotaRule>,
}

impl UpdateQuotaRuleRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateQuotaRuleRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [quota_rule][crate::model::UpdateQuotaRuleRequest::quota_rule].
    pub fn set_quota_rule<T: std::convert::Into<std::option::Option<crate::model::QuotaRule>>>(
        mut self,
        v: T,
    ) -> Self {
        self.quota_rule = v.into();
        self
    }
}

impl wkt::message::Message for UpdateQuotaRuleRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.UpdateQuotaRuleRequest"
    }
}

/// DeleteQuotaRuleRequest for deleting a single quota rule.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteQuotaRuleRequest {
    /// Required. Name of the quota rule.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteQuotaRuleRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteQuotaRuleRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteQuotaRuleRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.DeleteQuotaRuleRequest"
    }
}

/// QuotaRule specifies the maximum disk space a user or group can use within a
/// volume. They can be used for creating default and individual quota rules.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct QuotaRule {
    /// Identifier. The resource name of the quota rule.
    /// Format:
    /// `projects/{project_number}/locations/{location_id}/volumes/volumes/{volume_id}/quotaRules/{quota_rule_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. The quota rule applies to the specified user or group, identified
    /// by a Unix UID/GID, Windows SID, or null for default.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target: std::string::String,

    /// Required. The type of quota rule.
    #[serde(rename = "type")]
    pub r#type: crate::model::quota_rule::Type,

    /// Required. The maximum allowed disk space in MiB.
    pub disk_limit_mib: i32,

    /// Output only. State of the quota rule
    pub state: crate::model::quota_rule::State,

    /// Output only. State details of the quota rule
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub state_details: std::string::String,

    /// Output only. Create time of the quota rule
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Optional. Description of the quota rule
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. Labels of the quota rule
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,
}

impl QuotaRule {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::QuotaRule::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [target][crate::model::QuotaRule::target].
    pub fn set_target<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::QuotaRule::type].
    pub fn set_type<T: std::convert::Into<crate::model::quota_rule::Type>>(mut self, v: T) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [disk_limit_mib][crate::model::QuotaRule::disk_limit_mib].
    pub fn set_disk_limit_mib<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.disk_limit_mib = v.into();
        self
    }

    /// Sets the value of [state][crate::model::QuotaRule::state].
    pub fn set_state<T: std::convert::Into<crate::model::quota_rule::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [state_details][crate::model::QuotaRule::state_details].
    pub fn set_state_details<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.state_details = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::QuotaRule::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::QuotaRule::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::QuotaRule::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for QuotaRule {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.QuotaRule"
    }
}

/// Defines additional types related to [QuotaRule].
pub mod quota_rule {
    #[allow(unused_imports)]
    use super::*;

    /// Types of Quota Rule
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Type(i32);

    impl Type {
        /// Unspecified type for quota rule
        pub const TYPE_UNSPECIFIED: Type = Type::new(0);

        /// Individual user quota rule
        pub const INDIVIDUAL_USER_QUOTA: Type = Type::new(1);

        /// Individual group quota rule
        pub const INDIVIDUAL_GROUP_QUOTA: Type = Type::new(2);

        /// Default user quota rule
        pub const DEFAULT_USER_QUOTA: Type = Type::new(3);

        /// Default group quota rule
        pub const DEFAULT_GROUP_QUOTA: Type = Type::new(4);

        /// Creates a new Type instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("TYPE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("INDIVIDUAL_USER_QUOTA"),
                2 => std::borrow::Cow::Borrowed("INDIVIDUAL_GROUP_QUOTA"),
                3 => std::borrow::Cow::Borrowed("DEFAULT_USER_QUOTA"),
                4 => std::borrow::Cow::Borrowed("DEFAULT_GROUP_QUOTA"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "TYPE_UNSPECIFIED" => std::option::Option::Some(Self::TYPE_UNSPECIFIED),
                "INDIVIDUAL_USER_QUOTA" => std::option::Option::Some(Self::INDIVIDUAL_USER_QUOTA),
                "INDIVIDUAL_GROUP_QUOTA" => std::option::Option::Some(Self::INDIVIDUAL_GROUP_QUOTA),
                "DEFAULT_USER_QUOTA" => std::option::Option::Some(Self::DEFAULT_USER_QUOTA),
                "DEFAULT_GROUP_QUOTA" => std::option::Option::Some(Self::DEFAULT_GROUP_QUOTA),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for Type {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for Type {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Quota Rule states
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// Unspecified state for quota rule
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// Quota rule is creating
        pub const CREATING: State = State::new(1);

        /// Quota rule is updating
        pub const UPDATING: State = State::new(2);

        /// Quota rule is deleting
        pub const DELETING: State = State::new(3);

        /// Quota rule is ready
        pub const READY: State = State::new(4);

        /// Quota rule is in error state.
        pub const ERROR: State = State::new(5);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CREATING"),
                2 => std::borrow::Cow::Borrowed("UPDATING"),
                3 => std::borrow::Cow::Borrowed("DELETING"),
                4 => std::borrow::Cow::Borrowed("READY"),
                5 => std::borrow::Cow::Borrowed("ERROR"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "CREATING" => std::option::Option::Some(Self::CREATING),
                "UPDATING" => std::option::Option::Some(Self::UPDATING),
                "DELETING" => std::option::Option::Some(Self::DELETING),
                "READY" => std::option::Option::Some(Self::READY),
                "ERROR" => std::option::Option::Some(Self::ERROR),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// TransferStats reports all statistics related to replication transfer.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TransferStats {
    /// Cumulative bytes trasferred so far for the replication relatinonship.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<serde_with::DisplayFromStr>")]
    pub transfer_bytes: std::option::Option<i64>,

    /// Cumulative time taken across all transfers for the replication
    /// relationship.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub total_transfer_duration: std::option::Option<wkt::Duration>,

    /// Last transfer size in bytes.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<serde_with::DisplayFromStr>")]
    pub last_transfer_bytes: std::option::Option<i64>,

    /// Time taken during last transfer.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub last_transfer_duration: std::option::Option<wkt::Duration>,

    /// Lag duration indicates the duration by which Destination region volume
    /// content lags behind the primary region volume content.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub lag_duration: std::option::Option<wkt::Duration>,

    /// Time when progress was updated last.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Time when last transfer completed.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub last_transfer_end_time: std::option::Option<wkt::Timestamp>,

    /// A message describing the cause of the last transfer failure.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub last_transfer_error: std::option::Option<std::string::String>,
}

impl TransferStats {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [transfer_bytes][crate::model::TransferStats::transfer_bytes].
    pub fn set_transfer_bytes<T: std::convert::Into<std::option::Option<i64>>>(
        mut self,
        v: T,
    ) -> Self {
        self.transfer_bytes = v.into();
        self
    }

    /// Sets the value of [total_transfer_duration][crate::model::TransferStats::total_transfer_duration].
    pub fn set_total_transfer_duration<
        T: std::convert::Into<std::option::Option<wkt::Duration>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.total_transfer_duration = v.into();
        self
    }

    /// Sets the value of [last_transfer_bytes][crate::model::TransferStats::last_transfer_bytes].
    pub fn set_last_transfer_bytes<T: std::convert::Into<std::option::Option<i64>>>(
        mut self,
        v: T,
    ) -> Self {
        self.last_transfer_bytes = v.into();
        self
    }

    /// Sets the value of [last_transfer_duration][crate::model::TransferStats::last_transfer_duration].
    pub fn set_last_transfer_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.last_transfer_duration = v.into();
        self
    }

    /// Sets the value of [lag_duration][crate::model::TransferStats::lag_duration].
    pub fn set_lag_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.lag_duration = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::TransferStats::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [last_transfer_end_time][crate::model::TransferStats::last_transfer_end_time].
    pub fn set_last_transfer_end_time<
        T: std::convert::Into<std::option::Option<wkt::Timestamp>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.last_transfer_end_time = v.into();
        self
    }

    /// Sets the value of [last_transfer_error][crate::model::TransferStats::last_transfer_error].
    pub fn set_last_transfer_error<
        T: std::convert::Into<std::option::Option<std::string::String>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.last_transfer_error = v.into();
        self
    }
}

impl wkt::message::Message for TransferStats {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.TransferStats"
    }
}

/// Replication is a nested resource under Volume, that describes a
/// cross-region replication relationship between 2 volumes in different
/// regions.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Replication {
    /// Identifier. The resource name of the Replication.
    /// Format:
    /// `projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. State of the replication.
    pub state: crate::model::replication::State,

    /// Output only. State details of the replication.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub state_details: std::string::String,

    /// Output only. Indicates whether this points to source or destination.
    pub role: crate::model::replication::ReplicationRole,

    /// Required. Indicates the schedule for replication.
    pub replication_schedule: crate::model::replication::ReplicationSchedule,

    /// Output only. Indicates the state of mirroring.
    pub mirror_state: crate::model::replication::MirrorState,

    /// Output only. Condition of the relationship. Can be one of the following:
    ///
    /// - true: The replication relationship is healthy. It has not missed the most
    ///   recent scheduled transfer.
    /// - false: The replication relationship is not healthy. It has missed the
    ///   most recent scheduled transfer.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub healthy: std::option::Option<bool>,

    /// Output only. Replication create time.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Full name of destination volume resource.
    /// Example : "projects/{project}/locations/{location}/volumes/{volume_id}"
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub destination_volume: std::string::String,

    /// Output only. Replication transfer statistics.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub transfer_stats: std::option::Option<crate::model::TransferStats>,

    /// Resource labels to represent user provided metadata.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// A description about this replication relationship.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub description: std::option::Option<std::string::String>,

    /// Required. Input only. Destination volume parameters
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub destination_volume_parameters:
        std::option::Option<crate::model::DestinationVolumeParameters>,

    /// Output only. Full name of source volume resource.
    /// Example : "projects/{project}/locations/{location}/volumes/{volume_id}"
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub source_volume: std::string::String,

    /// Output only. Hybrid peering details.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub hybrid_peering_details: std::option::Option<crate::model::HybridPeeringDetails>,

    /// Optional. Location of the user cluster.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub cluster_location: std::string::String,

    /// Output only. Type of the hybrid replication.
    pub hybrid_replication_type: crate::model::replication::HybridReplicationType,
}

impl Replication {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Replication::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Replication::state].
    pub fn set_state<T: std::convert::Into<crate::model::replication::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [state_details][crate::model::Replication::state_details].
    pub fn set_state_details<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.state_details = v.into();
        self
    }

    /// Sets the value of [role][crate::model::Replication::role].
    pub fn set_role<T: std::convert::Into<crate::model::replication::ReplicationRole>>(
        mut self,
        v: T,
    ) -> Self {
        self.role = v.into();
        self
    }

    /// Sets the value of [replication_schedule][crate::model::Replication::replication_schedule].
    pub fn set_replication_schedule<
        T: std::convert::Into<crate::model::replication::ReplicationSchedule>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.replication_schedule = v.into();
        self
    }

    /// Sets the value of [mirror_state][crate::model::Replication::mirror_state].
    pub fn set_mirror_state<T: std::convert::Into<crate::model::replication::MirrorState>>(
        mut self,
        v: T,
    ) -> Self {
        self.mirror_state = v.into();
        self
    }

    /// Sets the value of [healthy][crate::model::Replication::healthy].
    pub fn set_healthy<T: std::convert::Into<std::option::Option<bool>>>(mut self, v: T) -> Self {
        self.healthy = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Replication::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [destination_volume][crate::model::Replication::destination_volume].
    pub fn set_destination_volume<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.destination_volume = v.into();
        self
    }

    /// Sets the value of [transfer_stats][crate::model::Replication::transfer_stats].
    pub fn set_transfer_stats<
        T: std::convert::Into<std::option::Option<crate::model::TransferStats>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.transfer_stats = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Replication::description].
    pub fn set_description<T: std::convert::Into<std::option::Option<std::string::String>>>(
        mut self,
        v: T,
    ) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [destination_volume_parameters][crate::model::Replication::destination_volume_parameters].
    pub fn set_destination_volume_parameters<
        T: std::convert::Into<std::option::Option<crate::model::DestinationVolumeParameters>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination_volume_parameters = v.into();
        self
    }

    /// Sets the value of [source_volume][crate::model::Replication::source_volume].
    pub fn set_source_volume<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.source_volume = v.into();
        self
    }

    /// Sets the value of [hybrid_peering_details][crate::model::Replication::hybrid_peering_details].
    pub fn set_hybrid_peering_details<
        T: std::convert::Into<std::option::Option<crate::model::HybridPeeringDetails>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.hybrid_peering_details = v.into();
        self
    }

    /// Sets the value of [cluster_location][crate::model::Replication::cluster_location].
    pub fn set_cluster_location<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.cluster_location = v.into();
        self
    }

    /// Sets the value of [hybrid_replication_type][crate::model::Replication::hybrid_replication_type].
    pub fn set_hybrid_replication_type<
        T: std::convert::Into<crate::model::replication::HybridReplicationType>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.hybrid_replication_type = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::Replication::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Replication {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.Replication"
    }
}

/// Defines additional types related to [Replication].
pub mod replication {
    #[allow(unused_imports)]
    use super::*;

    /// The replication states
    /// New enum values may be added in future to indicate possible new states.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// Unspecified replication State
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// Replication is creating.
        pub const CREATING: State = State::new(1);

        /// Replication is ready.
        pub const READY: State = State::new(2);

        /// Replication is updating.
        pub const UPDATING: State = State::new(3);

        /// Replication is deleting.
        pub const DELETING: State = State::new(5);

        /// Replication is in error state.
        pub const ERROR: State = State::new(6);

        /// Replication is waiting for cluster peering to be established.
        pub const PENDING_CLUSTER_PEERING: State = State::new(8);

        /// Replication is waiting for SVM peering to be established.
        pub const PENDING_SVM_PEERING: State = State::new(9);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CREATING"),
                2 => std::borrow::Cow::Borrowed("READY"),
                3 => std::borrow::Cow::Borrowed("UPDATING"),
                5 => std::borrow::Cow::Borrowed("DELETING"),
                6 => std::borrow::Cow::Borrowed("ERROR"),
                8 => std::borrow::Cow::Borrowed("PENDING_CLUSTER_PEERING"),
                9 => std::borrow::Cow::Borrowed("PENDING_SVM_PEERING"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "CREATING" => std::option::Option::Some(Self::CREATING),
                "READY" => std::option::Option::Some(Self::READY),
                "UPDATING" => std::option::Option::Some(Self::UPDATING),
                "DELETING" => std::option::Option::Some(Self::DELETING),
                "ERROR" => std::option::Option::Some(Self::ERROR),
                "PENDING_CLUSTER_PEERING" => {
                    std::option::Option::Some(Self::PENDING_CLUSTER_PEERING)
                }
                "PENDING_SVM_PEERING" => std::option::Option::Some(Self::PENDING_SVM_PEERING),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// New enum values may be added in future to support different replication
    /// topology.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct ReplicationRole(i32);

    impl ReplicationRole {
        /// Unspecified replication role
        pub const REPLICATION_ROLE_UNSPECIFIED: ReplicationRole = ReplicationRole::new(0);

        /// Indicates Source volume.
        pub const SOURCE: ReplicationRole = ReplicationRole::new(1);

        /// Indicates Destination volume.
        pub const DESTINATION: ReplicationRole = ReplicationRole::new(2);

        /// Creates a new ReplicationRole instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("REPLICATION_ROLE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("SOURCE"),
                2 => std::borrow::Cow::Borrowed("DESTINATION"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "REPLICATION_ROLE_UNSPECIFIED" => {
                    std::option::Option::Some(Self::REPLICATION_ROLE_UNSPECIFIED)
                }
                "SOURCE" => std::option::Option::Some(Self::SOURCE),
                "DESTINATION" => std::option::Option::Some(Self::DESTINATION),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for ReplicationRole {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for ReplicationRole {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Schedule for Replication.
    /// New enum values may be added in future to support different frequency of
    /// replication.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct ReplicationSchedule(i32);

    impl ReplicationSchedule {
        /// Unspecified ReplicationSchedule
        pub const REPLICATION_SCHEDULE_UNSPECIFIED: ReplicationSchedule =
            ReplicationSchedule::new(0);

        /// Replication happens once every 10 minutes.
        pub const EVERY_10_MINUTES: ReplicationSchedule = ReplicationSchedule::new(1);

        /// Replication happens once every hour.
        pub const HOURLY: ReplicationSchedule = ReplicationSchedule::new(2);

        /// Replication happens once every day.
        pub const DAILY: ReplicationSchedule = ReplicationSchedule::new(3);

        /// Creates a new ReplicationSchedule instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("REPLICATION_SCHEDULE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("EVERY_10_MINUTES"),
                2 => std::borrow::Cow::Borrowed("HOURLY"),
                3 => std::borrow::Cow::Borrowed("DAILY"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "REPLICATION_SCHEDULE_UNSPECIFIED" => {
                    std::option::Option::Some(Self::REPLICATION_SCHEDULE_UNSPECIFIED)
                }
                "EVERY_10_MINUTES" => std::option::Option::Some(Self::EVERY_10_MINUTES),
                "HOURLY" => std::option::Option::Some(Self::HOURLY),
                "DAILY" => std::option::Option::Some(Self::DAILY),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for ReplicationSchedule {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for ReplicationSchedule {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Mirroring states.
    /// No new value is expected to be added in future.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct MirrorState(i32);

    impl MirrorState {
        /// Unspecified MirrorState
        pub const MIRROR_STATE_UNSPECIFIED: MirrorState = MirrorState::new(0);

        /// Destination volume is being prepared.
        pub const PREPARING: MirrorState = MirrorState::new(1);

        /// Destination volume has been initialized and is ready to receive
        /// replication transfers.
        pub const MIRRORED: MirrorState = MirrorState::new(2);

        /// Destination volume is not receiving replication transfers.
        pub const STOPPED: MirrorState = MirrorState::new(3);

        /// Incremental replication is in progress.
        pub const TRANSFERRING: MirrorState = MirrorState::new(4);

        /// Baseline replication is in progress.
        pub const BASELINE_TRANSFERRING: MirrorState = MirrorState::new(5);

        /// Replication is aborted.
        pub const ABORTED: MirrorState = MirrorState::new(6);

        /// Creates a new MirrorState instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("MIRROR_STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("PREPARING"),
                2 => std::borrow::Cow::Borrowed("MIRRORED"),
                3 => std::borrow::Cow::Borrowed("STOPPED"),
                4 => std::borrow::Cow::Borrowed("TRANSFERRING"),
                5 => std::borrow::Cow::Borrowed("BASELINE_TRANSFERRING"),
                6 => std::borrow::Cow::Borrowed("ABORTED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "MIRROR_STATE_UNSPECIFIED" => {
                    std::option::Option::Some(Self::MIRROR_STATE_UNSPECIFIED)
                }
                "PREPARING" => std::option::Option::Some(Self::PREPARING),
                "MIRRORED" => std::option::Option::Some(Self::MIRRORED),
                "STOPPED" => std::option::Option::Some(Self::STOPPED),
                "TRANSFERRING" => std::option::Option::Some(Self::TRANSFERRING),
                "BASELINE_TRANSFERRING" => std::option::Option::Some(Self::BASELINE_TRANSFERRING),
                "ABORTED" => std::option::Option::Some(Self::ABORTED),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for MirrorState {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for MirrorState {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Hybrid replication type.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct HybridReplicationType(i32);

    impl HybridReplicationType {
        /// Unspecified hybrid replication type.
        pub const HYBRID_REPLICATION_TYPE_UNSPECIFIED: HybridReplicationType =
            HybridReplicationType::new(0);

        /// Hybrid replication type for migration.
        pub const MIGRATION: HybridReplicationType = HybridReplicationType::new(1);

        /// Hybrid replication type for continuous replication.
        pub const CONTINUOUS_REPLICATION: HybridReplicationType = HybridReplicationType::new(2);

        /// Creates a new HybridReplicationType instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("HYBRID_REPLICATION_TYPE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("MIGRATION"),
                2 => std::borrow::Cow::Borrowed("CONTINUOUS_REPLICATION"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "HYBRID_REPLICATION_TYPE_UNSPECIFIED" => {
                    std::option::Option::Some(Self::HYBRID_REPLICATION_TYPE_UNSPECIFIED)
                }
                "MIGRATION" => std::option::Option::Some(Self::MIGRATION),
                "CONTINUOUS_REPLICATION" => std::option::Option::Some(Self::CONTINUOUS_REPLICATION),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for HybridReplicationType {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for HybridReplicationType {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// HybridPeeringDetails contains details about the hybrid peering.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct HybridPeeringDetails {
    /// Optional. IP address of the subnet.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub subnet_ip: std::string::String,

    /// Optional. Copy-paste-able commands to be used on user's ONTAP to accept
    /// peering requests.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub command: std::string::String,

    /// Optional. Expiration time for the peering command to be executed on user's
    /// ONTAP.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub command_expiry_time: std::option::Option<wkt::Timestamp>,

    /// Optional. Temporary passphrase generated to accept cluster peering command.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub passphrase: std::string::String,

    /// Optional. Name of the user's local source volume to be peered with the
    /// destination volume.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub peer_volume_name: std::string::String,

    /// Optional. Name of the user's local source cluster to be peered with the
    /// destination cluster.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub peer_cluster_name: std::string::String,

    /// Optional. Name of the user's local source vserver svm to be peered with the
    /// destination vserver svm.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub peer_svm_name: std::string::String,
}

impl HybridPeeringDetails {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [subnet_ip][crate::model::HybridPeeringDetails::subnet_ip].
    pub fn set_subnet_ip<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.subnet_ip = v.into();
        self
    }

    /// Sets the value of [command][crate::model::HybridPeeringDetails::command].
    pub fn set_command<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.command = v.into();
        self
    }

    /// Sets the value of [command_expiry_time][crate::model::HybridPeeringDetails::command_expiry_time].
    pub fn set_command_expiry_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.command_expiry_time = v.into();
        self
    }

    /// Sets the value of [passphrase][crate::model::HybridPeeringDetails::passphrase].
    pub fn set_passphrase<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.passphrase = v.into();
        self
    }

    /// Sets the value of [peer_volume_name][crate::model::HybridPeeringDetails::peer_volume_name].
    pub fn set_peer_volume_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.peer_volume_name = v.into();
        self
    }

    /// Sets the value of [peer_cluster_name][crate::model::HybridPeeringDetails::peer_cluster_name].
    pub fn set_peer_cluster_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.peer_cluster_name = v.into();
        self
    }

    /// Sets the value of [peer_svm_name][crate::model::HybridPeeringDetails::peer_svm_name].
    pub fn set_peer_svm_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.peer_svm_name = v.into();
        self
    }
}

impl wkt::message::Message for HybridPeeringDetails {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.HybridPeeringDetails"
    }
}

/// ListReplications lists replications.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListReplicationsRequest {
    /// Required. The volume for which to retrieve replication information,
    /// in the format
    /// `projects/{project_id}/locations/{location}/volumes/{volume_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return.
    pub page_size: i32,

    /// The next_page_token value to use if there are additional
    /// results to retrieve for this list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Sort results. Supported values are "name", "name desc" or "" (unsorted).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,

    /// List filter.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,
}

impl ListReplicationsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListReplicationsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListReplicationsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListReplicationsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListReplicationsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListReplicationsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }
}

impl wkt::message::Message for ListReplicationsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ListReplicationsRequest"
    }
}

/// ListReplicationsResponse is the result of ListReplicationsRequest.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListReplicationsResponse {
    /// A list of replications in the project for the specified volume.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub replications: std::vec::Vec<crate::model::Replication>,

    /// The token you can use to retrieve the next page of results. Not returned
    /// if there are no more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListReplicationsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListReplicationsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [replications][crate::model::ListReplicationsResponse::replications].
    pub fn set_replications<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Replication>,
    {
        use std::iter::Iterator;
        self.replications = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListReplicationsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListReplicationsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ListReplicationsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListReplicationsResponse {
    type PageItem = crate::model::Replication;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.replications
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// GetReplicationRequest gets the state of a replication.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetReplicationRequest {
    /// Required. The replication resource name, in the format
    /// `projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetReplicationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetReplicationRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetReplicationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.GetReplicationRequest"
    }
}

/// DestinationVolumeParameters specify input parameters used for creating
/// destination volume.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DestinationVolumeParameters {
    /// Required. Existing destination StoragePool name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub storage_pool: std::string::String,

    /// Desired destination volume resource id. If not specified, source volume's
    /// resource id will be used.
    /// This value must start with a lowercase letter followed by up to 62
    /// lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub volume_id: std::string::String,

    /// Destination volume's share name. If not specified, source volume's share
    /// name will be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub share_name: std::string::String,

    /// Description for the destination volume.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub description: std::option::Option<std::string::String>,

    /// Optional. Tiering policy for the volume.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub tiering_policy: std::option::Option<crate::model::TieringPolicy>,
}

impl DestinationVolumeParameters {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [storage_pool][crate::model::DestinationVolumeParameters::storage_pool].
    pub fn set_storage_pool<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.storage_pool = v.into();
        self
    }

    /// Sets the value of [volume_id][crate::model::DestinationVolumeParameters::volume_id].
    pub fn set_volume_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.volume_id = v.into();
        self
    }

    /// Sets the value of [share_name][crate::model::DestinationVolumeParameters::share_name].
    pub fn set_share_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.share_name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::DestinationVolumeParameters::description].
    pub fn set_description<T: std::convert::Into<std::option::Option<std::string::String>>>(
        mut self,
        v: T,
    ) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [tiering_policy][crate::model::DestinationVolumeParameters::tiering_policy].
    pub fn set_tiering_policy<
        T: std::convert::Into<std::option::Option<crate::model::TieringPolicy>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.tiering_policy = v.into();
        self
    }
}

impl wkt::message::Message for DestinationVolumeParameters {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.DestinationVolumeParameters"
    }
}

/// CreateReplicationRequest creates a replication.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateReplicationRequest {
    /// Required. The NetApp volume to create the replications of, in the format
    /// `projects/{project_id}/locations/{location}/volumes/{volume_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. A replication resource
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub replication: std::option::Option<crate::model::Replication>,

    /// Required. ID of the replication to create. Must be unique within the parent
    /// resource. Must contain only letters, numbers and hyphen, with the first
    /// character a letter, the last a letter or a
    /// number, and a 63 character maximum.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub replication_id: std::string::String,
}

impl CreateReplicationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateReplicationRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [replication][crate::model::CreateReplicationRequest::replication].
    pub fn set_replication<
        T: std::convert::Into<std::option::Option<crate::model::Replication>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.replication = v.into();
        self
    }

    /// Sets the value of [replication_id][crate::model::CreateReplicationRequest::replication_id].
    pub fn set_replication_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.replication_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateReplicationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.CreateReplicationRequest"
    }
}

/// DeleteReplicationRequest deletes a replication.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteReplicationRequest {
    /// Required. The replication resource name, in the format
    /// `projects/*/locations/*/volumes/*/replications/{replication_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteReplicationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteReplicationRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteReplicationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.DeleteReplicationRequest"
    }
}

/// UpdateReplicationRequest updates description and/or labels for a replication.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateReplicationRequest {
    /// Required. Mask of fields to update.  At least one path must be supplied in
    /// this field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. A replication resource
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub replication: std::option::Option<crate::model::Replication>,
}

impl UpdateReplicationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateReplicationRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [replication][crate::model::UpdateReplicationRequest::replication].
    pub fn set_replication<
        T: std::convert::Into<std::option::Option<crate::model::Replication>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.replication = v.into();
        self
    }
}

impl wkt::message::Message for UpdateReplicationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.UpdateReplicationRequest"
    }
}

/// StopReplicationRequest stops a replication until resumed.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct StopReplicationRequest {
    /// Required. The resource name of the replication, in the format of
    /// projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Indicates whether to stop replication forcefully while data transfer is in
    /// progress.
    /// Warning! if force is true, this will abort any current transfers
    /// and can lead to data loss due to partial transfer.
    /// If force is false, stop replication will fail while data transfer is in
    /// progress and you will need to retry later.
    pub force: bool,
}

impl StopReplicationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::StopReplicationRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [force][crate::model::StopReplicationRequest::force].
    pub fn set_force<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.force = v.into();
        self
    }
}

impl wkt::message::Message for StopReplicationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.StopReplicationRequest"
    }
}

/// ResumeReplicationRequest resumes a stopped replication.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ResumeReplicationRequest {
    /// Required. The resource name of the replication, in the format of
    /// projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl ResumeReplicationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ResumeReplicationRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for ResumeReplicationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ResumeReplicationRequest"
    }
}

/// ReverseReplicationDirectionRequest reverses direction of replication. Source
/// becomes destination and destination becomes source.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ReverseReplicationDirectionRequest {
    /// Required. The resource name of the replication, in the format of
    /// projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl ReverseReplicationDirectionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ReverseReplicationDirectionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for ReverseReplicationDirectionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ReverseReplicationDirectionRequest"
    }
}

/// EstablishPeeringRequest establishes cluster and svm peerings between the
/// source and the destination replications.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct EstablishPeeringRequest {
    /// Required. The resource name of the replication, in the format of
    /// projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. Name of the user's local source cluster to be peered with the
    /// destination cluster.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub peer_cluster_name: std::string::String,

    /// Required. Name of the user's local source vserver svm to be peered with the
    /// destination vserver svm.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub peer_svm_name: std::string::String,

    /// Optional. List of IPv4 ip addresses to be used for peering.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub peer_ip_addresses: std::vec::Vec<std::string::String>,

    /// Required. Name of the user's local source volume to be peered with the
    /// destination volume.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub peer_volume_name: std::string::String,
}

impl EstablishPeeringRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::EstablishPeeringRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [peer_cluster_name][crate::model::EstablishPeeringRequest::peer_cluster_name].
    pub fn set_peer_cluster_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.peer_cluster_name = v.into();
        self
    }

    /// Sets the value of [peer_svm_name][crate::model::EstablishPeeringRequest::peer_svm_name].
    pub fn set_peer_svm_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.peer_svm_name = v.into();
        self
    }

    /// Sets the value of [peer_volume_name][crate::model::EstablishPeeringRequest::peer_volume_name].
    pub fn set_peer_volume_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.peer_volume_name = v.into();
        self
    }

    /// Sets the value of [peer_ip_addresses][crate::model::EstablishPeeringRequest::peer_ip_addresses].
    pub fn set_peer_ip_addresses<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.peer_ip_addresses = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for EstablishPeeringRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.EstablishPeeringRequest"
    }
}

/// SyncReplicationRequest syncs the replication from source to destination.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SyncReplicationRequest {
    /// Required. The resource name of the replication, in the format of
    /// projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl SyncReplicationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::SyncReplicationRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for SyncReplicationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.SyncReplicationRequest"
    }
}

/// ListSnapshotsRequest lists snapshots.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListSnapshotsRequest {
    /// Required. The volume for which to retrieve snapshot information,
    /// in the format
    /// `projects/{project_id}/locations/{location}/volumes/{volume_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return.
    pub page_size: i32,

    /// The next_page_token value to use if there are additional
    /// results to retrieve for this list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Sort results. Supported values are "name", "name desc" or "" (unsorted).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,

    /// List filter.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,
}

impl ListSnapshotsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListSnapshotsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListSnapshotsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListSnapshotsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListSnapshotsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListSnapshotsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }
}

impl wkt::message::Message for ListSnapshotsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ListSnapshotsRequest"
    }
}

/// ListSnapshotsResponse is the result of ListSnapshotsRequest.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListSnapshotsResponse {
    /// A list of snapshots in the project for the specified volume.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub snapshots: std::vec::Vec<crate::model::Snapshot>,

    /// The token you can use to retrieve the next page of results. Not returned
    /// if there are no more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListSnapshotsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListSnapshotsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [snapshots][crate::model::ListSnapshotsResponse::snapshots].
    pub fn set_snapshots<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Snapshot>,
    {
        use std::iter::Iterator;
        self.snapshots = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListSnapshotsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListSnapshotsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ListSnapshotsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListSnapshotsResponse {
    type PageItem = crate::model::Snapshot;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.snapshots
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// GetSnapshotRequest gets the state of a snapshot.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetSnapshotRequest {
    /// Required. The snapshot resource name, in the format
    /// `projects/{project_id}/locations/{location}/volumes/{volume_id}/snapshots/{snapshot_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetSnapshotRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetSnapshotRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetSnapshotRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.GetSnapshotRequest"
    }
}

/// CreateSnapshotRequest creates a snapshot.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateSnapshotRequest {
    /// Required. The NetApp volume to create the snapshots of, in the format
    /// `projects/{project_id}/locations/{location}/volumes/{volume_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. A snapshot resource
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub snapshot: std::option::Option<crate::model::Snapshot>,

    /// Required. ID of the snapshot to create. Must be unique within the parent
    /// resource. Must contain only letters, numbers and hyphen, with the first
    /// character a letter, the last a letter or a
    /// number, and a 63 character maximum.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub snapshot_id: std::string::String,
}

impl CreateSnapshotRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateSnapshotRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [snapshot][crate::model::CreateSnapshotRequest::snapshot].
    pub fn set_snapshot<T: std::convert::Into<std::option::Option<crate::model::Snapshot>>>(
        mut self,
        v: T,
    ) -> Self {
        self.snapshot = v.into();
        self
    }

    /// Sets the value of [snapshot_id][crate::model::CreateSnapshotRequest::snapshot_id].
    pub fn set_snapshot_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.snapshot_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateSnapshotRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.CreateSnapshotRequest"
    }
}

/// DeleteSnapshotRequest deletes a snapshot.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteSnapshotRequest {
    /// Required. The snapshot resource name, in the format
    /// `projects/*/locations/*/volumes/*/snapshots/{snapshot_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteSnapshotRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteSnapshotRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteSnapshotRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.DeleteSnapshotRequest"
    }
}

/// UpdateSnapshotRequest updates description and/or labels for a snapshot.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateSnapshotRequest {
    /// Required. Mask of fields to update.  At least one path must be supplied in
    /// this field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. A snapshot resource
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub snapshot: std::option::Option<crate::model::Snapshot>,
}

impl UpdateSnapshotRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateSnapshotRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [snapshot][crate::model::UpdateSnapshotRequest::snapshot].
    pub fn set_snapshot<T: std::convert::Into<std::option::Option<crate::model::Snapshot>>>(
        mut self,
        v: T,
    ) -> Self {
        self.snapshot = v.into();
        self
    }
}

impl wkt::message::Message for UpdateSnapshotRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.UpdateSnapshotRequest"
    }
}

/// Snapshot is a point-in-time version of a Volume's content.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Snapshot {
    /// Identifier. The resource name of the snapshot.
    /// Format:
    /// `projects/{project_id}/locations/{location}/volumes/{volume_id}/snapshots/{snapshot_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The snapshot state.
    pub state: crate::model::snapshot::State,

    /// Output only. State details of the storage pool
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub state_details: std::string::String,

    /// A description of the snapshot with 2048 characters or less.
    /// Requests with longer descriptions will be rejected.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Output only. Current storage usage for the snapshot in bytes.
    pub used_bytes: f64,

    /// Output only. The time when the snapshot was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Resource labels to represent user provided metadata.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,
}

impl Snapshot {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Snapshot::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Snapshot::state].
    pub fn set_state<T: std::convert::Into<crate::model::snapshot::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [state_details][crate::model::Snapshot::state_details].
    pub fn set_state_details<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.state_details = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Snapshot::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [used_bytes][crate::model::Snapshot::used_bytes].
    pub fn set_used_bytes<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.used_bytes = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Snapshot::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::Snapshot::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Snapshot {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.Snapshot"
    }
}

/// Defines additional types related to [Snapshot].
pub mod snapshot {
    #[allow(unused_imports)]
    use super::*;

    /// The Snapshot States
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// Unspecified Snapshot State
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// Snapshot State is Ready
        pub const READY: State = State::new(1);

        /// Snapshot State is Creating
        pub const CREATING: State = State::new(2);

        /// Snapshot State is Deleting
        pub const DELETING: State = State::new(3);

        /// Snapshot State is Updating
        pub const UPDATING: State = State::new(4);

        /// Snapshot State is Disabled
        pub const DISABLED: State = State::new(5);

        /// Snapshot State is Error
        pub const ERROR: State = State::new(6);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("READY"),
                2 => std::borrow::Cow::Borrowed("CREATING"),
                3 => std::borrow::Cow::Borrowed("DELETING"),
                4 => std::borrow::Cow::Borrowed("UPDATING"),
                5 => std::borrow::Cow::Borrowed("DISABLED"),
                6 => std::borrow::Cow::Borrowed("ERROR"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "READY" => std::option::Option::Some(Self::READY),
                "CREATING" => std::option::Option::Some(Self::CREATING),
                "DELETING" => std::option::Option::Some(Self::DELETING),
                "UPDATING" => std::option::Option::Some(Self::UPDATING),
                "DISABLED" => std::option::Option::Some(Self::DISABLED),
                "ERROR" => std::option::Option::Some(Self::ERROR),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// GetStoragePoolRequest gets a Storage Pool.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetStoragePoolRequest {
    /// Required. Name of the storage pool
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetStoragePoolRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetStoragePoolRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetStoragePoolRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.GetStoragePoolRequest"
    }
}

/// ListStoragePoolsRequest lists Storage Pools.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListStoragePoolsRequest {
    /// Required. Parent value
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of items to return.
    pub page_size: i32,

    /// Optional. The next_page_token value to use if there are additional
    /// results to retrieve for this list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. Sort results. Supported values are "name", "name desc" or ""
    /// (unsorted).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,

    /// Optional. List filter.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,
}

impl ListStoragePoolsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListStoragePoolsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListStoragePoolsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListStoragePoolsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListStoragePoolsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListStoragePoolsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }
}

impl wkt::message::Message for ListStoragePoolsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ListStoragePoolsRequest"
    }
}

/// ListStoragePoolsResponse is the response to a ListStoragePoolsRequest.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListStoragePoolsResponse {
    /// The list of StoragePools
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub storage_pools: std::vec::Vec<crate::model::StoragePool>,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListStoragePoolsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListStoragePoolsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [storage_pools][crate::model::ListStoragePoolsResponse::storage_pools].
    pub fn set_storage_pools<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::StoragePool>,
    {
        use std::iter::Iterator;
        self.storage_pools = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListStoragePoolsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListStoragePoolsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ListStoragePoolsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListStoragePoolsResponse {
    type PageItem = crate::model::StoragePool;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.storage_pools
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// CreateStoragePoolRequest creates a Storage Pool.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateStoragePoolRequest {
    /// Required. Value for parent.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Id of the requesting storage pool. Must be unique within the
    /// parent resource. Must contain only letters, numbers and hyphen, with the
    /// first character a letter, the last a letter or a number, and a 63 character
    /// maximum.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub storage_pool_id: std::string::String,

    /// Required. The required parameters to create a new storage pool.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub storage_pool: std::option::Option<crate::model::StoragePool>,
}

impl CreateStoragePoolRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateStoragePoolRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [storage_pool_id][crate::model::CreateStoragePoolRequest::storage_pool_id].
    pub fn set_storage_pool_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.storage_pool_id = v.into();
        self
    }

    /// Sets the value of [storage_pool][crate::model::CreateStoragePoolRequest::storage_pool].
    pub fn set_storage_pool<
        T: std::convert::Into<std::option::Option<crate::model::StoragePool>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.storage_pool = v.into();
        self
    }
}

impl wkt::message::Message for CreateStoragePoolRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.CreateStoragePoolRequest"
    }
}

/// UpdateStoragePoolRequest updates a Storage Pool.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateStoragePoolRequest {
    /// Required. Field mask is used to specify the fields to be overwritten in the
    /// StoragePool resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The pool being updated
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub storage_pool: std::option::Option<crate::model::StoragePool>,
}

impl UpdateStoragePoolRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateStoragePoolRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [storage_pool][crate::model::UpdateStoragePoolRequest::storage_pool].
    pub fn set_storage_pool<
        T: std::convert::Into<std::option::Option<crate::model::StoragePool>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.storage_pool = v.into();
        self
    }
}

impl wkt::message::Message for UpdateStoragePoolRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.UpdateStoragePoolRequest"
    }
}

/// DeleteStoragePoolRequest deletes a Storage Pool.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteStoragePoolRequest {
    /// Required. Name of the storage pool
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteStoragePoolRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteStoragePoolRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteStoragePoolRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.DeleteStoragePoolRequest"
    }
}

/// SwitchActiveReplicaZoneRequest switch the active/replica zone for a regional
/// storagePool.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SwitchActiveReplicaZoneRequest {
    /// Required. Name of the storage pool
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl SwitchActiveReplicaZoneRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::SwitchActiveReplicaZoneRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for SwitchActiveReplicaZoneRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.SwitchActiveReplicaZoneRequest"
    }
}

/// StoragePool is a container for volumes with a service level and capacity.
/// Volumes can be created in a pool of sufficient available capacity.
/// StoragePool capacity is what you are billed for.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct StoragePool {
    /// Identifier. Name of the storage pool
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. Service level of the storage pool
    pub service_level: crate::model::ServiceLevel,

    /// Required. Capacity in GIB of the pool
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub capacity_gib: i64,

    /// Output only. Allocated size of all volumes in GIB in the storage pool
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub volume_capacity_gib: i64,

    /// Output only. Volume count of the storage pool
    pub volume_count: i32,

    /// Output only. State of the storage pool
    pub state: crate::model::storage_pool::State,

    /// Output only. State details of the storage pool
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub state_details: std::string::String,

    /// Output only. Create time of the storage pool
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Optional. Description of the storage pool
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. Labels as key value pairs
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Required. VPC Network name.
    /// Format: projects/{project}/global/networks/{network}
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub network: std::string::String,

    /// Optional. Specifies the Active Directory to be used for creating a SMB
    /// volume.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub active_directory: std::string::String,

    /// Optional. Specifies the KMS config to be used for volume encryption.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub kms_config: std::string::String,

    /// Optional. Flag indicating if the pool is NFS LDAP enabled or not.
    pub ldap_enabled: bool,

    /// Optional. This field is not implemented. The values provided in this field
    /// are ignored.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub psa_range: std::string::String,

    /// Output only. Specifies the current pool encryption key source.
    pub encryption_type: crate::model::EncryptionType,

    /// Deprecated. Used to allow SO pool to access AD or DNS server from other
    /// regions.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub global_access_allowed: std::option::Option<bool>,

    /// Optional. True if the storage pool supports Auto Tiering enabled volumes.
    /// Default is false. Auto-tiering can be enabled after storage pool creation
    /// but it can't be disabled once enabled.
    pub allow_auto_tiering: bool,

    /// Optional. Specifies the replica zone for regional storagePool.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub replica_zone: std::string::String,

    /// Optional. Specifies the active zone for regional storagePool.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub zone: std::string::String,

    /// Output only. Reserved for future use
    pub satisfies_pzs: bool,

    /// Output only. Reserved for future use
    pub satisfies_pzi: bool,
}

impl StoragePool {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::StoragePool::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [service_level][crate::model::StoragePool::service_level].
    pub fn set_service_level<T: std::convert::Into<crate::model::ServiceLevel>>(
        mut self,
        v: T,
    ) -> Self {
        self.service_level = v.into();
        self
    }

    /// Sets the value of [capacity_gib][crate::model::StoragePool::capacity_gib].
    pub fn set_capacity_gib<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.capacity_gib = v.into();
        self
    }

    /// Sets the value of [volume_capacity_gib][crate::model::StoragePool::volume_capacity_gib].
    pub fn set_volume_capacity_gib<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.volume_capacity_gib = v.into();
        self
    }

    /// Sets the value of [volume_count][crate::model::StoragePool::volume_count].
    pub fn set_volume_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.volume_count = v.into();
        self
    }

    /// Sets the value of [state][crate::model::StoragePool::state].
    pub fn set_state<T: std::convert::Into<crate::model::storage_pool::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [state_details][crate::model::StoragePool::state_details].
    pub fn set_state_details<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.state_details = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::StoragePool::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::StoragePool::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [network][crate::model::StoragePool::network].
    pub fn set_network<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.network = v.into();
        self
    }

    /// Sets the value of [active_directory][crate::model::StoragePool::active_directory].
    pub fn set_active_directory<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.active_directory = v.into();
        self
    }

    /// Sets the value of [kms_config][crate::model::StoragePool::kms_config].
    pub fn set_kms_config<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.kms_config = v.into();
        self
    }

    /// Sets the value of [ldap_enabled][crate::model::StoragePool::ldap_enabled].
    pub fn set_ldap_enabled<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.ldap_enabled = v.into();
        self
    }

    /// Sets the value of [psa_range][crate::model::StoragePool::psa_range].
    pub fn set_psa_range<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.psa_range = v.into();
        self
    }

    /// Sets the value of [encryption_type][crate::model::StoragePool::encryption_type].
    pub fn set_encryption_type<T: std::convert::Into<crate::model::EncryptionType>>(
        mut self,
        v: T,
    ) -> Self {
        self.encryption_type = v.into();
        self
    }

    /// Sets the value of [global_access_allowed][crate::model::StoragePool::global_access_allowed].
    pub fn set_global_access_allowed<T: std::convert::Into<std::option::Option<bool>>>(
        mut self,
        v: T,
    ) -> Self {
        self.global_access_allowed = v.into();
        self
    }

    /// Sets the value of [allow_auto_tiering][crate::model::StoragePool::allow_auto_tiering].
    pub fn set_allow_auto_tiering<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.allow_auto_tiering = v.into();
        self
    }

    /// Sets the value of [replica_zone][crate::model::StoragePool::replica_zone].
    pub fn set_replica_zone<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.replica_zone = v.into();
        self
    }

    /// Sets the value of [zone][crate::model::StoragePool::zone].
    pub fn set_zone<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.zone = v.into();
        self
    }

    /// Sets the value of [satisfies_pzs][crate::model::StoragePool::satisfies_pzs].
    pub fn set_satisfies_pzs<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.satisfies_pzs = v.into();
        self
    }

    /// Sets the value of [satisfies_pzi][crate::model::StoragePool::satisfies_pzi].
    pub fn set_satisfies_pzi<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.satisfies_pzi = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::StoragePool::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for StoragePool {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.StoragePool"
    }
}

/// Defines additional types related to [StoragePool].
pub mod storage_pool {
    #[allow(unused_imports)]
    use super::*;

    /// The Storage Pool States
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// Unspecified Storage Pool State
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// Storage Pool State is Ready
        pub const READY: State = State::new(1);

        /// Storage Pool State is Creating
        pub const CREATING: State = State::new(2);

        /// Storage Pool State is Deleting
        pub const DELETING: State = State::new(3);

        /// Storage Pool State is Updating
        pub const UPDATING: State = State::new(4);

        /// Storage Pool State is Restoring
        pub const RESTORING: State = State::new(5);

        /// Storage Pool State is Disabled
        pub const DISABLED: State = State::new(6);

        /// Storage Pool State is Error
        pub const ERROR: State = State::new(7);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("READY"),
                2 => std::borrow::Cow::Borrowed("CREATING"),
                3 => std::borrow::Cow::Borrowed("DELETING"),
                4 => std::borrow::Cow::Borrowed("UPDATING"),
                5 => std::borrow::Cow::Borrowed("RESTORING"),
                6 => std::borrow::Cow::Borrowed("DISABLED"),
                7 => std::borrow::Cow::Borrowed("ERROR"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "READY" => std::option::Option::Some(Self::READY),
                "CREATING" => std::option::Option::Some(Self::CREATING),
                "DELETING" => std::option::Option::Some(Self::DELETING),
                "UPDATING" => std::option::Option::Some(Self::UPDATING),
                "RESTORING" => std::option::Option::Some(Self::RESTORING),
                "DISABLED" => std::option::Option::Some(Self::DISABLED),
                "ERROR" => std::option::Option::Some(Self::ERROR),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// ValidateDirectoryServiceRequest validates the directory service policy
/// attached to the storage pool.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ValidateDirectoryServiceRequest {
    /// Required. Name of the storage pool
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Type of directory service policy attached to the storage pool.
    pub directory_service_type: crate::model::DirectoryServiceType,
}

impl ValidateDirectoryServiceRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ValidateDirectoryServiceRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [directory_service_type][crate::model::ValidateDirectoryServiceRequest::directory_service_type].
    pub fn set_directory_service_type<T: std::convert::Into<crate::model::DirectoryServiceType>>(
        mut self,
        v: T,
    ) -> Self {
        self.directory_service_type = v.into();
        self
    }
}

impl wkt::message::Message for ValidateDirectoryServiceRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ValidateDirectoryServiceRequest"
    }
}

/// Message for requesting list of Volumes
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListVolumesRequest {
    /// Required. Parent value for ListVolumesRequest
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Requested page size. Server may return fewer items than requested.
    /// If unspecified, the server will pick an appropriate default.
    pub page_size: i32,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Filtering results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Hint for how to order the results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListVolumesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListVolumesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListVolumesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListVolumesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListVolumesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListVolumesRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListVolumesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ListVolumesRequest"
    }
}

/// Message for response to listing Volumes
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListVolumesResponse {
    /// The list of Volume
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub volumes: std::vec::Vec<crate::model::Volume>,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListVolumesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListVolumesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [volumes][crate::model::ListVolumesResponse::volumes].
    pub fn set_volumes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Volume>,
    {
        use std::iter::Iterator;
        self.volumes = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListVolumesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListVolumesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ListVolumesResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListVolumesResponse {
    type PageItem = crate::model::Volume;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.volumes
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Message for getting a Volume
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetVolumeRequest {
    /// Required. Name of the volume
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetVolumeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetVolumeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetVolumeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.GetVolumeRequest"
    }
}

/// Message for creating a Volume
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateVolumeRequest {
    /// Required. Value for parent.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Id of the requesting volume. Must be unique within the parent
    /// resource. Must contain only letters, numbers and hyphen, with the first
    /// character a letter, the last a letter or a number,
    /// and a 63 character maximum.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub volume_id: std::string::String,

    /// Required. The volume being created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub volume: std::option::Option<crate::model::Volume>,
}

impl CreateVolumeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateVolumeRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [volume_id][crate::model::CreateVolumeRequest::volume_id].
    pub fn set_volume_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.volume_id = v.into();
        self
    }

    /// Sets the value of [volume][crate::model::CreateVolumeRequest::volume].
    pub fn set_volume<T: std::convert::Into<std::option::Option<crate::model::Volume>>>(
        mut self,
        v: T,
    ) -> Self {
        self.volume = v.into();
        self
    }
}

impl wkt::message::Message for CreateVolumeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.CreateVolumeRequest"
    }
}

/// Message for updating a Volume
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateVolumeRequest {
    /// Required. Field mask is used to specify the fields to be overwritten in the
    /// Volume resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The volume being updated
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub volume: std::option::Option<crate::model::Volume>,
}

impl UpdateVolumeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateVolumeRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [volume][crate::model::UpdateVolumeRequest::volume].
    pub fn set_volume<T: std::convert::Into<std::option::Option<crate::model::Volume>>>(
        mut self,
        v: T,
    ) -> Self {
        self.volume = v.into();
        self
    }
}

impl wkt::message::Message for UpdateVolumeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.UpdateVolumeRequest"
    }
}

/// Message for deleting a Volume
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteVolumeRequest {
    /// Required. Name of the volume
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// If this field is set as true, CCFE will not block the volume resource
    /// deletion even if it has any snapshots resource. (Otherwise, the request
    /// will only work if the volume has no snapshots.)
    pub force: bool,
}

impl DeleteVolumeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteVolumeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [force][crate::model::DeleteVolumeRequest::force].
    pub fn set_force<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.force = v.into();
        self
    }
}

impl wkt::message::Message for DeleteVolumeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.DeleteVolumeRequest"
    }
}

/// RevertVolumeRequest reverts the given volume to the specified snapshot.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RevertVolumeRequest {
    /// Required. The resource name of the volume, in the format of
    /// projects/{project_id}/locations/{location}/volumes/{volume_id}.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The snapshot resource ID, in the format 'my-snapshot', where the
    /// specified ID is the {snapshot_id} of the fully qualified name like
    /// projects/{project_id}/locations/{location_id}/volumes/{volume_id}/snapshots/{snapshot_id}
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub snapshot_id: std::string::String,
}

impl RevertVolumeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::RevertVolumeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [snapshot_id][crate::model::RevertVolumeRequest::snapshot_id].
    pub fn set_snapshot_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.snapshot_id = v.into();
        self
    }
}

impl wkt::message::Message for RevertVolumeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.RevertVolumeRequest"
    }
}

/// Volume provides a filesystem that you can mount.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Volume {
    /// Identifier. Name of the volume
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. State of the volume
    pub state: crate::model::volume::State,

    /// Output only. State details of the volume
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub state_details: std::string::String,

    /// Output only. Create time of the volume
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Required. Share name of the volume
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub share_name: std::string::String,

    /// Output only. This field is not implemented. The values provided in this
    /// field are ignored.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub psa_range: std::string::String,

    /// Required. StoragePool name of the volume
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub storage_pool: std::string::String,

    /// Output only. VPC Network name.
    /// Format: projects/{project}/global/networks/{network}
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub network: std::string::String,

    /// Output only. Service level of the volume
    pub service_level: crate::model::ServiceLevel,

    /// Required. Capacity in GIB of the volume
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub capacity_gib: i64,

    /// Optional. Export policy of the volume
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub export_policy: std::option::Option<crate::model::ExportPolicy>,

    /// Required. Protocols required for the volume
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub protocols: std::vec::Vec<crate::model::Protocols>,

    /// Optional. SMB share settings for the volume.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub smb_settings: std::vec::Vec<crate::model::SMBSettings>,

    /// Output only. Mount options of this volume
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub mount_options: std::vec::Vec<crate::model::MountOption>,

    /// Optional. Default unix style permission (e.g. 777) the mount point will be
    /// created with. Applicable for NFS protocol types only.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub unix_permissions: std::string::String,

    /// Optional. Labels as key value pairs
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Optional. Description of the volume
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. SnapshotPolicy for a volume.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub snapshot_policy: std::option::Option<crate::model::SnapshotPolicy>,

    /// Optional. Snap_reserve specifies percentage of volume storage reserved for
    /// snapshot storage. Default is 0 percent.
    pub snap_reserve: f64,

    /// Optional. Snapshot_directory if enabled (true) the volume will contain a
    /// read-only .snapshot directory which provides access to each of the volume's
    /// snapshots.
    pub snapshot_directory: bool,

    /// Output only. Used capacity in GIB of the volume. This is computed
    /// periodically and it does not represent the realtime usage.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub used_gib: i64,

    /// Optional. Security Style of the Volume
    pub security_style: crate::model::SecurityStyle,

    /// Optional. Flag indicating if the volume is a kerberos volume or not, export
    /// policy rules control kerberos security modes (krb5, krb5i, krb5p).
    pub kerberos_enabled: bool,

    /// Output only. Flag indicating if the volume is NFS LDAP enabled or not.
    pub ldap_enabled: bool,

    /// Output only. Specifies the ActiveDirectory name of a SMB volume.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub active_directory: std::string::String,

    /// Optional. Specifies the source of the volume to be created from.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub restore_parameters: std::option::Option<crate::model::RestoreParameters>,

    /// Output only. Specifies the KMS config to be used for volume encryption.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub kms_config: std::string::String,

    /// Output only. Specified the current volume encryption key source.
    pub encryption_type: crate::model::EncryptionType,

    /// Output only. Indicates whether the volume is part of a replication
    /// relationship.
    pub has_replication: bool,

    /// BackupConfig of the volume.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub backup_config: std::option::Option<crate::model::BackupConfig>,

    /// Optional. List of actions that are restricted on this volume.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub restricted_actions: std::vec::Vec<crate::model::RestrictedAction>,

    /// Optional. Flag indicating if the volume will be a large capacity volume or
    /// a regular volume.
    pub large_capacity: bool,

    /// Optional. Flag indicating if the volume will have an IP address per node
    /// for volumes supporting multiple IP endpoints. Only the volume with
    /// large_capacity will be allowed to have multiple endpoints.
    pub multiple_endpoints: bool,

    /// Tiering policy for the volume.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub tiering_policy: std::option::Option<crate::model::TieringPolicy>,

    /// Output only. Specifies the replica zone for regional volume.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub replica_zone: std::string::String,

    /// Output only. Specifies the active zone for regional volume.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub zone: std::string::String,

    /// Output only. Size of the volume cold tier data in GiB.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub cold_tier_size_gib: i64,

    /// Optional. The Hybrid Replication parameters for the volume.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub hybrid_replication_parameters:
        std::option::Option<crate::model::HybridReplicationParameters>,
}

impl Volume {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Volume::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Volume::state].
    pub fn set_state<T: std::convert::Into<crate::model::volume::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [state_details][crate::model::Volume::state_details].
    pub fn set_state_details<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.state_details = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Volume::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [share_name][crate::model::Volume::share_name].
    pub fn set_share_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.share_name = v.into();
        self
    }

    /// Sets the value of [psa_range][crate::model::Volume::psa_range].
    pub fn set_psa_range<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.psa_range = v.into();
        self
    }

    /// Sets the value of [storage_pool][crate::model::Volume::storage_pool].
    pub fn set_storage_pool<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.storage_pool = v.into();
        self
    }

    /// Sets the value of [network][crate::model::Volume::network].
    pub fn set_network<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.network = v.into();
        self
    }

    /// Sets the value of [service_level][crate::model::Volume::service_level].
    pub fn set_service_level<T: std::convert::Into<crate::model::ServiceLevel>>(
        mut self,
        v: T,
    ) -> Self {
        self.service_level = v.into();
        self
    }

    /// Sets the value of [capacity_gib][crate::model::Volume::capacity_gib].
    pub fn set_capacity_gib<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.capacity_gib = v.into();
        self
    }

    /// Sets the value of [export_policy][crate::model::Volume::export_policy].
    pub fn set_export_policy<
        T: std::convert::Into<std::option::Option<crate::model::ExportPolicy>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.export_policy = v.into();
        self
    }

    /// Sets the value of [unix_permissions][crate::model::Volume::unix_permissions].
    pub fn set_unix_permissions<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.unix_permissions = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Volume::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [snapshot_policy][crate::model::Volume::snapshot_policy].
    pub fn set_snapshot_policy<
        T: std::convert::Into<std::option::Option<crate::model::SnapshotPolicy>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.snapshot_policy = v.into();
        self
    }

    /// Sets the value of [snap_reserve][crate::model::Volume::snap_reserve].
    pub fn set_snap_reserve<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.snap_reserve = v.into();
        self
    }

    /// Sets the value of [snapshot_directory][crate::model::Volume::snapshot_directory].
    pub fn set_snapshot_directory<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.snapshot_directory = v.into();
        self
    }

    /// Sets the value of [used_gib][crate::model::Volume::used_gib].
    pub fn set_used_gib<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.used_gib = v.into();
        self
    }

    /// Sets the value of [security_style][crate::model::Volume::security_style].
    pub fn set_security_style<T: std::convert::Into<crate::model::SecurityStyle>>(
        mut self,
        v: T,
    ) -> Self {
        self.security_style = v.into();
        self
    }

    /// Sets the value of [kerberos_enabled][crate::model::Volume::kerberos_enabled].
    pub fn set_kerberos_enabled<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.kerberos_enabled = v.into();
        self
    }

    /// Sets the value of [ldap_enabled][crate::model::Volume::ldap_enabled].
    pub fn set_ldap_enabled<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.ldap_enabled = v.into();
        self
    }

    /// Sets the value of [active_directory][crate::model::Volume::active_directory].
    pub fn set_active_directory<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.active_directory = v.into();
        self
    }

    /// Sets the value of [restore_parameters][crate::model::Volume::restore_parameters].
    pub fn set_restore_parameters<
        T: std::convert::Into<std::option::Option<crate::model::RestoreParameters>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.restore_parameters = v.into();
        self
    }

    /// Sets the value of [kms_config][crate::model::Volume::kms_config].
    pub fn set_kms_config<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.kms_config = v.into();
        self
    }

    /// Sets the value of [encryption_type][crate::model::Volume::encryption_type].
    pub fn set_encryption_type<T: std::convert::Into<crate::model::EncryptionType>>(
        mut self,
        v: T,
    ) -> Self {
        self.encryption_type = v.into();
        self
    }

    /// Sets the value of [has_replication][crate::model::Volume::has_replication].
    pub fn set_has_replication<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.has_replication = v.into();
        self
    }

    /// Sets the value of [backup_config][crate::model::Volume::backup_config].
    pub fn set_backup_config<
        T: std::convert::Into<std::option::Option<crate::model::BackupConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.backup_config = v.into();
        self
    }

    /// Sets the value of [large_capacity][crate::model::Volume::large_capacity].
    pub fn set_large_capacity<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.large_capacity = v.into();
        self
    }

    /// Sets the value of [multiple_endpoints][crate::model::Volume::multiple_endpoints].
    pub fn set_multiple_endpoints<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.multiple_endpoints = v.into();
        self
    }

    /// Sets the value of [tiering_policy][crate::model::Volume::tiering_policy].
    pub fn set_tiering_policy<
        T: std::convert::Into<std::option::Option<crate::model::TieringPolicy>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.tiering_policy = v.into();
        self
    }

    /// Sets the value of [replica_zone][crate::model::Volume::replica_zone].
    pub fn set_replica_zone<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.replica_zone = v.into();
        self
    }

    /// Sets the value of [zone][crate::model::Volume::zone].
    pub fn set_zone<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.zone = v.into();
        self
    }

    /// Sets the value of [cold_tier_size_gib][crate::model::Volume::cold_tier_size_gib].
    pub fn set_cold_tier_size_gib<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.cold_tier_size_gib = v.into();
        self
    }

    /// Sets the value of [hybrid_replication_parameters][crate::model::Volume::hybrid_replication_parameters].
    pub fn set_hybrid_replication_parameters<
        T: std::convert::Into<std::option::Option<crate::model::HybridReplicationParameters>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.hybrid_replication_parameters = v.into();
        self
    }

    /// Sets the value of [protocols][crate::model::Volume::protocols].
    pub fn set_protocols<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Protocols>,
    {
        use std::iter::Iterator;
        self.protocols = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [smb_settings][crate::model::Volume::smb_settings].
    pub fn set_smb_settings<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SMBSettings>,
    {
        use std::iter::Iterator;
        self.smb_settings = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [mount_options][crate::model::Volume::mount_options].
    pub fn set_mount_options<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::MountOption>,
    {
        use std::iter::Iterator;
        self.mount_options = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [restricted_actions][crate::model::Volume::restricted_actions].
    pub fn set_restricted_actions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::RestrictedAction>,
    {
        use std::iter::Iterator;
        self.restricted_actions = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [labels][crate::model::Volume::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Volume {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.Volume"
    }
}

/// Defines additional types related to [Volume].
pub mod volume {
    #[allow(unused_imports)]
    use super::*;

    /// The volume states
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// Unspecified Volume State
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// Volume State is Ready
        pub const READY: State = State::new(1);

        /// Volume State is Creating
        pub const CREATING: State = State::new(2);

        /// Volume State is Deleting
        pub const DELETING: State = State::new(3);

        /// Volume State is Updating
        pub const UPDATING: State = State::new(4);

        /// Volume State is Restoring
        pub const RESTORING: State = State::new(5);

        /// Volume State is Disabled
        pub const DISABLED: State = State::new(6);

        /// Volume State is Error
        pub const ERROR: State = State::new(7);

        /// Volume State is Preparing. Note that this is different from CREATING
        /// where CREATING means the volume is being created, while PREPARING means
        /// the volume is created and now being prepared for the replication.
        pub const PREPARING: State = State::new(8);

        /// Volume State is Read Only
        pub const READ_ONLY: State = State::new(9);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("READY"),
                2 => std::borrow::Cow::Borrowed("CREATING"),
                3 => std::borrow::Cow::Borrowed("DELETING"),
                4 => std::borrow::Cow::Borrowed("UPDATING"),
                5 => std::borrow::Cow::Borrowed("RESTORING"),
                6 => std::borrow::Cow::Borrowed("DISABLED"),
                7 => std::borrow::Cow::Borrowed("ERROR"),
                8 => std::borrow::Cow::Borrowed("PREPARING"),
                9 => std::borrow::Cow::Borrowed("READ_ONLY"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "READY" => std::option::Option::Some(Self::READY),
                "CREATING" => std::option::Option::Some(Self::CREATING),
                "DELETING" => std::option::Option::Some(Self::DELETING),
                "UPDATING" => std::option::Option::Some(Self::UPDATING),
                "RESTORING" => std::option::Option::Some(Self::RESTORING),
                "DISABLED" => std::option::Option::Some(Self::DISABLED),
                "ERROR" => std::option::Option::Some(Self::ERROR),
                "PREPARING" => std::option::Option::Some(Self::PREPARING),
                "READ_ONLY" => std::option::Option::Some(Self::READ_ONLY),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Defines the export policy for the volume.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportPolicy {
    /// Required. List of export policy rules
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub rules: std::vec::Vec<crate::model::SimpleExportPolicyRule>,
}

impl ExportPolicy {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [rules][crate::model::ExportPolicy::rules].
    pub fn set_rules<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SimpleExportPolicyRule>,
    {
        use std::iter::Iterator;
        self.rules = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ExportPolicy {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.ExportPolicy"
    }
}

/// An export policy rule describing various export options.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SimpleExportPolicyRule {
    /// Comma separated list of allowed clients IP addresses
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub allowed_clients: std::option::Option<std::string::String>,

    /// Whether Unix root access will be granted.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub has_root_access: std::option::Option<std::string::String>,

    /// Access type (ReadWrite, ReadOnly, None)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub access_type: std::option::Option<crate::model::AccessType>,

    /// NFS V3 protocol.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub nfsv3: std::option::Option<bool>,

    /// NFS V4 protocol.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub nfsv4: std::option::Option<bool>,

    /// If enabled (true) the rule defines a read only access for clients matching
    /// the 'allowedClients' specification. It enables nfs clients to mount using
    /// 'authentication' kerberos security mode.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub kerberos_5_read_only: std::option::Option<bool>,

    /// If enabled (true) the rule defines read and write access for clients
    /// matching the 'allowedClients' specification. It enables nfs clients to
    /// mount using 'authentication' kerberos security mode. The
    /// 'kerberos5ReadOnly' value be ignored if this is enabled.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub kerberos_5_read_write: std::option::Option<bool>,

    /// If enabled (true) the rule defines a read only access for clients matching
    /// the 'allowedClients' specification. It enables nfs clients to mount using
    /// 'integrity' kerberos security mode.
    #[serde(rename = "kerberos5iReadOnly")]
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub kerberos_5i_read_only: std::option::Option<bool>,

    /// If enabled (true) the rule defines read and write access for clients
    /// matching the 'allowedClients' specification. It enables nfs clients to
    /// mount using 'integrity' kerberos security mode. The 'kerberos5iReadOnly'
    /// value be ignored if this is enabled.
    #[serde(rename = "kerberos5iReadWrite")]
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub kerberos_5i_read_write: std::option::Option<bool>,

    /// If enabled (true) the rule defines a read only access for clients matching
    /// the 'allowedClients' specification. It enables nfs clients to mount using
    /// 'privacy' kerberos security mode.
    #[serde(rename = "kerberos5pReadOnly")]
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub kerberos_5p_read_only: std::option::Option<bool>,

    /// If enabled (true) the rule defines read and write access for clients
    /// matching the 'allowedClients' specification. It enables nfs clients to
    /// mount using 'privacy' kerberos security mode. The 'kerberos5pReadOnly'
    /// value be ignored if this is enabled.
    #[serde(rename = "kerberos5pReadWrite")]
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub kerberos_5p_read_write: std::option::Option<bool>,
}

impl SimpleExportPolicyRule {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [allowed_clients][crate::model::SimpleExportPolicyRule::allowed_clients].
    pub fn set_allowed_clients<T: std::convert::Into<std::option::Option<std::string::String>>>(
        mut self,
        v: T,
    ) -> Self {
        self.allowed_clients = v.into();
        self
    }

    /// Sets the value of [has_root_access][crate::model::SimpleExportPolicyRule::has_root_access].
    pub fn set_has_root_access<T: std::convert::Into<std::option::Option<std::string::String>>>(
        mut self,
        v: T,
    ) -> Self {
        self.has_root_access = v.into();
        self
    }

    /// Sets the value of [access_type][crate::model::SimpleExportPolicyRule::access_type].
    pub fn set_access_type<T: std::convert::Into<std::option::Option<crate::model::AccessType>>>(
        mut self,
        v: T,
    ) -> Self {
        self.access_type = v.into();
        self
    }

    /// Sets the value of [nfsv3][crate::model::SimpleExportPolicyRule::nfsv3].
    pub fn set_nfsv3<T: std::convert::Into<std::option::Option<bool>>>(mut self, v: T) -> Self {
        self.nfsv3 = v.into();
        self
    }

    /// Sets the value of [nfsv4][crate::model::SimpleExportPolicyRule::nfsv4].
    pub fn set_nfsv4<T: std::convert::Into<std::option::Option<bool>>>(mut self, v: T) -> Self {
        self.nfsv4 = v.into();
        self
    }

    /// Sets the value of [kerberos_5_read_only][crate::model::SimpleExportPolicyRule::kerberos_5_read_only].
    pub fn set_kerberos_5_read_only<T: std::convert::Into<std::option::Option<bool>>>(
        mut self,
        v: T,
    ) -> Self {
        self.kerberos_5_read_only = v.into();
        self
    }

    /// Sets the value of [kerberos_5_read_write][crate::model::SimpleExportPolicyRule::kerberos_5_read_write].
    pub fn set_kerberos_5_read_write<T: std::convert::Into<std::option::Option<bool>>>(
        mut self,
        v: T,
    ) -> Self {
        self.kerberos_5_read_write = v.into();
        self
    }

    /// Sets the value of [kerberos_5i_read_only][crate::model::SimpleExportPolicyRule::kerberos_5i_read_only].
    pub fn set_kerberos_5i_read_only<T: std::convert::Into<std::option::Option<bool>>>(
        mut self,
        v: T,
    ) -> Self {
        self.kerberos_5i_read_only = v.into();
        self
    }

    /// Sets the value of [kerberos_5i_read_write][crate::model::SimpleExportPolicyRule::kerberos_5i_read_write].
    pub fn set_kerberos_5i_read_write<T: std::convert::Into<std::option::Option<bool>>>(
        mut self,
        v: T,
    ) -> Self {
        self.kerberos_5i_read_write = v.into();
        self
    }

    /// Sets the value of [kerberos_5p_read_only][crate::model::SimpleExportPolicyRule::kerberos_5p_read_only].
    pub fn set_kerberos_5p_read_only<T: std::convert::Into<std::option::Option<bool>>>(
        mut self,
        v: T,
    ) -> Self {
        self.kerberos_5p_read_only = v.into();
        self
    }

    /// Sets the value of [kerberos_5p_read_write][crate::model::SimpleExportPolicyRule::kerberos_5p_read_write].
    pub fn set_kerberos_5p_read_write<T: std::convert::Into<std::option::Option<bool>>>(
        mut self,
        v: T,
    ) -> Self {
        self.kerberos_5p_read_write = v.into();
        self
    }
}

impl wkt::message::Message for SimpleExportPolicyRule {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.SimpleExportPolicyRule"
    }
}

/// Snapshot Policy for a volume.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SnapshotPolicy {
    /// If enabled, make snapshots automatically according to the schedules.
    /// Default is false.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub enabled: std::option::Option<bool>,

    /// Hourly schedule policy.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub hourly_schedule: std::option::Option<crate::model::HourlySchedule>,

    /// Daily schedule policy.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub daily_schedule: std::option::Option<crate::model::DailySchedule>,

    /// Weekly schedule policy.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub weekly_schedule: std::option::Option<crate::model::WeeklySchedule>,

    /// Monthly schedule policy.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub monthly_schedule: std::option::Option<crate::model::MonthlySchedule>,
}

impl SnapshotPolicy {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [enabled][crate::model::SnapshotPolicy::enabled].
    pub fn set_enabled<T: std::convert::Into<std::option::Option<bool>>>(mut self, v: T) -> Self {
        self.enabled = v.into();
        self
    }

    /// Sets the value of [hourly_schedule][crate::model::SnapshotPolicy::hourly_schedule].
    pub fn set_hourly_schedule<
        T: std::convert::Into<std::option::Option<crate::model::HourlySchedule>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.hourly_schedule = v.into();
        self
    }

    /// Sets the value of [daily_schedule][crate::model::SnapshotPolicy::daily_schedule].
    pub fn set_daily_schedule<
        T: std::convert::Into<std::option::Option<crate::model::DailySchedule>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.daily_schedule = v.into();
        self
    }

    /// Sets the value of [weekly_schedule][crate::model::SnapshotPolicy::weekly_schedule].
    pub fn set_weekly_schedule<
        T: std::convert::Into<std::option::Option<crate::model::WeeklySchedule>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.weekly_schedule = v.into();
        self
    }

    /// Sets the value of [monthly_schedule][crate::model::SnapshotPolicy::monthly_schedule].
    pub fn set_monthly_schedule<
        T: std::convert::Into<std::option::Option<crate::model::MonthlySchedule>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.monthly_schedule = v.into();
        self
    }
}

impl wkt::message::Message for SnapshotPolicy {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.SnapshotPolicy"
    }
}

/// Make a snapshot every hour e.g. at 04:00, 05:00, 06:00.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct HourlySchedule {
    /// The maximum number of Snapshots to keep for the hourly schedule
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub snapshots_to_keep: std::option::Option<f64>,

    /// Set the minute of the hour to start the snapshot (0-59), defaults to the
    /// top of the hour (0).
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub minute: std::option::Option<f64>,
}

impl HourlySchedule {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [snapshots_to_keep][crate::model::HourlySchedule::snapshots_to_keep].
    pub fn set_snapshots_to_keep<T: std::convert::Into<std::option::Option<f64>>>(
        mut self,
        v: T,
    ) -> Self {
        self.snapshots_to_keep = v.into();
        self
    }

    /// Sets the value of [minute][crate::model::HourlySchedule::minute].
    pub fn set_minute<T: std::convert::Into<std::option::Option<f64>>>(mut self, v: T) -> Self {
        self.minute = v.into();
        self
    }
}

impl wkt::message::Message for HourlySchedule {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.HourlySchedule"
    }
}

/// Make a snapshot every day e.g. at 04:00, 05:20, 23:50
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DailySchedule {
    /// The maximum number of Snapshots to keep for the hourly schedule
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub snapshots_to_keep: std::option::Option<f64>,

    /// Set the minute of the hour to start the snapshot (0-59), defaults to the
    /// top of the hour (0).
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub minute: std::option::Option<f64>,

    /// Set the hour to start the snapshot (0-23), defaults to midnight (0).
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub hour: std::option::Option<f64>,
}

impl DailySchedule {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [snapshots_to_keep][crate::model::DailySchedule::snapshots_to_keep].
    pub fn set_snapshots_to_keep<T: std::convert::Into<std::option::Option<f64>>>(
        mut self,
        v: T,
    ) -> Self {
        self.snapshots_to_keep = v.into();
        self
    }

    /// Sets the value of [minute][crate::model::DailySchedule::minute].
    pub fn set_minute<T: std::convert::Into<std::option::Option<f64>>>(mut self, v: T) -> Self {
        self.minute = v.into();
        self
    }

    /// Sets the value of [hour][crate::model::DailySchedule::hour].
    pub fn set_hour<T: std::convert::Into<std::option::Option<f64>>>(mut self, v: T) -> Self {
        self.hour = v.into();
        self
    }
}

impl wkt::message::Message for DailySchedule {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.DailySchedule"
    }
}

/// Make a snapshot every week e.g. at Monday 04:00, Wednesday 05:20, Sunday
/// 23:50
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct WeeklySchedule {
    /// The maximum number of Snapshots to keep for the hourly schedule
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub snapshots_to_keep: std::option::Option<f64>,

    /// Set the minute of the hour to start the snapshot (0-59), defaults to the
    /// top of the hour (0).
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub minute: std::option::Option<f64>,

    /// Set the hour to start the snapshot (0-23), defaults to midnight (0).
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub hour: std::option::Option<f64>,

    /// Set the day or days of the week to make a snapshot. Accepts a comma
    /// separated days of the week. Defaults to 'Sunday'.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub day: std::option::Option<std::string::String>,
}

impl WeeklySchedule {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [snapshots_to_keep][crate::model::WeeklySchedule::snapshots_to_keep].
    pub fn set_snapshots_to_keep<T: std::convert::Into<std::option::Option<f64>>>(
        mut self,
        v: T,
    ) -> Self {
        self.snapshots_to_keep = v.into();
        self
    }

    /// Sets the value of [minute][crate::model::WeeklySchedule::minute].
    pub fn set_minute<T: std::convert::Into<std::option::Option<f64>>>(mut self, v: T) -> Self {
        self.minute = v.into();
        self
    }

    /// Sets the value of [hour][crate::model::WeeklySchedule::hour].
    pub fn set_hour<T: std::convert::Into<std::option::Option<f64>>>(mut self, v: T) -> Self {
        self.hour = v.into();
        self
    }

    /// Sets the value of [day][crate::model::WeeklySchedule::day].
    pub fn set_day<T: std::convert::Into<std::option::Option<std::string::String>>>(
        mut self,
        v: T,
    ) -> Self {
        self.day = v.into();
        self
    }
}

impl wkt::message::Message for WeeklySchedule {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.WeeklySchedule"
    }
}

/// Make a snapshot once a month e.g. at 2nd 04:00, 7th 05:20, 24th 23:50
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MonthlySchedule {
    /// The maximum number of Snapshots to keep for the hourly schedule
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub snapshots_to_keep: std::option::Option<f64>,

    /// Set the minute of the hour to start the snapshot (0-59), defaults to the
    /// top of the hour (0).
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub minute: std::option::Option<f64>,

    /// Set the hour to start the snapshot (0-23), defaults to midnight (0).
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub hour: std::option::Option<f64>,

    /// Set the day or days of the month to make a snapshot (1-31). Accepts a
    /// comma separated number of days. Defaults to '1'.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub days_of_month: std::option::Option<std::string::String>,
}

impl MonthlySchedule {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [snapshots_to_keep][crate::model::MonthlySchedule::snapshots_to_keep].
    pub fn set_snapshots_to_keep<T: std::convert::Into<std::option::Option<f64>>>(
        mut self,
        v: T,
    ) -> Self {
        self.snapshots_to_keep = v.into();
        self
    }

    /// Sets the value of [minute][crate::model::MonthlySchedule::minute].
    pub fn set_minute<T: std::convert::Into<std::option::Option<f64>>>(mut self, v: T) -> Self {
        self.minute = v.into();
        self
    }

    /// Sets the value of [hour][crate::model::MonthlySchedule::hour].
    pub fn set_hour<T: std::convert::Into<std::option::Option<f64>>>(mut self, v: T) -> Self {
        self.hour = v.into();
        self
    }

    /// Sets the value of [days_of_month][crate::model::MonthlySchedule::days_of_month].
    pub fn set_days_of_month<T: std::convert::Into<std::option::Option<std::string::String>>>(
        mut self,
        v: T,
    ) -> Self {
        self.days_of_month = v.into();
        self
    }
}

impl wkt::message::Message for MonthlySchedule {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.MonthlySchedule"
    }
}

/// View only mount options for a volume.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MountOption {
    /// Export string
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub export: std::string::String,

    /// Full export string
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub export_full: std::string::String,

    /// Protocol to mount with.
    pub protocol: crate::model::Protocols,

    /// Instructions for mounting
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub instructions: std::string::String,

    /// Output only. IP Address.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub ip_address: std::string::String,
}

impl MountOption {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [export][crate::model::MountOption::export].
    pub fn set_export<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.export = v.into();
        self
    }

    /// Sets the value of [export_full][crate::model::MountOption::export_full].
    pub fn set_export_full<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.export_full = v.into();
        self
    }

    /// Sets the value of [protocol][crate::model::MountOption::protocol].
    pub fn set_protocol<T: std::convert::Into<crate::model::Protocols>>(mut self, v: T) -> Self {
        self.protocol = v.into();
        self
    }

    /// Sets the value of [instructions][crate::model::MountOption::instructions].
    pub fn set_instructions<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.instructions = v.into();
        self
    }

    /// Sets the value of [ip_address][crate::model::MountOption::ip_address].
    pub fn set_ip_address<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.ip_address = v.into();
        self
    }
}

impl wkt::message::Message for MountOption {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.MountOption"
    }
}

/// The RestoreParameters if volume is created from a snapshot or backup.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RestoreParameters {
    /// The source that the volume is created from.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub source: std::option::Option<crate::model::restore_parameters::Source>,
}

impl RestoreParameters {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of `source`.
    pub fn set_source<
        T: std::convert::Into<std::option::Option<crate::model::restore_parameters::Source>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source = v.into();
        self
    }

    /// The value of [source][crate::model::RestoreParameters::source]
    /// if it holds a `SourceSnapshot`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_source_snapshot(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.source.as_ref().and_then(|v| match v {
            crate::model::restore_parameters::Source::SourceSnapshot(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [source][crate::model::RestoreParameters::source]
    /// if it holds a `SourceBackup`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_source_backup(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.source.as_ref().and_then(|v| match v {
            crate::model::restore_parameters::Source::SourceBackup(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [source][crate::model::RestoreParameters::source]
    /// to hold a `SourceSnapshot`.
    ///
    /// Note that all the setters affecting `source` are
    /// mutually exclusive.
    pub fn set_source_snapshot<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.source = std::option::Option::Some(
            crate::model::restore_parameters::Source::SourceSnapshot(v.into()),
        );
        self
    }

    /// Sets the value of [source][crate::model::RestoreParameters::source]
    /// to hold a `SourceBackup`.
    ///
    /// Note that all the setters affecting `source` are
    /// mutually exclusive.
    pub fn set_source_backup<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.source = std::option::Option::Some(
            crate::model::restore_parameters::Source::SourceBackup(v.into()),
        );
        self
    }
}

impl wkt::message::Message for RestoreParameters {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.RestoreParameters"
    }
}

/// Defines additional types related to [RestoreParameters].
pub mod restore_parameters {
    #[allow(unused_imports)]
    use super::*;

    /// The source that the volume is created from.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Source {
        /// Full name of the snapshot resource.
        /// Format:
        /// projects/{project}/locations/{location}/volumes/{volume}/snapshots/{snapshot}
        SourceSnapshot(std::string::String),
        /// Full name of the backup resource.
        /// Format:
        /// projects/{project}/locations/{location}/backupVaults/{backup_vault_id}/backups/{backup_id}
        SourceBackup(std::string::String),
    }
}

/// BackupConfig contains backup related config on a volume.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BackupConfig {
    /// Optional. When specified, schedule backups will be created based on the
    /// policy configuration.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub backup_policies: std::vec::Vec<std::string::String>,

    /// Optional. Name of backup vault.
    /// Format:
    /// projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub backup_vault: std::string::String,

    /// Optional. When set to true, scheduled backup is enabled on the volume.
    /// This field should be nil when there's no backup policy attached.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub scheduled_backup_enabled: std::option::Option<bool>,

    /// Output only. Total size of all backups in a chain in bytes = baseline
    /// backup size + sum(incremental backup size).
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<serde_with::DisplayFromStr>")]
    pub backup_chain_bytes: std::option::Option<i64>,
}

impl BackupConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [backup_vault][crate::model::BackupConfig::backup_vault].
    pub fn set_backup_vault<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.backup_vault = v.into();
        self
    }

    /// Sets the value of [scheduled_backup_enabled][crate::model::BackupConfig::scheduled_backup_enabled].
    pub fn set_scheduled_backup_enabled<T: std::convert::Into<std::option::Option<bool>>>(
        mut self,
        v: T,
    ) -> Self {
        self.scheduled_backup_enabled = v.into();
        self
    }

    /// Sets the value of [backup_chain_bytes][crate::model::BackupConfig::backup_chain_bytes].
    pub fn set_backup_chain_bytes<T: std::convert::Into<std::option::Option<i64>>>(
        mut self,
        v: T,
    ) -> Self {
        self.backup_chain_bytes = v.into();
        self
    }

    /// Sets the value of [backup_policies][crate::model::BackupConfig::backup_policies].
    pub fn set_backup_policies<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.backup_policies = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BackupConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.BackupConfig"
    }
}

/// Defines tiering policy for the volume.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TieringPolicy {
    /// Optional. Flag indicating if the volume has tiering policy enable/pause.
    /// Default is PAUSED.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub tier_action: std::option::Option<crate::model::tiering_policy::TierAction>,

    /// Optional. Time in days to mark the volume's data block as cold and make it
    /// eligible for tiering, can be range from 7-183. Default is 31.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub cooling_threshold_days: std::option::Option<i32>,
}

impl TieringPolicy {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [tier_action][crate::model::TieringPolicy::tier_action].
    pub fn set_tier_action<
        T: std::convert::Into<std::option::Option<crate::model::tiering_policy::TierAction>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.tier_action = v.into();
        self
    }

    /// Sets the value of [cooling_threshold_days][crate::model::TieringPolicy::cooling_threshold_days].
    pub fn set_cooling_threshold_days<T: std::convert::Into<std::option::Option<i32>>>(
        mut self,
        v: T,
    ) -> Self {
        self.cooling_threshold_days = v.into();
        self
    }
}

impl wkt::message::Message for TieringPolicy {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.TieringPolicy"
    }
}

/// Defines additional types related to [TieringPolicy].
pub mod tiering_policy {
    #[allow(unused_imports)]
    use super::*;

    /// Tier action for the volume.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct TierAction(i32);

    impl TierAction {
        /// Unspecified.
        pub const TIER_ACTION_UNSPECIFIED: TierAction = TierAction::new(0);

        /// When tiering is enabled, new cold data will be tiered.
        pub const ENABLED: TierAction = TierAction::new(1);

        /// When paused, tiering won't be performed on new data. Existing data stays
        /// tiered until accessed.
        pub const PAUSED: TierAction = TierAction::new(2);

        /// Creates a new TierAction instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("TIER_ACTION_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("ENABLED"),
                2 => std::borrow::Cow::Borrowed("PAUSED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "TIER_ACTION_UNSPECIFIED" => {
                    std::option::Option::Some(Self::TIER_ACTION_UNSPECIFIED)
                }
                "ENABLED" => std::option::Option::Some(Self::ENABLED),
                "PAUSED" => std::option::Option::Some(Self::PAUSED),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for TierAction {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for TierAction {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// The Hybrid Replication parameters for the volume.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct HybridReplicationParameters {
    /// Required. Desired name for the replication of this volume.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub replication: std::string::String,

    /// Required. Name of the user's local source volume to be peered with the
    /// destination volume.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub peer_volume_name: std::string::String,

    /// Required. Name of the user's local source cluster to be peered with the
    /// destination cluster.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub peer_cluster_name: std::string::String,

    /// Required. Name of the user's local source vserver svm to be peered with the
    /// destination vserver svm.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub peer_svm_name: std::string::String,

    /// Required. List of node ip addresses to be peered with.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub peer_ip_addresses: std::vec::Vec<std::string::String>,

    /// Optional. Name of source cluster location associated with the Hybrid
    /// replication. This is a free-form field for the display purpose only.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub cluster_location: std::string::String,

    /// Optional. Description of the replication.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. Labels to be added to the replication as the key value pairs.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,
}

impl HybridReplicationParameters {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [replication][crate::model::HybridReplicationParameters::replication].
    pub fn set_replication<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.replication = v.into();
        self
    }

    /// Sets the value of [peer_volume_name][crate::model::HybridReplicationParameters::peer_volume_name].
    pub fn set_peer_volume_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.peer_volume_name = v.into();
        self
    }

    /// Sets the value of [peer_cluster_name][crate::model::HybridReplicationParameters::peer_cluster_name].
    pub fn set_peer_cluster_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.peer_cluster_name = v.into();
        self
    }

    /// Sets the value of [peer_svm_name][crate::model::HybridReplicationParameters::peer_svm_name].
    pub fn set_peer_svm_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.peer_svm_name = v.into();
        self
    }

    /// Sets the value of [cluster_location][crate::model::HybridReplicationParameters::cluster_location].
    pub fn set_cluster_location<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.cluster_location = v.into();
        self
    }

    /// Sets the value of [description][crate::model::HybridReplicationParameters::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [peer_ip_addresses][crate::model::HybridReplicationParameters::peer_ip_addresses].
    pub fn set_peer_ip_addresses<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.peer_ip_addresses = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [labels][crate::model::HybridReplicationParameters::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for HybridReplicationParameters {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.netapp.v1.HybridReplicationParameters"
    }
}

/// The service level of a storage pool and its volumes.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct ServiceLevel(i32);

impl ServiceLevel {
    /// Unspecified service level.
    pub const SERVICE_LEVEL_UNSPECIFIED: ServiceLevel = ServiceLevel::new(0);

    /// Premium service level.
    pub const PREMIUM: ServiceLevel = ServiceLevel::new(1);

    /// Extreme service level.
    pub const EXTREME: ServiceLevel = ServiceLevel::new(2);

    /// Standard service level.
    pub const STANDARD: ServiceLevel = ServiceLevel::new(3);

    /// Flex service level.
    pub const FLEX: ServiceLevel = ServiceLevel::new(4);

    /// Creates a new ServiceLevel instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("SERVICE_LEVEL_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("PREMIUM"),
            2 => std::borrow::Cow::Borrowed("EXTREME"),
            3 => std::borrow::Cow::Borrowed("STANDARD"),
            4 => std::borrow::Cow::Borrowed("FLEX"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "SERVICE_LEVEL_UNSPECIFIED" => {
                std::option::Option::Some(Self::SERVICE_LEVEL_UNSPECIFIED)
            }
            "PREMIUM" => std::option::Option::Some(Self::PREMIUM),
            "EXTREME" => std::option::Option::Some(Self::EXTREME),
            "STANDARD" => std::option::Option::Some(Self::STANDARD),
            "FLEX" => std::option::Option::Some(Self::FLEX),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for ServiceLevel {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for ServiceLevel {
    fn default() -> Self {
        Self::new(0)
    }
}

/// Flex Storage Pool performance.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct FlexPerformance(i32);

impl FlexPerformance {
    /// Unspecified flex performance.
    pub const FLEX_PERFORMANCE_UNSPECIFIED: FlexPerformance = FlexPerformance::new(0);

    /// Flex Storage Pool with default performance.
    pub const FLEX_PERFORMANCE_DEFAULT: FlexPerformance = FlexPerformance::new(1);

    /// Flex Storage Pool with custom performance.
    pub const FLEX_PERFORMANCE_CUSTOM: FlexPerformance = FlexPerformance::new(2);

    /// Creates a new FlexPerformance instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("FLEX_PERFORMANCE_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("FLEX_PERFORMANCE_DEFAULT"),
            2 => std::borrow::Cow::Borrowed("FLEX_PERFORMANCE_CUSTOM"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "FLEX_PERFORMANCE_UNSPECIFIED" => {
                std::option::Option::Some(Self::FLEX_PERFORMANCE_UNSPECIFIED)
            }
            "FLEX_PERFORMANCE_DEFAULT" => std::option::Option::Some(Self::FLEX_PERFORMANCE_DEFAULT),
            "FLEX_PERFORMANCE_CUSTOM" => std::option::Option::Some(Self::FLEX_PERFORMANCE_CUSTOM),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for FlexPerformance {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for FlexPerformance {
    fn default() -> Self {
        Self::new(0)
    }
}

/// The volume encryption key source.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct EncryptionType(i32);

impl EncryptionType {
    /// The source of the encryption key is not specified.
    pub const ENCRYPTION_TYPE_UNSPECIFIED: EncryptionType = EncryptionType::new(0);

    /// Google managed encryption key.
    pub const SERVICE_MANAGED: EncryptionType = EncryptionType::new(1);

    /// Customer managed encryption key, which is stored in KMS.
    pub const CLOUD_KMS: EncryptionType = EncryptionType::new(2);

    /// Creates a new EncryptionType instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("ENCRYPTION_TYPE_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("SERVICE_MANAGED"),
            2 => std::borrow::Cow::Borrowed("CLOUD_KMS"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "ENCRYPTION_TYPE_UNSPECIFIED" => {
                std::option::Option::Some(Self::ENCRYPTION_TYPE_UNSPECIFIED)
            }
            "SERVICE_MANAGED" => std::option::Option::Some(Self::SERVICE_MANAGED),
            "CLOUD_KMS" => std::option::Option::Some(Self::CLOUD_KMS),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for EncryptionType {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for EncryptionType {
    fn default() -> Self {
        Self::new(0)
    }
}

/// Type of directory service
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct DirectoryServiceType(i32);

impl DirectoryServiceType {
    /// Directory service type is not specified.
    pub const DIRECTORY_SERVICE_TYPE_UNSPECIFIED: DirectoryServiceType =
        DirectoryServiceType::new(0);

    /// Active directory policy attached to the storage pool.
    pub const ACTIVE_DIRECTORY: DirectoryServiceType = DirectoryServiceType::new(1);

    /// Creates a new DirectoryServiceType instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("DIRECTORY_SERVICE_TYPE_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("ACTIVE_DIRECTORY"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "DIRECTORY_SERVICE_TYPE_UNSPECIFIED" => {
                std::option::Option::Some(Self::DIRECTORY_SERVICE_TYPE_UNSPECIFIED)
            }
            "ACTIVE_DIRECTORY" => std::option::Option::Some(Self::ACTIVE_DIRECTORY),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for DirectoryServiceType {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for DirectoryServiceType {
    fn default() -> Self {
        Self::new(0)
    }
}

/// Protocols is an enum of all the supported network protocols for a volume.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct Protocols(i32);

impl Protocols {
    /// Unspecified protocol
    pub const PROTOCOLS_UNSPECIFIED: Protocols = Protocols::new(0);

    /// NFS V3 protocol
    pub const NFSV3: Protocols = Protocols::new(1);

    /// NFS V4 protocol
    pub const NFSV4: Protocols = Protocols::new(2);

    /// SMB protocol
    pub const SMB: Protocols = Protocols::new(3);

    /// Creates a new Protocols instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("PROTOCOLS_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("NFSV3"),
            2 => std::borrow::Cow::Borrowed("NFSV4"),
            3 => std::borrow::Cow::Borrowed("SMB"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "PROTOCOLS_UNSPECIFIED" => std::option::Option::Some(Self::PROTOCOLS_UNSPECIFIED),
            "NFSV3" => std::option::Option::Some(Self::NFSV3),
            "NFSV4" => std::option::Option::Some(Self::NFSV4),
            "SMB" => std::option::Option::Some(Self::SMB),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for Protocols {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for Protocols {
    fn default() -> Self {
        Self::new(0)
    }
}

/// AccessType is an enum of all the supported access types for a volume.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct AccessType(i32);

impl AccessType {
    /// Unspecified Access Type
    pub const ACCESS_TYPE_UNSPECIFIED: AccessType = AccessType::new(0);

    /// Read Only
    pub const READ_ONLY: AccessType = AccessType::new(1);

    /// Read Write
    pub const READ_WRITE: AccessType = AccessType::new(2);

    /// None
    pub const READ_NONE: AccessType = AccessType::new(3);

    /// Creates a new AccessType instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("ACCESS_TYPE_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("READ_ONLY"),
            2 => std::borrow::Cow::Borrowed("READ_WRITE"),
            3 => std::borrow::Cow::Borrowed("READ_NONE"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "ACCESS_TYPE_UNSPECIFIED" => std::option::Option::Some(Self::ACCESS_TYPE_UNSPECIFIED),
            "READ_ONLY" => std::option::Option::Some(Self::READ_ONLY),
            "READ_WRITE" => std::option::Option::Some(Self::READ_WRITE),
            "READ_NONE" => std::option::Option::Some(Self::READ_NONE),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for AccessType {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for AccessType {
    fn default() -> Self {
        Self::new(0)
    }
}

/// SMBSettings
/// Modifies the behaviour of a SMB volume.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct SMBSettings(i32);

impl SMBSettings {
    /// Unspecified default option
    pub const SMB_SETTINGS_UNSPECIFIED: SMBSettings = SMBSettings::new(0);

    /// SMB setting encrypt data
    pub const ENCRYPT_DATA: SMBSettings = SMBSettings::new(1);

    /// SMB setting browsable
    pub const BROWSABLE: SMBSettings = SMBSettings::new(2);

    /// SMB setting notify change
    pub const CHANGE_NOTIFY: SMBSettings = SMBSettings::new(3);

    /// SMB setting not to notify change
    pub const NON_BROWSABLE: SMBSettings = SMBSettings::new(4);

    /// SMB setting oplocks
    pub const OPLOCKS: SMBSettings = SMBSettings::new(5);

    /// SMB setting to show snapshots
    pub const SHOW_SNAPSHOT: SMBSettings = SMBSettings::new(6);

    /// SMB setting to show previous versions
    pub const SHOW_PREVIOUS_VERSIONS: SMBSettings = SMBSettings::new(7);

    /// SMB setting to access volume based on enumerartion
    pub const ACCESS_BASED_ENUMERATION: SMBSettings = SMBSettings::new(8);

    /// Continuously available enumeration
    pub const CONTINUOUSLY_AVAILABLE: SMBSettings = SMBSettings::new(9);

    /// Creates a new SMBSettings instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("SMB_SETTINGS_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("ENCRYPT_DATA"),
            2 => std::borrow::Cow::Borrowed("BROWSABLE"),
            3 => std::borrow::Cow::Borrowed("CHANGE_NOTIFY"),
            4 => std::borrow::Cow::Borrowed("NON_BROWSABLE"),
            5 => std::borrow::Cow::Borrowed("OPLOCKS"),
            6 => std::borrow::Cow::Borrowed("SHOW_SNAPSHOT"),
            7 => std::borrow::Cow::Borrowed("SHOW_PREVIOUS_VERSIONS"),
            8 => std::borrow::Cow::Borrowed("ACCESS_BASED_ENUMERATION"),
            9 => std::borrow::Cow::Borrowed("CONTINUOUSLY_AVAILABLE"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "SMB_SETTINGS_UNSPECIFIED" => std::option::Option::Some(Self::SMB_SETTINGS_UNSPECIFIED),
            "ENCRYPT_DATA" => std::option::Option::Some(Self::ENCRYPT_DATA),
            "BROWSABLE" => std::option::Option::Some(Self::BROWSABLE),
            "CHANGE_NOTIFY" => std::option::Option::Some(Self::CHANGE_NOTIFY),
            "NON_BROWSABLE" => std::option::Option::Some(Self::NON_BROWSABLE),
            "OPLOCKS" => std::option::Option::Some(Self::OPLOCKS),
            "SHOW_SNAPSHOT" => std::option::Option::Some(Self::SHOW_SNAPSHOT),
            "SHOW_PREVIOUS_VERSIONS" => std::option::Option::Some(Self::SHOW_PREVIOUS_VERSIONS),
            "ACCESS_BASED_ENUMERATION" => std::option::Option::Some(Self::ACCESS_BASED_ENUMERATION),
            "CONTINUOUSLY_AVAILABLE" => std::option::Option::Some(Self::CONTINUOUSLY_AVAILABLE),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for SMBSettings {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for SMBSettings {
    fn default() -> Self {
        Self::new(0)
    }
}

/// The security style of the volume, can be either UNIX or NTFS.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct SecurityStyle(i32);

impl SecurityStyle {
    /// SecurityStyle is unspecified
    pub const SECURITY_STYLE_UNSPECIFIED: SecurityStyle = SecurityStyle::new(0);

    /// SecurityStyle uses NTFS
    pub const NTFS: SecurityStyle = SecurityStyle::new(1);

    /// SecurityStyle uses UNIX
    pub const UNIX: SecurityStyle = SecurityStyle::new(2);

    /// Creates a new SecurityStyle instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("SECURITY_STYLE_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("NTFS"),
            2 => std::borrow::Cow::Borrowed("UNIX"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "SECURITY_STYLE_UNSPECIFIED" => {
                std::option::Option::Some(Self::SECURITY_STYLE_UNSPECIFIED)
            }
            "NTFS" => std::option::Option::Some(Self::NTFS),
            "UNIX" => std::option::Option::Some(Self::UNIX),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for SecurityStyle {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for SecurityStyle {
    fn default() -> Self {
        Self::new(0)
    }
}

/// Actions to be restricted for a volume.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct RestrictedAction(i32);

impl RestrictedAction {
    /// Unspecified restricted action
    pub const RESTRICTED_ACTION_UNSPECIFIED: RestrictedAction = RestrictedAction::new(0);

    /// Prevent volume from being deleted when mounted.
    pub const DELETE: RestrictedAction = RestrictedAction::new(1);

    /// Creates a new RestrictedAction instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("RESTRICTED_ACTION_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("DELETE"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "RESTRICTED_ACTION_UNSPECIFIED" => {
                std::option::Option::Some(Self::RESTRICTED_ACTION_UNSPECIFIED)
            }
            "DELETE" => std::option::Option::Some(Self::DELETE),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for RestrictedAction {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for RestrictedAction {
    fn default() -> Self {
        Self::new(0)
    }
}
