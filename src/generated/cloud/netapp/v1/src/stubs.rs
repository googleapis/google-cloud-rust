// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;
use std::sync::Arc;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::NetApp].
///
/// Application developers may need to implement this trait to mock
/// `client::NetApp`.  In other use-cases, application developers only
/// use `client::NetApp` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait NetApp: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::NetApp::list_storage_pools].
    fn list_storage_pools(
        &self,
        _req: crate::model::ListStoragePoolsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListStoragePoolsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListStoragePoolsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::NetApp::create_storage_pool].
    fn create_storage_pool(
        &self,
        _req: crate::model::CreateStoragePoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::get_storage_pool].
    fn get_storage_pool(
        &self,
        _req: crate::model::GetStoragePoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::StoragePool>> + Send {
        std::future::ready::<crate::Result<crate::model::StoragePool>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::update_storage_pool].
    fn update_storage_pool(
        &self,
        _req: crate::model::UpdateStoragePoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::delete_storage_pool].
    fn delete_storage_pool(
        &self,
        _req: crate::model::DeleteStoragePoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::validate_directory_service].
    fn validate_directory_service(
        &self,
        _req: crate::model::ValidateDirectoryServiceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::switch_active_replica_zone].
    fn switch_active_replica_zone(
        &self,
        _req: crate::model::SwitchActiveReplicaZoneRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::list_volumes].
    fn list_volumes(
        &self,
        _req: crate::model::ListVolumesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListVolumesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListVolumesResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::get_volume].
    fn get_volume(
        &self,
        _req: crate::model::GetVolumeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Volume>> + Send {
        std::future::ready::<crate::Result<crate::model::Volume>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::create_volume].
    fn create_volume(
        &self,
        _req: crate::model::CreateVolumeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::update_volume].
    fn update_volume(
        &self,
        _req: crate::model::UpdateVolumeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::delete_volume].
    fn delete_volume(
        &self,
        _req: crate::model::DeleteVolumeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::revert_volume].
    fn revert_volume(
        &self,
        _req: crate::model::RevertVolumeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::list_snapshots].
    fn list_snapshots(
        &self,
        _req: crate::model::ListSnapshotsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListSnapshotsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListSnapshotsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::get_snapshot].
    fn get_snapshot(
        &self,
        _req: crate::model::GetSnapshotRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Snapshot>> + Send {
        std::future::ready::<crate::Result<crate::model::Snapshot>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::create_snapshot].
    fn create_snapshot(
        &self,
        _req: crate::model::CreateSnapshotRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::delete_snapshot].
    fn delete_snapshot(
        &self,
        _req: crate::model::DeleteSnapshotRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::update_snapshot].
    fn update_snapshot(
        &self,
        _req: crate::model::UpdateSnapshotRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::list_active_directories].
    fn list_active_directories(
        &self,
        _req: crate::model::ListActiveDirectoriesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::ListActiveDirectoriesResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::ListActiveDirectoriesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::NetApp::get_active_directory].
    fn get_active_directory(
        &self,
        _req: crate::model::GetActiveDirectoryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ActiveDirectory>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ActiveDirectory>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::create_active_directory].
    fn create_active_directory(
        &self,
        _req: crate::model::CreateActiveDirectoryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::update_active_directory].
    fn update_active_directory(
        &self,
        _req: crate::model::UpdateActiveDirectoryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::delete_active_directory].
    fn delete_active_directory(
        &self,
        _req: crate::model::DeleteActiveDirectoryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::list_kms_configs].
    fn list_kms_configs(
        &self,
        _req: crate::model::ListKmsConfigsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListKmsConfigsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListKmsConfigsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::NetApp::create_kms_config].
    fn create_kms_config(
        &self,
        _req: crate::model::CreateKmsConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::get_kms_config].
    fn get_kms_config(
        &self,
        _req: crate::model::GetKmsConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::KmsConfig>> + Send {
        std::future::ready::<crate::Result<crate::model::KmsConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::update_kms_config].
    fn update_kms_config(
        &self,
        _req: crate::model::UpdateKmsConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::encrypt_volumes].
    fn encrypt_volumes(
        &self,
        _req: crate::model::EncryptVolumesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::verify_kms_config].
    fn verify_kms_config(
        &self,
        _req: crate::model::VerifyKmsConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::VerifyKmsConfigResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::VerifyKmsConfigResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::NetApp::delete_kms_config].
    fn delete_kms_config(
        &self,
        _req: crate::model::DeleteKmsConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::list_replications].
    fn list_replications(
        &self,
        _req: crate::model::ListReplicationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListReplicationsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListReplicationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::NetApp::get_replication].
    fn get_replication(
        &self,
        _req: crate::model::GetReplicationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Replication>> + Send {
        std::future::ready::<crate::Result<crate::model::Replication>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::create_replication].
    fn create_replication(
        &self,
        _req: crate::model::CreateReplicationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::delete_replication].
    fn delete_replication(
        &self,
        _req: crate::model::DeleteReplicationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::update_replication].
    fn update_replication(
        &self,
        _req: crate::model::UpdateReplicationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::stop_replication].
    fn stop_replication(
        &self,
        _req: crate::model::StopReplicationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::resume_replication].
    fn resume_replication(
        &self,
        _req: crate::model::ResumeReplicationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::reverse_replication_direction].
    fn reverse_replication_direction(
        &self,
        _req: crate::model::ReverseReplicationDirectionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::establish_peering].
    fn establish_peering(
        &self,
        _req: crate::model::EstablishPeeringRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::sync_replication].
    fn sync_replication(
        &self,
        _req: crate::model::SyncReplicationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::create_backup_vault].
    fn create_backup_vault(
        &self,
        _req: crate::model::CreateBackupVaultRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::get_backup_vault].
    fn get_backup_vault(
        &self,
        _req: crate::model::GetBackupVaultRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::BackupVault>> + Send {
        std::future::ready::<crate::Result<crate::model::BackupVault>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::list_backup_vaults].
    fn list_backup_vaults(
        &self,
        _req: crate::model::ListBackupVaultsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListBackupVaultsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListBackupVaultsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::NetApp::update_backup_vault].
    fn update_backup_vault(
        &self,
        _req: crate::model::UpdateBackupVaultRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::delete_backup_vault].
    fn delete_backup_vault(
        &self,
        _req: crate::model::DeleteBackupVaultRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::create_backup].
    fn create_backup(
        &self,
        _req: crate::model::CreateBackupRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::get_backup].
    fn get_backup(
        &self,
        _req: crate::model::GetBackupRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Backup>> + Send {
        std::future::ready::<crate::Result<crate::model::Backup>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::list_backups].
    fn list_backups(
        &self,
        _req: crate::model::ListBackupsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListBackupsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListBackupsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::delete_backup].
    fn delete_backup(
        &self,
        _req: crate::model::DeleteBackupRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::update_backup].
    fn update_backup(
        &self,
        _req: crate::model::UpdateBackupRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::create_backup_policy].
    fn create_backup_policy(
        &self,
        _req: crate::model::CreateBackupPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::get_backup_policy].
    fn get_backup_policy(
        &self,
        _req: crate::model::GetBackupPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::BackupPolicy>> + Send {
        std::future::ready::<crate::Result<crate::model::BackupPolicy>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::list_backup_policies].
    fn list_backup_policies(
        &self,
        _req: crate::model::ListBackupPoliciesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListBackupPoliciesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListBackupPoliciesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::NetApp::update_backup_policy].
    fn update_backup_policy(
        &self,
        _req: crate::model::UpdateBackupPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::delete_backup_policy].
    fn delete_backup_policy(
        &self,
        _req: crate::model::DeleteBackupPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::list_quota_rules].
    fn list_quota_rules(
        &self,
        _req: crate::model::ListQuotaRulesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListQuotaRulesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListQuotaRulesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::NetApp::get_quota_rule].
    fn get_quota_rule(
        &self,
        _req: crate::model::GetQuotaRuleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::QuotaRule>> + Send {
        std::future::ready::<crate::Result<crate::model::QuotaRule>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::create_quota_rule].
    fn create_quota_rule(
        &self,
        _req: crate::model::CreateQuotaRuleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::update_quota_rule].
    fn update_quota_rule(
        &self,
        _req: crate::model::UpdateQuotaRuleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::delete_quota_rule].
    fn delete_quota_rule(
        &self,
        _req: crate::model::DeleteQuotaRuleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::list_locations].
    fn list_locations(
        &self,
        _req: location::model::ListLocationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::ListLocationsResponse>> + Send
    {
        std::future::ready::<crate::Result<location::model::ListLocationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::NetApp::get_location].
    fn get_location(
        &self,
        _req: location::model::GetLocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::Location>> + Send {
        std::future::ready::<crate::Result<location::model::Location>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::ListOperationsResponse>>
    + Send {
        std::future::ready::<crate::Result<longrunning::model::ListOperationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::NetApp::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::NetApp::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::NetApp::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Returns the polling error policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_error_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        Arc::new(gax::polling_error_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}
