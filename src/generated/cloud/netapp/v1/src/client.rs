// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;

/// Implements a client for the NetApp API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_netapp_v1::client::NetApp;
/// let client = NetApp::builder().build().await?;
/// // use `client` to make requests to the NetApp API.
/// # gax::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// NetApp Files Google Cloud Service
///
/// # Configuration
///
/// To configure `NetApp` use the `with_*` methods in the type returned
/// by [builder()][NetApp::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://netapp.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::net_app::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::net_app::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `NetApp` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `NetApp` in
/// an [Rc](std::rc::Rc) or [Arc](std::sync::Arc) to reuse it, because it
/// already uses an `Arc` internally.
#[derive(Clone, Debug)]
pub struct NetApp {
    inner: std::sync::Arc<dyn super::stub::dynamic::NetApp>,
}

impl NetApp {
    /// Returns a builder for [NetApp].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_netapp_v1::client::NetApp;
    /// let client = NetApp::builder().build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::net_app::ClientBuilder {
        gax::client_builder::internal::new_builder(super::builder::net_app::client::Factory)
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::NetApp + 'static,
    {
        Self {
            inner: std::sync::Arc::new(stub),
        }
    }

    pub(crate) async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> Result<std::sync::Arc<dyn super::stub::dynamic::NetApp>> {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(std::sync::Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(std::sync::Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::NetApp> {
        super::transport::NetApp::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::NetApp> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::NetApp::new)
    }

    /// Returns descriptions of all storage pools owned by the caller.
    pub fn list_storage_pools(&self) -> super::builder::net_app::ListStoragePools {
        super::builder::net_app::ListStoragePools::new(self.inner.clone())
    }

    /// Creates a new storage pool.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_storage_pool(&self) -> super::builder::net_app::CreateStoragePool {
        super::builder::net_app::CreateStoragePool::new(self.inner.clone())
    }

    /// Returns the description of the specified storage pool by poolId.
    pub fn get_storage_pool(&self) -> super::builder::net_app::GetStoragePool {
        super::builder::net_app::GetStoragePool::new(self.inner.clone())
    }

    /// Updates the storage pool properties with the full spec
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_storage_pool(&self) -> super::builder::net_app::UpdateStoragePool {
        super::builder::net_app::UpdateStoragePool::new(self.inner.clone())
    }

    /// Warning! This operation will permanently delete the storage pool.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_storage_pool(&self) -> super::builder::net_app::DeleteStoragePool {
        super::builder::net_app::DeleteStoragePool::new(self.inner.clone())
    }

    /// ValidateDirectoryService does a connectivity check for a directory service
    /// policy attached to the storage pool.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn validate_directory_service(&self) -> super::builder::net_app::ValidateDirectoryService {
        super::builder::net_app::ValidateDirectoryService::new(self.inner.clone())
    }

    /// This operation will switch the active/replica zone for a regional
    /// storagePool.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn switch_active_replica_zone(&self) -> super::builder::net_app::SwitchActiveReplicaZone {
        super::builder::net_app::SwitchActiveReplicaZone::new(self.inner.clone())
    }

    /// Lists Volumes in a given project.
    pub fn list_volumes(&self) -> super::builder::net_app::ListVolumes {
        super::builder::net_app::ListVolumes::new(self.inner.clone())
    }

    /// Gets details of a single Volume.
    pub fn get_volume(&self) -> super::builder::net_app::GetVolume {
        super::builder::net_app::GetVolume::new(self.inner.clone())
    }

    /// Creates a new Volume in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_volume(&self) -> super::builder::net_app::CreateVolume {
        super::builder::net_app::CreateVolume::new(self.inner.clone())
    }

    /// Updates the parameters of a single Volume.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_volume(&self) -> super::builder::net_app::UpdateVolume {
        super::builder::net_app::UpdateVolume::new(self.inner.clone())
    }

    /// Deletes a single Volume.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_volume(&self) -> super::builder::net_app::DeleteVolume {
        super::builder::net_app::DeleteVolume::new(self.inner.clone())
    }

    /// Revert an existing volume to a specified snapshot.
    /// Warning! This operation will permanently revert all changes made after the
    /// snapshot was created.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn revert_volume(&self) -> super::builder::net_app::RevertVolume {
        super::builder::net_app::RevertVolume::new(self.inner.clone())
    }

    /// Returns descriptions of all snapshots for a volume.
    pub fn list_snapshots(&self) -> super::builder::net_app::ListSnapshots {
        super::builder::net_app::ListSnapshots::new(self.inner.clone())
    }

    /// Describe a snapshot for a volume.
    pub fn get_snapshot(&self) -> super::builder::net_app::GetSnapshot {
        super::builder::net_app::GetSnapshot::new(self.inner.clone())
    }

    /// Create a new snapshot for a volume.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_snapshot(&self) -> super::builder::net_app::CreateSnapshot {
        super::builder::net_app::CreateSnapshot::new(self.inner.clone())
    }

    /// Deletes a snapshot.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_snapshot(&self) -> super::builder::net_app::DeleteSnapshot {
        super::builder::net_app::DeleteSnapshot::new(self.inner.clone())
    }

    /// Updates the settings of a specific snapshot.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_snapshot(&self) -> super::builder::net_app::UpdateSnapshot {
        super::builder::net_app::UpdateSnapshot::new(self.inner.clone())
    }

    /// Lists active directories.
    pub fn list_active_directories(&self) -> super::builder::net_app::ListActiveDirectories {
        super::builder::net_app::ListActiveDirectories::new(self.inner.clone())
    }

    /// Describes a specified active directory.
    pub fn get_active_directory(&self) -> super::builder::net_app::GetActiveDirectory {
        super::builder::net_app::GetActiveDirectory::new(self.inner.clone())
    }

    /// CreateActiveDirectory
    /// Creates the active directory specified in the request.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_active_directory(&self) -> super::builder::net_app::CreateActiveDirectory {
        super::builder::net_app::CreateActiveDirectory::new(self.inner.clone())
    }

    /// Update the parameters of an active directories.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_active_directory(&self) -> super::builder::net_app::UpdateActiveDirectory {
        super::builder::net_app::UpdateActiveDirectory::new(self.inner.clone())
    }

    /// Delete the active directory specified in the request.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_active_directory(&self) -> super::builder::net_app::DeleteActiveDirectory {
        super::builder::net_app::DeleteActiveDirectory::new(self.inner.clone())
    }

    /// Returns descriptions of all KMS configs owned by the caller.
    pub fn list_kms_configs(&self) -> super::builder::net_app::ListKmsConfigs {
        super::builder::net_app::ListKmsConfigs::new(self.inner.clone())
    }

    /// Creates a new KMS config.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_kms_config(&self) -> super::builder::net_app::CreateKmsConfig {
        super::builder::net_app::CreateKmsConfig::new(self.inner.clone())
    }

    /// Returns the description of the specified KMS config by kms_config_id.
    pub fn get_kms_config(&self) -> super::builder::net_app::GetKmsConfig {
        super::builder::net_app::GetKmsConfig::new(self.inner.clone())
    }

    /// Updates the Kms config properties with the full spec
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_kms_config(&self) -> super::builder::net_app::UpdateKmsConfig {
        super::builder::net_app::UpdateKmsConfig::new(self.inner.clone())
    }

    /// Encrypt the existing volumes without CMEK encryption with the desired the
    /// KMS config for the whole region.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn encrypt_volumes(&self) -> super::builder::net_app::EncryptVolumes {
        super::builder::net_app::EncryptVolumes::new(self.inner.clone())
    }

    /// Verifies KMS config reachability.
    pub fn verify_kms_config(&self) -> super::builder::net_app::VerifyKmsConfig {
        super::builder::net_app::VerifyKmsConfig::new(self.inner.clone())
    }

    /// Warning! This operation will permanently delete the Kms config.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_kms_config(&self) -> super::builder::net_app::DeleteKmsConfig {
        super::builder::net_app::DeleteKmsConfig::new(self.inner.clone())
    }

    /// Returns descriptions of all replications for a volume.
    pub fn list_replications(&self) -> super::builder::net_app::ListReplications {
        super::builder::net_app::ListReplications::new(self.inner.clone())
    }

    /// Describe a replication for a volume.
    pub fn get_replication(&self) -> super::builder::net_app::GetReplication {
        super::builder::net_app::GetReplication::new(self.inner.clone())
    }

    /// Create a new replication for a volume.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_replication(&self) -> super::builder::net_app::CreateReplication {
        super::builder::net_app::CreateReplication::new(self.inner.clone())
    }

    /// Deletes a replication.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_replication(&self) -> super::builder::net_app::DeleteReplication {
        super::builder::net_app::DeleteReplication::new(self.inner.clone())
    }

    /// Updates the settings of a specific replication.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_replication(&self) -> super::builder::net_app::UpdateReplication {
        super::builder::net_app::UpdateReplication::new(self.inner.clone())
    }

    /// Stop Cross Region Replication.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn stop_replication(&self) -> super::builder::net_app::StopReplication {
        super::builder::net_app::StopReplication::new(self.inner.clone())
    }

    /// Resume Cross Region Replication.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn resume_replication(&self) -> super::builder::net_app::ResumeReplication {
        super::builder::net_app::ResumeReplication::new(self.inner.clone())
    }

    /// Reverses direction of replication. Source becomes destination and
    /// destination becomes source.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn reverse_replication_direction(
        &self,
    ) -> super::builder::net_app::ReverseReplicationDirection {
        super::builder::net_app::ReverseReplicationDirection::new(self.inner.clone())
    }

    /// Establish replication peering.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn establish_peering(&self) -> super::builder::net_app::EstablishPeering {
        super::builder::net_app::EstablishPeering::new(self.inner.clone())
    }

    /// Syncs the replication. This will invoke one time volume data transfer from
    /// source to destination.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn sync_replication(&self) -> super::builder::net_app::SyncReplication {
        super::builder::net_app::SyncReplication::new(self.inner.clone())
    }

    /// Creates new backup vault
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_backup_vault(&self) -> super::builder::net_app::CreateBackupVault {
        super::builder::net_app::CreateBackupVault::new(self.inner.clone())
    }

    /// Returns the description of the specified backup vault
    pub fn get_backup_vault(&self) -> super::builder::net_app::GetBackupVault {
        super::builder::net_app::GetBackupVault::new(self.inner.clone())
    }

    /// Returns list of all available backup vaults.
    pub fn list_backup_vaults(&self) -> super::builder::net_app::ListBackupVaults {
        super::builder::net_app::ListBackupVaults::new(self.inner.clone())
    }

    /// Updates the settings of a specific backup vault.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_backup_vault(&self) -> super::builder::net_app::UpdateBackupVault {
        super::builder::net_app::UpdateBackupVault::new(self.inner.clone())
    }

    /// Warning! This operation will permanently delete the backup vault.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_backup_vault(&self) -> super::builder::net_app::DeleteBackupVault {
        super::builder::net_app::DeleteBackupVault::new(self.inner.clone())
    }

    /// Creates a backup from the volume specified in the request
    /// The backup can be created from the given snapshot if specified in the
    /// request. If no snapshot specified, there'll be a new snapshot taken to
    /// initiate the backup creation.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_backup(&self) -> super::builder::net_app::CreateBackup {
        super::builder::net_app::CreateBackup::new(self.inner.clone())
    }

    /// Returns the description of the specified backup
    pub fn get_backup(&self) -> super::builder::net_app::GetBackup {
        super::builder::net_app::GetBackup::new(self.inner.clone())
    }

    /// Returns descriptions of all backups for a backupVault.
    pub fn list_backups(&self) -> super::builder::net_app::ListBackups {
        super::builder::net_app::ListBackups::new(self.inner.clone())
    }

    /// Warning! This operation will permanently delete the backup.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_backup(&self) -> super::builder::net_app::DeleteBackup {
        super::builder::net_app::DeleteBackup::new(self.inner.clone())
    }

    /// Update backup with full spec.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_backup(&self) -> super::builder::net_app::UpdateBackup {
        super::builder::net_app::UpdateBackup::new(self.inner.clone())
    }

    /// Creates new backup policy
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_backup_policy(&self) -> super::builder::net_app::CreateBackupPolicy {
        super::builder::net_app::CreateBackupPolicy::new(self.inner.clone())
    }

    /// Returns the description of the specified backup policy by backup_policy_id.
    pub fn get_backup_policy(&self) -> super::builder::net_app::GetBackupPolicy {
        super::builder::net_app::GetBackupPolicy::new(self.inner.clone())
    }

    /// Returns list of all available backup policies.
    pub fn list_backup_policies(&self) -> super::builder::net_app::ListBackupPolicies {
        super::builder::net_app::ListBackupPolicies::new(self.inner.clone())
    }

    /// Updates settings of a specific backup policy.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_backup_policy(&self) -> super::builder::net_app::UpdateBackupPolicy {
        super::builder::net_app::UpdateBackupPolicy::new(self.inner.clone())
    }

    /// Warning! This operation will permanently delete the backup policy.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_backup_policy(&self) -> super::builder::net_app::DeleteBackupPolicy {
        super::builder::net_app::DeleteBackupPolicy::new(self.inner.clone())
    }

    /// Returns list of all quota rules in a location.
    pub fn list_quota_rules(&self) -> super::builder::net_app::ListQuotaRules {
        super::builder::net_app::ListQuotaRules::new(self.inner.clone())
    }

    /// Returns details of the specified quota rule.
    pub fn get_quota_rule(&self) -> super::builder::net_app::GetQuotaRule {
        super::builder::net_app::GetQuotaRule::new(self.inner.clone())
    }

    /// Creates a new quota rule.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_quota_rule(&self) -> super::builder::net_app::CreateQuotaRule {
        super::builder::net_app::CreateQuotaRule::new(self.inner.clone())
    }

    /// Updates a quota rule.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_quota_rule(&self) -> super::builder::net_app::UpdateQuotaRule {
        super::builder::net_app::UpdateQuotaRule::new(self.inner.clone())
    }

    /// Deletes a quota rule.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_quota_rule(&self) -> super::builder::net_app::DeleteQuotaRule {
        super::builder::net_app::DeleteQuotaRule::new(self.inner.clone())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(&self) -> super::builder::net_app::ListLocations {
        super::builder::net_app::ListLocations::new(self.inner.clone())
    }

    /// Gets information about a location.
    pub fn get_location(&self) -> super::builder::net_app::GetLocation {
        super::builder::net_app::GetLocation::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(&self) -> super::builder::net_app::ListOperations {
        super::builder::net_app::ListOperations::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(&self) -> super::builder::net_app::GetOperation {
        super::builder::net_app::GetOperation::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(&self) -> super::builder::net_app::DeleteOperation {
        super::builder::net_app::DeleteOperation::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(&self) -> super::builder::net_app::CancelOperation {
        super::builder::net_app::CancelOperation::new(self.inner.clone())
    }
}
