// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::CertificateAuthorityService].
///
/// Application developers may need to implement this trait to mock
/// `client::CertificateAuthorityService`.  In other use-cases, application developers only
/// use `client::CertificateAuthorityService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait CertificateAuthorityService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::CertificateAuthorityService::create_certificate].
    fn create_certificate(
        &self,
        _req: crate::model::CreateCertificateRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Certificate>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Certificate>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CertificateAuthorityService::get_certificate].
    fn get_certificate(
        &self,
        _req: crate::model::GetCertificateRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Certificate>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Certificate>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CertificateAuthorityService::list_certificates].
    fn list_certificates(
        &self,
        _req: crate::model::ListCertificatesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListCertificatesResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListCertificatesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CertificateAuthorityService::revoke_certificate].
    fn revoke_certificate(
        &self,
        _req: crate::model::RevokeCertificateRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Certificate>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Certificate>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CertificateAuthorityService::update_certificate].
    fn update_certificate(
        &self,
        _req: crate::model::UpdateCertificateRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Certificate>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Certificate>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CertificateAuthorityService::activate_certificate_authority].
    fn activate_certificate_authority(
        &self,
        _req: crate::model::ActivateCertificateAuthorityRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CertificateAuthorityService::create_certificate_authority].
    fn create_certificate_authority(
        &self,
        _req: crate::model::CreateCertificateAuthorityRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CertificateAuthorityService::disable_certificate_authority].
    fn disable_certificate_authority(
        &self,
        _req: crate::model::DisableCertificateAuthorityRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CertificateAuthorityService::enable_certificate_authority].
    fn enable_certificate_authority(
        &self,
        _req: crate::model::EnableCertificateAuthorityRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CertificateAuthorityService::fetch_certificate_authority_csr].
    fn fetch_certificate_authority_csr(
        &self,
        _req: crate::model::FetchCertificateAuthorityCsrRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::FetchCertificateAuthorityCsrResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<
                gax::response::Response<crate::model::FetchCertificateAuthorityCsrResponse>,
            >,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CertificateAuthorityService::get_certificate_authority].
    fn get_certificate_authority(
        &self,
        _req: crate::model::GetCertificateAuthorityRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::CertificateAuthority>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::CertificateAuthority>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CertificateAuthorityService::list_certificate_authorities].
    fn list_certificate_authorities(
        &self,
        _req: crate::model::ListCertificateAuthoritiesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::ListCertificateAuthoritiesResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<
                gax::response::Response<crate::model::ListCertificateAuthoritiesResponse>,
            >,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CertificateAuthorityService::undelete_certificate_authority].
    fn undelete_certificate_authority(
        &self,
        _req: crate::model::UndeleteCertificateAuthorityRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CertificateAuthorityService::delete_certificate_authority].
    fn delete_certificate_authority(
        &self,
        _req: crate::model::DeleteCertificateAuthorityRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CertificateAuthorityService::update_certificate_authority].
    fn update_certificate_authority(
        &self,
        _req: crate::model::UpdateCertificateAuthorityRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CertificateAuthorityService::create_ca_pool].
    fn create_ca_pool(
        &self,
        _req: crate::model::CreateCaPoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CertificateAuthorityService::update_ca_pool].
    fn update_ca_pool(
        &self,
        _req: crate::model::UpdateCaPoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CertificateAuthorityService::get_ca_pool].
    fn get_ca_pool(
        &self,
        _req: crate::model::GetCaPoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::CaPool>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::CaPool>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::CertificateAuthorityService::list_ca_pools].
    fn list_ca_pools(
        &self,
        _req: crate::model::ListCaPoolsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListCaPoolsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListCaPoolsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CertificateAuthorityService::delete_ca_pool].
    fn delete_ca_pool(
        &self,
        _req: crate::model::DeleteCaPoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CertificateAuthorityService::fetch_ca_certs].
    fn fetch_ca_certs(
        &self,
        _req: crate::model::FetchCaCertsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::FetchCaCertsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::FetchCaCertsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CertificateAuthorityService::get_certificate_revocation_list].
    fn get_certificate_revocation_list(
        &self,
        _req: crate::model::GetCertificateRevocationListRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::CertificateRevocationList>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::CertificateRevocationList>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CertificateAuthorityService::list_certificate_revocation_lists].
    fn list_certificate_revocation_lists(
        &self,
        _req: crate::model::ListCertificateRevocationListsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::ListCertificateRevocationListsResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<
                gax::response::Response<crate::model::ListCertificateRevocationListsResponse>,
            >,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CertificateAuthorityService::update_certificate_revocation_list].
    fn update_certificate_revocation_list(
        &self,
        _req: crate::model::UpdateCertificateRevocationListRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CertificateAuthorityService::create_certificate_template].
    fn create_certificate_template(
        &self,
        _req: crate::model::CreateCertificateTemplateRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CertificateAuthorityService::delete_certificate_template].
    fn delete_certificate_template(
        &self,
        _req: crate::model::DeleteCertificateTemplateRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CertificateAuthorityService::get_certificate_template].
    fn get_certificate_template(
        &self,
        _req: crate::model::GetCertificateTemplateRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::CertificateTemplate>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::CertificateTemplate>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CertificateAuthorityService::list_certificate_templates].
    fn list_certificate_templates(
        &self,
        _req: crate::model::ListCertificateTemplatesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::ListCertificateTemplatesResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListCertificateTemplatesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CertificateAuthorityService::update_certificate_template].
    fn update_certificate_template(
        &self,
        _req: crate::model::UpdateCertificateTemplateRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CertificateAuthorityService::list_locations].
    fn list_locations(
        &self,
        _req: location::model::ListLocationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<location::model::ListLocationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<location::model::ListLocationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CertificateAuthorityService::get_location].
    fn get_location(
        &self,
        _req: location::model::GetLocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<location::model::Location>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<location::model::Location>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CertificateAuthorityService::set_iam_policy].
    fn set_iam_policy(
        &self,
        _req: iam_v1::model::SetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<iam_v1::model::Policy>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<iam_v1::model::Policy>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::CertificateAuthorityService::get_iam_policy].
    fn get_iam_policy(
        &self,
        _req: iam_v1::model::GetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<iam_v1::model::Policy>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<iam_v1::model::Policy>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::CertificateAuthorityService::test_iam_permissions].
    fn test_iam_permissions(
        &self,
        _req: iam_v1::model::TestIamPermissionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<iam_v1::model::TestIamPermissionsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<iam_v1::model::TestIamPermissionsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CertificateAuthorityService::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CertificateAuthorityService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CertificateAuthorityService::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CertificateAuthorityService::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Returns the polling error policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_error_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        std::sync::Arc::new(gax::polling_error_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        std::sync::Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}
