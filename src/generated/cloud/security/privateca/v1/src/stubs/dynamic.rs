// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use std::sync::Arc;

/// A dyn-compatible, crate-private version of [super::CertificateAuthorityService].
#[async_trait::async_trait]
pub trait CertificateAuthorityService: std::fmt::Debug + Send + Sync {
    async fn create_certificate(
        &self,
        req: crate::model::CreateCertificateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Certificate>;

    async fn get_certificate(
        &self,
        req: crate::model::GetCertificateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Certificate>;

    async fn list_certificates(
        &self,
        req: crate::model::ListCertificatesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCertificatesResponse>;

    async fn revoke_certificate(
        &self,
        req: crate::model::RevokeCertificateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Certificate>;

    async fn update_certificate(
        &self,
        req: crate::model::UpdateCertificateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Certificate>;

    async fn activate_certificate_authority(
        &self,
        req: crate::model::ActivateCertificateAuthorityRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn create_certificate_authority(
        &self,
        req: crate::model::CreateCertificateAuthorityRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn disable_certificate_authority(
        &self,
        req: crate::model::DisableCertificateAuthorityRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn enable_certificate_authority(
        &self,
        req: crate::model::EnableCertificateAuthorityRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn fetch_certificate_authority_csr(
        &self,
        req: crate::model::FetchCertificateAuthorityCsrRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::FetchCertificateAuthorityCsrResponse>;

    async fn get_certificate_authority(
        &self,
        req: crate::model::GetCertificateAuthorityRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CertificateAuthority>;

    async fn list_certificate_authorities(
        &self,
        req: crate::model::ListCertificateAuthoritiesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCertificateAuthoritiesResponse>;

    async fn undelete_certificate_authority(
        &self,
        req: crate::model::UndeleteCertificateAuthorityRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_certificate_authority(
        &self,
        req: crate::model::DeleteCertificateAuthorityRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_certificate_authority(
        &self,
        req: crate::model::UpdateCertificateAuthorityRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn create_ca_pool(
        &self,
        req: crate::model::CreateCaPoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_ca_pool(
        &self,
        req: crate::model::UpdateCaPoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_ca_pool(
        &self,
        req: crate::model::GetCaPoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CaPool>;

    async fn list_ca_pools(
        &self,
        req: crate::model::ListCaPoolsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCaPoolsResponse>;

    async fn delete_ca_pool(
        &self,
        req: crate::model::DeleteCaPoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn fetch_ca_certs(
        &self,
        req: crate::model::FetchCaCertsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::FetchCaCertsResponse>;

    async fn get_certificate_revocation_list(
        &self,
        req: crate::model::GetCertificateRevocationListRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CertificateRevocationList>;

    async fn list_certificate_revocation_lists(
        &self,
        req: crate::model::ListCertificateRevocationListsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCertificateRevocationListsResponse>;

    async fn update_certificate_revocation_list(
        &self,
        req: crate::model::UpdateCertificateRevocationListRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn create_certificate_template(
        &self,
        req: crate::model::CreateCertificateTemplateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_certificate_template(
        &self,
        req: crate::model::DeleteCertificateTemplateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_certificate_template(
        &self,
        req: crate::model::GetCertificateTemplateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CertificateTemplate>;

    async fn list_certificate_templates(
        &self,
        req: crate::model::ListCertificateTemplatesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCertificateTemplatesResponse>;

    async fn update_certificate_template(
        &self,
        req: crate::model::UpdateCertificateTemplateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::ListLocationsResponse>;

    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::Location>;

    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy>;

    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy>;

    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::TestIamPermissionsResponse>;

    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<()>;

    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<()>;

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_error_policy::PollingErrorPolicy>;

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}

/// All implementations of [super::CertificateAuthorityService] also implement [CertificateAuthorityService].
#[async_trait::async_trait]
impl<T: super::CertificateAuthorityService> CertificateAuthorityService for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn create_certificate(
        &self,
        req: crate::model::CreateCertificateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Certificate> {
        T::create_certificate(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_certificate(
        &self,
        req: crate::model::GetCertificateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Certificate> {
        T::get_certificate(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_certificates(
        &self,
        req: crate::model::ListCertificatesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCertificatesResponse> {
        T::list_certificates(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn revoke_certificate(
        &self,
        req: crate::model::RevokeCertificateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Certificate> {
        T::revoke_certificate(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_certificate(
        &self,
        req: crate::model::UpdateCertificateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Certificate> {
        T::update_certificate(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn activate_certificate_authority(
        &self,
        req: crate::model::ActivateCertificateAuthorityRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::activate_certificate_authority(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_certificate_authority(
        &self,
        req: crate::model::CreateCertificateAuthorityRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_certificate_authority(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn disable_certificate_authority(
        &self,
        req: crate::model::DisableCertificateAuthorityRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::disable_certificate_authority(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn enable_certificate_authority(
        &self,
        req: crate::model::EnableCertificateAuthorityRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::enable_certificate_authority(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn fetch_certificate_authority_csr(
        &self,
        req: crate::model::FetchCertificateAuthorityCsrRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::FetchCertificateAuthorityCsrResponse> {
        T::fetch_certificate_authority_csr(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_certificate_authority(
        &self,
        req: crate::model::GetCertificateAuthorityRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CertificateAuthority> {
        T::get_certificate_authority(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_certificate_authorities(
        &self,
        req: crate::model::ListCertificateAuthoritiesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCertificateAuthoritiesResponse> {
        T::list_certificate_authorities(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn undelete_certificate_authority(
        &self,
        req: crate::model::UndeleteCertificateAuthorityRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::undelete_certificate_authority(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_certificate_authority(
        &self,
        req: crate::model::DeleteCertificateAuthorityRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_certificate_authority(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_certificate_authority(
        &self,
        req: crate::model::UpdateCertificateAuthorityRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_certificate_authority(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_ca_pool(
        &self,
        req: crate::model::CreateCaPoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_ca_pool(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_ca_pool(
        &self,
        req: crate::model::UpdateCaPoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_ca_pool(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_ca_pool(
        &self,
        req: crate::model::GetCaPoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CaPool> {
        T::get_ca_pool(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_ca_pools(
        &self,
        req: crate::model::ListCaPoolsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCaPoolsResponse> {
        T::list_ca_pools(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_ca_pool(
        &self,
        req: crate::model::DeleteCaPoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_ca_pool(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn fetch_ca_certs(
        &self,
        req: crate::model::FetchCaCertsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::FetchCaCertsResponse> {
        T::fetch_ca_certs(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_certificate_revocation_list(
        &self,
        req: crate::model::GetCertificateRevocationListRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CertificateRevocationList> {
        T::get_certificate_revocation_list(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_certificate_revocation_lists(
        &self,
        req: crate::model::ListCertificateRevocationListsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCertificateRevocationListsResponse> {
        T::list_certificate_revocation_lists(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_certificate_revocation_list(
        &self,
        req: crate::model::UpdateCertificateRevocationListRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_certificate_revocation_list(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_certificate_template(
        &self,
        req: crate::model::CreateCertificateTemplateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_certificate_template(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_certificate_template(
        &self,
        req: crate::model::DeleteCertificateTemplateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_certificate_template(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_certificate_template(
        &self,
        req: crate::model::GetCertificateTemplateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CertificateTemplate> {
        T::get_certificate_template(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_certificate_templates(
        &self,
        req: crate::model::ListCertificateTemplatesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCertificateTemplatesResponse> {
        T::list_certificate_templates(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_certificate_template(
        &self,
        req: crate::model::UpdateCertificateTemplateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_certificate_template(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::ListLocationsResponse> {
        T::list_locations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::Location> {
        T::get_location(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy> {
        T::set_iam_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy> {
        T::get_iam_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::TestIamPermissionsResponse> {
        T::test_iam_permissions(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse> {
        T::list_operations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::get_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<()> {
        T::delete_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<()> {
        T::cancel_operation(self, req, options).await
    }

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        T::get_polling_error_policy(self, options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        T::get_polling_backoff_policy(self, options)
    }
}
