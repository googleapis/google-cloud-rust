// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
use crate::Result;

/// Implements a [CertificateAuthorityService](super::stubs::CertificateAuthorityService) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct CertificateAuthorityService<T>
where
    T: super::stubs::CertificateAuthorityService + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> CertificateAuthorityService<T>
where
    T: super::stubs::CertificateAuthorityService + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> super::stubs::CertificateAuthorityService for CertificateAuthorityService<T>
where
    T: super::stubs::CertificateAuthorityService + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn create_certificate(
        &self,
        req: crate::model::CreateCertificateRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Certificate> {
        self.inner.create_certificate(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_certificate(
        &self,
        req: crate::model::GetCertificateRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Certificate> {
        self.inner.get_certificate(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_certificates(
        &self,
        req: crate::model::ListCertificatesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListCertificatesResponse> {
        self.inner.list_certificates(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn revoke_certificate(
        &self,
        req: crate::model::RevokeCertificateRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Certificate> {
        self.inner.revoke_certificate(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_certificate(
        &self,
        req: crate::model::UpdateCertificateRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Certificate> {
        self.inner.update_certificate(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn activate_certificate_authority(
        &self,
        req: crate::model::ActivateCertificateAuthorityRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner
            .activate_certificate_authority(req, options)
            .await
    }

    #[tracing::instrument(ret)]
    async fn create_certificate_authority(
        &self,
        req: crate::model::CreateCertificateAuthorityRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.create_certificate_authority(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn disable_certificate_authority(
        &self,
        req: crate::model::DisableCertificateAuthorityRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.disable_certificate_authority(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn enable_certificate_authority(
        &self,
        req: crate::model::EnableCertificateAuthorityRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.enable_certificate_authority(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn fetch_certificate_authority_csr(
        &self,
        req: crate::model::FetchCertificateAuthorityCsrRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::FetchCertificateAuthorityCsrResponse> {
        self.inner
            .fetch_certificate_authority_csr(req, options)
            .await
    }

    #[tracing::instrument(ret)]
    async fn get_certificate_authority(
        &self,
        req: crate::model::GetCertificateAuthorityRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::CertificateAuthority> {
        self.inner.get_certificate_authority(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_certificate_authorities(
        &self,
        req: crate::model::ListCertificateAuthoritiesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListCertificateAuthoritiesResponse> {
        self.inner.list_certificate_authorities(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn undelete_certificate_authority(
        &self,
        req: crate::model::UndeleteCertificateAuthorityRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner
            .undelete_certificate_authority(req, options)
            .await
    }

    #[tracing::instrument(ret)]
    async fn delete_certificate_authority(
        &self,
        req: crate::model::DeleteCertificateAuthorityRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.delete_certificate_authority(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_certificate_authority(
        &self,
        req: crate::model::UpdateCertificateAuthorityRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.update_certificate_authority(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_ca_pool(
        &self,
        req: crate::model::CreateCaPoolRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.create_ca_pool(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_ca_pool(
        &self,
        req: crate::model::UpdateCaPoolRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.update_ca_pool(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_ca_pool(
        &self,
        req: crate::model::GetCaPoolRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::CaPool> {
        self.inner.get_ca_pool(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_ca_pools(
        &self,
        req: crate::model::ListCaPoolsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListCaPoolsResponse> {
        self.inner.list_ca_pools(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_ca_pool(
        &self,
        req: crate::model::DeleteCaPoolRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.delete_ca_pool(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn fetch_ca_certs(
        &self,
        req: crate::model::FetchCaCertsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::FetchCaCertsResponse> {
        self.inner.fetch_ca_certs(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_certificate_revocation_list(
        &self,
        req: crate::model::GetCertificateRevocationListRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::CertificateRevocationList> {
        self.inner
            .get_certificate_revocation_list(req, options)
            .await
    }

    #[tracing::instrument(ret)]
    async fn list_certificate_revocation_lists(
        &self,
        req: crate::model::ListCertificateRevocationListsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListCertificateRevocationListsResponse> {
        self.inner
            .list_certificate_revocation_lists(req, options)
            .await
    }

    #[tracing::instrument(ret)]
    async fn update_certificate_revocation_list(
        &self,
        req: crate::model::UpdateCertificateRevocationListRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner
            .update_certificate_revocation_list(req, options)
            .await
    }

    #[tracing::instrument(ret)]
    async fn create_certificate_template(
        &self,
        req: crate::model::CreateCertificateTemplateRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.create_certificate_template(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_certificate_template(
        &self,
        req: crate::model::DeleteCertificateTemplateRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.delete_certificate_template(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_certificate_template(
        &self,
        req: crate::model::GetCertificateTemplateRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::CertificateTemplate> {
        self.inner.get_certificate_template(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_certificate_templates(
        &self,
        req: crate::model::ListCertificateTemplatesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListCertificateTemplatesResponse> {
        self.inner.list_certificate_templates(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_certificate_template(
        &self,
        req: crate::model::UpdateCertificateTemplateRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.update_certificate_template(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<location::model::ListLocationsResponse> {
        self.inner.list_locations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<location::model::Location> {
        self.inner.get_location(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<iam_v1::model::Policy> {
        self.inner.set_iam_policy(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<iam_v1::model::Policy> {
        self.inner.get_iam_policy(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<iam_v1::model::TestIamPermissionsResponse> {
        self.inner.test_iam_permissions(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::ListOperationsResponse> {
        self.inner.list_operations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.get_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<()> {
        self.inner.delete_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<()> {
        self.inner.cancel_operation(req, options).await
    }

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        self.inner.get_polling_error_policy(options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        self.inner.get_polling_backoff_policy(options)
    }
}
