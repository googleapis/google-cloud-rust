// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

/// Implements a client for the Managed Service for Apache Kafka API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_managedkafka_v1::client::ManagedKafka;
/// let client = ManagedKafka::builder().build().await?;
/// // use `client` to make requests to the Managed Service for Apache Kafka API.
/// # gax::client_builder::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// The service that a client application uses to manage Apache Kafka clusters,
/// topics and consumer groups.
///
/// # Configuration
///
/// To configure `ManagedKafka` use the `with_*` methods in the type returned
/// by [builder()][ManagedKafka::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://managedkafka.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::managed_kafka::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::managed_kafka::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `ManagedKafka` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ManagedKafka` in
/// an [Rc](std::rc::Rc) or [Arc](std::sync::Arc) to reuse it, because it
/// already uses an `Arc` internally.
#[derive(Clone, Debug)]
pub struct ManagedKafka {
    inner: std::sync::Arc<dyn super::stub::dynamic::ManagedKafka>,
}

impl ManagedKafka {
    /// Returns a builder for [ManagedKafka].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_managedkafka_v1::client::ManagedKafka;
    /// let client = ManagedKafka::builder().build().await?;
    /// # gax::client_builder::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::managed_kafka::ClientBuilder {
        gax::client_builder::internal::new_builder(super::builder::managed_kafka::client::Factory)
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::ManagedKafka + 'static,
    {
        Self {
            inner: std::sync::Arc::new(stub),
        }
    }

    pub(crate) async fn new(
        config: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<std::sync::Arc<dyn super::stub::dynamic::ManagedKafka>> {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(std::sync::Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(std::sync::Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<impl super::stub::ManagedKafka> {
        super::transport::ManagedKafka::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<impl super::stub::ManagedKafka> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::ManagedKafka::new)
    }

    /// Lists the clusters in a given project and location.
    pub fn list_clusters(&self) -> super::builder::managed_kafka::ListClusters {
        super::builder::managed_kafka::ListClusters::new(self.inner.clone())
    }

    /// Returns the properties of a single cluster.
    pub fn get_cluster(&self) -> super::builder::managed_kafka::GetCluster {
        super::builder::managed_kafka::GetCluster::new(self.inner.clone())
    }

    /// Creates a new cluster in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_cluster(&self) -> super::builder::managed_kafka::CreateCluster {
        super::builder::managed_kafka::CreateCluster::new(self.inner.clone())
    }

    /// Updates the properties of a single cluster.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_cluster(&self) -> super::builder::managed_kafka::UpdateCluster {
        super::builder::managed_kafka::UpdateCluster::new(self.inner.clone())
    }

    /// Deletes a single cluster.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_cluster(&self) -> super::builder::managed_kafka::DeleteCluster {
        super::builder::managed_kafka::DeleteCluster::new(self.inner.clone())
    }

    /// Lists the topics in a given cluster.
    pub fn list_topics(&self) -> super::builder::managed_kafka::ListTopics {
        super::builder::managed_kafka::ListTopics::new(self.inner.clone())
    }

    /// Returns the properties of a single topic.
    pub fn get_topic(&self) -> super::builder::managed_kafka::GetTopic {
        super::builder::managed_kafka::GetTopic::new(self.inner.clone())
    }

    /// Creates a new topic in a given project and location.
    pub fn create_topic(&self) -> super::builder::managed_kafka::CreateTopic {
        super::builder::managed_kafka::CreateTopic::new(self.inner.clone())
    }

    /// Updates the properties of a single topic.
    pub fn update_topic(&self) -> super::builder::managed_kafka::UpdateTopic {
        super::builder::managed_kafka::UpdateTopic::new(self.inner.clone())
    }

    /// Deletes a single topic.
    pub fn delete_topic(&self) -> super::builder::managed_kafka::DeleteTopic {
        super::builder::managed_kafka::DeleteTopic::new(self.inner.clone())
    }

    /// Lists the consumer groups in a given cluster.
    pub fn list_consumer_groups(&self) -> super::builder::managed_kafka::ListConsumerGroups {
        super::builder::managed_kafka::ListConsumerGroups::new(self.inner.clone())
    }

    /// Returns the properties of a single consumer group.
    pub fn get_consumer_group(&self) -> super::builder::managed_kafka::GetConsumerGroup {
        super::builder::managed_kafka::GetConsumerGroup::new(self.inner.clone())
    }

    /// Updates the properties of a single consumer group.
    pub fn update_consumer_group(&self) -> super::builder::managed_kafka::UpdateConsumerGroup {
        super::builder::managed_kafka::UpdateConsumerGroup::new(self.inner.clone())
    }

    /// Deletes a single consumer group.
    pub fn delete_consumer_group(&self) -> super::builder::managed_kafka::DeleteConsumerGroup {
        super::builder::managed_kafka::DeleteConsumerGroup::new(self.inner.clone())
    }

    /// Lists the acls in a given cluster.
    pub fn list_acls(&self) -> super::builder::managed_kafka::ListAcls {
        super::builder::managed_kafka::ListAcls::new(self.inner.clone())
    }

    /// Returns the properties of a single acl.
    pub fn get_acl(&self) -> super::builder::managed_kafka::GetAcl {
        super::builder::managed_kafka::GetAcl::new(self.inner.clone())
    }

    /// Creates a new acl in the given project, location, and cluster.
    pub fn create_acl(&self) -> super::builder::managed_kafka::CreateAcl {
        super::builder::managed_kafka::CreateAcl::new(self.inner.clone())
    }

    /// Updates the properties of a single acl.
    pub fn update_acl(&self) -> super::builder::managed_kafka::UpdateAcl {
        super::builder::managed_kafka::UpdateAcl::new(self.inner.clone())
    }

    /// Deletes an acl.
    pub fn delete_acl(&self) -> super::builder::managed_kafka::DeleteAcl {
        super::builder::managed_kafka::DeleteAcl::new(self.inner.clone())
    }

    /// Incremental update: Adds an acl entry to an acl. Creates the acl if it does
    /// not exist yet.
    pub fn add_acl_entry(&self) -> super::builder::managed_kafka::AddAclEntry {
        super::builder::managed_kafka::AddAclEntry::new(self.inner.clone())
    }

    /// Incremental update: Removes an acl entry from an acl. Deletes the acl if
    /// its acl entries become empty (i.e. if the removed entry was the last one in
    /// the acl).
    pub fn remove_acl_entry(&self) -> super::builder::managed_kafka::RemoveAclEntry {
        super::builder::managed_kafka::RemoveAclEntry::new(self.inner.clone())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(&self) -> super::builder::managed_kafka::ListLocations {
        super::builder::managed_kafka::ListLocations::new(self.inner.clone())
    }

    /// Gets information about a location.
    pub fn get_location(&self) -> super::builder::managed_kafka::GetLocation {
        super::builder::managed_kafka::GetLocation::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(&self) -> super::builder::managed_kafka::ListOperations {
        super::builder::managed_kafka::ListOperations::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(&self) -> super::builder::managed_kafka::GetOperation {
        super::builder::managed_kafka::GetOperation::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(&self) -> super::builder::managed_kafka::DeleteOperation {
        super::builder::managed_kafka::DeleteOperation::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(&self) -> super::builder::managed_kafka::CancelOperation {
        super::builder::managed_kafka::CancelOperation::new(self.inner.clone())
    }
}

/// Implements a client for the Managed Service for Apache Kafka API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_managedkafka_v1::client::ManagedKafkaConnect;
/// let client = ManagedKafkaConnect::builder().build().await?;
/// // use `client` to make requests to the Managed Service for Apache Kafka API.
/// # gax::client_builder::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// The service that a client application uses to manage Apache Kafka Connect
/// clusters and connectors.
///
/// # Configuration
///
/// To configure `ManagedKafkaConnect` use the `with_*` methods in the type returned
/// by [builder()][ManagedKafkaConnect::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://managedkafka.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::managed_kafka_connect::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::managed_kafka_connect::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `ManagedKafkaConnect` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ManagedKafkaConnect` in
/// an [Rc](std::rc::Rc) or [Arc](std::sync::Arc) to reuse it, because it
/// already uses an `Arc` internally.
#[derive(Clone, Debug)]
pub struct ManagedKafkaConnect {
    inner: std::sync::Arc<dyn super::stub::dynamic::ManagedKafkaConnect>,
}

impl ManagedKafkaConnect {
    /// Returns a builder for [ManagedKafkaConnect].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_managedkafka_v1::client::ManagedKafkaConnect;
    /// let client = ManagedKafkaConnect::builder().build().await?;
    /// # gax::client_builder::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::managed_kafka_connect::ClientBuilder {
        gax::client_builder::internal::new_builder(
            super::builder::managed_kafka_connect::client::Factory,
        )
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::ManagedKafkaConnect + 'static,
    {
        Self {
            inner: std::sync::Arc::new(stub),
        }
    }

    pub(crate) async fn new(
        config: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<std::sync::Arc<dyn super::stub::dynamic::ManagedKafkaConnect>>
    {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(std::sync::Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(std::sync::Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<impl super::stub::ManagedKafkaConnect> {
        super::transport::ManagedKafkaConnect::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<impl super::stub::ManagedKafkaConnect> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::ManagedKafkaConnect::new)
    }

    /// Lists the Kafka Connect clusters in a given project and location.
    pub fn list_connect_clusters(
        &self,
    ) -> super::builder::managed_kafka_connect::ListConnectClusters {
        super::builder::managed_kafka_connect::ListConnectClusters::new(self.inner.clone())
    }

    /// Returns the properties of a single Kafka Connect cluster.
    pub fn get_connect_cluster(&self) -> super::builder::managed_kafka_connect::GetConnectCluster {
        super::builder::managed_kafka_connect::GetConnectCluster::new(self.inner.clone())
    }

    /// Creates a new Kafka Connect cluster in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_connect_cluster(
        &self,
    ) -> super::builder::managed_kafka_connect::CreateConnectCluster {
        super::builder::managed_kafka_connect::CreateConnectCluster::new(self.inner.clone())
    }

    /// Updates the properties of a single Kafka Connect cluster.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_connect_cluster(
        &self,
    ) -> super::builder::managed_kafka_connect::UpdateConnectCluster {
        super::builder::managed_kafka_connect::UpdateConnectCluster::new(self.inner.clone())
    }

    /// Deletes a single Connect cluster.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_connect_cluster(
        &self,
    ) -> super::builder::managed_kafka_connect::DeleteConnectCluster {
        super::builder::managed_kafka_connect::DeleteConnectCluster::new(self.inner.clone())
    }

    /// Lists the connectors in a given Connect cluster.
    pub fn list_connectors(&self) -> super::builder::managed_kafka_connect::ListConnectors {
        super::builder::managed_kafka_connect::ListConnectors::new(self.inner.clone())
    }

    /// Returns the properties of a single connector.
    pub fn get_connector(&self) -> super::builder::managed_kafka_connect::GetConnector {
        super::builder::managed_kafka_connect::GetConnector::new(self.inner.clone())
    }

    /// Creates a new connector in a given Connect cluster.
    pub fn create_connector(&self) -> super::builder::managed_kafka_connect::CreateConnector {
        super::builder::managed_kafka_connect::CreateConnector::new(self.inner.clone())
    }

    /// Updates the properties of a connector.
    pub fn update_connector(&self) -> super::builder::managed_kafka_connect::UpdateConnector {
        super::builder::managed_kafka_connect::UpdateConnector::new(self.inner.clone())
    }

    /// Deletes a connector.
    pub fn delete_connector(&self) -> super::builder::managed_kafka_connect::DeleteConnector {
        super::builder::managed_kafka_connect::DeleteConnector::new(self.inner.clone())
    }

    /// Pauses the connector and its tasks.
    pub fn pause_connector(&self) -> super::builder::managed_kafka_connect::PauseConnector {
        super::builder::managed_kafka_connect::PauseConnector::new(self.inner.clone())
    }

    /// Resumes the connector and its tasks.
    pub fn resume_connector(&self) -> super::builder::managed_kafka_connect::ResumeConnector {
        super::builder::managed_kafka_connect::ResumeConnector::new(self.inner.clone())
    }

    /// Restarts the connector.
    pub fn restart_connector(&self) -> super::builder::managed_kafka_connect::RestartConnector {
        super::builder::managed_kafka_connect::RestartConnector::new(self.inner.clone())
    }

    /// Stops the connector.
    pub fn stop_connector(&self) -> super::builder::managed_kafka_connect::StopConnector {
        super::builder::managed_kafka_connect::StopConnector::new(self.inner.clone())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(&self) -> super::builder::managed_kafka_connect::ListLocations {
        super::builder::managed_kafka_connect::ListLocations::new(self.inner.clone())
    }

    /// Gets information about a location.
    pub fn get_location(&self) -> super::builder::managed_kafka_connect::GetLocation {
        super::builder::managed_kafka_connect::GetLocation::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(&self) -> super::builder::managed_kafka_connect::ListOperations {
        super::builder::managed_kafka_connect::ListOperations::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(&self) -> super::builder::managed_kafka_connect::GetOperation {
        super::builder::managed_kafka_connect::GetOperation::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(&self) -> super::builder::managed_kafka_connect::DeleteOperation {
        super::builder::managed_kafka_connect::DeleteOperation::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(&self) -> super::builder::managed_kafka_connect::CancelOperation {
        super::builder::managed_kafka_connect::CancelOperation::new(self.inner.clone())
    }
}
