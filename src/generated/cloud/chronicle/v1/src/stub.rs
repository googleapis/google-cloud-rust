// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::DataAccessControlService].
///
/// Application developers may need to implement this trait to mock
/// `client::DataAccessControlService`.  In other use-cases, application developers only
/// use `client::DataAccessControlService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait DataAccessControlService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::DataAccessControlService::create_data_access_label].
    fn create_data_access_label(
        &self,
        _req: crate::model::CreateDataAccessLabelRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::DataAccessLabel>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::DataAccessLabel>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::DataAccessControlService::get_data_access_label].
    fn get_data_access_label(
        &self,
        _req: crate::model::GetDataAccessLabelRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::DataAccessLabel>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::DataAccessLabel>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::DataAccessControlService::list_data_access_labels].
    fn list_data_access_labels(
        &self,
        _req: crate::model::ListDataAccessLabelsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListDataAccessLabelsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListDataAccessLabelsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::DataAccessControlService::update_data_access_label].
    fn update_data_access_label(
        &self,
        _req: crate::model::UpdateDataAccessLabelRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::DataAccessLabel>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::DataAccessLabel>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::DataAccessControlService::delete_data_access_label].
    fn delete_data_access_label(
        &self,
        _req: crate::model::DeleteDataAccessLabelRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataAccessControlService::create_data_access_scope].
    fn create_data_access_scope(
        &self,
        _req: crate::model::CreateDataAccessScopeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::DataAccessScope>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::DataAccessScope>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::DataAccessControlService::get_data_access_scope].
    fn get_data_access_scope(
        &self,
        _req: crate::model::GetDataAccessScopeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::DataAccessScope>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::DataAccessScope>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::DataAccessControlService::list_data_access_scopes].
    fn list_data_access_scopes(
        &self,
        _req: crate::model::ListDataAccessScopesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListDataAccessScopesResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListDataAccessScopesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::DataAccessControlService::update_data_access_scope].
    fn update_data_access_scope(
        &self,
        _req: crate::model::UpdateDataAccessScopeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::DataAccessScope>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::DataAccessScope>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::DataAccessControlService::delete_data_access_scope].
    fn delete_data_access_scope(
        &self,
        _req: crate::model::DeleteDataAccessScopeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataAccessControlService::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::DataAccessControlService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::DataAccessControlService::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataAccessControlService::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }
}

/// Defines the trait used to implement [super::client::EntityService].
///
/// Application developers may need to implement this trait to mock
/// `client::EntityService`.  In other use-cases, application developers only
/// use `client::EntityService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait EntityService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::EntityService::get_watchlist].
    fn get_watchlist(
        &self,
        _req: crate::model::GetWatchlistRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Watchlist>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Watchlist>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::EntityService::list_watchlists].
    fn list_watchlists(
        &self,
        _req: crate::model::ListWatchlistsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListWatchlistsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListWatchlistsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::EntityService::create_watchlist].
    fn create_watchlist(
        &self,
        _req: crate::model::CreateWatchlistRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Watchlist>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Watchlist>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::EntityService::update_watchlist].
    fn update_watchlist(
        &self,
        _req: crate::model::UpdateWatchlistRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Watchlist>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Watchlist>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::EntityService::delete_watchlist].
    fn delete_watchlist(
        &self,
        _req: crate::model::DeleteWatchlistRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::EntityService::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::EntityService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::EntityService::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::EntityService::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }
}

/// Defines the trait used to implement [super::client::InstanceService].
///
/// Application developers may need to implement this trait to mock
/// `client::InstanceService`.  In other use-cases, application developers only
/// use `client::InstanceService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait InstanceService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::InstanceService::get_instance].
    fn get_instance(
        &self,
        _req: crate::model::GetInstanceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Instance>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Instance>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::InstanceService::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::InstanceService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::InstanceService::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::InstanceService::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }
}

/// Defines the trait used to implement [super::client::ReferenceListService].
///
/// Application developers may need to implement this trait to mock
/// `client::ReferenceListService`.  In other use-cases, application developers only
/// use `client::ReferenceListService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait ReferenceListService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::ReferenceListService::get_reference_list].
    fn get_reference_list(
        &self,
        _req: crate::model::GetReferenceListRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ReferenceList>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::ReferenceList>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::ReferenceListService::list_reference_lists].
    fn list_reference_lists(
        &self,
        _req: crate::model::ListReferenceListsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListReferenceListsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListReferenceListsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::ReferenceListService::create_reference_list].
    fn create_reference_list(
        &self,
        _req: crate::model::CreateReferenceListRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ReferenceList>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::ReferenceList>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::ReferenceListService::update_reference_list].
    fn update_reference_list(
        &self,
        _req: crate::model::UpdateReferenceListRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ReferenceList>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::ReferenceList>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::ReferenceListService::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::ReferenceListService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::ReferenceListService::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::ReferenceListService::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }
}

/// Defines the trait used to implement [super::client::RuleService].
///
/// Application developers may need to implement this trait to mock
/// `client::RuleService`.  In other use-cases, application developers only
/// use `client::RuleService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait RuleService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::RuleService::create_rule].
    fn create_rule(
        &self,
        _req: crate::model::CreateRuleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Rule>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Rule>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::RuleService::get_rule].
    fn get_rule(
        &self,
        _req: crate::model::GetRuleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Rule>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Rule>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::RuleService::list_rules].
    fn list_rules(
        &self,
        _req: crate::model::ListRulesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListRulesResponse>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::ListRulesResponse>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::RuleService::update_rule].
    fn update_rule(
        &self,
        _req: crate::model::UpdateRuleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Rule>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Rule>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::RuleService::delete_rule].
    fn delete_rule(
        &self,
        _req: crate::model::DeleteRuleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::RuleService::list_rule_revisions].
    fn list_rule_revisions(
        &self,
        _req: crate::model::ListRuleRevisionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListRuleRevisionsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListRuleRevisionsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::RuleService::create_retrohunt].
    fn create_retrohunt(
        &self,
        _req: crate::model::CreateRetrohuntRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::RuleService::get_retrohunt].
    fn get_retrohunt(
        &self,
        _req: crate::model::GetRetrohuntRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Retrohunt>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Retrohunt>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::RuleService::list_retrohunts].
    fn list_retrohunts(
        &self,
        _req: crate::model::ListRetrohuntsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListRetrohuntsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListRetrohuntsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::RuleService::get_rule_deployment].
    fn get_rule_deployment(
        &self,
        _req: crate::model::GetRuleDeploymentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::RuleDeployment>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::RuleDeployment>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::RuleService::list_rule_deployments].
    fn list_rule_deployments(
        &self,
        _req: crate::model::ListRuleDeploymentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListRuleDeploymentsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListRuleDeploymentsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::RuleService::update_rule_deployment].
    fn update_rule_deployment(
        &self,
        _req: crate::model::UpdateRuleDeploymentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::RuleDeployment>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::RuleDeployment>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::RuleService::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::RuleService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::RuleService::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::RuleService::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Returns the polling error policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_error_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        std::sync::Arc::new(gax::polling_error_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        std::sync::Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}
