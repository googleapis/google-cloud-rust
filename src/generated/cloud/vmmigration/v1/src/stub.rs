// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;
use std::sync::Arc;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::VmMigration].
///
/// Application developers may need to implement this trait to mock
/// `client::VmMigration`.  In other use-cases, application developers only
/// use `client::VmMigration` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait VmMigration: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::VmMigration::list_sources].
    fn list_sources(
        &self,
        _req: crate::model::ListSourcesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListSourcesResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListSourcesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::VmMigration::get_source].
    fn get_source(
        &self,
        _req: crate::model::GetSourceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Source>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Source>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::VmMigration::create_source].
    fn create_source(
        &self,
        _req: crate::model::CreateSourceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::update_source].
    fn update_source(
        &self,
        _req: crate::model::UpdateSourceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::delete_source].
    fn delete_source(
        &self,
        _req: crate::model::DeleteSourceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::fetch_inventory].
    fn fetch_inventory(
        &self,
        _req: crate::model::FetchInventoryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::FetchInventoryResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::FetchInventoryResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::VmMigration::list_utilization_reports].
    fn list_utilization_reports(
        &self,
        _req: crate::model::ListUtilizationReportsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::ListUtilizationReportsResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListUtilizationReportsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::VmMigration::get_utilization_report].
    fn get_utilization_report(
        &self,
        _req: crate::model::GetUtilizationReportRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::UtilizationReport>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::UtilizationReport>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::create_utilization_report].
    fn create_utilization_report(
        &self,
        _req: crate::model::CreateUtilizationReportRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::delete_utilization_report].
    fn delete_utilization_report(
        &self,
        _req: crate::model::DeleteUtilizationReportRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::list_datacenter_connectors].
    fn list_datacenter_connectors(
        &self,
        _req: crate::model::ListDatacenterConnectorsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::ListDatacenterConnectorsResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListDatacenterConnectorsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::VmMigration::get_datacenter_connector].
    fn get_datacenter_connector(
        &self,
        _req: crate::model::GetDatacenterConnectorRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::DatacenterConnector>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::DatacenterConnector>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::VmMigration::create_datacenter_connector].
    fn create_datacenter_connector(
        &self,
        _req: crate::model::CreateDatacenterConnectorRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::delete_datacenter_connector].
    fn delete_datacenter_connector(
        &self,
        _req: crate::model::DeleteDatacenterConnectorRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::upgrade_appliance].
    fn upgrade_appliance(
        &self,
        _req: crate::model::UpgradeApplianceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::create_migrating_vm].
    fn create_migrating_vm(
        &self,
        _req: crate::model::CreateMigratingVmRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::list_migrating_vms].
    fn list_migrating_vms(
        &self,
        _req: crate::model::ListMigratingVmsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListMigratingVmsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListMigratingVmsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::VmMigration::get_migrating_vm].
    fn get_migrating_vm(
        &self,
        _req: crate::model::GetMigratingVmRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::MigratingVm>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::MigratingVm>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::update_migrating_vm].
    fn update_migrating_vm(
        &self,
        _req: crate::model::UpdateMigratingVmRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::delete_migrating_vm].
    fn delete_migrating_vm(
        &self,
        _req: crate::model::DeleteMigratingVmRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::start_migration].
    fn start_migration(
        &self,
        _req: crate::model::StartMigrationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::resume_migration].
    fn resume_migration(
        &self,
        _req: crate::model::ResumeMigrationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::pause_migration].
    fn pause_migration(
        &self,
        _req: crate::model::PauseMigrationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::finalize_migration].
    fn finalize_migration(
        &self,
        _req: crate::model::FinalizeMigrationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::create_clone_job].
    fn create_clone_job(
        &self,
        _req: crate::model::CreateCloneJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::cancel_clone_job].
    fn cancel_clone_job(
        &self,
        _req: crate::model::CancelCloneJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::list_clone_jobs].
    fn list_clone_jobs(
        &self,
        _req: crate::model::ListCloneJobsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListCloneJobsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListCloneJobsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::VmMigration::get_clone_job].
    fn get_clone_job(
        &self,
        _req: crate::model::GetCloneJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::CloneJob>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::CloneJob>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::VmMigration::create_cutover_job].
    fn create_cutover_job(
        &self,
        _req: crate::model::CreateCutoverJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::cancel_cutover_job].
    fn cancel_cutover_job(
        &self,
        _req: crate::model::CancelCutoverJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::list_cutover_jobs].
    fn list_cutover_jobs(
        &self,
        _req: crate::model::ListCutoverJobsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListCutoverJobsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListCutoverJobsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::VmMigration::get_cutover_job].
    fn get_cutover_job(
        &self,
        _req: crate::model::GetCutoverJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::CutoverJob>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::CutoverJob>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::VmMigration::list_groups].
    fn list_groups(
        &self,
        _req: crate::model::ListGroupsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListGroupsResponse>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::ListGroupsResponse>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::get_group].
    fn get_group(
        &self,
        _req: crate::model::GetGroupRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Group>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Group>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::VmMigration::create_group].
    fn create_group(
        &self,
        _req: crate::model::CreateGroupRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::update_group].
    fn update_group(
        &self,
        _req: crate::model::UpdateGroupRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::delete_group].
    fn delete_group(
        &self,
        _req: crate::model::DeleteGroupRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::add_group_migration].
    fn add_group_migration(
        &self,
        _req: crate::model::AddGroupMigrationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::remove_group_migration].
    fn remove_group_migration(
        &self,
        _req: crate::model::RemoveGroupMigrationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::list_target_projects].
    fn list_target_projects(
        &self,
        _req: crate::model::ListTargetProjectsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListTargetProjectsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListTargetProjectsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::VmMigration::get_target_project].
    fn get_target_project(
        &self,
        _req: crate::model::GetTargetProjectRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::TargetProject>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::TargetProject>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::create_target_project].
    fn create_target_project(
        &self,
        _req: crate::model::CreateTargetProjectRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::update_target_project].
    fn update_target_project(
        &self,
        _req: crate::model::UpdateTargetProjectRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::delete_target_project].
    fn delete_target_project(
        &self,
        _req: crate::model::DeleteTargetProjectRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::list_replication_cycles].
    fn list_replication_cycles(
        &self,
        _req: crate::model::ListReplicationCyclesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::ListReplicationCyclesResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListReplicationCyclesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::VmMigration::get_replication_cycle].
    fn get_replication_cycle(
        &self,
        _req: crate::model::GetReplicationCycleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ReplicationCycle>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::ReplicationCycle>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::list_locations].
    fn list_locations(
        &self,
        _req: location::model::ListLocationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<location::model::ListLocationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<location::model::ListLocationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::VmMigration::get_location].
    fn get_location(
        &self,
        _req: location::model::GetLocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<location::model::Location>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<location::model::Location>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::VmMigration::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmMigration::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmMigration::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Returns the polling error policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_error_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        Arc::new(gax::polling_error_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}
