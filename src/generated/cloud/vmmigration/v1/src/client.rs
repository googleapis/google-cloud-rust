// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the VM Migration API.
///
/// # Service Description
///
/// VM Migration Service
///
/// # Configuration
///
/// `VmMigration` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `VmMigration` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `VmMigration` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct VmMigration {
    inner: Arc<dyn super::stub::dynamic::VmMigration>,
}

impl VmMigration {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::VmMigration + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stub::dynamic::VmMigration>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stub::VmMigration> {
        super::transport::VmMigration::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stub::VmMigration> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::VmMigration::new)
    }

    /// Lists Sources in a given project and location.
    pub fn list_sources(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::ListSources {
        super::builder::vm_migration::ListSources::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Gets details of a single Source.
    pub fn get_source(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::GetSource {
        super::builder::vm_migration::GetSource::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a new Source in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_source(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::CreateSource {
        super::builder::vm_migration::CreateSource::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of a single Source.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_source(
        &self,
        source: impl Into<crate::model::Source>,
    ) -> super::builder::vm_migration::UpdateSource {
        super::builder::vm_migration::UpdateSource::new(self.inner.clone())
            .set_source(source.into())
    }

    /// Deletes a single Source.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_source(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::DeleteSource {
        super::builder::vm_migration::DeleteSource::new(self.inner.clone()).set_name(name.into())
    }

    /// List remote source's inventory of VMs.
    /// The remote source is the onprem vCenter (remote in the sense it's not in
    /// Compute Engine). The inventory describes the list of existing VMs in that
    /// source. Note that this operation lists the VMs on the remote source, as
    /// opposed to listing the MigratingVms resources in the vmmigration service.
    pub fn fetch_inventory(
        &self,
        source: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::FetchInventory {
        super::builder::vm_migration::FetchInventory::new(self.inner.clone())
            .set_source(source.into())
    }

    /// Lists Utilization Reports of the given Source.
    pub fn list_utilization_reports(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::ListUtilizationReports {
        super::builder::vm_migration::ListUtilizationReports::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a single Utilization Report.
    pub fn get_utilization_report(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::GetUtilizationReport {
        super::builder::vm_migration::GetUtilizationReport::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new UtilizationReport.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_utilization_report(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::CreateUtilizationReport {
        super::builder::vm_migration::CreateUtilizationReport::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a single Utilization Report.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_utilization_report(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::DeleteUtilizationReport {
        super::builder::vm_migration::DeleteUtilizationReport::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists DatacenterConnectors in a given Source.
    pub fn list_datacenter_connectors(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::ListDatacenterConnectors {
        super::builder::vm_migration::ListDatacenterConnectors::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single DatacenterConnector.
    pub fn get_datacenter_connector(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::GetDatacenterConnector {
        super::builder::vm_migration::GetDatacenterConnector::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new DatacenterConnector in a given Source.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_datacenter_connector(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::CreateDatacenterConnector {
        super::builder::vm_migration::CreateDatacenterConnector::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a single DatacenterConnector.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_datacenter_connector(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::DeleteDatacenterConnector {
        super::builder::vm_migration::DeleteDatacenterConnector::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Upgrades the appliance relate to this DatacenterConnector to the in-place
    /// updateable version.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn upgrade_appliance(
        &self,
        datacenter_connector: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::UpgradeAppliance {
        super::builder::vm_migration::UpgradeAppliance::new(self.inner.clone())
            .set_datacenter_connector(datacenter_connector.into())
    }

    /// Creates a new MigratingVm in a given Source.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_migrating_vm(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::CreateMigratingVm {
        super::builder::vm_migration::CreateMigratingVm::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists MigratingVms in a given Source.
    pub fn list_migrating_vms(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::ListMigratingVms {
        super::builder::vm_migration::ListMigratingVms::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single MigratingVm.
    pub fn get_migrating_vm(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::GetMigratingVm {
        super::builder::vm_migration::GetMigratingVm::new(self.inner.clone()).set_name(name.into())
    }

    /// Updates the parameters of a single MigratingVm.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_migrating_vm(
        &self,
        migrating_vm: impl Into<crate::model::MigratingVm>,
    ) -> super::builder::vm_migration::UpdateMigratingVm {
        super::builder::vm_migration::UpdateMigratingVm::new(self.inner.clone())
            .set_migrating_vm(migrating_vm.into())
    }

    /// Deletes a single MigratingVm.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_migrating_vm(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::DeleteMigratingVm {
        super::builder::vm_migration::DeleteMigratingVm::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Starts migration for a VM. Starts the process of uploading
    /// data and creating snapshots, in replication cycles scheduled by the policy.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn start_migration(
        &self,
        migrating_vm: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::StartMigration {
        super::builder::vm_migration::StartMigration::new(self.inner.clone())
            .set_migrating_vm(migrating_vm.into())
    }

    /// Resumes a migration for a VM. When called on a paused migration, will start
    /// the process of uploading data and creating snapshots; when called on a
    /// completed cut-over migration, will update the migration to active state and
    /// start the process of uploading data and creating snapshots.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn resume_migration(
        &self,
        migrating_vm: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::ResumeMigration {
        super::builder::vm_migration::ResumeMigration::new(self.inner.clone())
            .set_migrating_vm(migrating_vm.into())
    }

    /// Pauses a migration for a VM. If cycle tasks are running they will be
    /// cancelled, preserving source task data. Further replication cycles will not
    /// be triggered while the VM is paused.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn pause_migration(
        &self,
        migrating_vm: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::PauseMigration {
        super::builder::vm_migration::PauseMigration::new(self.inner.clone())
            .set_migrating_vm(migrating_vm.into())
    }

    /// Marks a migration as completed, deleting migration resources that are no
    /// longer being used. Only applicable after cutover is done.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn finalize_migration(
        &self,
        migrating_vm: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::FinalizeMigration {
        super::builder::vm_migration::FinalizeMigration::new(self.inner.clone())
            .set_migrating_vm(migrating_vm.into())
    }

    /// Initiates a Clone of a specific migrating VM.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_clone_job(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::CreateCloneJob {
        super::builder::vm_migration::CreateCloneJob::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Initiates the cancellation of a running clone job.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn cancel_clone_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::CancelCloneJob {
        super::builder::vm_migration::CancelCloneJob::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists CloneJobs of a given migrating VM.
    pub fn list_clone_jobs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::ListCloneJobs {
        super::builder::vm_migration::ListCloneJobs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single CloneJob.
    pub fn get_clone_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::GetCloneJob {
        super::builder::vm_migration::GetCloneJob::new(self.inner.clone()).set_name(name.into())
    }

    /// Initiates a Cutover of a specific migrating VM.
    /// The returned LRO is completed when the cutover job resource is created
    /// and the job is initiated.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_cutover_job(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::CreateCutoverJob {
        super::builder::vm_migration::CreateCutoverJob::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Initiates the cancellation of a running cutover job.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn cancel_cutover_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::CancelCutoverJob {
        super::builder::vm_migration::CancelCutoverJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists CutoverJobs of a given migrating VM.
    pub fn list_cutover_jobs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::ListCutoverJobs {
        super::builder::vm_migration::ListCutoverJobs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single CutoverJob.
    pub fn get_cutover_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::GetCutoverJob {
        super::builder::vm_migration::GetCutoverJob::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists Groups in a given project and location.
    pub fn list_groups(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::ListGroups {
        super::builder::vm_migration::ListGroups::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Gets details of a single Group.
    pub fn get_group(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::GetGroup {
        super::builder::vm_migration::GetGroup::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a new Group in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_group(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::CreateGroup {
        super::builder::vm_migration::CreateGroup::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Updates the parameters of a single Group.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_group(
        &self,
        group: impl Into<crate::model::Group>,
    ) -> super::builder::vm_migration::UpdateGroup {
        super::builder::vm_migration::UpdateGroup::new(self.inner.clone()).set_group(group.into())
    }

    /// Deletes a single Group.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_group(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::DeleteGroup {
        super::builder::vm_migration::DeleteGroup::new(self.inner.clone()).set_name(name.into())
    }

    /// Adds a MigratingVm to a Group.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn add_group_migration(
        &self,
        group: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::AddGroupMigration {
        super::builder::vm_migration::AddGroupMigration::new(self.inner.clone())
            .set_group(group.into())
    }

    /// Removes a MigratingVm from a Group.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn remove_group_migration(
        &self,
        group: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::RemoveGroupMigration {
        super::builder::vm_migration::RemoveGroupMigration::new(self.inner.clone())
            .set_group(group.into())
    }

    /// Lists TargetProjects in a given project.
    ///
    /// NOTE: TargetProject is a global resource; hence the only supported value
    /// for location is `global`.
    pub fn list_target_projects(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::ListTargetProjects {
        super::builder::vm_migration::ListTargetProjects::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single TargetProject.
    ///
    /// NOTE: TargetProject is a global resource; hence the only supported value
    /// for location is `global`.
    pub fn get_target_project(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::GetTargetProject {
        super::builder::vm_migration::GetTargetProject::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new TargetProject in a given project.
    ///
    /// NOTE: TargetProject is a global resource; hence the only supported value
    /// for location is `global`.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_target_project(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::CreateTargetProject {
        super::builder::vm_migration::CreateTargetProject::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of a single TargetProject.
    ///
    /// NOTE: TargetProject is a global resource; hence the only supported value
    /// for location is `global`.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_target_project(
        &self,
        target_project: impl Into<crate::model::TargetProject>,
    ) -> super::builder::vm_migration::UpdateTargetProject {
        super::builder::vm_migration::UpdateTargetProject::new(self.inner.clone())
            .set_target_project(target_project.into())
    }

    /// Deletes a single TargetProject.
    ///
    /// NOTE: TargetProject is a global resource; hence the only supported value
    /// for location is `global`.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_target_project(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::DeleteTargetProject {
        super::builder::vm_migration::DeleteTargetProject::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists ReplicationCycles in a given MigratingVM.
    pub fn list_replication_cycles(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::ListReplicationCycles {
        super::builder::vm_migration::ListReplicationCycles::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single ReplicationCycle.
    pub fn get_replication_cycle(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::GetReplicationCycle {
        super::builder::vm_migration::GetReplicationCycle::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::ListLocations {
        super::builder::vm_migration::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::GetLocation {
        super::builder::vm_migration::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::ListOperations {
        super::builder::vm_migration::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::GetOperation {
        super::builder::vm_migration::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::DeleteOperation {
        super::builder::vm_migration::DeleteOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::vm_migration::CancelOperation {
        super::builder::vm_migration::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}
