// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::ReservationService].
///
/// Application developers may need to implement this trait to mock
/// `client::ReservationService`.  In other use-cases, application developers only
/// use `client::ReservationService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait ReservationService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::ReservationService::create_reservation].
    fn create_reservation(
        &self,
        _req: crate::model::CreateReservationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Reservation>> + Send {
        std::future::ready::<crate::Result<crate::model::Reservation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::ReservationService::list_reservations].
    fn list_reservations(
        &self,
        _req: crate::model::ListReservationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListReservationsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListReservationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::ReservationService::get_reservation].
    fn get_reservation(
        &self,
        _req: crate::model::GetReservationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Reservation>> + Send {
        std::future::ready::<crate::Result<crate::model::Reservation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::ReservationService::delete_reservation].
    fn delete_reservation(
        &self,
        _req: crate::model::DeleteReservationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<()>> + Send {
        std::future::ready::<crate::Result<()>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::ReservationService::update_reservation].
    fn update_reservation(
        &self,
        _req: crate::model::UpdateReservationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Reservation>> + Send {
        std::future::ready::<crate::Result<crate::model::Reservation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::ReservationService::failover_reservation].
    fn failover_reservation(
        &self,
        _req: crate::model::FailoverReservationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Reservation>> + Send {
        std::future::ready::<crate::Result<crate::model::Reservation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::ReservationService::create_capacity_commitment].
    fn create_capacity_commitment(
        &self,
        _req: crate::model::CreateCapacityCommitmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::CapacityCommitment>> + Send
    {
        std::future::ready::<crate::Result<crate::model::CapacityCommitment>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::ReservationService::list_capacity_commitments].
    fn list_capacity_commitments(
        &self,
        _req: crate::model::ListCapacityCommitmentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::ListCapacityCommitmentsResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::ListCapacityCommitmentsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::ReservationService::get_capacity_commitment].
    fn get_capacity_commitment(
        &self,
        _req: crate::model::GetCapacityCommitmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::CapacityCommitment>> + Send
    {
        std::future::ready::<crate::Result<crate::model::CapacityCommitment>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::ReservationService::delete_capacity_commitment].
    fn delete_capacity_commitment(
        &self,
        _req: crate::model::DeleteCapacityCommitmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<()>> + Send {
        std::future::ready::<crate::Result<()>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::ReservationService::update_capacity_commitment].
    fn update_capacity_commitment(
        &self,
        _req: crate::model::UpdateCapacityCommitmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::CapacityCommitment>> + Send
    {
        std::future::ready::<crate::Result<crate::model::CapacityCommitment>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::ReservationService::split_capacity_commitment].
    fn split_capacity_commitment(
        &self,
        _req: crate::model::SplitCapacityCommitmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::SplitCapacityCommitmentResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::SplitCapacityCommitmentResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::ReservationService::merge_capacity_commitments].
    fn merge_capacity_commitments(
        &self,
        _req: crate::model::MergeCapacityCommitmentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::CapacityCommitment>> + Send
    {
        std::future::ready::<crate::Result<crate::model::CapacityCommitment>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::ReservationService::create_assignment].
    fn create_assignment(
        &self,
        _req: crate::model::CreateAssignmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Assignment>> + Send {
        std::future::ready::<crate::Result<crate::model::Assignment>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::ReservationService::list_assignments].
    fn list_assignments(
        &self,
        _req: crate::model::ListAssignmentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListAssignmentsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListAssignmentsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::ReservationService::delete_assignment].
    fn delete_assignment(
        &self,
        _req: crate::model::DeleteAssignmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<()>> + Send {
        std::future::ready::<crate::Result<()>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::ReservationService::search_assignments].
    fn search_assignments(
        &self,
        _req: crate::model::SearchAssignmentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SearchAssignmentsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::SearchAssignmentsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::ReservationService::search_all_assignments].
    fn search_all_assignments(
        &self,
        _req: crate::model::SearchAllAssignmentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SearchAllAssignmentsResponse>>
    + Send {
        std::future::ready::<crate::Result<crate::model::SearchAllAssignmentsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::ReservationService::move_assignment].
    fn move_assignment(
        &self,
        _req: crate::model::MoveAssignmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Assignment>> + Send {
        std::future::ready::<crate::Result<crate::model::Assignment>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::ReservationService::update_assignment].
    fn update_assignment(
        &self,
        _req: crate::model::UpdateAssignmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Assignment>> + Send {
        std::future::ready::<crate::Result<crate::model::Assignment>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::ReservationService::get_bi_reservation].
    fn get_bi_reservation(
        &self,
        _req: crate::model::GetBiReservationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::BiReservation>> + Send {
        std::future::ready::<crate::Result<crate::model::BiReservation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::ReservationService::update_bi_reservation].
    fn update_bi_reservation(
        &self,
        _req: crate::model::UpdateBiReservationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::BiReservation>> + Send {
        std::future::ready::<crate::Result<crate::model::BiReservation>>(Err(Error::other(
            "unimplemented",
        )))
    }
}
