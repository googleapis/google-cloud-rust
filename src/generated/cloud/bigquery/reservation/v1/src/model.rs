// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate lazy_static;
extern crate reqwest;
extern crate rpc;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// A reservation is a mechanism used to guarantee slots to users.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Reservation {
    /// The resource name of the reservation, e.g.,
    /// `projects/*/locations/*/reservations/team1-prod`.
    /// The reservation_id must only contain lower case alphanumeric characters or
    /// dashes. It must start with a letter and must not end with a dash. Its
    /// maximum length is 64 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Baseline slots available to this reservation. A slot is a unit of
    /// computational power in BigQuery, and serves as the unit of parallelism.
    ///
    /// Queries using this reservation might use more slots during runtime if
    /// ignore_idle_slots is set to false, or autoscaling is enabled.
    ///
    /// The total slot_capacity of the reservation and its siblings
    /// may exceed the total slot_count of capacity commitments. In that case, the
    /// exceeding slots will be charged with the autoscale SKU. You can increase
    /// the number of baseline slots in a reservation every few minutes. If you
    /// want to decrease your baseline slots, you are limited to once an hour if
    /// you have recently changed your baseline slot capacity and your baseline
    /// slots exceed your committed slots. Otherwise, you can decrease your
    /// baseline slots every few minutes.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub slot_capacity: i64,

    /// If false, any query or pipeline job using this reservation will use idle
    /// slots from other reservations within the same admin project. If true, a
    /// query or pipeline job using this reservation will execute with the slot
    /// capacity specified in the slot_capacity field at most.
    pub ignore_idle_slots: bool,

    /// The configuration parameters for the auto scaling feature.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub autoscale: std::option::Option<crate::model::reservation::Autoscale>,

    /// Job concurrency target which sets a soft upper bound on the number of jobs
    /// that can run concurrently in this reservation. This is a soft target due to
    /// asynchronous nature of the system and various optimizations for small
    /// queries.
    /// Default value is 0 which means that concurrency target will be
    /// automatically computed by the system.
    /// NOTE: this field is exposed as target job concurrency in the Information
    /// Schema, DDL and BigQuery CLI.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub concurrency: i64,

    /// Output only. Creation time of the reservation.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub creation_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Last update time of the reservation.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Applicable only for reservations located within one of the BigQuery
    /// multi-regions (US or EU).
    ///
    /// If set to true, this reservation is placed in the organization's
    /// secondary region which is designated for disaster recovery purposes.
    /// If false, this reservation is placed in the organization's default region.
    ///
    /// NOTE: this is a preview feature. Project must be allow-listed in order to
    /// set this field.
    pub multi_region_auxiliary: bool,

    /// Edition of the reservation.
    pub edition: crate::model::Edition,

    /// Output only. The current location of the reservation's primary replica.
    /// This field is only set for reservations using the managed disaster recovery
    /// feature.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub primary_location: std::string::String,

    /// Optional. The current location of the reservation's secondary replica. This
    /// field is only set for reservations using the managed disaster recovery
    /// feature. Users can set this in create reservation calls
    /// to create a failover reservation or in update reservation calls to convert
    /// a non-failover reservation to a failover reservation(or vice versa).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub secondary_location: std::string::String,

    /// Output only. The location where the reservation was originally created.
    /// This is set only during the failover reservation's creation. All billing
    /// charges for the failover reservation will be applied to this location.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub original_primary_location: std::string::String,

    /// Output only. The Disaster Recovery(DR) replication status of the
    /// reservation. This is only available for the primary replicas of DR/failover
    /// reservations and provides information about the both the staleness of the
    /// secondary and the last error encountered while trying to replicate changes
    /// from the primary to the secondary. If this field is blank, it means that
    /// the reservation is either not a DR reservation or the reservation is a DR
    /// secondary or that any replication operations on the reservation have
    /// succeeded.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub replication_status: std::option::Option<crate::model::reservation::ReplicationStatus>,
}

impl Reservation {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Reservation::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [slot_capacity][crate::model::Reservation::slot_capacity].
    pub fn set_slot_capacity<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.slot_capacity = v.into();
        self
    }

    /// Sets the value of [ignore_idle_slots][crate::model::Reservation::ignore_idle_slots].
    pub fn set_ignore_idle_slots<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.ignore_idle_slots = v.into();
        self
    }

    /// Sets the value of [autoscale][crate::model::Reservation::autoscale].
    pub fn set_autoscale<
        T: std::convert::Into<std::option::Option<crate::model::reservation::Autoscale>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.autoscale = v.into();
        self
    }

    /// Sets the value of [concurrency][crate::model::Reservation::concurrency].
    pub fn set_concurrency<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.concurrency = v.into();
        self
    }

    /// Sets the value of [creation_time][crate::model::Reservation::creation_time].
    pub fn set_creation_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.creation_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Reservation::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [multi_region_auxiliary][crate::model::Reservation::multi_region_auxiliary].
    pub fn set_multi_region_auxiliary<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.multi_region_auxiliary = v.into();
        self
    }

    /// Sets the value of [edition][crate::model::Reservation::edition].
    pub fn set_edition<T: std::convert::Into<crate::model::Edition>>(mut self, v: T) -> Self {
        self.edition = v.into();
        self
    }

    /// Sets the value of [primary_location][crate::model::Reservation::primary_location].
    pub fn set_primary_location<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.primary_location = v.into();
        self
    }

    /// Sets the value of [secondary_location][crate::model::Reservation::secondary_location].
    pub fn set_secondary_location<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.secondary_location = v.into();
        self
    }

    /// Sets the value of [original_primary_location][crate::model::Reservation::original_primary_location].
    pub fn set_original_primary_location<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.original_primary_location = v.into();
        self
    }

    /// Sets the value of [replication_status][crate::model::Reservation::replication_status].
    pub fn set_replication_status<
        T: std::convert::Into<std::option::Option<crate::model::reservation::ReplicationStatus>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.replication_status = v.into();
        self
    }
}

impl wkt::message::Message for Reservation {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.Reservation"
    }
}

/// Defines additional types related to Reservation
pub mod reservation {
    #[allow(unused_imports)]
    use super::*;

    /// Auto scaling settings.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Autoscale {
        /// Output only. The slot capacity added to this reservation when autoscale
        /// happens. Will be between [0, max_slots]. Note: after users reduce
        /// max_slots, it may take a while before it can be propagated, so
        /// current_slots may stay in the original value and could be larger than
        /// max_slots for that brief period (less than one minute)
        #[serde_as(as = "serde_with::DisplayFromStr")]
        pub current_slots: i64,

        /// Number of slots to be scaled when needed.
        #[serde_as(as = "serde_with::DisplayFromStr")]
        pub max_slots: i64,
    }

    impl Autoscale {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [current_slots][crate::model::reservation::Autoscale::current_slots].
        pub fn set_current_slots<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
            self.current_slots = v.into();
            self
        }

        /// Sets the value of [max_slots][crate::model::reservation::Autoscale::max_slots].
        pub fn set_max_slots<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
            self.max_slots = v.into();
            self
        }
    }

    impl wkt::message::Message for Autoscale {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.bigquery.reservation.v1.Reservation.Autoscale"
        }
    }

    /// Disaster Recovery(DR) replication status of the reservation.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ReplicationStatus {
        /// Output only. The last error encountered while trying to replicate changes
        /// from the primary to the secondary. This field is only available if the
        /// replication has not succeeded since.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub error: std::option::Option<rpc::model::Status>,

        /// Output only. The time at which the last error was encountered while
        /// trying to replicate changes from the primary to the secondary. This field
        /// is only available if the replication has not succeeded since.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub last_error_time: std::option::Option<wkt::Timestamp>,

        /// Output only. A timestamp corresponding to the last change on the primary
        /// that was successfully replicated to the secondary.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub last_replication_time: std::option::Option<wkt::Timestamp>,
    }

    impl ReplicationStatus {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [error][crate::model::reservation::ReplicationStatus::error].
        pub fn set_error<T: std::convert::Into<std::option::Option<rpc::model::Status>>>(
            mut self,
            v: T,
        ) -> Self {
            self.error = v.into();
            self
        }

        /// Sets the value of [last_error_time][crate::model::reservation::ReplicationStatus::last_error_time].
        pub fn set_last_error_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
            mut self,
            v: T,
        ) -> Self {
            self.last_error_time = v.into();
            self
        }

        /// Sets the value of [last_replication_time][crate::model::reservation::ReplicationStatus::last_replication_time].
        pub fn set_last_replication_time<
            T: std::convert::Into<std::option::Option<wkt::Timestamp>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.last_replication_time = v.into();
            self
        }
    }

    impl wkt::message::Message for ReplicationStatus {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.bigquery.reservation.v1.Reservation.ReplicationStatus"
        }
    }
}

/// Capacity commitment is a way to purchase compute capacity for BigQuery jobs
/// (in the form of slots) with some committed period of usage. Annual
/// commitments renew by default. Commitments can be removed after their
/// commitment end time passes.
///
/// In order to remove annual commitment, its plan needs to be changed
/// to monthly or flex first.
///
/// A capacity commitment resource exists as a child resource of the admin
/// project.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CapacityCommitment {
    /// Output only. The resource name of the capacity commitment, e.g.,
    /// `projects/myproject/locations/US/capacityCommitments/123`
    /// The commitment_id must only contain lower case alphanumeric characters or
    /// dashes. It must start with a letter and must not end
    /// with a dash. Its maximum length is 64 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Number of slots in this commitment.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub slot_count: i64,

    /// Capacity commitment commitment plan.
    pub plan: crate::model::capacity_commitment::CommitmentPlan,

    /// Output only. State of the commitment.
    pub state: crate::model::capacity_commitment::State,

    /// Output only. The start of the current commitment period. It is applicable
    /// only for ACTIVE capacity commitments. Note after the commitment is renewed,
    /// commitment_start_time won't be changed. It refers to the start time of the
    /// original commitment.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub commitment_start_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The end of the current commitment period. It is applicable
    /// only for ACTIVE capacity commitments. Note after renewal,
    /// commitment_end_time is the time the renewed commitment expires. So it would
    /// be at a time after commitment_start_time + committed period, because we
    /// don't change commitment_start_time ,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub commitment_end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. For FAILED commitment plan, provides the reason of failure.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub failure_status: std::option::Option<rpc::model::Status>,

    /// The plan this capacity commitment is converted to after commitment_end_time
    /// passes. Once the plan is changed, committed period is extended according to
    /// commitment plan. Only applicable for ANNUAL and TRIAL commitments.
    pub renewal_plan: crate::model::capacity_commitment::CommitmentPlan,

    /// Applicable only for commitments located within one of the BigQuery
    /// multi-regions (US or EU).
    ///
    /// If set to true, this commitment is placed in the organization's
    /// secondary region which is designated for disaster recovery purposes.
    /// If false, this commitment is placed in the organization's default region.
    ///
    /// NOTE: this is a preview feature. Project must be allow-listed in order to
    /// set this field.
    pub multi_region_auxiliary: bool,

    /// Edition of the capacity commitment.
    pub edition: crate::model::Edition,

    /// Output only. If true, the commitment is a flat-rate commitment, otherwise,
    /// it's an edition commitment.
    pub is_flat_rate: bool,
}

impl CapacityCommitment {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::CapacityCommitment::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [slot_count][crate::model::CapacityCommitment::slot_count].
    pub fn set_slot_count<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.slot_count = v.into();
        self
    }

    /// Sets the value of [plan][crate::model::CapacityCommitment::plan].
    pub fn set_plan<T: std::convert::Into<crate::model::capacity_commitment::CommitmentPlan>>(
        mut self,
        v: T,
    ) -> Self {
        self.plan = v.into();
        self
    }

    /// Sets the value of [state][crate::model::CapacityCommitment::state].
    pub fn set_state<T: std::convert::Into<crate::model::capacity_commitment::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [commitment_start_time][crate::model::CapacityCommitment::commitment_start_time].
    pub fn set_commitment_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.commitment_start_time = v.into();
        self
    }

    /// Sets the value of [commitment_end_time][crate::model::CapacityCommitment::commitment_end_time].
    pub fn set_commitment_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.commitment_end_time = v.into();
        self
    }

    /// Sets the value of [failure_status][crate::model::CapacityCommitment::failure_status].
    pub fn set_failure_status<T: std::convert::Into<std::option::Option<rpc::model::Status>>>(
        mut self,
        v: T,
    ) -> Self {
        self.failure_status = v.into();
        self
    }

    /// Sets the value of [renewal_plan][crate::model::CapacityCommitment::renewal_plan].
    pub fn set_renewal_plan<
        T: std::convert::Into<crate::model::capacity_commitment::CommitmentPlan>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.renewal_plan = v.into();
        self
    }

    /// Sets the value of [multi_region_auxiliary][crate::model::CapacityCommitment::multi_region_auxiliary].
    pub fn set_multi_region_auxiliary<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.multi_region_auxiliary = v.into();
        self
    }

    /// Sets the value of [edition][crate::model::CapacityCommitment::edition].
    pub fn set_edition<T: std::convert::Into<crate::model::Edition>>(mut self, v: T) -> Self {
        self.edition = v.into();
        self
    }

    /// Sets the value of [is_flat_rate][crate::model::CapacityCommitment::is_flat_rate].
    pub fn set_is_flat_rate<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.is_flat_rate = v.into();
        self
    }
}

impl wkt::message::Message for CapacityCommitment {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.CapacityCommitment"
    }
}

/// Defines additional types related to CapacityCommitment
pub mod capacity_commitment {
    #[allow(unused_imports)]
    use super::*;

    /// Commitment plan defines the current committed period. Capacity commitment
    /// cannot be deleted during it's committed period.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct CommitmentPlan(i32);

    impl CommitmentPlan {
        /// Invalid plan value. Requests with this value will be rejected with
        /// error code `google.rpc.Code.INVALID_ARGUMENT`.
        pub const COMMITMENT_PLAN_UNSPECIFIED: CommitmentPlan = CommitmentPlan::new(0);

        /// Flex commitments have committed period of 1 minute after becoming ACTIVE.
        /// After that, they are not in a committed period anymore and can be removed
        /// any time.
        pub const FLEX: CommitmentPlan = CommitmentPlan::new(3);

        /// Same as FLEX, should only be used if flat-rate commitments are still
        /// available.
        pub const FLEX_FLAT_RATE: CommitmentPlan = CommitmentPlan::new(7);

        /// Trial commitments have a committed period of 182 days after becoming
        /// ACTIVE. After that, they are converted to a new commitment based on the
        /// `renewal_plan`. Default `renewal_plan` for Trial commitment is Flex so
        /// that it can be deleted right after committed period ends.
        pub const TRIAL: CommitmentPlan = CommitmentPlan::new(5);

        /// Monthly commitments have a committed period of 30 days after becoming
        /// ACTIVE. After that, they are not in a committed period anymore and can be
        /// removed any time.
        pub const MONTHLY: CommitmentPlan = CommitmentPlan::new(2);

        /// Same as MONTHLY, should only be used if flat-rate commitments are still
        /// available.
        pub const MONTHLY_FLAT_RATE: CommitmentPlan = CommitmentPlan::new(8);

        /// Annual commitments have a committed period of 365 days after becoming
        /// ACTIVE. After that they are converted to a new commitment based on the
        /// renewal_plan.
        pub const ANNUAL: CommitmentPlan = CommitmentPlan::new(4);

        /// Same as ANNUAL, should only be used if flat-rate commitments are still
        /// available.
        pub const ANNUAL_FLAT_RATE: CommitmentPlan = CommitmentPlan::new(9);

        /// 3-year commitments have a committed period of 1095(3 * 365) days after
        /// becoming ACTIVE. After that they are converted to a new commitment based
        /// on the renewal_plan.
        pub const THREE_YEAR: CommitmentPlan = CommitmentPlan::new(10);

        /// Should only be used for `renewal_plan` and is only meaningful if
        /// edition is specified to values other than EDITION_UNSPECIFIED. Otherwise
        /// CreateCapacityCommitmentRequest or UpdateCapacityCommitmentRequest will
        /// be rejected with error code `google.rpc.Code.INVALID_ARGUMENT`. If the
        /// renewal_plan is NONE, capacity commitment will be removed at the end of
        /// its commitment period.
        pub const NONE: CommitmentPlan = CommitmentPlan::new(6);

        /// Creates a new CommitmentPlan instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("COMMITMENT_PLAN_UNSPECIFIED"),
                2 => std::borrow::Cow::Borrowed("MONTHLY"),
                3 => std::borrow::Cow::Borrowed("FLEX"),
                4 => std::borrow::Cow::Borrowed("ANNUAL"),
                5 => std::borrow::Cow::Borrowed("TRIAL"),
                6 => std::borrow::Cow::Borrowed("NONE"),
                7 => std::borrow::Cow::Borrowed("FLEX_FLAT_RATE"),
                8 => std::borrow::Cow::Borrowed("MONTHLY_FLAT_RATE"),
                9 => std::borrow::Cow::Borrowed("ANNUAL_FLAT_RATE"),
                10 => std::borrow::Cow::Borrowed("THREE_YEAR"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "COMMITMENT_PLAN_UNSPECIFIED" => {
                    std::option::Option::Some(Self::COMMITMENT_PLAN_UNSPECIFIED)
                }
                "FLEX" => std::option::Option::Some(Self::FLEX),
                "FLEX_FLAT_RATE" => std::option::Option::Some(Self::FLEX_FLAT_RATE),
                "TRIAL" => std::option::Option::Some(Self::TRIAL),
                "MONTHLY" => std::option::Option::Some(Self::MONTHLY),
                "MONTHLY_FLAT_RATE" => std::option::Option::Some(Self::MONTHLY_FLAT_RATE),
                "ANNUAL" => std::option::Option::Some(Self::ANNUAL),
                "ANNUAL_FLAT_RATE" => std::option::Option::Some(Self::ANNUAL_FLAT_RATE),
                "THREE_YEAR" => std::option::Option::Some(Self::THREE_YEAR),
                "NONE" => std::option::Option::Some(Self::NONE),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for CommitmentPlan {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for CommitmentPlan {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Capacity commitment can either become ACTIVE right away or transition
    /// from PENDING to ACTIVE or FAILED.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// Invalid state value.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// Capacity commitment is pending provisioning. Pending capacity commitment
        /// does not contribute to the project's slot_capacity.
        pub const PENDING: State = State::new(1);

        /// Once slots are provisioned, capacity commitment becomes active.
        /// slot_count is added to the project's slot_capacity.
        pub const ACTIVE: State = State::new(2);

        /// Capacity commitment is failed to be activated by the backend.
        pub const FAILED: State = State::new(3);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("PENDING"),
                2 => std::borrow::Cow::Borrowed("ACTIVE"),
                3 => std::borrow::Cow::Borrowed("FAILED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "PENDING" => std::option::Option::Some(Self::PENDING),
                "ACTIVE" => std::option::Option::Some(Self::ACTIVE),
                "FAILED" => std::option::Option::Some(Self::FAILED),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// The request for
/// [ReservationService.CreateReservation][google.cloud.bigquery.reservation.v1.ReservationService.CreateReservation].
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.CreateReservation]: crate::client::ReservationService::create_reservation
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateReservationRequest {
    /// Required. Project, location. E.g.,
    /// `projects/myproject/locations/US`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The reservation ID. It must only contain lower case alphanumeric
    /// characters or dashes. It must start with a letter and must not end
    /// with a dash. Its maximum length is 64 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub reservation_id: std::string::String,

    /// Definition of the new reservation to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub reservation: std::option::Option<crate::model::Reservation>,
}

impl CreateReservationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateReservationRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [reservation_id][crate::model::CreateReservationRequest::reservation_id].
    pub fn set_reservation_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.reservation_id = v.into();
        self
    }

    /// Sets the value of [reservation][crate::model::CreateReservationRequest::reservation].
    pub fn set_reservation<
        T: std::convert::Into<std::option::Option<crate::model::Reservation>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.reservation = v.into();
        self
    }
}

impl wkt::message::Message for CreateReservationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.CreateReservationRequest"
    }
}

/// The request for
/// [ReservationService.ListReservations][google.cloud.bigquery.reservation.v1.ReservationService.ListReservations].
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.ListReservations]: crate::client::ReservationService::list_reservations
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListReservationsRequest {
    /// Required. The parent resource name containing project and location, e.g.:
    /// `projects/myproject/locations/US`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return per page.
    pub page_size: i32,

    /// The next_page_token value returned from a previous List request, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListReservationsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListReservationsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListReservationsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListReservationsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListReservationsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.ListReservationsRequest"
    }
}

/// The response for
/// [ReservationService.ListReservations][google.cloud.bigquery.reservation.v1.ReservationService.ListReservations].
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.ListReservations]: crate::client::ReservationService::list_reservations
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListReservationsResponse {
    /// List of reservations visible to the user.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub reservations: std::vec::Vec<crate::model::Reservation>,

    /// Token to retrieve the next page of results, or empty if there are no
    /// more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListReservationsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListReservationsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [reservations][crate::model::ListReservationsResponse::reservations].
    pub fn set_reservations<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Reservation>,
    {
        use std::iter::Iterator;
        self.reservations = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListReservationsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.ListReservationsResponse"
    }
}

impl gax::paginator::PageableResponse for ListReservationsResponse {
    type PageItem = crate::model::Reservation;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.reservations
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// The request for
/// [ReservationService.GetReservation][google.cloud.bigquery.reservation.v1.ReservationService.GetReservation].
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.GetReservation]: crate::client::ReservationService::get_reservation
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetReservationRequest {
    /// Required. Resource name of the reservation to retrieve. E.g.,
    /// `projects/myproject/locations/US/reservations/team1-prod`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetReservationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetReservationRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetReservationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.GetReservationRequest"
    }
}

/// The request for
/// [ReservationService.DeleteReservation][google.cloud.bigquery.reservation.v1.ReservationService.DeleteReservation].
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.DeleteReservation]: crate::client::ReservationService::delete_reservation
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteReservationRequest {
    /// Required. Resource name of the reservation to retrieve. E.g.,
    /// `projects/myproject/locations/US/reservations/team1-prod`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteReservationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteReservationRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteReservationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.DeleteReservationRequest"
    }
}

/// The request for
/// [ReservationService.UpdateReservation][google.cloud.bigquery.reservation.v1.ReservationService.UpdateReservation].
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.UpdateReservation]: crate::client::ReservationService::update_reservation
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateReservationRequest {
    /// Content of the reservation to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub reservation: std::option::Option<crate::model::Reservation>,

    /// Standard field mask for the set of fields to be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateReservationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [reservation][crate::model::UpdateReservationRequest::reservation].
    pub fn set_reservation<
        T: std::convert::Into<std::option::Option<crate::model::Reservation>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.reservation = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateReservationRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateReservationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.UpdateReservationRequest"
    }
}

/// The request for ReservationService.FailoverReservation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct FailoverReservationRequest {
    /// Required. Resource name of the reservation to failover. E.g.,
    /// `projects/myproject/locations/US/reservations/team1-prod`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl FailoverReservationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::FailoverReservationRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for FailoverReservationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.FailoverReservationRequest"
    }
}

/// The request for
/// [ReservationService.CreateCapacityCommitment][google.cloud.bigquery.reservation.v1.ReservationService.CreateCapacityCommitment].
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.CreateCapacityCommitment]: crate::client::ReservationService::create_capacity_commitment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateCapacityCommitmentRequest {
    /// Required. Resource name of the parent reservation. E.g.,
    /// `projects/myproject/locations/US`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Content of the capacity commitment to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub capacity_commitment: std::option::Option<crate::model::CapacityCommitment>,

    /// If true, fail the request if another project in the organization has a
    /// capacity commitment.
    pub enforce_single_admin_project_per_org: bool,

    /// The optional capacity commitment ID. Capacity commitment name will be
    /// generated automatically if this field is empty.
    /// This field must only contain lower case alphanumeric characters or dashes.
    /// The first and last character cannot be a dash. Max length is 64 characters.
    /// NOTE: this ID won't be kept if the capacity commitment is split or merged.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub capacity_commitment_id: std::string::String,
}

impl CreateCapacityCommitmentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateCapacityCommitmentRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [capacity_commitment][crate::model::CreateCapacityCommitmentRequest::capacity_commitment].
    pub fn set_capacity_commitment<
        T: std::convert::Into<std::option::Option<crate::model::CapacityCommitment>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.capacity_commitment = v.into();
        self
    }

    /// Sets the value of [enforce_single_admin_project_per_org][crate::model::CreateCapacityCommitmentRequest::enforce_single_admin_project_per_org].
    pub fn set_enforce_single_admin_project_per_org<T: std::convert::Into<bool>>(
        mut self,
        v: T,
    ) -> Self {
        self.enforce_single_admin_project_per_org = v.into();
        self
    }

    /// Sets the value of [capacity_commitment_id][crate::model::CreateCapacityCommitmentRequest::capacity_commitment_id].
    pub fn set_capacity_commitment_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.capacity_commitment_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateCapacityCommitmentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.CreateCapacityCommitmentRequest"
    }
}

/// The request for
/// [ReservationService.ListCapacityCommitments][google.cloud.bigquery.reservation.v1.ReservationService.ListCapacityCommitments].
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.ListCapacityCommitments]: crate::client::ReservationService::list_capacity_commitments
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListCapacityCommitmentsRequest {
    /// Required. Resource name of the parent reservation. E.g.,
    /// `projects/myproject/locations/US`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return.
    pub page_size: i32,

    /// The next_page_token value returned from a previous List request, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListCapacityCommitmentsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListCapacityCommitmentsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListCapacityCommitmentsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListCapacityCommitmentsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListCapacityCommitmentsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsRequest"
    }
}

/// The response for
/// [ReservationService.ListCapacityCommitments][google.cloud.bigquery.reservation.v1.ReservationService.ListCapacityCommitments].
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.ListCapacityCommitments]: crate::client::ReservationService::list_capacity_commitments
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListCapacityCommitmentsResponse {
    /// List of capacity commitments visible to the user.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub capacity_commitments: std::vec::Vec<crate::model::CapacityCommitment>,

    /// Token to retrieve the next page of results, or empty if there are no
    /// more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListCapacityCommitmentsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListCapacityCommitmentsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [capacity_commitments][crate::model::ListCapacityCommitmentsResponse::capacity_commitments].
    pub fn set_capacity_commitments<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::CapacityCommitment>,
    {
        use std::iter::Iterator;
        self.capacity_commitments = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListCapacityCommitmentsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsResponse"
    }
}

impl gax::paginator::PageableResponse for ListCapacityCommitmentsResponse {
    type PageItem = crate::model::CapacityCommitment;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.capacity_commitments
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// The request for
/// [ReservationService.GetCapacityCommitment][google.cloud.bigquery.reservation.v1.ReservationService.GetCapacityCommitment].
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.GetCapacityCommitment]: crate::client::ReservationService::get_capacity_commitment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetCapacityCommitmentRequest {
    /// Required. Resource name of the capacity commitment to retrieve. E.g.,
    /// `projects/myproject/locations/US/capacityCommitments/123`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetCapacityCommitmentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetCapacityCommitmentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetCapacityCommitmentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.GetCapacityCommitmentRequest"
    }
}

/// The request for
/// [ReservationService.DeleteCapacityCommitment][google.cloud.bigquery.reservation.v1.ReservationService.DeleteCapacityCommitment].
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.DeleteCapacityCommitment]: crate::client::ReservationService::delete_capacity_commitment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteCapacityCommitmentRequest {
    /// Required. Resource name of the capacity commitment to delete. E.g.,
    /// `projects/myproject/locations/US/capacityCommitments/123`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Can be used to force delete commitments even if assignments exist. Deleting
    /// commitments with assignments may cause queries to fail if they no longer
    /// have access to slots.
    pub force: bool,
}

impl DeleteCapacityCommitmentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteCapacityCommitmentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [force][crate::model::DeleteCapacityCommitmentRequest::force].
    pub fn set_force<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.force = v.into();
        self
    }
}

impl wkt::message::Message for DeleteCapacityCommitmentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.DeleteCapacityCommitmentRequest"
    }
}

/// The request for
/// [ReservationService.UpdateCapacityCommitment][google.cloud.bigquery.reservation.v1.ReservationService.UpdateCapacityCommitment].
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.UpdateCapacityCommitment]: crate::client::ReservationService::update_capacity_commitment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateCapacityCommitmentRequest {
    /// Content of the capacity commitment to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub capacity_commitment: std::option::Option<crate::model::CapacityCommitment>,

    /// Standard field mask for the set of fields to be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateCapacityCommitmentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [capacity_commitment][crate::model::UpdateCapacityCommitmentRequest::capacity_commitment].
    pub fn set_capacity_commitment<
        T: std::convert::Into<std::option::Option<crate::model::CapacityCommitment>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.capacity_commitment = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateCapacityCommitmentRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateCapacityCommitmentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.UpdateCapacityCommitmentRequest"
    }
}

/// The request for
/// [ReservationService.SplitCapacityCommitment][google.cloud.bigquery.reservation.v1.ReservationService.SplitCapacityCommitment].
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.SplitCapacityCommitment]: crate::client::ReservationService::split_capacity_commitment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SplitCapacityCommitmentRequest {
    /// Required. The resource name e.g.,:
    /// `projects/myproject/locations/US/capacityCommitments/123`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Number of slots in the capacity commitment after the split.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub slot_count: i64,
}

impl SplitCapacityCommitmentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::SplitCapacityCommitmentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [slot_count][crate::model::SplitCapacityCommitmentRequest::slot_count].
    pub fn set_slot_count<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.slot_count = v.into();
        self
    }
}

impl wkt::message::Message for SplitCapacityCommitmentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentRequest"
    }
}

/// The response for
/// [ReservationService.SplitCapacityCommitment][google.cloud.bigquery.reservation.v1.ReservationService.SplitCapacityCommitment].
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.SplitCapacityCommitment]: crate::client::ReservationService::split_capacity_commitment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SplitCapacityCommitmentResponse {
    /// First capacity commitment, result of a split.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub first: std::option::Option<crate::model::CapacityCommitment>,

    /// Second capacity commitment, result of a split.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub second: std::option::Option<crate::model::CapacityCommitment>,
}

impl SplitCapacityCommitmentResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [first][crate::model::SplitCapacityCommitmentResponse::first].
    pub fn set_first<
        T: std::convert::Into<std::option::Option<crate::model::CapacityCommitment>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.first = v.into();
        self
    }

    /// Sets the value of [second][crate::model::SplitCapacityCommitmentResponse::second].
    pub fn set_second<
        T: std::convert::Into<std::option::Option<crate::model::CapacityCommitment>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.second = v.into();
        self
    }
}

impl wkt::message::Message for SplitCapacityCommitmentResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentResponse"
    }
}

/// The request for
/// [ReservationService.MergeCapacityCommitments][google.cloud.bigquery.reservation.v1.ReservationService.MergeCapacityCommitments].
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.MergeCapacityCommitments]: crate::client::ReservationService::merge_capacity_commitments
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MergeCapacityCommitmentsRequest {
    /// Parent resource that identifies admin project and location e.g.,
    /// `projects/myproject/locations/us`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Ids of capacity commitments to merge.
    /// These capacity commitments must exist under admin project and location
    /// specified in the parent.
    /// ID is the last portion of capacity commitment name e.g., 'abc' for
    /// projects/myproject/locations/US/capacityCommitments/abc
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub capacity_commitment_ids: std::vec::Vec<std::string::String>,
}

impl MergeCapacityCommitmentsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::MergeCapacityCommitmentsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [capacity_commitment_ids][crate::model::MergeCapacityCommitmentsRequest::capacity_commitment_ids].
    pub fn set_capacity_commitment_ids<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.capacity_commitment_ids = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for MergeCapacityCommitmentsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.MergeCapacityCommitmentsRequest"
    }
}

/// An assignment allows a project to submit jobs
/// of a certain type using slots from the specified reservation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Assignment {
    /// Output only. Name of the resource. E.g.:
    /// `projects/myproject/locations/US/reservations/team1-prod/assignments/123`.
    /// The assignment_id must only contain lower case alphanumeric characters or
    /// dashes and the max length is 64 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The resource which will use the reservation. E.g.
    /// `projects/myproject`, `folders/123`, or `organizations/456`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub assignee: std::string::String,

    /// Which type of jobs will use the reservation.
    pub job_type: crate::model::assignment::JobType,

    /// Output only. State of the assignment.
    pub state: crate::model::assignment::State,

    /// Optional. This field controls if "Gemini in BigQuery"
    /// (<https://cloud.google.com/gemini/docs/bigquery/overview>) features should be
    /// enabled for this reservation assignment, which is not on by default.
    /// "Gemini in BigQuery" has a distinct compliance posture from BigQuery.  If
    /// this field is set to true, the assignment job type is QUERY, and
    /// the parent reservation edition is ENTERPRISE_PLUS, then the assignment will
    /// give the grantee project/organization access to "Gemini in BigQuery"
    /// features.
    pub enable_gemini_in_bigquery: bool,
}

impl Assignment {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Assignment::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [assignee][crate::model::Assignment::assignee].
    pub fn set_assignee<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.assignee = v.into();
        self
    }

    /// Sets the value of [job_type][crate::model::Assignment::job_type].
    pub fn set_job_type<T: std::convert::Into<crate::model::assignment::JobType>>(
        mut self,
        v: T,
    ) -> Self {
        self.job_type = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Assignment::state].
    pub fn set_state<T: std::convert::Into<crate::model::assignment::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [enable_gemini_in_bigquery][crate::model::Assignment::enable_gemini_in_bigquery].
    pub fn set_enable_gemini_in_bigquery<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_gemini_in_bigquery = v.into();
        self
    }
}

impl wkt::message::Message for Assignment {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.Assignment"
    }
}

/// Defines additional types related to Assignment
pub mod assignment {
    #[allow(unused_imports)]
    use super::*;

    /// Types of job, which could be specified when using the reservation.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct JobType(i32);

    impl JobType {
        /// Invalid type. Requests with this value will be rejected with
        /// error code `google.rpc.Code.INVALID_ARGUMENT`.
        pub const JOB_TYPE_UNSPECIFIED: JobType = JobType::new(0);

        /// Pipeline (load/export) jobs from the project will use the reservation.
        pub const PIPELINE: JobType = JobType::new(1);

        /// Query jobs from the project will use the reservation.
        pub const QUERY: JobType = JobType::new(2);

        /// BigQuery ML jobs that use services external to BigQuery for model
        /// training. These jobs will not utilize idle slots from other reservations.
        pub const ML_EXTERNAL: JobType = JobType::new(3);

        /// Background jobs that BigQuery runs for the customers in the background.
        pub const BACKGROUND: JobType = JobType::new(4);

        /// Continuous SQL jobs will use this reservation. Reservations with
        /// continuous assignments cannot be mixed with non-continuous assignments.
        pub const CONTINUOUS: JobType = JobType::new(6);

        /// Creates a new JobType instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("JOB_TYPE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("PIPELINE"),
                2 => std::borrow::Cow::Borrowed("QUERY"),
                3 => std::borrow::Cow::Borrowed("ML_EXTERNAL"),
                4 => std::borrow::Cow::Borrowed("BACKGROUND"),
                6 => std::borrow::Cow::Borrowed("CONTINUOUS"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "JOB_TYPE_UNSPECIFIED" => std::option::Option::Some(Self::JOB_TYPE_UNSPECIFIED),
                "PIPELINE" => std::option::Option::Some(Self::PIPELINE),
                "QUERY" => std::option::Option::Some(Self::QUERY),
                "ML_EXTERNAL" => std::option::Option::Some(Self::ML_EXTERNAL),
                "BACKGROUND" => std::option::Option::Some(Self::BACKGROUND),
                "CONTINUOUS" => std::option::Option::Some(Self::CONTINUOUS),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for JobType {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for JobType {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Assignment will remain in PENDING state if no active capacity commitment is
    /// present. It will become ACTIVE when some capacity commitment becomes
    /// active.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// Invalid state value.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// Queries from assignee will be executed as on-demand, if related
        /// assignment is pending.
        pub const PENDING: State = State::new(1);

        /// Assignment is ready.
        pub const ACTIVE: State = State::new(2);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("PENDING"),
                2 => std::borrow::Cow::Borrowed("ACTIVE"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "PENDING" => std::option::Option::Some(Self::PENDING),
                "ACTIVE" => std::option::Option::Some(Self::ACTIVE),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// The request for
/// [ReservationService.CreateAssignment][google.cloud.bigquery.reservation.v1.ReservationService.CreateAssignment].
/// Note: "bigquery.reservationAssignments.create" permission is required on the
/// related assignee.
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.CreateAssignment]: crate::client::ReservationService::create_assignment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateAssignmentRequest {
    /// Required. The parent resource name of the assignment
    /// E.g. `projects/myproject/locations/US/reservations/team1-prod`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Assignment resource to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub assignment: std::option::Option<crate::model::Assignment>,

    /// The optional assignment ID. Assignment name will be generated automatically
    /// if this field is empty.
    /// This field must only contain lower case alphanumeric characters or dashes.
    /// Max length is 64 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub assignment_id: std::string::String,
}

impl CreateAssignmentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateAssignmentRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [assignment][crate::model::CreateAssignmentRequest::assignment].
    pub fn set_assignment<T: std::convert::Into<std::option::Option<crate::model::Assignment>>>(
        mut self,
        v: T,
    ) -> Self {
        self.assignment = v.into();
        self
    }

    /// Sets the value of [assignment_id][crate::model::CreateAssignmentRequest::assignment_id].
    pub fn set_assignment_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.assignment_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateAssignmentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.CreateAssignmentRequest"
    }
}

/// The request for
/// [ReservationService.ListAssignments][google.cloud.bigquery.reservation.v1.ReservationService.ListAssignments].
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.ListAssignments]: crate::client::ReservationService::list_assignments
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListAssignmentsRequest {
    /// Required. The parent resource name e.g.:
    ///
    /// `projects/myproject/locations/US/reservations/team1-prod`
    ///
    /// Or:
    ///
    /// `projects/myproject/locations/US/reservations/-`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return per page.
    pub page_size: i32,

    /// The next_page_token value returned from a previous List request, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListAssignmentsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListAssignmentsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListAssignmentsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListAssignmentsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListAssignmentsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.ListAssignmentsRequest"
    }
}

/// The response for
/// [ReservationService.ListAssignments][google.cloud.bigquery.reservation.v1.ReservationService.ListAssignments].
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.ListAssignments]: crate::client::ReservationService::list_assignments
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListAssignmentsResponse {
    /// List of assignments visible to the user.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub assignments: std::vec::Vec<crate::model::Assignment>,

    /// Token to retrieve the next page of results, or empty if there are no
    /// more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListAssignmentsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListAssignmentsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [assignments][crate::model::ListAssignmentsResponse::assignments].
    pub fn set_assignments<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Assignment>,
    {
        use std::iter::Iterator;
        self.assignments = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListAssignmentsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.ListAssignmentsResponse"
    }
}

impl gax::paginator::PageableResponse for ListAssignmentsResponse {
    type PageItem = crate::model::Assignment;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.assignments
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// The request for
/// [ReservationService.DeleteAssignment][google.cloud.bigquery.reservation.v1.ReservationService.DeleteAssignment].
/// Note: "bigquery.reservationAssignments.delete" permission is required on the
/// related assignee.
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.DeleteAssignment]: crate::client::ReservationService::delete_assignment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteAssignmentRequest {
    /// Required. Name of the resource, e.g.
    /// `projects/myproject/locations/US/reservations/team1-prod/assignments/123`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteAssignmentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteAssignmentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteAssignmentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.DeleteAssignmentRequest"
    }
}

/// The request for
/// [ReservationService.SearchAssignments][google.cloud.bigquery.reservation.v1.ReservationService.SearchAssignments].
/// Note: "bigquery.reservationAssignments.search" permission is required on the
/// related assignee.
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.SearchAssignments]: crate::client::ReservationService::search_assignments
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SearchAssignmentsRequest {
    /// Required. The resource name of the admin project(containing project and
    /// location), e.g.:
    /// `projects/myproject/locations/US`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Please specify resource name as assignee in the query.
    ///
    /// Examples:
    ///
    /// * `assignee=projects/myproject`
    /// * `assignee=folders/123`
    /// * `assignee=organizations/456`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub query: std::string::String,

    /// The maximum number of items to return per page.
    pub page_size: i32,

    /// The next_page_token value returned from a previous List request, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl SearchAssignmentsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::SearchAssignmentsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [query][crate::model::SearchAssignmentsRequest::query].
    pub fn set_query<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.query = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::SearchAssignmentsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::SearchAssignmentsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for SearchAssignmentsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.SearchAssignmentsRequest"
    }
}

/// The request for
/// [ReservationService.SearchAllAssignments][google.cloud.bigquery.reservation.v1.ReservationService.SearchAllAssignments].
/// Note: "bigquery.reservationAssignments.search" permission is required on the
/// related assignee.
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.SearchAllAssignments]: crate::client::ReservationService::search_all_assignments
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SearchAllAssignmentsRequest {
    /// Required. The resource name with location (project name could be the
    /// wildcard '-'), e.g.:
    /// `projects/-/locations/US`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Please specify resource name as assignee in the query.
    ///
    /// Examples:
    ///
    /// * `assignee=projects/myproject`
    /// * `assignee=folders/123`
    /// * `assignee=organizations/456`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub query: std::string::String,

    /// The maximum number of items to return per page.
    pub page_size: i32,

    /// The next_page_token value returned from a previous List request, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl SearchAllAssignmentsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::SearchAllAssignmentsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [query][crate::model::SearchAllAssignmentsRequest::query].
    pub fn set_query<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.query = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::SearchAllAssignmentsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::SearchAllAssignmentsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for SearchAllAssignmentsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.SearchAllAssignmentsRequest"
    }
}

/// The response for
/// [ReservationService.SearchAssignments][google.cloud.bigquery.reservation.v1.ReservationService.SearchAssignments].
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.SearchAssignments]: crate::client::ReservationService::search_assignments
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SearchAssignmentsResponse {
    /// List of assignments visible to the user.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub assignments: std::vec::Vec<crate::model::Assignment>,

    /// Token to retrieve the next page of results, or empty if there are no
    /// more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl SearchAssignmentsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::SearchAssignmentsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [assignments][crate::model::SearchAssignmentsResponse::assignments].
    pub fn set_assignments<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Assignment>,
    {
        use std::iter::Iterator;
        self.assignments = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SearchAssignmentsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.SearchAssignmentsResponse"
    }
}

impl gax::paginator::PageableResponse for SearchAssignmentsResponse {
    type PageItem = crate::model::Assignment;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.assignments
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// The response for
/// [ReservationService.SearchAllAssignments][google.cloud.bigquery.reservation.v1.ReservationService.SearchAllAssignments].
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.SearchAllAssignments]: crate::client::ReservationService::search_all_assignments
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SearchAllAssignmentsResponse {
    /// List of assignments visible to the user.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub assignments: std::vec::Vec<crate::model::Assignment>,

    /// Token to retrieve the next page of results, or empty if there are no
    /// more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl SearchAllAssignmentsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::SearchAllAssignmentsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [assignments][crate::model::SearchAllAssignmentsResponse::assignments].
    pub fn set_assignments<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Assignment>,
    {
        use std::iter::Iterator;
        self.assignments = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SearchAllAssignmentsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.SearchAllAssignmentsResponse"
    }
}

impl gax::paginator::PageableResponse for SearchAllAssignmentsResponse {
    type PageItem = crate::model::Assignment;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.assignments
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// The request for
/// [ReservationService.MoveAssignment][google.cloud.bigquery.reservation.v1.ReservationService.MoveAssignment].
///
/// **Note**: "bigquery.reservationAssignments.create" permission is required on
/// the destination_id.
///
/// **Note**: "bigquery.reservationAssignments.create" and
/// "bigquery.reservationAssignments.delete" permission are required on the
/// related assignee.
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.MoveAssignment]: crate::client::ReservationService::move_assignment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MoveAssignmentRequest {
    /// Required. The resource name of the assignment,
    /// e.g.
    /// `projects/myproject/locations/US/reservations/team1-prod/assignments/123`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The new reservation ID, e.g.:
    /// `projects/myotherproject/locations/US/reservations/team2-prod`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub destination_id: std::string::String,

    /// The optional assignment ID. A new assignment name is generated if this
    /// field is empty.
    ///
    /// This field can contain only lowercase alphanumeric characters or dashes.
    /// Max length is 64 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub assignment_id: std::string::String,
}

impl MoveAssignmentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::MoveAssignmentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [destination_id][crate::model::MoveAssignmentRequest::destination_id].
    pub fn set_destination_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.destination_id = v.into();
        self
    }

    /// Sets the value of [assignment_id][crate::model::MoveAssignmentRequest::assignment_id].
    pub fn set_assignment_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.assignment_id = v.into();
        self
    }
}

impl wkt::message::Message for MoveAssignmentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.MoveAssignmentRequest"
    }
}

/// The request for
/// [ReservationService.UpdateAssignment][google.cloud.bigquery.reservation.v1.ReservationService.UpdateAssignment].
///
/// [google.cloud.bigquery.reservation.v1.ReservationService.UpdateAssignment]: crate::client::ReservationService::update_assignment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateAssignmentRequest {
    /// Content of the assignment to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub assignment: std::option::Option<crate::model::Assignment>,

    /// Standard field mask for the set of fields to be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateAssignmentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [assignment][crate::model::UpdateAssignmentRequest::assignment].
    pub fn set_assignment<T: std::convert::Into<std::option::Option<crate::model::Assignment>>>(
        mut self,
        v: T,
    ) -> Self {
        self.assignment = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateAssignmentRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateAssignmentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.UpdateAssignmentRequest"
    }
}

/// Fully qualified reference to BigQuery table.
/// Internally stored as google.cloud.bi.v1.BqTableReference.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TableReference {
    /// The assigned project ID of the project.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub project_id: std::string::String,

    /// The ID of the dataset in the above project.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub dataset_id: std::string::String,

    /// The ID of the table in the above dataset.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub table_id: std::string::String,
}

impl TableReference {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [project_id][crate::model::TableReference::project_id].
    pub fn set_project_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.project_id = v.into();
        self
    }

    /// Sets the value of [dataset_id][crate::model::TableReference::dataset_id].
    pub fn set_dataset_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.dataset_id = v.into();
        self
    }

    /// Sets the value of [table_id][crate::model::TableReference::table_id].
    pub fn set_table_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.table_id = v.into();
        self
    }
}

impl wkt::message::Message for TableReference {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.TableReference"
    }
}

/// Represents a BI Reservation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BiReservation {
    /// The resource name of the singleton BI reservation.
    /// Reservation names have the form
    /// `projects/{project_id}/locations/{location_id}/biReservation`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The last update timestamp of a reservation.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Size of a reservation, in bytes.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub size: i64,

    /// Preferred tables to use BI capacity for.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub preferred_tables: std::vec::Vec<crate::model::TableReference>,
}

impl BiReservation {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::BiReservation::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::BiReservation::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [size][crate::model::BiReservation::size].
    pub fn set_size<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.size = v.into();
        self
    }

    /// Sets the value of [preferred_tables][crate::model::BiReservation::preferred_tables].
    pub fn set_preferred_tables<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TableReference>,
    {
        use std::iter::Iterator;
        self.preferred_tables = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BiReservation {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.BiReservation"
    }
}

/// A request to get a singleton BI reservation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetBiReservationRequest {
    /// Required. Name of the requested reservation, for example:
    /// `projects/{project_id}/locations/{location_id}/biReservation`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetBiReservationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetBiReservationRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetBiReservationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.GetBiReservationRequest"
    }
}

/// A request to update a BI reservation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateBiReservationRequest {
    /// A reservation to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub bi_reservation: std::option::Option<crate::model::BiReservation>,

    /// A list of fields to be updated in this request.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateBiReservationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [bi_reservation][crate::model::UpdateBiReservationRequest::bi_reservation].
    pub fn set_bi_reservation<
        T: std::convert::Into<std::option::Option<crate::model::BiReservation>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.bi_reservation = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateBiReservationRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateBiReservationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.reservation.v1.UpdateBiReservationRequest"
    }
}

/// The type of editions.
/// Different features and behaviors are provided to different editions
/// Capacity commitments and reservations are linked to editions.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct Edition(i32);

impl Edition {
    /// Default value, which will be treated as ENTERPRISE.
    pub const EDITION_UNSPECIFIED: Edition = Edition::new(0);

    /// Standard edition.
    pub const STANDARD: Edition = Edition::new(1);

    /// Enterprise edition.
    pub const ENTERPRISE: Edition = Edition::new(2);

    /// Enterprise Plus edition.
    pub const ENTERPRISE_PLUS: Edition = Edition::new(3);

    /// Creates a new Edition instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("EDITION_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("STANDARD"),
            2 => std::borrow::Cow::Borrowed("ENTERPRISE"),
            3 => std::borrow::Cow::Borrowed("ENTERPRISE_PLUS"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "EDITION_UNSPECIFIED" => std::option::Option::Some(Self::EDITION_UNSPECIFIED),
            "STANDARD" => std::option::Option::Some(Self::STANDARD),
            "ENTERPRISE" => std::option::Option::Some(Self::ENTERPRISE),
            "ENTERPRISE_PLUS" => std::option::Option::Some(Self::ENTERPRISE_PLUS),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for Edition {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for Edition {
    fn default() -> Self {
        Self::new(0)
    }
}
