// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gaxi;
extern crate iam_v1;
extern crate lazy_static;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// A data exchange is a container that lets you share data. Along with the
/// descriptive information about the data exchange, it contains listings that
/// reference shared datasets.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DataExchange {
    /// Output only. The resource name of the data exchange.
    /// e.g. `projects/myproject/locations/US/dataExchanges/123`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. Human-readable display name of the data exchange. The display
    /// name must contain only Unicode letters, numbers (0-9), underscores (_),
    /// dashes (-), spaces ( ), ampersands (&) and must not start or end with
    /// spaces. Default value is an empty string. Max length: 63 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Optional. Description of the data exchange. The description must not
    /// contain Unicode non-characters as well as C0 and C1 control codes except
    /// tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF).
    /// Default value is an empty string.
    /// Max length: 2000 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. Email or URL of the primary point of contact of the data
    /// exchange. Max Length: 1000 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub primary_contact: std::string::String,

    /// Optional. Documentation describing the data exchange.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub documentation: std::string::String,

    /// Output only. Number of listings contained in the data exchange.
    pub listing_count: i32,

    /// Optional. Base64 encoded image representing the data exchange. Max
    /// Size: 3.0MiB Expected image dimensions are 512x512 pixels, however the API
    /// only performs validation on size of the encoded data. Note: For byte
    /// fields, the content of the fields are base64-encoded (which increases the
    /// size of the data by 33-36%) when using JSON on the wire.
    #[serde(skip_serializing_if = "::bytes::Bytes::is_empty")]
    #[serde_as(as = "serde_with::base64::Base64")]
    pub icon: ::bytes::Bytes,

    /// Optional. Configurable data sharing environment option for a data exchange.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub sharing_environment_config: std::option::Option<crate::model::SharingEnvironmentConfig>,

    /// Optional. Type of discovery on the discovery page for all the listings
    /// under this exchange. Updating this field also updates (overwrites) the
    /// discovery_type field for all the listings under this exchange.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub discovery_type: std::option::Option<crate::model::DiscoveryType>,

    /// Optional. By default, false.
    /// If true, the DataExchange has an email sharing mandate enabled.
    /// Publishers can view the logged email of the subscriber.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub log_linked_dataset_query_user_email: std::option::Option<bool>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DataExchange {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DataExchange::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::DataExchange::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::DataExchange::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [primary_contact][crate::model::DataExchange::primary_contact].
    pub fn set_primary_contact<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.primary_contact = v.into();
        self
    }

    /// Sets the value of [documentation][crate::model::DataExchange::documentation].
    pub fn set_documentation<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.documentation = v.into();
        self
    }

    /// Sets the value of [listing_count][crate::model::DataExchange::listing_count].
    pub fn set_listing_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.listing_count = v.into();
        self
    }

    /// Sets the value of [icon][crate::model::DataExchange::icon].
    pub fn set_icon<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.icon = v.into();
        self
    }

    /// Sets the value of [sharing_environment_config][crate::model::DataExchange::sharing_environment_config].
    pub fn set_sharing_environment_config<
        T: std::convert::Into<std::option::Option<crate::model::SharingEnvironmentConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.sharing_environment_config = v.into();
        self
    }

    /// Sets the value of [discovery_type][crate::model::DataExchange::discovery_type].
    pub fn set_discovery_type<
        T: std::convert::Into<std::option::Option<crate::model::DiscoveryType>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.discovery_type = v.into();
        self
    }

    /// Sets the value of [log_linked_dataset_query_user_email][crate::model::DataExchange::log_linked_dataset_query_user_email].
    pub fn set_log_linked_dataset_query_user_email<
        T: std::convert::Into<std::option::Option<bool>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.log_linked_dataset_query_user_email = v.into();
        self
    }
}

impl wkt::message::Message for DataExchange {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.DataExchange"
    }
}

/// Sharing environment is a behavior model for sharing data within a
/// data exchange. This option is configurable for a data exchange.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SharingEnvironmentConfig {
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub environment: std::option::Option<crate::model::sharing_environment_config::Environment>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SharingEnvironmentConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [environment][crate::model::SharingEnvironmentConfig::environment].
    ///
    /// Note that all the setters affecting `environment` are mutually
    /// exclusive.
    pub fn set_environment<
        T: std::convert::Into<
                std::option::Option<crate::model::sharing_environment_config::Environment>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.environment = v.into();
        self
    }

    /// The value of [environment][crate::model::SharingEnvironmentConfig::environment]
    /// if it holds a `DefaultExchangeConfig`, `None` if the field is not set or
    /// holds a different branch.
    pub fn default_exchange_config(
        &self,
    ) -> std::option::Option<
        &std::boxed::Box<crate::model::sharing_environment_config::DefaultExchangeConfig>,
    > {
        #[allow(unreachable_patterns)]
        self.environment.as_ref().and_then(|v| match v {
            crate::model::sharing_environment_config::Environment::DefaultExchangeConfig(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [environment][crate::model::SharingEnvironmentConfig::environment]
    /// if it holds a `DcrExchangeConfig`, `None` if the field is not set or
    /// holds a different branch.
    pub fn dcr_exchange_config(
        &self,
    ) -> std::option::Option<
        &std::boxed::Box<crate::model::sharing_environment_config::DcrExchangeConfig>,
    > {
        #[allow(unreachable_patterns)]
        self.environment.as_ref().and_then(|v| match v {
            crate::model::sharing_environment_config::Environment::DcrExchangeConfig(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [environment][crate::model::SharingEnvironmentConfig::environment]
    /// to hold a `DefaultExchangeConfig`.
    ///
    /// Note that all the setters affecting `environment` are
    /// mutually exclusive.
    pub fn set_default_exchange_config<
        T: std::convert::Into<
                std::boxed::Box<crate::model::sharing_environment_config::DefaultExchangeConfig>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.environment = std::option::Option::Some(
            crate::model::sharing_environment_config::Environment::DefaultExchangeConfig(v.into()),
        );
        self
    }

    /// Sets the value of [environment][crate::model::SharingEnvironmentConfig::environment]
    /// to hold a `DcrExchangeConfig`.
    ///
    /// Note that all the setters affecting `environment` are
    /// mutually exclusive.
    pub fn set_dcr_exchange_config<
        T: std::convert::Into<
                std::boxed::Box<crate::model::sharing_environment_config::DcrExchangeConfig>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.environment = std::option::Option::Some(
            crate::model::sharing_environment_config::Environment::DcrExchangeConfig(v.into()),
        );
        self
    }
}

impl wkt::message::Message for SharingEnvironmentConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.SharingEnvironmentConfig"
    }
}

/// Defines additional types related to [SharingEnvironmentConfig].
pub mod sharing_environment_config {
    #[allow(unused_imports)]
    use super::*;

    /// Default Analytics Hub data exchange, used for secured data sharing.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct DefaultExchangeConfig {
        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl DefaultExchangeConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }
    }

    impl wkt::message::Message for DefaultExchangeConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.SharingEnvironmentConfig.DefaultExchangeConfig"
        }
    }

    /// Data Clean Room (DCR), used for privacy-safe and secured data sharing.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct DcrExchangeConfig {
        /// Output only. If True, this DCR restricts the contributors to sharing
        /// only a single resource in a Listing. And no two resources should have the
        /// same IDs. So if a contributor adds a view with a conflicting name, the
        /// CreateListing API will reject the request. if False, the data contributor
        /// can publish an entire dataset (as before). This is not configurable, and
        /// by default, all new DCRs will have the restriction set to True.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub single_selected_resource_sharing_restriction: std::option::Option<bool>,

        /// Output only. If True, when subscribing to this DCR, it will create only
        /// one linked dataset containing all resources shared within the
        /// cleanroom. If False, when subscribing to this DCR, it will
        /// create 1 linked dataset per listing. This is not configurable, and by
        /// default, all new DCRs will have the restriction set to True.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub single_linked_dataset_per_cleanroom: std::option::Option<bool>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl DcrExchangeConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [single_selected_resource_sharing_restriction][crate::model::sharing_environment_config::DcrExchangeConfig::single_selected_resource_sharing_restriction].
        pub fn set_single_selected_resource_sharing_restriction<
            T: std::convert::Into<std::option::Option<bool>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.single_selected_resource_sharing_restriction = v.into();
            self
        }

        /// Sets the value of [single_linked_dataset_per_cleanroom][crate::model::sharing_environment_config::DcrExchangeConfig::single_linked_dataset_per_cleanroom].
        pub fn set_single_linked_dataset_per_cleanroom<
            T: std::convert::Into<std::option::Option<bool>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.single_linked_dataset_per_cleanroom = v.into();
            self
        }
    }

    impl wkt::message::Message for DcrExchangeConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.SharingEnvironmentConfig.DcrExchangeConfig"
        }
    }

    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Environment {
        /// Default Analytics Hub data exchange, used for secured data sharing.
        DefaultExchangeConfig(
            std::boxed::Box<crate::model::sharing_environment_config::DefaultExchangeConfig>,
        ),
        /// Data Clean Room (DCR), used for privacy-safe and secured data sharing.
        DcrExchangeConfig(
            std::boxed::Box<crate::model::sharing_environment_config::DcrExchangeConfig>,
        ),
    }
}

/// Contains details of the data provider.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DataProvider {
    /// Optional. Name of the data provider.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. Email or URL of the data provider.
    /// Max Length: 1000 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub primary_contact: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DataProvider {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DataProvider::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [primary_contact][crate::model::DataProvider::primary_contact].
    pub fn set_primary_contact<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.primary_contact = v.into();
        self
    }
}

impl wkt::message::Message for DataProvider {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.DataProvider"
    }
}

/// Contains details of the listing publisher.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Publisher {
    /// Optional. Name of the listing publisher.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. Email or URL of the listing publisher.
    /// Max Length: 1000 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub primary_contact: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Publisher {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Publisher::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [primary_contact][crate::model::Publisher::primary_contact].
    pub fn set_primary_contact<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.primary_contact = v.into();
        self
    }
}

impl wkt::message::Message for Publisher {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.Publisher"
    }
}

#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DestinationDatasetReference {
    /// Required. A unique ID for this dataset, without the project name. The ID
    /// must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_).
    /// The maximum length is 1,024 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub dataset_id: std::string::String,

    /// Required. The ID of the project containing this dataset.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub project_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DestinationDatasetReference {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [dataset_id][crate::model::DestinationDatasetReference::dataset_id].
    pub fn set_dataset_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.dataset_id = v.into();
        self
    }

    /// Sets the value of [project_id][crate::model::DestinationDatasetReference::project_id].
    pub fn set_project_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.project_id = v.into();
        self
    }
}

impl wkt::message::Message for DestinationDatasetReference {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.DestinationDatasetReference"
    }
}

/// Defines the destination bigquery dataset.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DestinationDataset {
    /// Required. A reference that identifies the destination dataset.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub dataset_reference: std::option::Option<crate::model::DestinationDatasetReference>,

    /// Optional. A descriptive name for the dataset.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub friendly_name: std::option::Option<wkt::StringValue>,

    /// Optional. A user-friendly description of the dataset.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub description: std::option::Option<wkt::StringValue>,

    /// Optional. The labels associated with this dataset. You can use these
    /// to organize and group your datasets.
    /// You can set this property when inserting or updating a dataset.
    /// See <https://cloud.google.com/resource-manager/docs/creating-managing-labels>
    /// for more information.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Required. The geographic location where the dataset should reside. See
    /// <https://cloud.google.com/bigquery/docs/locations> for supported
    /// locations.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub location: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DestinationDataset {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [dataset_reference][crate::model::DestinationDataset::dataset_reference].
    pub fn set_dataset_reference<
        T: std::convert::Into<std::option::Option<crate::model::DestinationDatasetReference>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.dataset_reference = v.into();
        self
    }

    /// Sets the value of [friendly_name][crate::model::DestinationDataset::friendly_name].
    pub fn set_friendly_name<T: std::convert::Into<std::option::Option<wkt::StringValue>>>(
        mut self,
        v: T,
    ) -> Self {
        self.friendly_name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::DestinationDataset::description].
    pub fn set_description<T: std::convert::Into<std::option::Option<wkt::StringValue>>>(
        mut self,
        v: T,
    ) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [location][crate::model::DestinationDataset::location].
    pub fn set_location<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.location = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::DestinationDataset::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for DestinationDataset {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.DestinationDataset"
    }
}

/// Defines the destination Pub/Sub subscription.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DestinationPubSubSubscription {
    /// Required. Destination Pub/Sub subscription resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub pubsub_subscription: std::option::Option<crate::model::PubSubSubscription>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DestinationPubSubSubscription {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [pubsub_subscription][crate::model::DestinationPubSubSubscription::pubsub_subscription].
    pub fn set_pubsub_subscription<
        T: std::convert::Into<std::option::Option<crate::model::PubSubSubscription>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.pubsub_subscription = v.into();
        self
    }
}

impl wkt::message::Message for DestinationPubSubSubscription {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.DestinationPubSubSubscription"
    }
}

/// A listing is what gets published into a data exchange that a subscriber can
/// subscribe to. It contains a reference to the data source along with
/// descriptive information that will help subscribers find and subscribe the
/// data.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Listing {
    /// Output only. The resource name of the listing.
    /// e.g. `projects/myproject/locations/US/dataExchanges/123/listings/456`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. Human-readable display name of the listing. The display name must
    /// contain only Unicode letters, numbers (0-9), underscores (_), dashes (-),
    /// spaces ( ), ampersands (&) and can't start or end with spaces. Default
    /// value is an empty string. Max length: 63 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Optional. Short description of the listing. The description must not
    /// contain Unicode non-characters and C0 and C1 control codes except tabs
    /// (HT), new lines (LF), carriage returns (CR), and page breaks (FF). Default
    /// value is an empty string. Max length: 2000 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. Email or URL of the primary point of contact of the listing.
    /// Max Length: 1000 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub primary_contact: std::string::String,

    /// Optional. Documentation describing the listing.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub documentation: std::string::String,

    /// Output only. Current state of the listing.
    pub state: crate::model::listing::State,

    /// Optional. Base64 encoded image representing the listing. Max Size: 3.0MiB
    /// Expected image dimensions are 512x512 pixels, however the API only
    /// performs validation on size of the encoded data.
    /// Note: For byte fields, the contents of the field are base64-encoded (which
    /// increases the size of the data by 33-36%) when using JSON on the wire.
    #[serde(skip_serializing_if = "::bytes::Bytes::is_empty")]
    #[serde_as(as = "serde_with::base64::Base64")]
    pub icon: ::bytes::Bytes,

    /// Optional. Details of the data provider who owns the source data.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub data_provider: std::option::Option<crate::model::DataProvider>,

    /// Optional. Categories of the listing. Up to two categories are allowed.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub categories: std::vec::Vec<crate::model::listing::Category>,

    /// Optional. Details of the publisher who owns the listing and who can share
    /// the source data.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub publisher: std::option::Option<crate::model::Publisher>,

    /// Optional. Email or URL of the request access of the listing.
    /// Subscribers can use this reference to request access.
    /// Max Length: 1000 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_access: std::string::String,

    /// Optional. If set, restricted export configuration will be propagated and
    /// enforced on the linked dataset.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub restricted_export_config:
        std::option::Option<crate::model::listing::RestrictedExportConfig>,

    /// Optional. Type of discovery of the listing on the discovery page.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub discovery_type: std::option::Option<crate::model::DiscoveryType>,

    /// Output only. Listing shared asset type.
    pub resource_type: crate::model::SharedResourceType,

    /// Optional. By default, false.
    /// If true, the Listing has an email sharing mandate enabled.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub log_linked_dataset_query_user_email: std::option::Option<bool>,

    /// Listing source.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub source: std::option::Option<crate::model::listing::Source>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Listing {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Listing::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::Listing::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Listing::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [primary_contact][crate::model::Listing::primary_contact].
    pub fn set_primary_contact<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.primary_contact = v.into();
        self
    }

    /// Sets the value of [documentation][crate::model::Listing::documentation].
    pub fn set_documentation<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.documentation = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Listing::state].
    pub fn set_state<T: std::convert::Into<crate::model::listing::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [icon][crate::model::Listing::icon].
    pub fn set_icon<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.icon = v.into();
        self
    }

    /// Sets the value of [data_provider][crate::model::Listing::data_provider].
    pub fn set_data_provider<
        T: std::convert::Into<std::option::Option<crate::model::DataProvider>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.data_provider = v.into();
        self
    }

    /// Sets the value of [publisher][crate::model::Listing::publisher].
    pub fn set_publisher<T: std::convert::Into<std::option::Option<crate::model::Publisher>>>(
        mut self,
        v: T,
    ) -> Self {
        self.publisher = v.into();
        self
    }

    /// Sets the value of [request_access][crate::model::Listing::request_access].
    pub fn set_request_access<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_access = v.into();
        self
    }

    /// Sets the value of [restricted_export_config][crate::model::Listing::restricted_export_config].
    pub fn set_restricted_export_config<
        T: std::convert::Into<std::option::Option<crate::model::listing::RestrictedExportConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.restricted_export_config = v.into();
        self
    }

    /// Sets the value of [discovery_type][crate::model::Listing::discovery_type].
    pub fn set_discovery_type<
        T: std::convert::Into<std::option::Option<crate::model::DiscoveryType>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.discovery_type = v.into();
        self
    }

    /// Sets the value of [resource_type][crate::model::Listing::resource_type].
    pub fn set_resource_type<T: std::convert::Into<crate::model::SharedResourceType>>(
        mut self,
        v: T,
    ) -> Self {
        self.resource_type = v.into();
        self
    }

    /// Sets the value of [log_linked_dataset_query_user_email][crate::model::Listing::log_linked_dataset_query_user_email].
    pub fn set_log_linked_dataset_query_user_email<
        T: std::convert::Into<std::option::Option<bool>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.log_linked_dataset_query_user_email = v.into();
        self
    }

    /// Sets the value of [categories][crate::model::Listing::categories].
    pub fn set_categories<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::listing::Category>,
    {
        use std::iter::Iterator;
        self.categories = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [source][crate::model::Listing::source].
    ///
    /// Note that all the setters affecting `source` are mutually
    /// exclusive.
    pub fn set_source<T: std::convert::Into<std::option::Option<crate::model::listing::Source>>>(
        mut self,
        v: T,
    ) -> Self {
        self.source = v.into();
        self
    }

    /// The value of [source][crate::model::Listing::source]
    /// if it holds a `BigqueryDataset`, `None` if the field is not set or
    /// holds a different branch.
    pub fn bigquery_dataset(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::listing::BigQueryDatasetSource>> {
        #[allow(unreachable_patterns)]
        self.source.as_ref().and_then(|v| match v {
            crate::model::listing::Source::BigqueryDataset(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [source][crate::model::Listing::source]
    /// if it holds a `PubsubTopic`, `None` if the field is not set or
    /// holds a different branch.
    pub fn pubsub_topic(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::listing::PubSubTopicSource>> {
        #[allow(unreachable_patterns)]
        self.source.as_ref().and_then(|v| match v {
            crate::model::listing::Source::PubsubTopic(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [source][crate::model::Listing::source]
    /// to hold a `BigqueryDataset`.
    ///
    /// Note that all the setters affecting `source` are
    /// mutually exclusive.
    pub fn set_bigquery_dataset<
        T: std::convert::Into<std::boxed::Box<crate::model::listing::BigQueryDatasetSource>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source =
            std::option::Option::Some(crate::model::listing::Source::BigqueryDataset(v.into()));
        self
    }

    /// Sets the value of [source][crate::model::Listing::source]
    /// to hold a `PubsubTopic`.
    ///
    /// Note that all the setters affecting `source` are
    /// mutually exclusive.
    pub fn set_pubsub_topic<
        T: std::convert::Into<std::boxed::Box<crate::model::listing::PubSubTopicSource>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source =
            std::option::Option::Some(crate::model::listing::Source::PubsubTopic(v.into()));
        self
    }
}

impl wkt::message::Message for Listing {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.Listing"
    }
}

/// Defines additional types related to [Listing].
pub mod listing {
    #[allow(unused_imports)]
    use super::*;

    /// A reference to a shared dataset. It is an existing BigQuery dataset with a
    /// collection of objects such as tables and views that you want to share
    /// with subscribers.
    /// When subscriber's subscribe to a listing, Analytics Hub creates a linked
    /// dataset in
    /// the subscriber's project. A Linked dataset is an opaque, read-only BigQuery
    /// dataset that serves as a _symbolic link_ to a shared dataset.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct BigQueryDatasetSource {
        /// Optional. Resource name of the dataset source for this listing.
        /// e.g. `projects/myproject/datasets/123`
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub dataset: std::string::String,

        /// Optional. Resource in this dataset that is selectively shared.
        /// This field is required for data clean room exchanges.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub selected_resources:
            std::vec::Vec<crate::model::listing::big_query_dataset_source::SelectedResource>,

        /// Optional. If set, restricted export policy will be propagated and
        /// enforced on the linked dataset.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub restricted_export_policy: std::option::Option<
            crate::model::listing::big_query_dataset_source::RestrictedExportPolicy,
        >,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl BigQueryDatasetSource {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [dataset][crate::model::listing::BigQueryDatasetSource::dataset].
        pub fn set_dataset<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.dataset = v.into();
            self
        }

        /// Sets the value of [restricted_export_policy][crate::model::listing::BigQueryDatasetSource::restricted_export_policy].
        pub fn set_restricted_export_policy<
            T: std::convert::Into<
                    std::option::Option<
                        crate::model::listing::big_query_dataset_source::RestrictedExportPolicy,
                    >,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.restricted_export_policy = v.into();
            self
        }

        /// Sets the value of [selected_resources][crate::model::listing::BigQueryDatasetSource::selected_resources].
        pub fn set_selected_resources<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<
                    crate::model::listing::big_query_dataset_source::SelectedResource,
                >,
        {
            use std::iter::Iterator;
            self.selected_resources = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for BigQueryDatasetSource {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.Listing.BigQueryDatasetSource"
        }
    }

    /// Defines additional types related to [BigQueryDatasetSource].
    pub mod big_query_dataset_source {
        #[allow(unused_imports)]
        use super::*;

        /// Resource in this dataset that is selectively shared.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct SelectedResource {
            #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
            pub resource: std::option::Option<
                crate::model::listing::big_query_dataset_source::selected_resource::Resource,
            >,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl SelectedResource {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [resource][crate::model::listing::big_query_dataset_source::SelectedResource::resource].
            ///
            /// Note that all the setters affecting `resource` are mutually
            /// exclusive.
            pub fn set_resource<T: std::convert::Into<std::option::Option<crate::model::listing::big_query_dataset_source::selected_resource::Resource>>>(mut self, v: T) -> Self
            {
                self.resource = v.into();
                self
            }

            /// The value of [resource][crate::model::listing::big_query_dataset_source::SelectedResource::resource]
            /// if it holds a `Table`, `None` if the field is not set or
            /// holds a different branch.
            pub fn table(&self) -> std::option::Option<&std::string::String> {
                #[allow(unreachable_patterns)]
                self.resource.as_ref().and_then(|v| match v {
                    crate::model::listing::big_query_dataset_source::selected_resource::Resource::Table(v) => std::option::Option::Some(v),
                    _ => std::option::Option::None,
                })
            }

            /// Sets the value of [resource][crate::model::listing::big_query_dataset_source::SelectedResource::resource]
            /// to hold a `Table`.
            ///
            /// Note that all the setters affecting `resource` are
            /// mutually exclusive.
            pub fn set_table<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.resource = std::option::Option::Some(
                    crate::model::listing::big_query_dataset_source::selected_resource::Resource::Table(
                        v.into()
                    )
                );
                self
            }
        }

        impl wkt::message::Message for SelectedResource {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.Listing.BigQueryDatasetSource.SelectedResource"
            }
        }

        /// Defines additional types related to [SelectedResource].
        pub mod selected_resource {
            #[allow(unused_imports)]
            use super::*;

            #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
            #[serde(rename_all = "camelCase")]
            #[non_exhaustive]
            pub enum Resource {
                /// Optional. Format:
                /// For table:
                /// `projects/{projectId}/datasets/{datasetId}/tables/{tableId}`
                /// Example:"projects/test_project/datasets/test_dataset/tables/test_table"
                Table(std::string::String),
            }
        }

        /// Restricted export policy used to configure restricted export on linked
        /// dataset.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct RestrictedExportPolicy {
            /// Optional. If true, enable restricted export.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub enabled: std::option::Option<wkt::BoolValue>,

            /// Optional. If true, restrict direct table access (read
            /// api/tabledata.list) on linked table.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub restrict_direct_table_access: std::option::Option<wkt::BoolValue>,

            /// Optional. If true, restrict export of query result derived from
            /// restricted linked dataset table.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub restrict_query_result: std::option::Option<wkt::BoolValue>,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl RestrictedExportPolicy {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [enabled][crate::model::listing::big_query_dataset_source::RestrictedExportPolicy::enabled].
            pub fn set_enabled<T: std::convert::Into<std::option::Option<wkt::BoolValue>>>(
                mut self,
                v: T,
            ) -> Self {
                self.enabled = v.into();
                self
            }

            /// Sets the value of [restrict_direct_table_access][crate::model::listing::big_query_dataset_source::RestrictedExportPolicy::restrict_direct_table_access].
            pub fn set_restrict_direct_table_access<
                T: std::convert::Into<std::option::Option<wkt::BoolValue>>,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.restrict_direct_table_access = v.into();
                self
            }

            /// Sets the value of [restrict_query_result][crate::model::listing::big_query_dataset_source::RestrictedExportPolicy::restrict_query_result].
            pub fn set_restrict_query_result<
                T: std::convert::Into<std::option::Option<wkt::BoolValue>>,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.restrict_query_result = v.into();
                self
            }
        }

        impl wkt::message::Message for RestrictedExportPolicy {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.Listing.BigQueryDatasetSource.RestrictedExportPolicy"
            }
        }
    }

    /// Pub/Sub topic source.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct PubSubTopicSource {
        /// Required. Resource name of the Pub/Sub topic source for this listing.
        /// e.g. projects/myproject/topics/topicId
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub topic: std::string::String,

        /// Optional. Region hint on where the data might be published. Data affinity
        /// regions are modifiable. See <https://cloud.google.com/about/locations> for
        /// full listing of possible Cloud regions.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub data_affinity_regions: std::vec::Vec<std::string::String>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl PubSubTopicSource {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [topic][crate::model::listing::PubSubTopicSource::topic].
        pub fn set_topic<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.topic = v.into();
            self
        }

        /// Sets the value of [data_affinity_regions][crate::model::listing::PubSubTopicSource::data_affinity_regions].
        pub fn set_data_affinity_regions<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.data_affinity_regions = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for PubSubTopicSource {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.Listing.PubSubTopicSource"
        }
    }

    /// Restricted export config, used to configure restricted export on linked
    /// dataset.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct RestrictedExportConfig {
        /// Optional. If true, enable restricted export.
        pub enabled: bool,

        /// Output only. If true, restrict direct table access(read
        /// api/tabledata.list) on linked table.
        pub restrict_direct_table_access: bool,

        /// Optional. If true, restrict export of query result derived from
        /// restricted linked dataset table.
        pub restrict_query_result: bool,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl RestrictedExportConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [enabled][crate::model::listing::RestrictedExportConfig::enabled].
        pub fn set_enabled<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.enabled = v.into();
            self
        }

        /// Sets the value of [restrict_direct_table_access][crate::model::listing::RestrictedExportConfig::restrict_direct_table_access].
        pub fn set_restrict_direct_table_access<T: std::convert::Into<bool>>(
            mut self,
            v: T,
        ) -> Self {
            self.restrict_direct_table_access = v.into();
            self
        }

        /// Sets the value of [restrict_query_result][crate::model::listing::RestrictedExportConfig::restrict_query_result].
        pub fn set_restrict_query_result<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.restrict_query_result = v.into();
            self
        }
    }

    impl wkt::message::Message for RestrictedExportConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.Listing.RestrictedExportConfig"
        }
    }

    /// State of the listing.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// Default value. This value is unused.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// Subscribable state. Users with dataexchange.listings.subscribe permission
        /// can subscribe to this listing.
        pub const ACTIVE: State = State::new(1);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("ACTIVE"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "ACTIVE" => std::option::Option::Some(Self::ACTIVE),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Listing categories.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Category(i32);

    impl Category {
        pub const CATEGORY_UNSPECIFIED: Category = Category::new(0);

        pub const CATEGORY_OTHERS: Category = Category::new(1);

        pub const CATEGORY_ADVERTISING_AND_MARKETING: Category = Category::new(2);

        pub const CATEGORY_COMMERCE: Category = Category::new(3);

        pub const CATEGORY_CLIMATE_AND_ENVIRONMENT: Category = Category::new(4);

        pub const CATEGORY_DEMOGRAPHICS: Category = Category::new(5);

        pub const CATEGORY_ECONOMICS: Category = Category::new(6);

        pub const CATEGORY_EDUCATION: Category = Category::new(7);

        pub const CATEGORY_ENERGY: Category = Category::new(8);

        pub const CATEGORY_FINANCIAL: Category = Category::new(9);

        pub const CATEGORY_GAMING: Category = Category::new(10);

        pub const CATEGORY_GEOSPATIAL: Category = Category::new(11);

        pub const CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE: Category = Category::new(12);

        pub const CATEGORY_MEDIA: Category = Category::new(13);

        pub const CATEGORY_PUBLIC_SECTOR: Category = Category::new(14);

        pub const CATEGORY_RETAIL: Category = Category::new(15);

        pub const CATEGORY_SPORTS: Category = Category::new(16);

        pub const CATEGORY_SCIENCE_AND_RESEARCH: Category = Category::new(17);

        pub const CATEGORY_TRANSPORTATION_AND_LOGISTICS: Category = Category::new(18);

        pub const CATEGORY_TRAVEL_AND_TOURISM: Category = Category::new(19);

        /// Creates a new Category instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("CATEGORY_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CATEGORY_OTHERS"),
                2 => std::borrow::Cow::Borrowed("CATEGORY_ADVERTISING_AND_MARKETING"),
                3 => std::borrow::Cow::Borrowed("CATEGORY_COMMERCE"),
                4 => std::borrow::Cow::Borrowed("CATEGORY_CLIMATE_AND_ENVIRONMENT"),
                5 => std::borrow::Cow::Borrowed("CATEGORY_DEMOGRAPHICS"),
                6 => std::borrow::Cow::Borrowed("CATEGORY_ECONOMICS"),
                7 => std::borrow::Cow::Borrowed("CATEGORY_EDUCATION"),
                8 => std::borrow::Cow::Borrowed("CATEGORY_ENERGY"),
                9 => std::borrow::Cow::Borrowed("CATEGORY_FINANCIAL"),
                10 => std::borrow::Cow::Borrowed("CATEGORY_GAMING"),
                11 => std::borrow::Cow::Borrowed("CATEGORY_GEOSPATIAL"),
                12 => std::borrow::Cow::Borrowed("CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE"),
                13 => std::borrow::Cow::Borrowed("CATEGORY_MEDIA"),
                14 => std::borrow::Cow::Borrowed("CATEGORY_PUBLIC_SECTOR"),
                15 => std::borrow::Cow::Borrowed("CATEGORY_RETAIL"),
                16 => std::borrow::Cow::Borrowed("CATEGORY_SPORTS"),
                17 => std::borrow::Cow::Borrowed("CATEGORY_SCIENCE_AND_RESEARCH"),
                18 => std::borrow::Cow::Borrowed("CATEGORY_TRANSPORTATION_AND_LOGISTICS"),
                19 => std::borrow::Cow::Borrowed("CATEGORY_TRAVEL_AND_TOURISM"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "CATEGORY_UNSPECIFIED" => std::option::Option::Some(Self::CATEGORY_UNSPECIFIED),
                "CATEGORY_OTHERS" => std::option::Option::Some(Self::CATEGORY_OTHERS),
                "CATEGORY_ADVERTISING_AND_MARKETING" => {
                    std::option::Option::Some(Self::CATEGORY_ADVERTISING_AND_MARKETING)
                }
                "CATEGORY_COMMERCE" => std::option::Option::Some(Self::CATEGORY_COMMERCE),
                "CATEGORY_CLIMATE_AND_ENVIRONMENT" => {
                    std::option::Option::Some(Self::CATEGORY_CLIMATE_AND_ENVIRONMENT)
                }
                "CATEGORY_DEMOGRAPHICS" => std::option::Option::Some(Self::CATEGORY_DEMOGRAPHICS),
                "CATEGORY_ECONOMICS" => std::option::Option::Some(Self::CATEGORY_ECONOMICS),
                "CATEGORY_EDUCATION" => std::option::Option::Some(Self::CATEGORY_EDUCATION),
                "CATEGORY_ENERGY" => std::option::Option::Some(Self::CATEGORY_ENERGY),
                "CATEGORY_FINANCIAL" => std::option::Option::Some(Self::CATEGORY_FINANCIAL),
                "CATEGORY_GAMING" => std::option::Option::Some(Self::CATEGORY_GAMING),
                "CATEGORY_GEOSPATIAL" => std::option::Option::Some(Self::CATEGORY_GEOSPATIAL),
                "CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE" => {
                    std::option::Option::Some(Self::CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE)
                }
                "CATEGORY_MEDIA" => std::option::Option::Some(Self::CATEGORY_MEDIA),
                "CATEGORY_PUBLIC_SECTOR" => std::option::Option::Some(Self::CATEGORY_PUBLIC_SECTOR),
                "CATEGORY_RETAIL" => std::option::Option::Some(Self::CATEGORY_RETAIL),
                "CATEGORY_SPORTS" => std::option::Option::Some(Self::CATEGORY_SPORTS),
                "CATEGORY_SCIENCE_AND_RESEARCH" => {
                    std::option::Option::Some(Self::CATEGORY_SCIENCE_AND_RESEARCH)
                }
                "CATEGORY_TRANSPORTATION_AND_LOGISTICS" => {
                    std::option::Option::Some(Self::CATEGORY_TRANSPORTATION_AND_LOGISTICS)
                }
                "CATEGORY_TRAVEL_AND_TOURISM" => {
                    std::option::Option::Some(Self::CATEGORY_TRAVEL_AND_TOURISM)
                }
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for Category {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for Category {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Listing source.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Source {
        /// Shared dataset i.e. BigQuery dataset source.
        BigqueryDataset(std::boxed::Box<crate::model::listing::BigQueryDatasetSource>),
        /// Pub/Sub topic source.
        PubsubTopic(std::boxed::Box<crate::model::listing::PubSubTopicSource>),
    }
}

/// A subscription represents a subscribers' access to a particular set of
/// published data. It contains references to associated listings,
/// data exchanges, and linked datasets.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Subscription {
    /// Output only. The resource name of the subscription.
    /// e.g. `projects/myproject/locations/US/subscriptions/123`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Timestamp when the subscription was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub creation_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Timestamp when the subscription was last modified.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub last_modify_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Organization of the project this subscription belongs to.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub organization_id: std::string::String,

    /// Output only. Display name of the project of this subscription.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub organization_display_name: std::string::String,

    /// Output only. Current state of the subscription.
    pub state: crate::model::subscription::State,

    /// Output only. Map of listing resource names to associated linked resource,
    /// e.g. projects/123/locations/US/dataExchanges/456/listings/789
    /// ->
    /// projects/123/datasets/my_dataset
    ///
    /// For listing-level subscriptions, this is a map of size 1.
    /// Only contains values if state == STATE_ACTIVE.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub linked_dataset_map:
        std::collections::HashMap<std::string::String, crate::model::subscription::LinkedResource>,

    /// Output only. Email of the subscriber.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub subscriber_contact: std::string::String,

    /// Output only. Linked resources created in the subscription. Only contains
    /// values if state = STATE_ACTIVE.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub linked_resources: std::vec::Vec<crate::model::subscription::LinkedResource>,

    /// Output only. Listing shared asset type.
    pub resource_type: crate::model::SharedResourceType,

    /// Output only. By default, false.
    /// If true, the Subscriber agreed to the email sharing mandate
    /// that is enabled for DataExchange/Listing.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub log_linked_dataset_query_user_email: std::option::Option<bool>,

    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub resource_name: std::option::Option<crate::model::subscription::ResourceName>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Subscription {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Subscription::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [creation_time][crate::model::Subscription::creation_time].
    pub fn set_creation_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.creation_time = v.into();
        self
    }

    /// Sets the value of [last_modify_time][crate::model::Subscription::last_modify_time].
    pub fn set_last_modify_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.last_modify_time = v.into();
        self
    }

    /// Sets the value of [organization_id][crate::model::Subscription::organization_id].
    pub fn set_organization_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.organization_id = v.into();
        self
    }

    /// Sets the value of [organization_display_name][crate::model::Subscription::organization_display_name].
    pub fn set_organization_display_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.organization_display_name = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Subscription::state].
    pub fn set_state<T: std::convert::Into<crate::model::subscription::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [subscriber_contact][crate::model::Subscription::subscriber_contact].
    pub fn set_subscriber_contact<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.subscriber_contact = v.into();
        self
    }

    /// Sets the value of [resource_type][crate::model::Subscription::resource_type].
    pub fn set_resource_type<T: std::convert::Into<crate::model::SharedResourceType>>(
        mut self,
        v: T,
    ) -> Self {
        self.resource_type = v.into();
        self
    }

    /// Sets the value of [log_linked_dataset_query_user_email][crate::model::Subscription::log_linked_dataset_query_user_email].
    pub fn set_log_linked_dataset_query_user_email<
        T: std::convert::Into<std::option::Option<bool>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.log_linked_dataset_query_user_email = v.into();
        self
    }

    /// Sets the value of [linked_resources][crate::model::Subscription::linked_resources].
    pub fn set_linked_resources<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::subscription::LinkedResource>,
    {
        use std::iter::Iterator;
        self.linked_resources = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [linked_dataset_map][crate::model::Subscription::linked_dataset_map].
    pub fn set_linked_dataset_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::subscription::LinkedResource>,
    {
        use std::iter::Iterator;
        self.linked_dataset_map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [resource_name][crate::model::Subscription::resource_name].
    ///
    /// Note that all the setters affecting `resource_name` are mutually
    /// exclusive.
    pub fn set_resource_name<
        T: std::convert::Into<std::option::Option<crate::model::subscription::ResourceName>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.resource_name = v.into();
        self
    }

    /// The value of [resource_name][crate::model::Subscription::resource_name]
    /// if it holds a `Listing`, `None` if the field is not set or
    /// holds a different branch.
    pub fn listing(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.resource_name.as_ref().and_then(|v| match v {
            crate::model::subscription::ResourceName::Listing(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [resource_name][crate::model::Subscription::resource_name]
    /// if it holds a `DataExchange`, `None` if the field is not set or
    /// holds a different branch.
    pub fn data_exchange(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.resource_name.as_ref().and_then(|v| match v {
            crate::model::subscription::ResourceName::DataExchange(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [resource_name][crate::model::Subscription::resource_name]
    /// to hold a `Listing`.
    ///
    /// Note that all the setters affecting `resource_name` are
    /// mutually exclusive.
    pub fn set_listing<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.resource_name =
            std::option::Option::Some(crate::model::subscription::ResourceName::Listing(v.into()));
        self
    }

    /// Sets the value of [resource_name][crate::model::Subscription::resource_name]
    /// to hold a `DataExchange`.
    ///
    /// Note that all the setters affecting `resource_name` are
    /// mutually exclusive.
    pub fn set_data_exchange<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.resource_name = std::option::Option::Some(
            crate::model::subscription::ResourceName::DataExchange(v.into()),
        );
        self
    }
}

impl wkt::message::Message for Subscription {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.Subscription"
    }
}

/// Defines additional types related to [Subscription].
pub mod subscription {
    #[allow(unused_imports)]
    use super::*;

    /// Reference to a linked resource tracked by this Subscription.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct LinkedResource {
        /// Output only. Listing for which linked resource is created.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub listing: std::string::String,

        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub reference: std::option::Option<crate::model::subscription::linked_resource::Reference>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl LinkedResource {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [listing][crate::model::subscription::LinkedResource::listing].
        pub fn set_listing<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.listing = v.into();
            self
        }

        /// Sets the value of [reference][crate::model::subscription::LinkedResource::reference].
        ///
        /// Note that all the setters affecting `reference` are mutually
        /// exclusive.
        pub fn set_reference<
            T: std::convert::Into<
                    std::option::Option<crate::model::subscription::linked_resource::Reference>,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.reference = v.into();
            self
        }

        /// The value of [reference][crate::model::subscription::LinkedResource::reference]
        /// if it holds a `LinkedDataset`, `None` if the field is not set or
        /// holds a different branch.
        pub fn linked_dataset(&self) -> std::option::Option<&std::string::String> {
            #[allow(unreachable_patterns)]
            self.reference.as_ref().and_then(|v| match v {
                crate::model::subscription::linked_resource::Reference::LinkedDataset(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [reference][crate::model::subscription::LinkedResource::reference]
        /// if it holds a `LinkedPubsubSubscription`, `None` if the field is not set or
        /// holds a different branch.
        pub fn linked_pubsub_subscription(&self) -> std::option::Option<&std::string::String> {
            #[allow(unreachable_patterns)]
            self.reference.as_ref().and_then(|v| match v {
                crate::model::subscription::linked_resource::Reference::LinkedPubsubSubscription(v) => std::option::Option::Some(v),
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [reference][crate::model::subscription::LinkedResource::reference]
        /// to hold a `LinkedDataset`.
        ///
        /// Note that all the setters affecting `reference` are
        /// mutually exclusive.
        pub fn set_linked_dataset<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.reference = std::option::Option::Some(
                crate::model::subscription::linked_resource::Reference::LinkedDataset(v.into()),
            );
            self
        }

        /// Sets the value of [reference][crate::model::subscription::LinkedResource::reference]
        /// to hold a `LinkedPubsubSubscription`.
        ///
        /// Note that all the setters affecting `reference` are
        /// mutually exclusive.
        pub fn set_linked_pubsub_subscription<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.reference = std::option::Option::Some(
                crate::model::subscription::linked_resource::Reference::LinkedPubsubSubscription(
                    v.into(),
                ),
            );
            self
        }
    }

    impl wkt::message::Message for LinkedResource {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.Subscription.LinkedResource"
        }
    }

    /// Defines additional types related to [LinkedResource].
    pub mod linked_resource {
        #[allow(unused_imports)]
        use super::*;

        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum Reference {
            /// Output only. Name of the linked dataset, e.g.
            /// projects/subscriberproject/datasets/linked_dataset
            LinkedDataset(std::string::String),
            /// Output only. Name of the Pub/Sub subscription, e.g.
            /// projects/subscriberproject/subscriptions/subscriptions/sub_id
            LinkedPubsubSubscription(std::string::String),
        }
    }

    /// State of the subscription.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// Default value. This value is unused.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// This subscription is active and the data is accessible.
        pub const STATE_ACTIVE: State = State::new(1);

        /// The data referenced by this subscription is out of date and should be
        /// refreshed. This can happen when a data provider adds or removes datasets.
        pub const STATE_STALE: State = State::new(2);

        /// This subscription has been cancelled or revoked and the data is no longer
        /// accessible.
        pub const STATE_INACTIVE: State = State::new(3);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("STATE_ACTIVE"),
                2 => std::borrow::Cow::Borrowed("STATE_STALE"),
                3 => std::borrow::Cow::Borrowed("STATE_INACTIVE"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "STATE_ACTIVE" => std::option::Option::Some(Self::STATE_ACTIVE),
                "STATE_STALE" => std::option::Option::Some(Self::STATE_STALE),
                "STATE_INACTIVE" => std::option::Option::Some(Self::STATE_INACTIVE),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }

    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum ResourceName {
        /// Output only. Resource name of the source Listing.
        /// e.g. projects/123/locations/US/dataExchanges/456/listings/789
        Listing(std::string::String),
        /// Output only. Resource name of the source Data Exchange.
        /// e.g. projects/123/locations/US/dataExchanges/456
        DataExchange(std::string::String),
    }
}

/// Message for requesting the list of data exchanges.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListDataExchangesRequest {
    /// Required. The parent resource path of the data exchanges.
    /// e.g. `projects/myproject/locations/US`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of results to return in a single response page. Leverage
    /// the page tokens to iterate through the entire collection.
    pub page_size: i32,

    /// Page token, returned by a previous call, to request the next page of
    /// results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListDataExchangesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListDataExchangesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListDataExchangesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListDataExchangesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListDataExchangesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.ListDataExchangesRequest"
    }
}

/// Message for response to the list of data exchanges.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListDataExchangesResponse {
    /// The list of data exchanges.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub data_exchanges: std::vec::Vec<crate::model::DataExchange>,

    /// A token to request the next page of results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListDataExchangesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListDataExchangesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [data_exchanges][crate::model::ListDataExchangesResponse::data_exchanges].
    pub fn set_data_exchanges<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::DataExchange>,
    {
        use std::iter::Iterator;
        self.data_exchanges = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListDataExchangesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.ListDataExchangesResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListDataExchangesResponse {
    type PageItem = crate::model::DataExchange;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.data_exchanges
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Message for requesting the list of data exchanges from projects in an
/// organization and location.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListOrgDataExchangesRequest {
    /// Required. The organization resource path of the projects containing
    /// DataExchanges. e.g. `organizations/myorg/locations/US`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub organization: std::string::String,

    /// The maximum number of results to return in a single response page. Leverage
    /// the page tokens to iterate through the entire collection.
    pub page_size: i32,

    /// Page token, returned by a previous call, to request the next page of
    /// results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListOrgDataExchangesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [organization][crate::model::ListOrgDataExchangesRequest::organization].
    pub fn set_organization<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.organization = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListOrgDataExchangesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListOrgDataExchangesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListOrgDataExchangesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesRequest"
    }
}

/// Message for response to listing data exchanges in an organization and
/// location.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListOrgDataExchangesResponse {
    /// The list of data exchanges.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub data_exchanges: std::vec::Vec<crate::model::DataExchange>,

    /// A token to request the next page of results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListOrgDataExchangesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListOrgDataExchangesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [data_exchanges][crate::model::ListOrgDataExchangesResponse::data_exchanges].
    pub fn set_data_exchanges<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::DataExchange>,
    {
        use std::iter::Iterator;
        self.data_exchanges = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListOrgDataExchangesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListOrgDataExchangesResponse {
    type PageItem = crate::model::DataExchange;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.data_exchanges
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Message for getting a data exchange.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetDataExchangeRequest {
    /// Required. The resource name of the data exchange.
    /// e.g. `projects/myproject/locations/US/dataExchanges/123`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetDataExchangeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetDataExchangeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetDataExchangeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.GetDataExchangeRequest"
    }
}

/// Message for creating a data exchange.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateDataExchangeRequest {
    /// Required. The parent resource path of the data exchange.
    /// e.g. `projects/myproject/locations/US`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The ID of the data exchange.
    /// Must contain only ASCII letters, numbers (0-9), underscores (_).
    /// Max length: 100 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub data_exchange_id: std::string::String,

    /// Required. The data exchange to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub data_exchange: std::option::Option<crate::model::DataExchange>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateDataExchangeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateDataExchangeRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [data_exchange_id][crate::model::CreateDataExchangeRequest::data_exchange_id].
    pub fn set_data_exchange_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.data_exchange_id = v.into();
        self
    }

    /// Sets the value of [data_exchange][crate::model::CreateDataExchangeRequest::data_exchange].
    pub fn set_data_exchange<
        T: std::convert::Into<std::option::Option<crate::model::DataExchange>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.data_exchange = v.into();
        self
    }
}

impl wkt::message::Message for CreateDataExchangeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.CreateDataExchangeRequest"
    }
}

/// Message for updating a data exchange.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateDataExchangeRequest {
    /// Required. Field mask specifies the fields to update in the data exchange
    /// resource. The fields specified in the
    /// `updateMask` are relative to the resource and are not a full request.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The data exchange to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub data_exchange: std::option::Option<crate::model::DataExchange>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateDataExchangeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateDataExchangeRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [data_exchange][crate::model::UpdateDataExchangeRequest::data_exchange].
    pub fn set_data_exchange<
        T: std::convert::Into<std::option::Option<crate::model::DataExchange>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.data_exchange = v.into();
        self
    }
}

impl wkt::message::Message for UpdateDataExchangeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.UpdateDataExchangeRequest"
    }
}

/// Message for deleting a data exchange.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteDataExchangeRequest {
    /// Required. The full name of the data exchange resource that you want to
    /// delete. For example, `projects/myproject/locations/US/dataExchanges/123`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteDataExchangeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteDataExchangeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteDataExchangeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.DeleteDataExchangeRequest"
    }
}

/// Message for requesting the list of listings.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListListingsRequest {
    /// Required. The parent resource path of the listing.
    /// e.g. `projects/myproject/locations/US/dataExchanges/123`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of results to return in a single response page. Leverage
    /// the page tokens to iterate through the entire collection.
    pub page_size: i32,

    /// Page token, returned by a previous call, to request the next page of
    /// results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListListingsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListListingsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListListingsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListListingsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListListingsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.ListListingsRequest"
    }
}

/// Message for response to the list of Listings.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListListingsResponse {
    /// The list of Listing.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub listings: std::vec::Vec<crate::model::Listing>,

    /// A token to request the next page of results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListListingsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListListingsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [listings][crate::model::ListListingsResponse::listings].
    pub fn set_listings<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Listing>,
    {
        use std::iter::Iterator;
        self.listings = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListListingsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.ListListingsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListListingsResponse {
    type PageItem = crate::model::Listing;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.listings
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Message for getting a listing.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetListingRequest {
    /// Required. The resource name of the listing.
    /// e.g. `projects/myproject/locations/US/dataExchanges/123/listings/456`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetListingRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetListingRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetListingRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.GetListingRequest"
    }
}

/// Message for creating a listing.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateListingRequest {
    /// Required. The parent resource path of the listing.
    /// e.g. `projects/myproject/locations/US/dataExchanges/123`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The ID of the listing to create.
    /// Must contain only ASCII letters, numbers (0-9), underscores (_).
    /// Max length: 100 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub listing_id: std::string::String,

    /// Required. The listing to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub listing: std::option::Option<crate::model::Listing>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateListingRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateListingRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [listing_id][crate::model::CreateListingRequest::listing_id].
    pub fn set_listing_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.listing_id = v.into();
        self
    }

    /// Sets the value of [listing][crate::model::CreateListingRequest::listing].
    pub fn set_listing<T: std::convert::Into<std::option::Option<crate::model::Listing>>>(
        mut self,
        v: T,
    ) -> Self {
        self.listing = v.into();
        self
    }
}

impl wkt::message::Message for CreateListingRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.CreateListingRequest"
    }
}

/// Message for updating a Listing.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateListingRequest {
    /// Required. Field mask specifies the fields to update in the listing
    /// resource. The fields specified in the `updateMask` are relative to the
    /// resource and are not a full request.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The listing to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub listing: std::option::Option<crate::model::Listing>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateListingRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateListingRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [listing][crate::model::UpdateListingRequest::listing].
    pub fn set_listing<T: std::convert::Into<std::option::Option<crate::model::Listing>>>(
        mut self,
        v: T,
    ) -> Self {
        self.listing = v.into();
        self
    }
}

impl wkt::message::Message for UpdateListingRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.UpdateListingRequest"
    }
}

/// Message for deleting a listing.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteListingRequest {
    /// Required. Resource name of the listing to delete.
    /// e.g. `projects/myproject/locations/US/dataExchanges/123/listings/456`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteListingRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteListingRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteListingRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.DeleteListingRequest"
    }
}

/// Message for subscribing to a listing.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SubscribeListingRequest {
    /// Required. Resource name of the listing that you want to subscribe to.
    /// e.g. `projects/myproject/locations/US/dataExchanges/123/listings/456`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Resulting destination of the listing that you subscribed to.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub destination: std::option::Option<crate::model::subscribe_listing_request::Destination>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SubscribeListingRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::SubscribeListingRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [destination][crate::model::SubscribeListingRequest::destination].
    ///
    /// Note that all the setters affecting `destination` are mutually
    /// exclusive.
    pub fn set_destination<
        T: std::convert::Into<
                std::option::Option<crate::model::subscribe_listing_request::Destination>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination = v.into();
        self
    }

    /// The value of [destination][crate::model::SubscribeListingRequest::destination]
    /// if it holds a `DestinationDataset`, `None` if the field is not set or
    /// holds a different branch.
    pub fn destination_dataset(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::DestinationDataset>> {
        #[allow(unreachable_patterns)]
        self.destination.as_ref().and_then(|v| match v {
            crate::model::subscribe_listing_request::Destination::DestinationDataset(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [destination][crate::model::SubscribeListingRequest::destination]
    /// if it holds a `DestinationPubsubSubscription`, `None` if the field is not set or
    /// holds a different branch.
    pub fn destination_pubsub_subscription(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::DestinationPubSubSubscription>> {
        #[allow(unreachable_patterns)]
        self.destination.as_ref().and_then(|v| match v {
            crate::model::subscribe_listing_request::Destination::DestinationPubsubSubscription(
                v,
            ) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [destination][crate::model::SubscribeListingRequest::destination]
    /// to hold a `DestinationDataset`.
    ///
    /// Note that all the setters affecting `destination` are
    /// mutually exclusive.
    pub fn set_destination_dataset<
        T: std::convert::Into<std::boxed::Box<crate::model::DestinationDataset>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination = std::option::Option::Some(
            crate::model::subscribe_listing_request::Destination::DestinationDataset(v.into()),
        );
        self
    }

    /// Sets the value of [destination][crate::model::SubscribeListingRequest::destination]
    /// to hold a `DestinationPubsubSubscription`.
    ///
    /// Note that all the setters affecting `destination` are
    /// mutually exclusive.
    pub fn set_destination_pubsub_subscription<
        T: std::convert::Into<std::boxed::Box<crate::model::DestinationPubSubSubscription>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination = std::option::Option::Some(
            crate::model::subscribe_listing_request::Destination::DestinationPubsubSubscription(
                v.into(),
            ),
        );
        self
    }
}

impl wkt::message::Message for SubscribeListingRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.SubscribeListingRequest"
    }
}

/// Defines additional types related to [SubscribeListingRequest].
pub mod subscribe_listing_request {
    #[allow(unused_imports)]
    use super::*;

    /// Resulting destination of the listing that you subscribed to.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Destination {
        /// Input only. BigQuery destination dataset to create for the subscriber.
        DestinationDataset(std::boxed::Box<crate::model::DestinationDataset>),
        /// Input only. Destination Pub/Sub subscription to create for the
        /// subscriber.
        DestinationPubsubSubscription(std::boxed::Box<crate::model::DestinationPubSubSubscription>),
    }
}

/// Message for response when you subscribe to a listing.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SubscribeListingResponse {
    /// Subscription object created from this subscribe action.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub subscription: std::option::Option<crate::model::Subscription>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SubscribeListingResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [subscription][crate::model::SubscribeListingResponse::subscription].
    pub fn set_subscription<
        T: std::convert::Into<std::option::Option<crate::model::Subscription>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.subscription = v.into();
        self
    }
}

impl wkt::message::Message for SubscribeListingResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.SubscribeListingResponse"
    }
}

/// Message for subscribing to a Data Exchange.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SubscribeDataExchangeRequest {
    /// Required. Resource name of the Data Exchange.
    /// e.g. `projects/publisherproject/locations/US/dataExchanges/123`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The parent resource path of the Subscription.
    /// e.g. `projects/subscriberproject/locations/US`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub destination: std::string::String,

    /// Optional. BigQuery destination dataset to create for the subscriber.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub destination_dataset: std::option::Option<crate::model::DestinationDataset>,

    /// Required. Name of the subscription to create.
    /// e.g. `subscription1`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub subscription: std::string::String,

    /// Email of the subscriber.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub subscriber_contact: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SubscribeDataExchangeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::SubscribeDataExchangeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [destination][crate::model::SubscribeDataExchangeRequest::destination].
    pub fn set_destination<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.destination = v.into();
        self
    }

    /// Sets the value of [destination_dataset][crate::model::SubscribeDataExchangeRequest::destination_dataset].
    pub fn set_destination_dataset<
        T: std::convert::Into<std::option::Option<crate::model::DestinationDataset>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination_dataset = v.into();
        self
    }

    /// Sets the value of [subscription][crate::model::SubscribeDataExchangeRequest::subscription].
    pub fn set_subscription<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.subscription = v.into();
        self
    }

    /// Sets the value of [subscriber_contact][crate::model::SubscribeDataExchangeRequest::subscriber_contact].
    pub fn set_subscriber_contact<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.subscriber_contact = v.into();
        self
    }
}

impl wkt::message::Message for SubscribeDataExchangeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.SubscribeDataExchangeRequest"
    }
}

/// Message for response when you subscribe to a Data Exchange.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SubscribeDataExchangeResponse {
    /// Subscription object created from this subscribe action.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub subscription: std::option::Option<crate::model::Subscription>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SubscribeDataExchangeResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [subscription][crate::model::SubscribeDataExchangeResponse::subscription].
    pub fn set_subscription<
        T: std::convert::Into<std::option::Option<crate::model::Subscription>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.subscription = v.into();
        self
    }
}

impl wkt::message::Message for SubscribeDataExchangeResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.SubscribeDataExchangeResponse"
    }
}

/// Message for refreshing a subscription.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RefreshSubscriptionRequest {
    /// Required. Resource name of the Subscription to refresh.
    /// e.g. `projects/subscriberproject/locations/US/subscriptions/123`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RefreshSubscriptionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::RefreshSubscriptionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for RefreshSubscriptionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.RefreshSubscriptionRequest"
    }
}

/// Message for response when you refresh a subscription.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RefreshSubscriptionResponse {
    /// The refreshed subscription resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub subscription: std::option::Option<crate::model::Subscription>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RefreshSubscriptionResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [subscription][crate::model::RefreshSubscriptionResponse::subscription].
    pub fn set_subscription<
        T: std::convert::Into<std::option::Option<crate::model::Subscription>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.subscription = v.into();
        self
    }
}

impl wkt::message::Message for RefreshSubscriptionResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.RefreshSubscriptionResponse"
    }
}

/// Message for getting a subscription.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetSubscriptionRequest {
    /// Required. Resource name of the subscription.
    /// e.g. projects/123/locations/US/subscriptions/456
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetSubscriptionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetSubscriptionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetSubscriptionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.GetSubscriptionRequest"
    }
}

/// Message for listing subscriptions.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListSubscriptionsRequest {
    /// Required. The parent resource path of the subscription.
    /// e.g. projects/myproject/locations/US
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// An expression for filtering the results of the request. Eligible
    /// fields for filtering are:
    ///
    /// * `listing`
    /// * `data_exchange`
    ///
    /// Alternatively, a literal wrapped in double quotes may be provided.
    /// This will be checked for an exact match against both fields above.
    ///
    /// In all cases, the full Data Exchange or Listing resource name must
    /// be provided. Some example of using filters:
    ///
    /// * data_exchange="projects/myproject/locations/us/dataExchanges/123"
    /// * listing="projects/123/locations/us/dataExchanges/456/listings/789"
    /// * "projects/myproject/locations/us/dataExchanges/123"
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// The maximum number of results to return in a single response page.
    pub page_size: i32,

    /// Page token, returned by a previous call.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListSubscriptionsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListSubscriptionsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListSubscriptionsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListSubscriptionsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListSubscriptionsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListSubscriptionsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.ListSubscriptionsRequest"
    }
}

/// Message for response to the listing of subscriptions.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListSubscriptionsResponse {
    /// The list of subscriptions.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub subscriptions: std::vec::Vec<crate::model::Subscription>,

    /// Next page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListSubscriptionsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListSubscriptionsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [subscriptions][crate::model::ListSubscriptionsResponse::subscriptions].
    pub fn set_subscriptions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Subscription>,
    {
        use std::iter::Iterator;
        self.subscriptions = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListSubscriptionsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.ListSubscriptionsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListSubscriptionsResponse {
    type PageItem = crate::model::Subscription;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.subscriptions
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Message for listing subscriptions of a shared resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListSharedResourceSubscriptionsRequest {
    /// Required. Resource name of the requested target. This resource may be
    /// either a Listing or a DataExchange. e.g.
    /// projects/123/locations/US/dataExchanges/456 OR e.g.
    /// projects/123/locations/US/dataExchanges/456/listings/789
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub resource: std::string::String,

    /// If selected, includes deleted subscriptions in the response
    /// (up to 63 days after deletion).
    pub include_deleted_subscriptions: bool,

    /// The maximum number of results to return in a single response page.
    pub page_size: i32,

    /// Page token, returned by a previous call.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListSharedResourceSubscriptionsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [resource][crate::model::ListSharedResourceSubscriptionsRequest::resource].
    pub fn set_resource<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.resource = v.into();
        self
    }

    /// Sets the value of [include_deleted_subscriptions][crate::model::ListSharedResourceSubscriptionsRequest::include_deleted_subscriptions].
    pub fn set_include_deleted_subscriptions<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.include_deleted_subscriptions = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListSharedResourceSubscriptionsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListSharedResourceSubscriptionsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListSharedResourceSubscriptionsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.ListSharedResourceSubscriptionsRequest"
    }
}

/// Message for response to the listing of shared resource subscriptions.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListSharedResourceSubscriptionsResponse {
    /// The list of subscriptions.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub shared_resource_subscriptions: std::vec::Vec<crate::model::Subscription>,

    /// Next page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListSharedResourceSubscriptionsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListSharedResourceSubscriptionsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [shared_resource_subscriptions][crate::model::ListSharedResourceSubscriptionsResponse::shared_resource_subscriptions].
    pub fn set_shared_resource_subscriptions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Subscription>,
    {
        use std::iter::Iterator;
        self.shared_resource_subscriptions = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListSharedResourceSubscriptionsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.ListSharedResourceSubscriptionsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListSharedResourceSubscriptionsResponse {
    type PageItem = crate::model::Subscription;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.shared_resource_subscriptions
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Message for revoking a subscription.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RevokeSubscriptionRequest {
    /// Required. Resource name of the subscription to revoke.
    /// e.g. projects/123/locations/US/subscriptions/456
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RevokeSubscriptionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::RevokeSubscriptionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for RevokeSubscriptionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.RevokeSubscriptionRequest"
    }
}

/// Message for response when you revoke a subscription.
/// Empty for now.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RevokeSubscriptionResponse {
    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RevokeSubscriptionResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for RevokeSubscriptionResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.RevokeSubscriptionResponse"
    }
}

/// Message for deleting a subscription.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteSubscriptionRequest {
    /// Required. Resource name of the subscription to delete.
    /// e.g. projects/123/locations/US/subscriptions/456
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteSubscriptionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteSubscriptionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteSubscriptionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.DeleteSubscriptionRequest"
    }
}

/// Represents the metadata of a long-running operation in Analytics Hub.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OperationMetadata {
    /// Output only. The time the operation was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the operation finished running.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Server-defined resource path for the target of the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target: std::string::String,

    /// Output only. Name of the verb executed by the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub verb: std::string::String,

    /// Output only. Human-readable status of the operation, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub status_message: std::string::String,

    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have successfully been cancelled
    /// have [Operation.error][] value with a
    /// [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
    /// `Code.CANCELLED`.
    ///
    /// [google.rpc.Status.code]: rpc::model::Status::code
    pub requested_cancellation: bool,

    /// Output only. API version used to start the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub api_version: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl OperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [create_time][crate::model::OperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::OperationMetadata::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [target][crate::model::OperationMetadata::target].
    pub fn set_target<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [verb][crate::model::OperationMetadata::verb].
    pub fn set_verb<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.verb = v.into();
        self
    }

    /// Sets the value of [status_message][crate::model::OperationMetadata::status_message].
    pub fn set_status_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.status_message = v.into();
        self
    }

    /// Sets the value of [requested_cancellation][crate::model::OperationMetadata::requested_cancellation].
    pub fn set_requested_cancellation<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.requested_cancellation = v.into();
        self
    }

    /// Sets the value of [api_version][crate::model::OperationMetadata::api_version].
    pub fn set_api_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.api_version = v.into();
        self
    }
}

impl wkt::message::Message for OperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.OperationMetadata"
    }
}

/// Defines the destination Pub/Sub subscription.
/// If none of `push_config`, `bigquery_config`, `cloud_storage_config`,
/// `pubsub_export_config`, or `pubsublite_export_config`
/// is set, then the subscriber will pull and ack messages using API methods. At
/// most one of these fields may be set.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PubSubSubscription {
    /// Required. Name of the subscription.
    /// Format is `projects/{project}/subscriptions/{sub}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. If push delivery is used with this subscription, this field is
    /// used to configure it.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub push_config: std::option::Option<crate::model::PushConfig>,

    /// Optional. If delivery to BigQuery is used with this subscription, this
    /// field is used to configure it.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub bigquery_config: std::option::Option<crate::model::BigQueryConfig>,

    /// Optional. If delivery to Google Cloud Storage is used with this
    /// subscription, this field is used to configure it.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub cloud_storage_config: std::option::Option<crate::model::CloudStorageConfig>,

    /// Optional. The approximate amount of time (on a best-effort basis) Pub/Sub
    /// waits for the subscriber to acknowledge receipt before resending the
    /// message. In the interval after the message is delivered and before it is
    /// acknowledged, it is considered to be _outstanding_. During that time
    /// period, the message will not be redelivered (on a best-effort basis).
    ///
    /// For pull subscriptions, this value is used as the initial value for the ack
    /// deadline. To override this value for a given message, call
    /// `ModifyAckDeadline` with the corresponding `ack_id` if using
    /// non-streaming pull or send the `ack_id` in a
    /// `StreamingModifyAckDeadlineRequest` if using streaming pull.
    /// The minimum custom deadline you can specify is 10 seconds.
    /// The maximum custom deadline you can specify is 600 seconds (10 minutes).
    /// If this parameter is 0, a default value of 10 seconds is used.
    ///
    /// For push delivery, this value is also used to set the request timeout for
    /// the call to the push endpoint.
    ///
    /// If the subscriber never acknowledges the message, the Pub/Sub
    /// system will eventually redeliver the message.
    pub ack_deadline_seconds: i32,

    /// Optional. Indicates whether to retain acknowledged messages. If true, then
    /// messages are not expunged from the subscription's backlog, even if they are
    /// acknowledged, until they fall out of the `message_retention_duration`
    /// window. This must be true if you would like to [`Seek` to a timestamp]
    /// (<https://cloud.google.com/pubsub/docs/replay-overview#seek_to_a_time>) in
    /// the past to replay previously-acknowledged messages.
    pub retain_acked_messages: bool,

    /// Optional. How long to retain unacknowledged messages in the subscription's
    /// backlog, from the moment a message is published. If `retain_acked_messages`
    /// is true, then this also configures the retention of acknowledged messages,
    /// and thus configures how far back in time a `Seek` can be done. Defaults to
    /// 7 days. Cannot be more than 31 days or less than 10 minutes.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub message_retention_duration: std::option::Option<wkt::Duration>,

    /// Optional. See [Creating and managing
    /// labels](https://cloud.google.com/pubsub/docs/labels).
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Optional. If true, messages published with the same `ordering_key` in
    /// `PubsubMessage` will be delivered to the subscribers in the order in which
    /// they are received by the Pub/Sub system. Otherwise, they may be delivered
    /// in any order.
    pub enable_message_ordering: bool,

    /// Optional. A policy that specifies the conditions for this subscription's
    /// expiration. A subscription is considered active as long as any connected
    /// subscriber is successfully consuming messages from the subscription or is
    /// issuing operations on the subscription. If `expiration_policy` is not set,
    /// a *default policy* with `ttl` of 31 days will be used. The minimum allowed
    /// value for `expiration_policy.ttl` is 1 day. If `expiration_policy` is set,
    /// but `expiration_policy.ttl` is not set, the subscription never expires.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub expiration_policy: std::option::Option<crate::model::ExpirationPolicy>,

    /// Optional. An expression written in the Pub/Sub [filter
    /// language](https://cloud.google.com/pubsub/docs/filtering). If non-empty,
    /// then only `PubsubMessage`s whose `attributes` field matches the filter are
    /// delivered on this subscription. If empty, then no messages are filtered
    /// out.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. A policy that specifies the conditions for dead lettering
    /// messages in this subscription. If dead_letter_policy is not set, dead
    /// lettering is disabled.
    ///
    /// The Pub/Sub service account associated with this subscriptions's
    /// parent project (i.e.,
    /// service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
    /// permission to Acknowledge() messages on this subscription.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub dead_letter_policy: std::option::Option<crate::model::DeadLetterPolicy>,

    /// Optional. A policy that specifies how Pub/Sub retries message delivery for
    /// this subscription.
    ///
    /// If not set, the default retry policy is applied. This generally implies
    /// that messages will be retried as soon as possible for healthy subscribers.
    /// RetryPolicy will be triggered on NACKs or acknowledgement deadline
    /// exceeded events for a given message.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub retry_policy: std::option::Option<crate::model::RetryPolicy>,

    /// Optional. Indicates whether the subscription is detached from its topic.
    /// Detached subscriptions don't receive messages from their topic and don't
    /// retain any backlog. `Pull` and `StreamingPull` requests will return
    /// FAILED_PRECONDITION. If the subscription is a push subscription, pushes to
    /// the endpoint will not be made.
    pub detached: bool,

    /// Optional. If true, Pub/Sub provides the following guarantees for the
    /// delivery of a message with a given value of `message_id` on this
    /// subscription:
    ///
    /// * The message sent to a subscriber is guaranteed not to be resent
    ///   before the message's acknowledgement deadline expires.
    /// * An acknowledged message will not be resent to a subscriber.
    ///
    /// Note that subscribers may still receive multiple copies of a message
    /// when `enable_exactly_once_delivery` is true if the message was published
    /// multiple times by a publisher client. These copies are  considered distinct
    /// by Pub/Sub and have distinct `message_id` values.
    pub enable_exactly_once_delivery: bool,

    /// Optional. Transforms to be applied to messages before they are delivered to
    /// subscribers. Transforms are applied in the order specified.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub message_transforms: std::vec::Vec<crate::model::MessageTransform>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl PubSubSubscription {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::PubSubSubscription::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [push_config][crate::model::PubSubSubscription::push_config].
    pub fn set_push_config<T: std::convert::Into<std::option::Option<crate::model::PushConfig>>>(
        mut self,
        v: T,
    ) -> Self {
        self.push_config = v.into();
        self
    }

    /// Sets the value of [bigquery_config][crate::model::PubSubSubscription::bigquery_config].
    pub fn set_bigquery_config<
        T: std::convert::Into<std::option::Option<crate::model::BigQueryConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.bigquery_config = v.into();
        self
    }

    /// Sets the value of [cloud_storage_config][crate::model::PubSubSubscription::cloud_storage_config].
    pub fn set_cloud_storage_config<
        T: std::convert::Into<std::option::Option<crate::model::CloudStorageConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.cloud_storage_config = v.into();
        self
    }

    /// Sets the value of [ack_deadline_seconds][crate::model::PubSubSubscription::ack_deadline_seconds].
    pub fn set_ack_deadline_seconds<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.ack_deadline_seconds = v.into();
        self
    }

    /// Sets the value of [retain_acked_messages][crate::model::PubSubSubscription::retain_acked_messages].
    pub fn set_retain_acked_messages<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.retain_acked_messages = v.into();
        self
    }

    /// Sets the value of [message_retention_duration][crate::model::PubSubSubscription::message_retention_duration].
    pub fn set_message_retention_duration<
        T: std::convert::Into<std::option::Option<wkt::Duration>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.message_retention_duration = v.into();
        self
    }

    /// Sets the value of [enable_message_ordering][crate::model::PubSubSubscription::enable_message_ordering].
    pub fn set_enable_message_ordering<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_message_ordering = v.into();
        self
    }

    /// Sets the value of [expiration_policy][crate::model::PubSubSubscription::expiration_policy].
    pub fn set_expiration_policy<
        T: std::convert::Into<std::option::Option<crate::model::ExpirationPolicy>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.expiration_policy = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::PubSubSubscription::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [dead_letter_policy][crate::model::PubSubSubscription::dead_letter_policy].
    pub fn set_dead_letter_policy<
        T: std::convert::Into<std::option::Option<crate::model::DeadLetterPolicy>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.dead_letter_policy = v.into();
        self
    }

    /// Sets the value of [retry_policy][crate::model::PubSubSubscription::retry_policy].
    pub fn set_retry_policy<
        T: std::convert::Into<std::option::Option<crate::model::RetryPolicy>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.retry_policy = v.into();
        self
    }

    /// Sets the value of [detached][crate::model::PubSubSubscription::detached].
    pub fn set_detached<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.detached = v.into();
        self
    }

    /// Sets the value of [enable_exactly_once_delivery][crate::model::PubSubSubscription::enable_exactly_once_delivery].
    pub fn set_enable_exactly_once_delivery<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_exactly_once_delivery = v.into();
        self
    }

    /// Sets the value of [message_transforms][crate::model::PubSubSubscription::message_transforms].
    pub fn set_message_transforms<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::MessageTransform>,
    {
        use std::iter::Iterator;
        self.message_transforms = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [labels][crate::model::PubSubSubscription::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for PubSubSubscription {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.PubSubSubscription"
    }
}

/// A policy that specifies how Pub/Sub retries message delivery.
///
/// Retry delay will be exponential based on provided minimum and maximum
/// backoffs. <https://en.wikipedia.org/wiki/Exponential_backoff>.
///
/// RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded
/// events for a given message.
///
/// Retry Policy is implemented on a best effort basis. At times, the delay
/// between consecutive deliveries may not match the configuration. That is,
/// delay can be more or less than configured backoff.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RetryPolicy {
    /// Optional. The minimum delay between consecutive deliveries of a given
    /// message. Value should be between 0 and 600 seconds. Defaults to 10 seconds.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub minimum_backoff: std::option::Option<wkt::Duration>,

    /// Optional. The maximum delay between consecutive deliveries of a given
    /// message. Value should be between 0 and 600 seconds. Defaults to 600
    /// seconds.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub maximum_backoff: std::option::Option<wkt::Duration>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RetryPolicy {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [minimum_backoff][crate::model::RetryPolicy::minimum_backoff].
    pub fn set_minimum_backoff<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.minimum_backoff = v.into();
        self
    }

    /// Sets the value of [maximum_backoff][crate::model::RetryPolicy::maximum_backoff].
    pub fn set_maximum_backoff<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.maximum_backoff = v.into();
        self
    }
}

impl wkt::message::Message for RetryPolicy {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.RetryPolicy"
    }
}

/// Dead lettering is done on a best effort basis. The same message might be
/// dead lettered multiple times.
///
/// If validation on any of the fields fails at subscription creation/updation,
/// the create/update subscription request will fail.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeadLetterPolicy {
    /// Optional. The name of the topic to which dead letter messages should be
    /// published. Format is `projects/{project}/topics/{topic}`.The Pub/Sub
    /// service account associated with the enclosing subscription's parent project
    /// (i.e., service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must
    /// have permission to Publish() to this topic.
    ///
    /// The operation will fail if the topic does not exist.
    /// Users should ensure that there is a subscription attached to this topic
    /// since messages published to a topic with no subscriptions are lost.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub dead_letter_topic: std::string::String,

    /// Optional. The maximum number of delivery attempts for any message. The
    /// value must be between 5 and 100.
    ///
    /// The number of delivery attempts is defined as 1 + (the sum of number of
    /// NACKs and number of times the acknowledgement deadline has been exceeded
    /// for the message).
    ///
    /// A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
    /// client libraries may automatically extend ack_deadlines.
    ///
    /// This field will be honored on a best effort basis.
    ///
    /// If this parameter is 0, a default value of 5 is used.
    pub max_delivery_attempts: i32,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeadLetterPolicy {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [dead_letter_topic][crate::model::DeadLetterPolicy::dead_letter_topic].
    pub fn set_dead_letter_topic<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.dead_letter_topic = v.into();
        self
    }

    /// Sets the value of [max_delivery_attempts][crate::model::DeadLetterPolicy::max_delivery_attempts].
    pub fn set_max_delivery_attempts<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.max_delivery_attempts = v.into();
        self
    }
}

impl wkt::message::Message for DeadLetterPolicy {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.DeadLetterPolicy"
    }
}

/// A policy that specifies the conditions for resource expiration (i.e.,
/// automatic resource deletion).
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExpirationPolicy {
    /// Optional. Specifies the "time-to-live" duration for an associated resource.
    /// The resource expires if it is not active for a period of `ttl`. The
    /// definition of "activity" depends on the type of the associated resource.
    /// The minimum and maximum allowed values for `ttl` depend on the type of the
    /// associated resource, as well. If `ttl` is not set, the associated resource
    /// never expires.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub ttl: std::option::Option<wkt::Duration>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ExpirationPolicy {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [ttl][crate::model::ExpirationPolicy::ttl].
    pub fn set_ttl<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.ttl = v.into();
        self
    }
}

impl wkt::message::Message for ExpirationPolicy {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.ExpirationPolicy"
    }
}

/// Configuration for a push delivery endpoint.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PushConfig {
    /// Optional. A URL locating the endpoint to which messages should be pushed.
    /// For example, a Webhook endpoint might use `<https://example.com/push>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub push_endpoint: std::string::String,

    /// Optional. Endpoint configuration attributes that can be used to control
    /// different aspects of the message delivery.
    ///
    /// The only currently supported attribute is `x-goog-version`, which you can
    /// use to change the format of the pushed message. This attribute
    /// indicates the version of the data expected by the endpoint. This
    /// controls the shape of the pushed message (i.e., its fields and metadata).
    ///
    /// If not present during the `CreateSubscription` call, it will default to
    /// the version of the Pub/Sub API used to make such call. If not present in a
    /// `ModifyPushConfig` call, its value will not be changed. `GetSubscription`
    /// calls will always return a valid version, even if the subscription was
    /// created without this attribute.
    ///
    /// The only supported values for the `x-goog-version` attribute are:
    ///
    /// * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API.
    /// * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API.
    ///
    /// For example:
    /// `attributes { "x-goog-version": "v1" }`
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub attributes: std::collections::HashMap<std::string::String, std::string::String>,

    /// An authentication method used by push endpoints to verify the source of
    /// push requests. This can be used with push endpoints that are private by
    /// default to allow requests only from the Pub/Sub system, for example.
    /// This field is optional and should be set only by users interested in
    /// authenticated push.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub authentication_method: std::option::Option<crate::model::push_config::AuthenticationMethod>,

    /// The format of the delivered message to the push endpoint is defined by
    /// the chosen wrapper. When unset, `PubsubWrapper` is used.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub wrapper: std::option::Option<crate::model::push_config::Wrapper>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl PushConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [push_endpoint][crate::model::PushConfig::push_endpoint].
    pub fn set_push_endpoint<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.push_endpoint = v.into();
        self
    }

    /// Sets the value of [attributes][crate::model::PushConfig::attributes].
    pub fn set_attributes<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.attributes = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [authentication_method][crate::model::PushConfig::authentication_method].
    ///
    /// Note that all the setters affecting `authentication_method` are mutually
    /// exclusive.
    pub fn set_authentication_method<
        T: std::convert::Into<std::option::Option<crate::model::push_config::AuthenticationMethod>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.authentication_method = v.into();
        self
    }

    /// The value of [authentication_method][crate::model::PushConfig::authentication_method]
    /// if it holds a `OidcToken`, `None` if the field is not set or
    /// holds a different branch.
    pub fn oidc_token(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::push_config::OidcToken>> {
        #[allow(unreachable_patterns)]
        self.authentication_method.as_ref().and_then(|v| match v {
            crate::model::push_config::AuthenticationMethod::OidcToken(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [authentication_method][crate::model::PushConfig::authentication_method]
    /// to hold a `OidcToken`.
    ///
    /// Note that all the setters affecting `authentication_method` are
    /// mutually exclusive.
    pub fn set_oidc_token<
        T: std::convert::Into<std::boxed::Box<crate::model::push_config::OidcToken>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.authentication_method = std::option::Option::Some(
            crate::model::push_config::AuthenticationMethod::OidcToken(v.into()),
        );
        self
    }

    /// Sets the value of [wrapper][crate::model::PushConfig::wrapper].
    ///
    /// Note that all the setters affecting `wrapper` are mutually
    /// exclusive.
    pub fn set_wrapper<
        T: std::convert::Into<std::option::Option<crate::model::push_config::Wrapper>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.wrapper = v.into();
        self
    }

    /// The value of [wrapper][crate::model::PushConfig::wrapper]
    /// if it holds a `PubsubWrapper`, `None` if the field is not set or
    /// holds a different branch.
    pub fn pubsub_wrapper(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::push_config::PubsubWrapper>> {
        #[allow(unreachable_patterns)]
        self.wrapper.as_ref().and_then(|v| match v {
            crate::model::push_config::Wrapper::PubsubWrapper(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [wrapper][crate::model::PushConfig::wrapper]
    /// if it holds a `NoWrapper`, `None` if the field is not set or
    /// holds a different branch.
    pub fn no_wrapper(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::push_config::NoWrapper>> {
        #[allow(unreachable_patterns)]
        self.wrapper.as_ref().and_then(|v| match v {
            crate::model::push_config::Wrapper::NoWrapper(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [wrapper][crate::model::PushConfig::wrapper]
    /// to hold a `PubsubWrapper`.
    ///
    /// Note that all the setters affecting `wrapper` are
    /// mutually exclusive.
    pub fn set_pubsub_wrapper<
        T: std::convert::Into<std::boxed::Box<crate::model::push_config::PubsubWrapper>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.wrapper =
            std::option::Option::Some(crate::model::push_config::Wrapper::PubsubWrapper(v.into()));
        self
    }

    /// Sets the value of [wrapper][crate::model::PushConfig::wrapper]
    /// to hold a `NoWrapper`.
    ///
    /// Note that all the setters affecting `wrapper` are
    /// mutually exclusive.
    pub fn set_no_wrapper<
        T: std::convert::Into<std::boxed::Box<crate::model::push_config::NoWrapper>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.wrapper =
            std::option::Option::Some(crate::model::push_config::Wrapper::NoWrapper(v.into()));
        self
    }
}

impl wkt::message::Message for PushConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.PushConfig"
    }
}

/// Defines additional types related to [PushConfig].
pub mod push_config {
    #[allow(unused_imports)]
    use super::*;

    /// Contains information needed for generating an
    /// [OpenID Connect
    /// token](https://developers.google.com/identity/protocols/OpenIDConnect).
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct OidcToken {
        /// Optional. [Service account
        /// email](https://cloud.google.com/iam/docs/service-accounts)
        /// used for generating the OIDC token. For more information
        /// on setting up authentication, see
        /// [Push subscriptions](https://cloud.google.com/pubsub/docs/push).
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub service_account_email: std::string::String,

        /// Optional. Audience to be used when generating OIDC token. The audience
        /// claim identifies the recipients that the JWT is intended for. The
        /// audience value is a single case-sensitive string. Having multiple values
        /// (array) for the audience field is not supported. More info about the OIDC
        /// JWT token audience here:
        /// <https://tools.ietf.org/html/rfc7519#section-4.1.3> Note: if not specified,
        /// the Push endpoint URL will be used.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub audience: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl OidcToken {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [service_account_email][crate::model::push_config::OidcToken::service_account_email].
        pub fn set_service_account_email<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.service_account_email = v.into();
            self
        }

        /// Sets the value of [audience][crate::model::push_config::OidcToken::audience].
        pub fn set_audience<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.audience = v.into();
            self
        }
    }

    impl wkt::message::Message for OidcToken {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.PushConfig.OidcToken"
        }
    }

    /// The payload to the push endpoint is in the form of the JSON representation
    /// of a PubsubMessage
    /// (<https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#pubsubmessage>).
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct PubsubWrapper {
        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl PubsubWrapper {
        pub fn new() -> Self {
            std::default::Default::default()
        }
    }

    impl wkt::message::Message for PubsubWrapper {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.PushConfig.PubsubWrapper"
        }
    }

    /// Sets the `data` field as the HTTP body for delivery.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct NoWrapper {
        /// Optional. When true, writes the Pub/Sub message metadata to
        /// `x-goog-pubsub-<KEY>:<VAL>` headers of the HTTP request. Writes the
        /// Pub/Sub message attributes to `<KEY>:<VAL>` headers of the HTTP request.
        pub write_metadata: bool,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl NoWrapper {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [write_metadata][crate::model::push_config::NoWrapper::write_metadata].
        pub fn set_write_metadata<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.write_metadata = v.into();
            self
        }
    }

    impl wkt::message::Message for NoWrapper {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.PushConfig.NoWrapper"
        }
    }

    /// An authentication method used by push endpoints to verify the source of
    /// push requests. This can be used with push endpoints that are private by
    /// default to allow requests only from the Pub/Sub system, for example.
    /// This field is optional and should be set only by users interested in
    /// authenticated push.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum AuthenticationMethod {
        /// Optional. If specified, Pub/Sub will generate and attach an OIDC JWT
        /// token as an `Authorization` header in the HTTP request for every pushed
        /// message.
        OidcToken(std::boxed::Box<crate::model::push_config::OidcToken>),
    }

    /// The format of the delivered message to the push endpoint is defined by
    /// the chosen wrapper. When unset, `PubsubWrapper` is used.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Wrapper {
        /// Optional. When set, the payload to the push endpoint is in the form of
        /// the JSON representation of a PubsubMessage
        /// (<https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#pubsubmessage>).
        PubsubWrapper(std::boxed::Box<crate::model::push_config::PubsubWrapper>),
        /// Optional. When set, the payload to the push endpoint is not wrapped.
        NoWrapper(std::boxed::Box<crate::model::push_config::NoWrapper>),
    }
}

/// Configuration for a BigQuery subscription.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BigQueryConfig {
    /// Optional. The name of the table to which to write data, of the form
    /// {projectId}.{datasetId}.{tableId}
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub table: std::string::String,

    /// Optional. When true, use the topic's schema as the columns to write to in
    /// BigQuery, if it exists. `use_topic_schema` and `use_table_schema` cannot be
    /// enabled at the same time.
    pub use_topic_schema: bool,

    /// Optional. When true, write the subscription name, message_id, publish_time,
    /// attributes, and ordering_key to additional columns in the table. The
    /// subscription name, message_id, and publish_time fields are put in their own
    /// columns while all other message properties (other than data) are written to
    /// a JSON object in the attributes column.
    pub write_metadata: bool,

    /// Optional. When true and use_topic_schema is true, any fields that are a
    /// part of the topic schema that are not part of the BigQuery table schema are
    /// dropped when writing to BigQuery. Otherwise, the schemas must be kept in
    /// sync and any messages with extra fields are not written and remain in the
    /// subscription's backlog.
    pub drop_unknown_fields: bool,

    /// Optional. When true, use the BigQuery table's schema as the columns to
    /// write to in BigQuery. `use_table_schema` and `use_topic_schema` cannot be
    /// enabled at the same time.
    pub use_table_schema: bool,

    /// Optional. The service account to use to write to BigQuery. The subscription
    /// creator or updater that specifies this field must have
    /// `iam.serviceAccounts.actAs` permission on the service account. If not
    /// specified, the Pub/Sub [service
    /// agent](https://cloud.google.com/iam/docs/service-agents),
    /// service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com, is used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_account_email: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl BigQueryConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [table][crate::model::BigQueryConfig::table].
    pub fn set_table<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.table = v.into();
        self
    }

    /// Sets the value of [use_topic_schema][crate::model::BigQueryConfig::use_topic_schema].
    pub fn set_use_topic_schema<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.use_topic_schema = v.into();
        self
    }

    /// Sets the value of [write_metadata][crate::model::BigQueryConfig::write_metadata].
    pub fn set_write_metadata<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.write_metadata = v.into();
        self
    }

    /// Sets the value of [drop_unknown_fields][crate::model::BigQueryConfig::drop_unknown_fields].
    pub fn set_drop_unknown_fields<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.drop_unknown_fields = v.into();
        self
    }

    /// Sets the value of [use_table_schema][crate::model::BigQueryConfig::use_table_schema].
    pub fn set_use_table_schema<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.use_table_schema = v.into();
        self
    }

    /// Sets the value of [service_account_email][crate::model::BigQueryConfig::service_account_email].
    pub fn set_service_account_email<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.service_account_email = v.into();
        self
    }
}

impl wkt::message::Message for BigQueryConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.BigQueryConfig"
    }
}

/// Configuration for a Cloud Storage subscription.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CloudStorageConfig {
    /// Required. User-provided name for the Cloud Storage bucket.
    /// The bucket must be created by the user. The bucket name must be without
    /// any prefix like "gs://". See the [bucket naming
    /// requirements] (<https://cloud.google.com/storage/docs/buckets#naming>).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub bucket: std::string::String,

    /// Optional. User-provided prefix for Cloud Storage filename. See the [object
    /// naming requirements](https://cloud.google.com/storage/docs/objects#naming).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filename_prefix: std::string::String,

    /// Optional. User-provided suffix for Cloud Storage filename. See the [object
    /// naming requirements](https://cloud.google.com/storage/docs/objects#naming).
    /// Must not end in "/".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filename_suffix: std::string::String,

    /// Optional. User-provided format string specifying how to represent datetimes
    /// in Cloud Storage filenames. See the [datetime format
    /// guidance](https://cloud.google.com/pubsub/docs/create-cloudstorage-subscription#file_names).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filename_datetime_format: std::string::String,

    /// Optional. File batching settings.
    /// If no max_duration setting is specified, a max_duration of 5 minutes will
    /// be set by default. max_duration is required regardless of whether other
    /// file batching settings are specified.
    ///
    /// The maximum duration that can elapse before a new Cloud Storage file is
    /// created. Min 1 minute, max 10 minutes, default 5 minutes. May not exceed
    /// the subscription's acknowledgement deadline.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub max_duration: std::option::Option<wkt::Duration>,

    /// Optional. The maximum bytes that can be written to a Cloud Storage file
    /// before a new file is created. Min 1 KB, max 10 GiB. The max_bytes limit may
    /// be exceeded in cases where messages are larger than the limit.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub max_bytes: i64,

    /// Optional. The maximum number of messages that can be written to a Cloud
    /// Storage file before a new file is created. Min 1000 messages.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub max_messages: i64,

    /// Optional. The service account to use to write to Cloud Storage. The
    /// subscription creator or updater that specifies this field must have
    /// `iam.serviceAccounts.actAs` permission on the service account. If not
    /// specified, the Pub/Sub
    /// [service agent](https://cloud.google.com/iam/docs/service-agents),
    /// service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com, is used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_account_email: std::string::String,

    /// Defaults to text format.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub output_format: std::option::Option<crate::model::cloud_storage_config::OutputFormat>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CloudStorageConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [bucket][crate::model::CloudStorageConfig::bucket].
    pub fn set_bucket<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.bucket = v.into();
        self
    }

    /// Sets the value of [filename_prefix][crate::model::CloudStorageConfig::filename_prefix].
    pub fn set_filename_prefix<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filename_prefix = v.into();
        self
    }

    /// Sets the value of [filename_suffix][crate::model::CloudStorageConfig::filename_suffix].
    pub fn set_filename_suffix<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filename_suffix = v.into();
        self
    }

    /// Sets the value of [filename_datetime_format][crate::model::CloudStorageConfig::filename_datetime_format].
    pub fn set_filename_datetime_format<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.filename_datetime_format = v.into();
        self
    }

    /// Sets the value of [max_duration][crate::model::CloudStorageConfig::max_duration].
    pub fn set_max_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.max_duration = v.into();
        self
    }

    /// Sets the value of [max_bytes][crate::model::CloudStorageConfig::max_bytes].
    pub fn set_max_bytes<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.max_bytes = v.into();
        self
    }

    /// Sets the value of [max_messages][crate::model::CloudStorageConfig::max_messages].
    pub fn set_max_messages<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.max_messages = v.into();
        self
    }

    /// Sets the value of [service_account_email][crate::model::CloudStorageConfig::service_account_email].
    pub fn set_service_account_email<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.service_account_email = v.into();
        self
    }

    /// Sets the value of [output_format][crate::model::CloudStorageConfig::output_format].
    ///
    /// Note that all the setters affecting `output_format` are mutually
    /// exclusive.
    pub fn set_output_format<
        T: std::convert::Into<std::option::Option<crate::model::cloud_storage_config::OutputFormat>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.output_format = v.into();
        self
    }

    /// The value of [output_format][crate::model::CloudStorageConfig::output_format]
    /// if it holds a `TextConfig`, `None` if the field is not set or
    /// holds a different branch.
    pub fn text_config(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::cloud_storage_config::TextConfig>> {
        #[allow(unreachable_patterns)]
        self.output_format.as_ref().and_then(|v| match v {
            crate::model::cloud_storage_config::OutputFormat::TextConfig(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [output_format][crate::model::CloudStorageConfig::output_format]
    /// if it holds a `AvroConfig`, `None` if the field is not set or
    /// holds a different branch.
    pub fn avro_config(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::cloud_storage_config::AvroConfig>> {
        #[allow(unreachable_patterns)]
        self.output_format.as_ref().and_then(|v| match v {
            crate::model::cloud_storage_config::OutputFormat::AvroConfig(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [output_format][crate::model::CloudStorageConfig::output_format]
    /// to hold a `TextConfig`.
    ///
    /// Note that all the setters affecting `output_format` are
    /// mutually exclusive.
    pub fn set_text_config<
        T: std::convert::Into<std::boxed::Box<crate::model::cloud_storage_config::TextConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.output_format = std::option::Option::Some(
            crate::model::cloud_storage_config::OutputFormat::TextConfig(v.into()),
        );
        self
    }

    /// Sets the value of [output_format][crate::model::CloudStorageConfig::output_format]
    /// to hold a `AvroConfig`.
    ///
    /// Note that all the setters affecting `output_format` are
    /// mutually exclusive.
    pub fn set_avro_config<
        T: std::convert::Into<std::boxed::Box<crate::model::cloud_storage_config::AvroConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.output_format = std::option::Option::Some(
            crate::model::cloud_storage_config::OutputFormat::AvroConfig(v.into()),
        );
        self
    }
}

impl wkt::message::Message for CloudStorageConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.CloudStorageConfig"
    }
}

/// Defines additional types related to [CloudStorageConfig].
pub mod cloud_storage_config {
    #[allow(unused_imports)]
    use super::*;

    /// Configuration for writing message data in text format.
    /// Message payloads will be written to files as raw text, separated by a
    /// newline.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct TextConfig {
        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl TextConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }
    }

    impl wkt::message::Message for TextConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.CloudStorageConfig.TextConfig"
        }
    }

    /// Configuration for writing message data in Avro format.
    /// Message payloads and metadata will be written to files as an Avro binary.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AvroConfig {
        /// Optional. When true, write the subscription name, message_id,
        /// publish_time, attributes, and ordering_key as additional fields in the
        /// output. The subscription name, message_id, and publish_time fields are
        /// put in their own fields while all other message properties other than
        /// data (for example, an ordering_key, if present) are added as entries in
        /// the attributes map.
        pub write_metadata: bool,

        /// Optional. When true, the output Cloud Storage file will be serialized
        /// using the topic schema, if it exists.
        pub use_topic_schema: bool,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl AvroConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [write_metadata][crate::model::cloud_storage_config::AvroConfig::write_metadata].
        pub fn set_write_metadata<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.write_metadata = v.into();
            self
        }

        /// Sets the value of [use_topic_schema][crate::model::cloud_storage_config::AvroConfig::use_topic_schema].
        pub fn set_use_topic_schema<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.use_topic_schema = v.into();
            self
        }
    }

    impl wkt::message::Message for AvroConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.CloudStorageConfig.AvroConfig"
        }
    }

    /// Defaults to text format.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum OutputFormat {
        /// Optional. If set, message data will be written to Cloud Storage in text
        /// format.
        TextConfig(std::boxed::Box<crate::model::cloud_storage_config::TextConfig>),
        /// Optional. If set, message data will be written to Cloud Storage in Avro
        /// format.
        AvroConfig(std::boxed::Box<crate::model::cloud_storage_config::AvroConfig>),
    }
}

/// All supported message transforms types.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageTransform {
    /// Optional. This field is deprecated, use the `disabled` field to disable
    /// transforms.
    pub enabled: bool,

    /// Optional. If true, the transform is disabled and will not be applied to
    /// messages. Defaults to `false`.
    pub disabled: bool,

    /// The type of transform to apply to messages.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub transform: std::option::Option<crate::model::message_transform::Transform>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageTransform {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [enabled][crate::model::MessageTransform::enabled].
    pub fn set_enabled<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enabled = v.into();
        self
    }

    /// Sets the value of [disabled][crate::model::MessageTransform::disabled].
    pub fn set_disabled<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.disabled = v.into();
        self
    }

    /// Sets the value of [transform][crate::model::MessageTransform::transform].
    ///
    /// Note that all the setters affecting `transform` are mutually
    /// exclusive.
    pub fn set_transform<
        T: std::convert::Into<std::option::Option<crate::model::message_transform::Transform>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.transform = v.into();
        self
    }

    /// The value of [transform][crate::model::MessageTransform::transform]
    /// if it holds a `JavascriptUdf`, `None` if the field is not set or
    /// holds a different branch.
    pub fn javascript_udf(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::JavaScriptUDF>> {
        #[allow(unreachable_patterns)]
        self.transform.as_ref().and_then(|v| match v {
            crate::model::message_transform::Transform::JavascriptUdf(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [transform][crate::model::MessageTransform::transform]
    /// to hold a `JavascriptUdf`.
    ///
    /// Note that all the setters affecting `transform` are
    /// mutually exclusive.
    pub fn set_javascript_udf<
        T: std::convert::Into<std::boxed::Box<crate::model::JavaScriptUDF>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.transform = std::option::Option::Some(
            crate::model::message_transform::Transform::JavascriptUdf(v.into()),
        );
        self
    }
}

impl wkt::message::Message for MessageTransform {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.MessageTransform"
    }
}

/// Defines additional types related to [MessageTransform].
pub mod message_transform {
    #[allow(unused_imports)]
    use super::*;

    /// The type of transform to apply to messages.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Transform {
        /// Optional. JavaScript User Defined Function. If multiple JavaScriptUDF's
        /// are specified on a resource, each must have a unique `function_name`.
        JavascriptUdf(std::boxed::Box<crate::model::JavaScriptUDF>),
    }
}

/// User-defined JavaScript function that can transform or filter a Pub/Sub
/// message.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct JavaScriptUDF {
    /// Required. Name of the JavasScript function that should applied to Pub/Sub
    /// messages.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub function_name: std::string::String,

    /// Required. JavaScript code that contains a function `function_name` with the
    /// below signature:
    ///
    /// ```norust
    ///   /**
    ///   * Transforms a Pub/Sub message.
    ///
    ///   * @return {(Object<string, (string | Object<string, string>)>|null)} - To
    ///   * filter a message, return `null`. To transform a message return a map
    ///   * with the following keys:
    ///   *   - (required) 'data' : {string}
    ///   *   - (optional) 'attributes' : {Object<string, string>}
    ///   * Returning empty `attributes` will remove all attributes from the
    ///   * message.
    ///   *
    ///   * @param  {(Object<string, (string | Object<string, string>)>} Pub/Sub
    ///   * message. Keys:
    ///   *   - (required) 'data' : {string}
    ///   *   - (required) 'attributes' : {Object<string, string>}
    ///   *
    ///   * @param  {Object<string, any>} metadata - Pub/Sub message metadata.
    ///   * Keys:
    ///   *   - (required) 'message_id'  : {string}
    ///   *   - (optional) 'publish_time': {string} YYYY-MM-DDTHH:MM:SSZ format
    ///   *   - (optional) 'ordering_key': {string}
    ///   */
    ///
    ///   function <function_name>(message, metadata) {
    ///   }
    /// ```
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl JavaScriptUDF {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [function_name][crate::model::JavaScriptUDF::function_name].
    pub fn set_function_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.function_name = v.into();
        self
    }

    /// Sets the value of [code][crate::model::JavaScriptUDF::code].
    pub fn set_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.code = v.into();
        self
    }
}

impl wkt::message::Message for JavaScriptUDF {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.JavaScriptUDF"
    }
}

/// Specifies the type of discovery on the discovery page. Note that
/// this does not control the visibility of the exchange/listing which is
/// defined by IAM permission.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct DiscoveryType(i32);

impl DiscoveryType {
    /// Unspecified. Defaults to DISCOVERY_TYPE_PRIVATE.
    pub const DISCOVERY_TYPE_UNSPECIFIED: DiscoveryType = DiscoveryType::new(0);

    /// The Data exchange/listing can be discovered in the 'Private' results
    /// list.
    pub const DISCOVERY_TYPE_PRIVATE: DiscoveryType = DiscoveryType::new(1);

    /// The Data exchange/listing can be discovered in the 'Public' results
    /// list.
    pub const DISCOVERY_TYPE_PUBLIC: DiscoveryType = DiscoveryType::new(2);

    /// Creates a new DiscoveryType instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("DISCOVERY_TYPE_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("DISCOVERY_TYPE_PRIVATE"),
            2 => std::borrow::Cow::Borrowed("DISCOVERY_TYPE_PUBLIC"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "DISCOVERY_TYPE_UNSPECIFIED" => {
                std::option::Option::Some(Self::DISCOVERY_TYPE_UNSPECIFIED)
            }
            "DISCOVERY_TYPE_PRIVATE" => std::option::Option::Some(Self::DISCOVERY_TYPE_PRIVATE),
            "DISCOVERY_TYPE_PUBLIC" => std::option::Option::Some(Self::DISCOVERY_TYPE_PUBLIC),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for DiscoveryType {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for DiscoveryType {
    fn default() -> Self {
        Self::new(0)
    }
}

/// The underlying shared asset type shared in a listing by a publisher.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct SharedResourceType(i32);

impl SharedResourceType {
    /// Not specified.
    pub const SHARED_RESOURCE_TYPE_UNSPECIFIED: SharedResourceType = SharedResourceType::new(0);

    /// BigQuery Dataset Asset.
    pub const BIGQUERY_DATASET: SharedResourceType = SharedResourceType::new(1);

    /// Pub/Sub Topic Asset.
    pub const PUBSUB_TOPIC: SharedResourceType = SharedResourceType::new(2);

    /// Creates a new SharedResourceType instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("SHARED_RESOURCE_TYPE_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("BIGQUERY_DATASET"),
            2 => std::borrow::Cow::Borrowed("PUBSUB_TOPIC"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "SHARED_RESOURCE_TYPE_UNSPECIFIED" => {
                std::option::Option::Some(Self::SHARED_RESOURCE_TYPE_UNSPECIFIED)
            }
            "BIGQUERY_DATASET" => std::option::Option::Some(Self::BIGQUERY_DATASET),
            "PUBSUB_TOPIC" => std::option::Option::Some(Self::PUBSUB_TOPIC),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for SharedResourceType {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for SharedResourceType {
    fn default() -> Self {
        Self::new(0)
    }
}
