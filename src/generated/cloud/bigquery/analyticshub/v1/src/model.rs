// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gclient;
extern crate iam_v1;
extern crate lazy_static;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// A data exchange is a container that lets you share data. Along with the
/// descriptive information about the data exchange, it contains listings that
/// reference shared datasets.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DataExchange {
    /// Output only. The resource name of the data exchange.
    /// e.g. `projects/myproject/locations/US/dataExchanges/123`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. Human-readable display name of the data exchange. The display
    /// name must contain only Unicode letters, numbers (0-9), underscores (_),
    /// dashes (-), spaces ( ), ampersands (&) and must not start or end with
    /// spaces. Default value is an empty string. Max length: 63 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Optional. Description of the data exchange. The description must not
    /// contain Unicode non-characters as well as C0 and C1 control codes except
    /// tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF).
    /// Default value is an empty string.
    /// Max length: 2000 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. Email or URL of the primary point of contact of the data
    /// exchange. Max Length: 1000 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub primary_contact: std::string::String,

    /// Optional. Documentation describing the data exchange.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub documentation: std::string::String,

    /// Output only. Number of listings contained in the data exchange.
    pub listing_count: i32,

    /// Optional. Base64 encoded image representing the data exchange. Max
    /// Size: 3.0MiB Expected image dimensions are 512x512 pixels, however the API
    /// only performs validation on size of the encoded data. Note: For byte
    /// fields, the content of the fields are base64-encoded (which increases the
    /// size of the data by 33-36%) when using JSON on the wire.
    #[serde(skip_serializing_if = "::bytes::Bytes::is_empty")]
    #[serde_as(as = "serde_with::base64::Base64")]
    pub icon: ::bytes::Bytes,

    /// Optional. Configurable data sharing environment option for a data exchange.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub sharing_environment_config: std::option::Option<crate::model::SharingEnvironmentConfig>,

    /// Optional. Type of discovery on the discovery page for all the listings
    /// under this exchange. Updating this field also updates (overwrites) the
    /// discovery_type field for all the listings under this exchange.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub discovery_type: std::option::Option<crate::model::DiscoveryType>,
}

impl DataExchange {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DataExchange::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::DataExchange::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::DataExchange::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [primary_contact][crate::model::DataExchange::primary_contact].
    pub fn set_primary_contact<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.primary_contact = v.into();
        self
    }

    /// Sets the value of [documentation][crate::model::DataExchange::documentation].
    pub fn set_documentation<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.documentation = v.into();
        self
    }

    /// Sets the value of [listing_count][crate::model::DataExchange::listing_count].
    pub fn set_listing_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.listing_count = v.into();
        self
    }

    /// Sets the value of [icon][crate::model::DataExchange::icon].
    pub fn set_icon<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.icon = v.into();
        self
    }

    /// Sets the value of [sharing_environment_config][crate::model::DataExchange::sharing_environment_config].
    pub fn set_sharing_environment_config<
        T: std::convert::Into<std::option::Option<crate::model::SharingEnvironmentConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.sharing_environment_config = v.into();
        self
    }

    /// Sets the value of [discovery_type][crate::model::DataExchange::discovery_type].
    pub fn set_discovery_type<
        T: std::convert::Into<std::option::Option<crate::model::DiscoveryType>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.discovery_type = v.into();
        self
    }
}

impl wkt::message::Message for DataExchange {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.DataExchange"
    }
}

/// Sharing environment is a behavior model for sharing data within a
/// data exchange. This option is configurable for a data exchange.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SharingEnvironmentConfig {
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub environment: std::option::Option<crate::model::sharing_environment_config::Environment>,
}

impl SharingEnvironmentConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of `environment`.
    pub fn set_environment<
        T: std::convert::Into<
            std::option::Option<crate::model::sharing_environment_config::Environment>,
        >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.environment = v.into();
        self
    }

    /// The value of [environment][crate::model::SharingEnvironmentConfig::environment]
    /// if it holds a `DefaultExchangeConfig`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_default_exchange_config(
        &self,
    ) -> std::option::Option<
        &std::boxed::Box<crate::model::sharing_environment_config::DefaultExchangeConfig>,
    > {
        #[allow(unreachable_patterns)]
        self.environment.as_ref().and_then(|v| match v {
            crate::model::sharing_environment_config::Environment::DefaultExchangeConfig(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [environment][crate::model::SharingEnvironmentConfig::environment]
    /// if it holds a `DcrExchangeConfig`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_dcr_exchange_config(
        &self,
    ) -> std::option::Option<
        &std::boxed::Box<crate::model::sharing_environment_config::DcrExchangeConfig>,
    > {
        #[allow(unreachable_patterns)]
        self.environment.as_ref().and_then(|v| match v {
            crate::model::sharing_environment_config::Environment::DcrExchangeConfig(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [environment][crate::model::SharingEnvironmentConfig::environment]
    /// to hold a `DefaultExchangeConfig`.
    ///
    /// Note that all the setters affecting `environment` are
    /// mutually exclusive.
    pub fn set_default_exchange_config<
        T: std::convert::Into<
            std::boxed::Box<crate::model::sharing_environment_config::DefaultExchangeConfig>,
        >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.environment = std::option::Option::Some(
            crate::model::sharing_environment_config::Environment::DefaultExchangeConfig(v.into()),
        );
        self
    }

    /// Sets the value of [environment][crate::model::SharingEnvironmentConfig::environment]
    /// to hold a `DcrExchangeConfig`.
    ///
    /// Note that all the setters affecting `environment` are
    /// mutually exclusive.
    pub fn set_dcr_exchange_config<
        T: std::convert::Into<
            std::boxed::Box<crate::model::sharing_environment_config::DcrExchangeConfig>,
        >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.environment = std::option::Option::Some(
            crate::model::sharing_environment_config::Environment::DcrExchangeConfig(v.into()),
        );
        self
    }
}

impl wkt::message::Message for SharingEnvironmentConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.SharingEnvironmentConfig"
    }
}

/// Defines additional types related to SharingEnvironmentConfig
pub mod sharing_environment_config {
    #[allow(unused_imports)]
    use super::*;

    /// Default Analytics Hub data exchange, used for secured data sharing.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct DefaultExchangeConfig {}

    impl DefaultExchangeConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }
    }

    impl wkt::message::Message for DefaultExchangeConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.SharingEnvironmentConfig.DefaultExchangeConfig"
        }
    }

    /// Data Clean Room (DCR), used for privacy-safe and secured data sharing.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct DcrExchangeConfig {
        /// Output only. If True, this DCR restricts the contributors to sharing
        /// only a single resource in a Listing. And no two resources should have the
        /// same IDs. So if a contributor adds a view with a conflicting name, the
        /// CreateListing API will reject the request. if False, the data contributor
        /// can publish an entire dataset (as before). This is not configurable, and
        /// by default, all new DCRs will have the restriction set to True.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub single_selected_resource_sharing_restriction: std::option::Option<bool>,

        /// Output only. If True, when subscribing to this DCR, it will create only
        /// one linked dataset containing all resources shared within the
        /// cleanroom. If False, when subscribing to this DCR, it will
        /// create 1 linked dataset per listing. This is not configurable, and by
        /// default, all new DCRs will have the restriction set to True.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub single_linked_dataset_per_cleanroom: std::option::Option<bool>,
    }

    impl DcrExchangeConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [single_selected_resource_sharing_restriction][crate::model::sharing_environment_config::DcrExchangeConfig::single_selected_resource_sharing_restriction].
        pub fn set_single_selected_resource_sharing_restriction<
            T: std::convert::Into<std::option::Option<bool>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.single_selected_resource_sharing_restriction = v.into();
            self
        }

        /// Sets the value of [single_linked_dataset_per_cleanroom][crate::model::sharing_environment_config::DcrExchangeConfig::single_linked_dataset_per_cleanroom].
        pub fn set_single_linked_dataset_per_cleanroom<
            T: std::convert::Into<std::option::Option<bool>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.single_linked_dataset_per_cleanroom = v.into();
            self
        }
    }

    impl wkt::message::Message for DcrExchangeConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.SharingEnvironmentConfig.DcrExchangeConfig"
        }
    }

    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Environment {
        /// Default Analytics Hub data exchange, used for secured data sharing.
        DefaultExchangeConfig(
            std::boxed::Box<crate::model::sharing_environment_config::DefaultExchangeConfig>,
        ),
        /// Data Clean Room (DCR), used for privacy-safe and secured data sharing.
        DcrExchangeConfig(
            std::boxed::Box<crate::model::sharing_environment_config::DcrExchangeConfig>,
        ),
    }
}

/// Contains details of the data provider.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DataProvider {
    /// Optional. Name of the data provider.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. Email or URL of the data provider.
    /// Max Length: 1000 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub primary_contact: std::string::String,
}

impl DataProvider {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DataProvider::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [primary_contact][crate::model::DataProvider::primary_contact].
    pub fn set_primary_contact<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.primary_contact = v.into();
        self
    }
}

impl wkt::message::Message for DataProvider {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.DataProvider"
    }
}

/// Contains details of the listing publisher.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Publisher {
    /// Optional. Name of the listing publisher.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. Email or URL of the listing publisher.
    /// Max Length: 1000 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub primary_contact: std::string::String,
}

impl Publisher {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Publisher::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [primary_contact][crate::model::Publisher::primary_contact].
    pub fn set_primary_contact<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.primary_contact = v.into();
        self
    }
}

impl wkt::message::Message for Publisher {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.Publisher"
    }
}

/// Contains the reference that identifies a destination bigquery dataset.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DestinationDatasetReference {
    /// Required. A unique ID for this dataset, without the project name. The ID
    /// must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_).
    /// The maximum length is 1,024 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub dataset_id: std::string::String,

    /// Required. The ID of the project containing this dataset.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub project_id: std::string::String,
}

impl DestinationDatasetReference {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [dataset_id][crate::model::DestinationDatasetReference::dataset_id].
    pub fn set_dataset_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.dataset_id = v.into();
        self
    }

    /// Sets the value of [project_id][crate::model::DestinationDatasetReference::project_id].
    pub fn set_project_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.project_id = v.into();
        self
    }
}

impl wkt::message::Message for DestinationDatasetReference {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.DestinationDatasetReference"
    }
}

/// Defines the destination bigquery dataset.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DestinationDataset {
    /// Required. A reference that identifies the destination dataset.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub dataset_reference: std::option::Option<crate::model::DestinationDatasetReference>,

    /// Optional. A descriptive name for the dataset.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub friendly_name: std::option::Option<wkt::StringValue>,

    /// Optional. A user-friendly description of the dataset.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub description: std::option::Option<wkt::StringValue>,

    /// Optional. The labels associated with this dataset. You can use these
    /// to organize and group your datasets.
    /// You can set this property when inserting or updating a dataset.
    /// See <https://cloud.google.com/resource-manager/docs/creating-managing-labels>
    /// for more information.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Required. The geographic location where the dataset should reside. See
    /// <https://cloud.google.com/bigquery/docs/locations> for supported
    /// locations.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub location: std::string::String,
}

impl DestinationDataset {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [dataset_reference][crate::model::DestinationDataset::dataset_reference].
    pub fn set_dataset_reference<
        T: std::convert::Into<std::option::Option<crate::model::DestinationDatasetReference>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.dataset_reference = v.into();
        self
    }

    /// Sets the value of [friendly_name][crate::model::DestinationDataset::friendly_name].
    pub fn set_friendly_name<T: std::convert::Into<std::option::Option<wkt::StringValue>>>(
        mut self,
        v: T,
    ) -> Self {
        self.friendly_name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::DestinationDataset::description].
    pub fn set_description<T: std::convert::Into<std::option::Option<wkt::StringValue>>>(
        mut self,
        v: T,
    ) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [location][crate::model::DestinationDataset::location].
    pub fn set_location<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.location = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::DestinationDataset::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for DestinationDataset {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.DestinationDataset"
    }
}

/// A listing is what gets published into a data exchange that a subscriber can
/// subscribe to. It contains a reference to the data source along with
/// descriptive information that will help subscribers find and subscribe the
/// data.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Listing {
    /// Output only. The resource name of the listing.
    /// e.g. `projects/myproject/locations/US/dataExchanges/123/listings/456`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. Human-readable display name of the listing. The display name must
    /// contain only Unicode letters, numbers (0-9), underscores (_), dashes (-),
    /// spaces ( ), ampersands (&) and can't start or end with spaces. Default
    /// value is an empty string. Max length: 63 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Optional. Short description of the listing. The description must not
    /// contain Unicode non-characters and C0 and C1 control codes except tabs
    /// (HT), new lines (LF), carriage returns (CR), and page breaks (FF). Default
    /// value is an empty string. Max length: 2000 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. Email or URL of the primary point of contact of the listing.
    /// Max Length: 1000 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub primary_contact: std::string::String,

    /// Optional. Documentation describing the listing.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub documentation: std::string::String,

    /// Output only. Current state of the listing.
    pub state: crate::model::listing::State,

    /// Optional. Base64 encoded image representing the listing. Max Size: 3.0MiB
    /// Expected image dimensions are 512x512 pixels, however the API only
    /// performs validation on size of the encoded data.
    /// Note: For byte fields, the contents of the field are base64-encoded (which
    /// increases the size of the data by 33-36%) when using JSON on the wire.
    #[serde(skip_serializing_if = "::bytes::Bytes::is_empty")]
    #[serde_as(as = "serde_with::base64::Base64")]
    pub icon: ::bytes::Bytes,

    /// Optional. Details of the data provider who owns the source data.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub data_provider: std::option::Option<crate::model::DataProvider>,

    /// Optional. Categories of the listing. Up to two categories are allowed.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub categories: std::vec::Vec<crate::model::listing::Category>,

    /// Optional. Details of the publisher who owns the listing and who can share
    /// the source data.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub publisher: std::option::Option<crate::model::Publisher>,

    /// Optional. Email or URL of the request access of the listing.
    /// Subscribers can use this reference to request access.
    /// Max Length: 1000 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_access: std::string::String,

    /// Optional. If set, restricted export configuration will be propagated and
    /// enforced on the linked dataset.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub restricted_export_config:
        std::option::Option<crate::model::listing::RestrictedExportConfig>,

    /// Optional. Type of discovery of the listing on the discovery page.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub discovery_type: std::option::Option<crate::model::DiscoveryType>,

    /// Listing source.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub source: std::option::Option<crate::model::listing::Source>,
}

impl Listing {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Listing::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::Listing::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Listing::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [primary_contact][crate::model::Listing::primary_contact].
    pub fn set_primary_contact<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.primary_contact = v.into();
        self
    }

    /// Sets the value of [documentation][crate::model::Listing::documentation].
    pub fn set_documentation<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.documentation = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Listing::state].
    pub fn set_state<T: std::convert::Into<crate::model::listing::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [icon][crate::model::Listing::icon].
    pub fn set_icon<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.icon = v.into();
        self
    }

    /// Sets the value of [data_provider][crate::model::Listing::data_provider].
    pub fn set_data_provider<
        T: std::convert::Into<std::option::Option<crate::model::DataProvider>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.data_provider = v.into();
        self
    }

    /// Sets the value of [publisher][crate::model::Listing::publisher].
    pub fn set_publisher<T: std::convert::Into<std::option::Option<crate::model::Publisher>>>(
        mut self,
        v: T,
    ) -> Self {
        self.publisher = v.into();
        self
    }

    /// Sets the value of [request_access][crate::model::Listing::request_access].
    pub fn set_request_access<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_access = v.into();
        self
    }

    /// Sets the value of [restricted_export_config][crate::model::Listing::restricted_export_config].
    pub fn set_restricted_export_config<
        T: std::convert::Into<std::option::Option<crate::model::listing::RestrictedExportConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.restricted_export_config = v.into();
        self
    }

    /// Sets the value of [discovery_type][crate::model::Listing::discovery_type].
    pub fn set_discovery_type<
        T: std::convert::Into<std::option::Option<crate::model::DiscoveryType>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.discovery_type = v.into();
        self
    }

    /// Sets the value of [categories][crate::model::Listing::categories].
    pub fn set_categories<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::listing::Category>,
    {
        use std::iter::Iterator;
        self.categories = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of `source`.
    pub fn set_source<T: std::convert::Into<std::option::Option<crate::model::listing::Source>>>(
        mut self,
        v: T,
    ) -> Self {
        self.source = v.into();
        self
    }

    /// The value of [source][crate::model::Listing::source]
    /// if it holds a `BigqueryDataset`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_bigquery_dataset(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::listing::BigQueryDatasetSource>> {
        #[allow(unreachable_patterns)]
        self.source.as_ref().and_then(|v| match v {
            crate::model::listing::Source::BigqueryDataset(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [source][crate::model::Listing::source]
    /// to hold a `BigqueryDataset`.
    ///
    /// Note that all the setters affecting `source` are
    /// mutually exclusive.
    pub fn set_bigquery_dataset<
        T: std::convert::Into<std::boxed::Box<crate::model::listing::BigQueryDatasetSource>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source =
            std::option::Option::Some(crate::model::listing::Source::BigqueryDataset(v.into()));
        self
    }
}

impl wkt::message::Message for Listing {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.Listing"
    }
}

/// Defines additional types related to Listing
pub mod listing {
    #[allow(unused_imports)]
    use super::*;

    /// A reference to a shared dataset. It is an existing BigQuery dataset with a
    /// collection of objects such as tables and views that you want to share
    /// with subscribers.
    /// When subscriber's subscribe to a listing, Analytics Hub creates a linked
    /// dataset in
    /// the subscriber's project. A Linked dataset is an opaque, read-only BigQuery
    /// dataset that serves as a _symbolic link_ to a shared dataset.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct BigQueryDatasetSource {
        /// Resource name of the dataset source for this listing.
        /// e.g. `projects/myproject/datasets/123`
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub dataset: std::string::String,

        /// Optional. Resources in this dataset that are selectively shared.
        /// If this field is empty, then the entire dataset (all resources) are
        /// shared. This field is only valid for data clean room exchanges.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub selected_resources:
            std::vec::Vec<crate::model::listing::big_query_dataset_source::SelectedResource>,

        /// Optional. If set, restricted export policy will be propagated and
        /// enforced on the linked dataset.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub restricted_export_policy: std::option::Option<
            crate::model::listing::big_query_dataset_source::RestrictedExportPolicy,
        >,
    }

    impl BigQueryDatasetSource {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [dataset][crate::model::listing::BigQueryDatasetSource::dataset].
        pub fn set_dataset<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.dataset = v.into();
            self
        }

        /// Sets the value of [restricted_export_policy][crate::model::listing::BigQueryDatasetSource::restricted_export_policy].
        pub fn set_restricted_export_policy<
            T: std::convert::Into<
                std::option::Option<
                    crate::model::listing::big_query_dataset_source::RestrictedExportPolicy,
                >,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.restricted_export_policy = v.into();
            self
        }

        /// Sets the value of [selected_resources][crate::model::listing::BigQueryDatasetSource::selected_resources].
        pub fn set_selected_resources<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<
                crate::model::listing::big_query_dataset_source::SelectedResource,
            >,
        {
            use std::iter::Iterator;
            self.selected_resources = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for BigQueryDatasetSource {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.Listing.BigQueryDatasetSource"
        }
    }

    /// Defines additional types related to BigQueryDatasetSource
    pub mod big_query_dataset_source {
        #[allow(unused_imports)]
        use super::*;

        /// Resource in this dataset that are selectively shared.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct SelectedResource {
            #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
            pub resource: std::option::Option<
                crate::model::listing::big_query_dataset_source::selected_resource::Resource,
            >,
        }

        impl SelectedResource {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of `resource`.
            pub fn set_resource<T: std::convert::Into<std::option::Option<crate::model::listing::big_query_dataset_source::selected_resource::Resource>>>(mut self, v: T) -> Self
            {
                self.resource = v.into();
                self
            }

            /// The value of [resource][crate::model::listing::big_query_dataset_source::SelectedResource::resource]
            /// if it holds a `Table`, `None` if the field is not set or
            /// holds a different branch.
            pub fn get_table(&self) -> std::option::Option<&std::string::String> {
                #[allow(unreachable_patterns)]
                self.resource.as_ref().and_then(|v| match v {
                    crate::model::listing::big_query_dataset_source::selected_resource::Resource::Table(v) => std::option::Option::Some(v),
                    _ => std::option::Option::None,
                })
            }

            /// Sets the value of [resource][crate::model::listing::big_query_dataset_source::SelectedResource::resource]
            /// to hold a `Table`.
            ///
            /// Note that all the setters affecting `resource` are
            /// mutually exclusive.
            pub fn set_table<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.resource = std::option::Option::Some(
                    crate::model::listing::big_query_dataset_source::selected_resource::Resource::Table(
                        v.into()
                    )
                );
                self
            }
        }

        impl wkt::message::Message for SelectedResource {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.Listing.BigQueryDatasetSource.SelectedResource"
            }
        }

        /// Defines additional types related to SelectedResource
        pub mod selected_resource {
            #[allow(unused_imports)]
            use super::*;

            #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
            #[serde(rename_all = "camelCase")]
            #[non_exhaustive]
            pub enum Resource {
                /// Optional. Format:
                /// For table:
                /// `projects/{projectId}/datasets/{datasetId}/tables/{tableId}`
                /// Example:"projects/test_project/datasets/test_dataset/tables/test_table"
                Table(std::string::String),
            }
        }

        /// Restricted export policy used to configure restricted export on linked
        /// dataset.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct RestrictedExportPolicy {
            /// Optional. If true, enable restricted export.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub enabled: std::option::Option<wkt::BoolValue>,

            /// Optional. If true, restrict direct table access (read
            /// api/tabledata.list) on linked table.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub restrict_direct_table_access: std::option::Option<wkt::BoolValue>,

            /// Optional. If true, restrict export of query result derived from
            /// restricted linked dataset table.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub restrict_query_result: std::option::Option<wkt::BoolValue>,
        }

        impl RestrictedExportPolicy {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [enabled][crate::model::listing::big_query_dataset_source::RestrictedExportPolicy::enabled].
            pub fn set_enabled<T: std::convert::Into<std::option::Option<wkt::BoolValue>>>(
                mut self,
                v: T,
            ) -> Self {
                self.enabled = v.into();
                self
            }

            /// Sets the value of [restrict_direct_table_access][crate::model::listing::big_query_dataset_source::RestrictedExportPolicy::restrict_direct_table_access].
            pub fn set_restrict_direct_table_access<
                T: std::convert::Into<std::option::Option<wkt::BoolValue>>,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.restrict_direct_table_access = v.into();
                self
            }

            /// Sets the value of [restrict_query_result][crate::model::listing::big_query_dataset_source::RestrictedExportPolicy::restrict_query_result].
            pub fn set_restrict_query_result<
                T: std::convert::Into<std::option::Option<wkt::BoolValue>>,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.restrict_query_result = v.into();
                self
            }
        }

        impl wkt::message::Message for RestrictedExportPolicy {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.Listing.BigQueryDatasetSource.RestrictedExportPolicy"
            }
        }
    }

    /// Restricted export config, used to configure restricted export on linked
    /// dataset.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct RestrictedExportConfig {
        /// Optional. If true, enable restricted export.
        pub enabled: bool,

        /// Output only. If true, restrict direct table access(read
        /// api/tabledata.list) on linked table.
        pub restrict_direct_table_access: bool,

        /// Optional. If true, restrict export of query result derived from
        /// restricted linked dataset table.
        pub restrict_query_result: bool,
    }

    impl RestrictedExportConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [enabled][crate::model::listing::RestrictedExportConfig::enabled].
        pub fn set_enabled<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.enabled = v.into();
            self
        }

        /// Sets the value of [restrict_direct_table_access][crate::model::listing::RestrictedExportConfig::restrict_direct_table_access].
        pub fn set_restrict_direct_table_access<T: std::convert::Into<bool>>(
            mut self,
            v: T,
        ) -> Self {
            self.restrict_direct_table_access = v.into();
            self
        }

        /// Sets the value of [restrict_query_result][crate::model::listing::RestrictedExportConfig::restrict_query_result].
        pub fn set_restrict_query_result<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.restrict_query_result = v.into();
            self
        }
    }

    impl wkt::message::Message for RestrictedExportConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.Listing.RestrictedExportConfig"
        }
    }

    /// State of the listing.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// Default value. This value is unused.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// Subscribable state. Users with dataexchange.listings.subscribe permission
        /// can subscribe to this listing.
        pub const ACTIVE: State = State::new(1);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("ACTIVE"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "ACTIVE" => std::option::Option::Some(Self::ACTIVE),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Listing categories.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Category(i32);

    impl Category {
        pub const CATEGORY_UNSPECIFIED: Category = Category::new(0);

        pub const CATEGORY_OTHERS: Category = Category::new(1);

        pub const CATEGORY_ADVERTISING_AND_MARKETING: Category = Category::new(2);

        pub const CATEGORY_COMMERCE: Category = Category::new(3);

        pub const CATEGORY_CLIMATE_AND_ENVIRONMENT: Category = Category::new(4);

        pub const CATEGORY_DEMOGRAPHICS: Category = Category::new(5);

        pub const CATEGORY_ECONOMICS: Category = Category::new(6);

        pub const CATEGORY_EDUCATION: Category = Category::new(7);

        pub const CATEGORY_ENERGY: Category = Category::new(8);

        pub const CATEGORY_FINANCIAL: Category = Category::new(9);

        pub const CATEGORY_GAMING: Category = Category::new(10);

        pub const CATEGORY_GEOSPATIAL: Category = Category::new(11);

        pub const CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE: Category = Category::new(12);

        pub const CATEGORY_MEDIA: Category = Category::new(13);

        pub const CATEGORY_PUBLIC_SECTOR: Category = Category::new(14);

        pub const CATEGORY_RETAIL: Category = Category::new(15);

        pub const CATEGORY_SPORTS: Category = Category::new(16);

        pub const CATEGORY_SCIENCE_AND_RESEARCH: Category = Category::new(17);

        pub const CATEGORY_TRANSPORTATION_AND_LOGISTICS: Category = Category::new(18);

        pub const CATEGORY_TRAVEL_AND_TOURISM: Category = Category::new(19);

        /// Creates a new Category instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("CATEGORY_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CATEGORY_OTHERS"),
                2 => std::borrow::Cow::Borrowed("CATEGORY_ADVERTISING_AND_MARKETING"),
                3 => std::borrow::Cow::Borrowed("CATEGORY_COMMERCE"),
                4 => std::borrow::Cow::Borrowed("CATEGORY_CLIMATE_AND_ENVIRONMENT"),
                5 => std::borrow::Cow::Borrowed("CATEGORY_DEMOGRAPHICS"),
                6 => std::borrow::Cow::Borrowed("CATEGORY_ECONOMICS"),
                7 => std::borrow::Cow::Borrowed("CATEGORY_EDUCATION"),
                8 => std::borrow::Cow::Borrowed("CATEGORY_ENERGY"),
                9 => std::borrow::Cow::Borrowed("CATEGORY_FINANCIAL"),
                10 => std::borrow::Cow::Borrowed("CATEGORY_GAMING"),
                11 => std::borrow::Cow::Borrowed("CATEGORY_GEOSPATIAL"),
                12 => std::borrow::Cow::Borrowed("CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE"),
                13 => std::borrow::Cow::Borrowed("CATEGORY_MEDIA"),
                14 => std::borrow::Cow::Borrowed("CATEGORY_PUBLIC_SECTOR"),
                15 => std::borrow::Cow::Borrowed("CATEGORY_RETAIL"),
                16 => std::borrow::Cow::Borrowed("CATEGORY_SPORTS"),
                17 => std::borrow::Cow::Borrowed("CATEGORY_SCIENCE_AND_RESEARCH"),
                18 => std::borrow::Cow::Borrowed("CATEGORY_TRANSPORTATION_AND_LOGISTICS"),
                19 => std::borrow::Cow::Borrowed("CATEGORY_TRAVEL_AND_TOURISM"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "CATEGORY_UNSPECIFIED" => std::option::Option::Some(Self::CATEGORY_UNSPECIFIED),
                "CATEGORY_OTHERS" => std::option::Option::Some(Self::CATEGORY_OTHERS),
                "CATEGORY_ADVERTISING_AND_MARKETING" => {
                    std::option::Option::Some(Self::CATEGORY_ADVERTISING_AND_MARKETING)
                }
                "CATEGORY_COMMERCE" => std::option::Option::Some(Self::CATEGORY_COMMERCE),
                "CATEGORY_CLIMATE_AND_ENVIRONMENT" => {
                    std::option::Option::Some(Self::CATEGORY_CLIMATE_AND_ENVIRONMENT)
                }
                "CATEGORY_DEMOGRAPHICS" => std::option::Option::Some(Self::CATEGORY_DEMOGRAPHICS),
                "CATEGORY_ECONOMICS" => std::option::Option::Some(Self::CATEGORY_ECONOMICS),
                "CATEGORY_EDUCATION" => std::option::Option::Some(Self::CATEGORY_EDUCATION),
                "CATEGORY_ENERGY" => std::option::Option::Some(Self::CATEGORY_ENERGY),
                "CATEGORY_FINANCIAL" => std::option::Option::Some(Self::CATEGORY_FINANCIAL),
                "CATEGORY_GAMING" => std::option::Option::Some(Self::CATEGORY_GAMING),
                "CATEGORY_GEOSPATIAL" => std::option::Option::Some(Self::CATEGORY_GEOSPATIAL),
                "CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE" => {
                    std::option::Option::Some(Self::CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE)
                }
                "CATEGORY_MEDIA" => std::option::Option::Some(Self::CATEGORY_MEDIA),
                "CATEGORY_PUBLIC_SECTOR" => std::option::Option::Some(Self::CATEGORY_PUBLIC_SECTOR),
                "CATEGORY_RETAIL" => std::option::Option::Some(Self::CATEGORY_RETAIL),
                "CATEGORY_SPORTS" => std::option::Option::Some(Self::CATEGORY_SPORTS),
                "CATEGORY_SCIENCE_AND_RESEARCH" => {
                    std::option::Option::Some(Self::CATEGORY_SCIENCE_AND_RESEARCH)
                }
                "CATEGORY_TRANSPORTATION_AND_LOGISTICS" => {
                    std::option::Option::Some(Self::CATEGORY_TRANSPORTATION_AND_LOGISTICS)
                }
                "CATEGORY_TRAVEL_AND_TOURISM" => {
                    std::option::Option::Some(Self::CATEGORY_TRAVEL_AND_TOURISM)
                }
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for Category {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for Category {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Listing source.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Source {
        /// Required. Shared dataset i.e. BigQuery dataset source.
        BigqueryDataset(std::boxed::Box<crate::model::listing::BigQueryDatasetSource>),
    }
}

/// A subscription represents a subscribers' access to a particular set of
/// published data. It contains references to associated listings,
/// data exchanges, and linked datasets.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Subscription {
    /// Output only. The resource name of the subscription.
    /// e.g. `projects/myproject/locations/US/subscriptions/123`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Timestamp when the subscription was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub creation_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Timestamp when the subscription was last modified.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub last_modify_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Organization of the project this subscription belongs to.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub organization_id: std::string::String,

    /// Output only. Display name of the project of this subscription.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub organization_display_name: std::string::String,

    /// Output only. Current state of the subscription.
    pub state: crate::model::subscription::State,

    /// Output only. Map of listing resource names to associated linked resource,
    /// e.g. projects/123/locations/US/dataExchanges/456/listings/789
    /// ->
    /// projects/123/datasets/my_dataset
    ///
    /// For listing-level subscriptions, this is a map of size 1.
    /// Only contains values if state == STATE_ACTIVE.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub linked_dataset_map:
        std::collections::HashMap<std::string::String, crate::model::subscription::LinkedResource>,

    /// Output only. Email of the subscriber.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub subscriber_contact: std::string::String,

    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub resource_name: std::option::Option<crate::model::subscription::ResourceName>,
}

impl Subscription {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Subscription::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [creation_time][crate::model::Subscription::creation_time].
    pub fn set_creation_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.creation_time = v.into();
        self
    }

    /// Sets the value of [last_modify_time][crate::model::Subscription::last_modify_time].
    pub fn set_last_modify_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.last_modify_time = v.into();
        self
    }

    /// Sets the value of [organization_id][crate::model::Subscription::organization_id].
    pub fn set_organization_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.organization_id = v.into();
        self
    }

    /// Sets the value of [organization_display_name][crate::model::Subscription::organization_display_name].
    pub fn set_organization_display_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.organization_display_name = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Subscription::state].
    pub fn set_state<T: std::convert::Into<crate::model::subscription::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [subscriber_contact][crate::model::Subscription::subscriber_contact].
    pub fn set_subscriber_contact<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.subscriber_contact = v.into();
        self
    }

    /// Sets the value of [linked_dataset_map][crate::model::Subscription::linked_dataset_map].
    pub fn set_linked_dataset_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::subscription::LinkedResource>,
    {
        use std::iter::Iterator;
        self.linked_dataset_map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of `resource_name`.
    pub fn set_resource_name<
        T: std::convert::Into<std::option::Option<crate::model::subscription::ResourceName>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.resource_name = v.into();
        self
    }

    /// The value of [resource_name][crate::model::Subscription::resource_name]
    /// if it holds a `Listing`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_listing(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.resource_name.as_ref().and_then(|v| match v {
            crate::model::subscription::ResourceName::Listing(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [resource_name][crate::model::Subscription::resource_name]
    /// if it holds a `DataExchange`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_data_exchange(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.resource_name.as_ref().and_then(|v| match v {
            crate::model::subscription::ResourceName::DataExchange(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [resource_name][crate::model::Subscription::resource_name]
    /// to hold a `Listing`.
    ///
    /// Note that all the setters affecting `resource_name` are
    /// mutually exclusive.
    pub fn set_listing<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.resource_name =
            std::option::Option::Some(crate::model::subscription::ResourceName::Listing(v.into()));
        self
    }

    /// Sets the value of [resource_name][crate::model::Subscription::resource_name]
    /// to hold a `DataExchange`.
    ///
    /// Note that all the setters affecting `resource_name` are
    /// mutually exclusive.
    pub fn set_data_exchange<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.resource_name = std::option::Option::Some(
            crate::model::subscription::ResourceName::DataExchange(v.into()),
        );
        self
    }
}

impl wkt::message::Message for Subscription {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.Subscription"
    }
}

/// Defines additional types related to Subscription
pub mod subscription {
    #[allow(unused_imports)]
    use super::*;

    /// Reference to a linked resource tracked by this Subscription.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct LinkedResource {
        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub reference: std::option::Option<crate::model::subscription::linked_resource::Reference>,
    }

    impl LinkedResource {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of `reference`.
        pub fn set_reference<
            T: std::convert::Into<
                std::option::Option<crate::model::subscription::linked_resource::Reference>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.reference = v.into();
            self
        }

        /// The value of [reference][crate::model::subscription::LinkedResource::reference]
        /// if it holds a `LinkedDataset`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_linked_dataset(&self) -> std::option::Option<&std::string::String> {
            #[allow(unreachable_patterns)]
            self.reference.as_ref().and_then(|v| match v {
                crate::model::subscription::linked_resource::Reference::LinkedDataset(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [reference][crate::model::subscription::LinkedResource::reference]
        /// to hold a `LinkedDataset`.
        ///
        /// Note that all the setters affecting `reference` are
        /// mutually exclusive.
        pub fn set_linked_dataset<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.reference = std::option::Option::Some(
                crate::model::subscription::linked_resource::Reference::LinkedDataset(v.into()),
            );
            self
        }
    }

    impl wkt::message::Message for LinkedResource {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.Subscription.LinkedResource"
        }
    }

    /// Defines additional types related to LinkedResource
    pub mod linked_resource {
        #[allow(unused_imports)]
        use super::*;

        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum Reference {
            /// Output only. Name of the linked dataset, e.g.
            /// projects/subscriberproject/datasets/linked_dataset
            LinkedDataset(std::string::String),
        }
    }

    /// State of the subscription.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// Default value. This value is unused.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// This subscription is active and the data is accessible.
        pub const STATE_ACTIVE: State = State::new(1);

        /// The data referenced by this subscription is out of date and should be
        /// refreshed. This can happen when a data provider adds or removes datasets.
        pub const STATE_STALE: State = State::new(2);

        /// This subscription has been cancelled or revoked and the data is no longer
        /// accessible.
        pub const STATE_INACTIVE: State = State::new(3);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("STATE_ACTIVE"),
                2 => std::borrow::Cow::Borrowed("STATE_STALE"),
                3 => std::borrow::Cow::Borrowed("STATE_INACTIVE"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "STATE_ACTIVE" => std::option::Option::Some(Self::STATE_ACTIVE),
                "STATE_STALE" => std::option::Option::Some(Self::STATE_STALE),
                "STATE_INACTIVE" => std::option::Option::Some(Self::STATE_INACTIVE),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }

    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum ResourceName {
        /// Output only. Resource name of the source Listing.
        /// e.g. projects/123/locations/US/dataExchanges/456/listings/789
        Listing(std::string::String),
        /// Output only. Resource name of the source Data Exchange.
        /// e.g. projects/123/locations/US/dataExchanges/456
        DataExchange(std::string::String),
    }
}

/// Message for requesting the list of data exchanges.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListDataExchangesRequest {
    /// Required. The parent resource path of the data exchanges.
    /// e.g. `projects/myproject/locations/US`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of results to return in a single response page. Leverage
    /// the page tokens to iterate through the entire collection.
    pub page_size: i32,

    /// Page token, returned by a previous call, to request the next page of
    /// results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListDataExchangesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListDataExchangesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListDataExchangesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListDataExchangesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListDataExchangesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.ListDataExchangesRequest"
    }
}

/// Message for response to the list of data exchanges.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListDataExchangesResponse {
    /// The list of data exchanges.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub data_exchanges: std::vec::Vec<crate::model::DataExchange>,

    /// A token to request the next page of results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListDataExchangesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListDataExchangesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [data_exchanges][crate::model::ListDataExchangesResponse::data_exchanges].
    pub fn set_data_exchanges<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::DataExchange>,
    {
        use std::iter::Iterator;
        self.data_exchanges = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListDataExchangesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.ListDataExchangesResponse"
    }
}

impl gax::paginator::PageableResponse for ListDataExchangesResponse {
    type PageItem = crate::model::DataExchange;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.data_exchanges
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Message for requesting the list of data exchanges from projects in an
/// organization and location.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListOrgDataExchangesRequest {
    /// Required. The organization resource path of the projects containing
    /// DataExchanges. e.g. `organizations/myorg/locations/US`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub organization: std::string::String,

    /// The maximum number of results to return in a single response page. Leverage
    /// the page tokens to iterate through the entire collection.
    pub page_size: i32,

    /// Page token, returned by a previous call, to request the next page of
    /// results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListOrgDataExchangesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [organization][crate::model::ListOrgDataExchangesRequest::organization].
    pub fn set_organization<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.organization = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListOrgDataExchangesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListOrgDataExchangesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListOrgDataExchangesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesRequest"
    }
}

/// Message for response to listing data exchanges in an organization and
/// location.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListOrgDataExchangesResponse {
    /// The list of data exchanges.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub data_exchanges: std::vec::Vec<crate::model::DataExchange>,

    /// A token to request the next page of results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListOrgDataExchangesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListOrgDataExchangesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [data_exchanges][crate::model::ListOrgDataExchangesResponse::data_exchanges].
    pub fn set_data_exchanges<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::DataExchange>,
    {
        use std::iter::Iterator;
        self.data_exchanges = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListOrgDataExchangesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesResponse"
    }
}

impl gax::paginator::PageableResponse for ListOrgDataExchangesResponse {
    type PageItem = crate::model::DataExchange;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.data_exchanges
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Message for getting a data exchange.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetDataExchangeRequest {
    /// Required. The resource name of the data exchange.
    /// e.g. `projects/myproject/locations/US/dataExchanges/123`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetDataExchangeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetDataExchangeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetDataExchangeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.GetDataExchangeRequest"
    }
}

/// Message for creating a data exchange.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateDataExchangeRequest {
    /// Required. The parent resource path of the data exchange.
    /// e.g. `projects/myproject/locations/US`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The ID of the data exchange.
    /// Must contain only Unicode letters, numbers (0-9), underscores (_).
    /// Should not use characters that require URL-escaping, or characters
    /// outside of ASCII, spaces.
    /// Max length: 100 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub data_exchange_id: std::string::String,

    /// Required. The data exchange to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub data_exchange: std::option::Option<crate::model::DataExchange>,
}

impl CreateDataExchangeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateDataExchangeRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [data_exchange_id][crate::model::CreateDataExchangeRequest::data_exchange_id].
    pub fn set_data_exchange_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.data_exchange_id = v.into();
        self
    }

    /// Sets the value of [data_exchange][crate::model::CreateDataExchangeRequest::data_exchange].
    pub fn set_data_exchange<
        T: std::convert::Into<std::option::Option<crate::model::DataExchange>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.data_exchange = v.into();
        self
    }
}

impl wkt::message::Message for CreateDataExchangeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.CreateDataExchangeRequest"
    }
}

/// Message for updating a data exchange.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateDataExchangeRequest {
    /// Required. Field mask specifies the fields to update in the data exchange
    /// resource. The fields specified in the
    /// `updateMask` are relative to the resource and are not a full request.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The data exchange to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub data_exchange: std::option::Option<crate::model::DataExchange>,
}

impl UpdateDataExchangeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateDataExchangeRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [data_exchange][crate::model::UpdateDataExchangeRequest::data_exchange].
    pub fn set_data_exchange<
        T: std::convert::Into<std::option::Option<crate::model::DataExchange>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.data_exchange = v.into();
        self
    }
}

impl wkt::message::Message for UpdateDataExchangeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.UpdateDataExchangeRequest"
    }
}

/// Message for deleting a data exchange.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteDataExchangeRequest {
    /// Required. The full name of the data exchange resource that you want to
    /// delete. For example, `projects/myproject/locations/US/dataExchanges/123`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteDataExchangeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteDataExchangeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteDataExchangeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.DeleteDataExchangeRequest"
    }
}

/// Message for requesting the list of listings.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListListingsRequest {
    /// Required. The parent resource path of the listing.
    /// e.g. `projects/myproject/locations/US/dataExchanges/123`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of results to return in a single response page. Leverage
    /// the page tokens to iterate through the entire collection.
    pub page_size: i32,

    /// Page token, returned by a previous call, to request the next page of
    /// results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListListingsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListListingsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListListingsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListListingsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListListingsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.ListListingsRequest"
    }
}

/// Message for response to the list of Listings.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListListingsResponse {
    /// The list of Listing.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub listings: std::vec::Vec<crate::model::Listing>,

    /// A token to request the next page of results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListListingsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListListingsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [listings][crate::model::ListListingsResponse::listings].
    pub fn set_listings<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Listing>,
    {
        use std::iter::Iterator;
        self.listings = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListListingsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.ListListingsResponse"
    }
}

impl gax::paginator::PageableResponse for ListListingsResponse {
    type PageItem = crate::model::Listing;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.listings
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Message for getting a listing.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetListingRequest {
    /// Required. The resource name of the listing.
    /// e.g. `projects/myproject/locations/US/dataExchanges/123/listings/456`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetListingRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetListingRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetListingRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.GetListingRequest"
    }
}

/// Message for creating a listing.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateListingRequest {
    /// Required. The parent resource path of the listing.
    /// e.g. `projects/myproject/locations/US/dataExchanges/123`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The ID of the listing to create.
    /// Must contain only Unicode letters, numbers (0-9), underscores (_).
    /// Should not use characters that require URL-escaping, or characters
    /// outside of ASCII, spaces.
    /// Max length: 100 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub listing_id: std::string::String,

    /// Required. The listing to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub listing: std::option::Option<crate::model::Listing>,
}

impl CreateListingRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateListingRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [listing_id][crate::model::CreateListingRequest::listing_id].
    pub fn set_listing_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.listing_id = v.into();
        self
    }

    /// Sets the value of [listing][crate::model::CreateListingRequest::listing].
    pub fn set_listing<T: std::convert::Into<std::option::Option<crate::model::Listing>>>(
        mut self,
        v: T,
    ) -> Self {
        self.listing = v.into();
        self
    }
}

impl wkt::message::Message for CreateListingRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.CreateListingRequest"
    }
}

/// Message for updating a Listing.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateListingRequest {
    /// Required. Field mask specifies the fields to update in the listing
    /// resource. The fields specified in the `updateMask` are relative to the
    /// resource and are not a full request.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The listing to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub listing: std::option::Option<crate::model::Listing>,
}

impl UpdateListingRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateListingRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [listing][crate::model::UpdateListingRequest::listing].
    pub fn set_listing<T: std::convert::Into<std::option::Option<crate::model::Listing>>>(
        mut self,
        v: T,
    ) -> Self {
        self.listing = v.into();
        self
    }
}

impl wkt::message::Message for UpdateListingRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.UpdateListingRequest"
    }
}

/// Message for deleting a listing.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteListingRequest {
    /// Required. Resource name of the listing to delete.
    /// e.g. `projects/myproject/locations/US/dataExchanges/123/listings/456`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteListingRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteListingRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteListingRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.DeleteListingRequest"
    }
}

/// Message for subscribing to a listing.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SubscribeListingRequest {
    /// Required. Resource name of the listing that you want to subscribe to.
    /// e.g. `projects/myproject/locations/US/dataExchanges/123/listings/456`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Resulting destination of the listing that you subscribed to.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub destination: std::option::Option<crate::model::subscribe_listing_request::Destination>,
}

impl SubscribeListingRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::SubscribeListingRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of `destination`.
    pub fn set_destination<
        T: std::convert::Into<
            std::option::Option<crate::model::subscribe_listing_request::Destination>,
        >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination = v.into();
        self
    }

    /// The value of [destination][crate::model::SubscribeListingRequest::destination]
    /// if it holds a `DestinationDataset`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_destination_dataset(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::DestinationDataset>> {
        #[allow(unreachable_patterns)]
        self.destination.as_ref().and_then(|v| match v {
            crate::model::subscribe_listing_request::Destination::DestinationDataset(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [destination][crate::model::SubscribeListingRequest::destination]
    /// to hold a `DestinationDataset`.
    ///
    /// Note that all the setters affecting `destination` are
    /// mutually exclusive.
    pub fn set_destination_dataset<
        T: std::convert::Into<std::boxed::Box<crate::model::DestinationDataset>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination = std::option::Option::Some(
            crate::model::subscribe_listing_request::Destination::DestinationDataset(v.into()),
        );
        self
    }
}

impl wkt::message::Message for SubscribeListingRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.SubscribeListingRequest"
    }
}

/// Defines additional types related to SubscribeListingRequest
pub mod subscribe_listing_request {
    #[allow(unused_imports)]
    use super::*;

    /// Resulting destination of the listing that you subscribed to.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Destination {
        /// Input only. BigQuery destination dataset to create for the subscriber.
        DestinationDataset(std::boxed::Box<crate::model::DestinationDataset>),
    }
}

/// Message for response when you subscribe to a listing.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SubscribeListingResponse {
    /// Subscription object created from this subscribe action.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub subscription: std::option::Option<crate::model::Subscription>,
}

impl SubscribeListingResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [subscription][crate::model::SubscribeListingResponse::subscription].
    pub fn set_subscription<
        T: std::convert::Into<std::option::Option<crate::model::Subscription>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.subscription = v.into();
        self
    }
}

impl wkt::message::Message for SubscribeListingResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.SubscribeListingResponse"
    }
}

/// Message for subscribing to a Data Exchange.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SubscribeDataExchangeRequest {
    /// Required. Resource name of the Data Exchange.
    /// e.g. `projects/publisherproject/locations/US/dataExchanges/123`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The parent resource path of the Subscription.
    /// e.g. `projects/subscriberproject/locations/US`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub destination: std::string::String,

    /// Required. Name of the subscription to create.
    /// e.g. `subscription1`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub subscription: std::string::String,

    /// Email of the subscriber.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub subscriber_contact: std::string::String,
}

impl SubscribeDataExchangeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::SubscribeDataExchangeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [destination][crate::model::SubscribeDataExchangeRequest::destination].
    pub fn set_destination<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.destination = v.into();
        self
    }

    /// Sets the value of [subscription][crate::model::SubscribeDataExchangeRequest::subscription].
    pub fn set_subscription<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.subscription = v.into();
        self
    }

    /// Sets the value of [subscriber_contact][crate::model::SubscribeDataExchangeRequest::subscriber_contact].
    pub fn set_subscriber_contact<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.subscriber_contact = v.into();
        self
    }
}

impl wkt::message::Message for SubscribeDataExchangeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.SubscribeDataExchangeRequest"
    }
}

/// Message for response when you subscribe to a Data Exchange.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SubscribeDataExchangeResponse {
    /// Subscription object created from this subscribe action.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub subscription: std::option::Option<crate::model::Subscription>,
}

impl SubscribeDataExchangeResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [subscription][crate::model::SubscribeDataExchangeResponse::subscription].
    pub fn set_subscription<
        T: std::convert::Into<std::option::Option<crate::model::Subscription>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.subscription = v.into();
        self
    }
}

impl wkt::message::Message for SubscribeDataExchangeResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.SubscribeDataExchangeResponse"
    }
}

/// Message for refreshing a subscription.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RefreshSubscriptionRequest {
    /// Required. Resource name of the Subscription to refresh.
    /// e.g. `projects/subscriberproject/locations/US/subscriptions/123`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl RefreshSubscriptionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::RefreshSubscriptionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for RefreshSubscriptionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.RefreshSubscriptionRequest"
    }
}

/// Message for response when you refresh a subscription.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RefreshSubscriptionResponse {
    /// The refreshed subscription resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub subscription: std::option::Option<crate::model::Subscription>,
}

impl RefreshSubscriptionResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [subscription][crate::model::RefreshSubscriptionResponse::subscription].
    pub fn set_subscription<
        T: std::convert::Into<std::option::Option<crate::model::Subscription>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.subscription = v.into();
        self
    }
}

impl wkt::message::Message for RefreshSubscriptionResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.RefreshSubscriptionResponse"
    }
}

/// Message for getting a subscription.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetSubscriptionRequest {
    /// Required. Resource name of the subscription.
    /// e.g. projects/123/locations/US/subscriptions/456
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetSubscriptionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetSubscriptionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetSubscriptionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.GetSubscriptionRequest"
    }
}

/// Message for listing subscriptions.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListSubscriptionsRequest {
    /// Required. The parent resource path of the subscription.
    /// e.g. projects/myproject/locations/US
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// An expression for filtering the results of the request. Eligible
    /// fields for filtering are:
    ///
    /// * `listing`
    /// * `data_exchange`
    ///
    /// Alternatively, a literal wrapped in double quotes may be provided.
    /// This will be checked for an exact match against both fields above.
    ///
    /// In all cases, the full Data Exchange or Listing resource name must
    /// be provided. Some example of using filters:
    ///
    /// * data_exchange="projects/myproject/locations/us/dataExchanges/123"
    /// * listing="projects/123/locations/us/dataExchanges/456/listings/789"
    /// * "projects/myproject/locations/us/dataExchanges/123"
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// The maximum number of results to return in a single response page.
    pub page_size: i32,

    /// Page token, returned by a previous call.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListSubscriptionsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListSubscriptionsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListSubscriptionsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListSubscriptionsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListSubscriptionsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListSubscriptionsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.ListSubscriptionsRequest"
    }
}

/// Message for response to the listing of subscriptions.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListSubscriptionsResponse {
    /// The list of subscriptions.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub subscriptions: std::vec::Vec<crate::model::Subscription>,

    /// Next page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListSubscriptionsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListSubscriptionsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [subscriptions][crate::model::ListSubscriptionsResponse::subscriptions].
    pub fn set_subscriptions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Subscription>,
    {
        use std::iter::Iterator;
        self.subscriptions = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListSubscriptionsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.ListSubscriptionsResponse"
    }
}

impl gax::paginator::PageableResponse for ListSubscriptionsResponse {
    type PageItem = crate::model::Subscription;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.subscriptions
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Message for listing subscriptions of a shared resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListSharedResourceSubscriptionsRequest {
    /// Required. Resource name of the requested target. This resource may be
    /// either a Listing or a DataExchange. e.g.
    /// projects/123/locations/US/dataExchanges/456 OR e.g.
    /// projects/123/locations/US/dataExchanges/456/listings/789
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub resource: std::string::String,

    /// If selected, includes deleted subscriptions in the response
    /// (up to 63 days after deletion).
    pub include_deleted_subscriptions: bool,

    /// The maximum number of results to return in a single response page.
    pub page_size: i32,

    /// Page token, returned by a previous call.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListSharedResourceSubscriptionsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [resource][crate::model::ListSharedResourceSubscriptionsRequest::resource].
    pub fn set_resource<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.resource = v.into();
        self
    }

    /// Sets the value of [include_deleted_subscriptions][crate::model::ListSharedResourceSubscriptionsRequest::include_deleted_subscriptions].
    pub fn set_include_deleted_subscriptions<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.include_deleted_subscriptions = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListSharedResourceSubscriptionsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListSharedResourceSubscriptionsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListSharedResourceSubscriptionsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.ListSharedResourceSubscriptionsRequest"
    }
}

/// Message for response to the listing of shared resource subscriptions.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListSharedResourceSubscriptionsResponse {
    /// The list of subscriptions.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub shared_resource_subscriptions: std::vec::Vec<crate::model::Subscription>,

    /// Next page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListSharedResourceSubscriptionsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListSharedResourceSubscriptionsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [shared_resource_subscriptions][crate::model::ListSharedResourceSubscriptionsResponse::shared_resource_subscriptions].
    pub fn set_shared_resource_subscriptions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Subscription>,
    {
        use std::iter::Iterator;
        self.shared_resource_subscriptions = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListSharedResourceSubscriptionsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.ListSharedResourceSubscriptionsResponse"
    }
}

impl gax::paginator::PageableResponse for ListSharedResourceSubscriptionsResponse {
    type PageItem = crate::model::Subscription;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.shared_resource_subscriptions
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Message for revoking a subscription.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RevokeSubscriptionRequest {
    /// Required. Resource name of the subscription to revoke.
    /// e.g. projects/123/locations/US/subscriptions/456
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl RevokeSubscriptionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::RevokeSubscriptionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for RevokeSubscriptionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.RevokeSubscriptionRequest"
    }
}

/// Message for response when you revoke a subscription.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RevokeSubscriptionResponse {}

impl RevokeSubscriptionResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for RevokeSubscriptionResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.RevokeSubscriptionResponse"
    }
}

/// Message for deleting a subscription.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteSubscriptionRequest {
    /// Required. Resource name of the subscription to delete.
    /// e.g. projects/123/locations/US/subscriptions/456
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteSubscriptionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteSubscriptionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteSubscriptionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.DeleteSubscriptionRequest"
    }
}

/// Represents the metadata of a long-running operation in Analytics Hub.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OperationMetadata {
    /// Output only. The time the operation was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the operation finished running.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Server-defined resource path for the target of the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target: std::string::String,

    /// Output only. Name of the verb executed by the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub verb: std::string::String,

    /// Output only. Human-readable status of the operation, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub status_message: std::string::String,

    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have successfully been cancelled
    /// have [Operation.error][] value with a
    /// [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
    /// `Code.CANCELLED`.
    ///
    /// [google.rpc.Status.code]: rpc::model::Status::code
    pub requested_cancellation: bool,

    /// Output only. API version used to start the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub api_version: std::string::String,
}

impl OperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [create_time][crate::model::OperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::OperationMetadata::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [target][crate::model::OperationMetadata::target].
    pub fn set_target<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [verb][crate::model::OperationMetadata::verb].
    pub fn set_verb<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.verb = v.into();
        self
    }

    /// Sets the value of [status_message][crate::model::OperationMetadata::status_message].
    pub fn set_status_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.status_message = v.into();
        self
    }

    /// Sets the value of [requested_cancellation][crate::model::OperationMetadata::requested_cancellation].
    pub fn set_requested_cancellation<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.requested_cancellation = v.into();
        self
    }

    /// Sets the value of [api_version][crate::model::OperationMetadata::api_version].
    pub fn set_api_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.api_version = v.into();
        self
    }
}

impl wkt::message::Message for OperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.bigquery.analyticshub.v1.OperationMetadata"
    }
}

/// Specifies the type of discovery on the discovery page. Note that
/// this does not control the visibility of the exchange/listing which is
/// defined by IAM permission.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct DiscoveryType(i32);

impl DiscoveryType {
    /// Unspecified. Defaults to DISCOVERY_TYPE_PRIVATE.
    pub const DISCOVERY_TYPE_UNSPECIFIED: DiscoveryType = DiscoveryType::new(0);

    /// The Data exchange/listing can be discovered in the 'Private' results
    /// list.
    pub const DISCOVERY_TYPE_PRIVATE: DiscoveryType = DiscoveryType::new(1);

    /// The Data exchange/listing can be discovered in the 'Public' results
    /// list.
    pub const DISCOVERY_TYPE_PUBLIC: DiscoveryType = DiscoveryType::new(2);

    /// Creates a new DiscoveryType instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("DISCOVERY_TYPE_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("DISCOVERY_TYPE_PRIVATE"),
            2 => std::borrow::Cow::Borrowed("DISCOVERY_TYPE_PUBLIC"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "DISCOVERY_TYPE_UNSPECIFIED" => {
                std::option::Option::Some(Self::DISCOVERY_TYPE_UNSPECIFIED)
            }
            "DISCOVERY_TYPE_PRIVATE" => std::option::Option::Some(Self::DISCOVERY_TYPE_PRIVATE),
            "DISCOVERY_TYPE_PUBLIC" => std::option::Option::Some(Self::DISCOVERY_TYPE_PUBLIC),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for DiscoveryType {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for DiscoveryType {
    fn default() -> Self {
        Self::new(0)
    }
}
