// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;
use std::sync::Arc;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::AnalyticsHubService].
///
/// Application developers may need to implement this trait to mock
/// `client::AnalyticsHubService`.  In other use-cases, application developers only
/// use `client::AnalyticsHubService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait AnalyticsHubService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::AnalyticsHubService::list_data_exchanges].
    fn list_data_exchanges(
        &self,
        _req: crate::model::ListDataExchangesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListDataExchangesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListDataExchangesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::AnalyticsHubService::list_org_data_exchanges].
    fn list_org_data_exchanges(
        &self,
        _req: crate::model::ListOrgDataExchangesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListOrgDataExchangesResponse>>
    + Send {
        std::future::ready::<crate::Result<crate::model::ListOrgDataExchangesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::AnalyticsHubService::get_data_exchange].
    fn get_data_exchange(
        &self,
        _req: crate::model::GetDataExchangeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::DataExchange>> + Send {
        std::future::ready::<crate::Result<crate::model::DataExchange>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AnalyticsHubService::create_data_exchange].
    fn create_data_exchange(
        &self,
        _req: crate::model::CreateDataExchangeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::DataExchange>> + Send {
        std::future::ready::<crate::Result<crate::model::DataExchange>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AnalyticsHubService::update_data_exchange].
    fn update_data_exchange(
        &self,
        _req: crate::model::UpdateDataExchangeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::DataExchange>> + Send {
        std::future::ready::<crate::Result<crate::model::DataExchange>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AnalyticsHubService::delete_data_exchange].
    fn delete_data_exchange(
        &self,
        _req: crate::model::DeleteDataExchangeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::AnalyticsHubService::list_listings].
    fn list_listings(
        &self,
        _req: crate::model::ListListingsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListListingsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListListingsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AnalyticsHubService::get_listing].
    fn get_listing(
        &self,
        _req: crate::model::GetListingRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Listing>> + Send {
        std::future::ready::<crate::Result<crate::model::Listing>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AnalyticsHubService::create_listing].
    fn create_listing(
        &self,
        _req: crate::model::CreateListingRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Listing>> + Send {
        std::future::ready::<crate::Result<crate::model::Listing>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AnalyticsHubService::update_listing].
    fn update_listing(
        &self,
        _req: crate::model::UpdateListingRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Listing>> + Send {
        std::future::ready::<crate::Result<crate::model::Listing>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AnalyticsHubService::delete_listing].
    fn delete_listing(
        &self,
        _req: crate::model::DeleteListingRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::AnalyticsHubService::subscribe_listing].
    fn subscribe_listing(
        &self,
        _req: crate::model::SubscribeListingRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SubscribeListingResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::SubscribeListingResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::AnalyticsHubService::subscribe_data_exchange].
    fn subscribe_data_exchange(
        &self,
        _req: crate::model::SubscribeDataExchangeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AnalyticsHubService::refresh_subscription].
    fn refresh_subscription(
        &self,
        _req: crate::model::RefreshSubscriptionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AnalyticsHubService::get_subscription].
    fn get_subscription(
        &self,
        _req: crate::model::GetSubscriptionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Subscription>> + Send {
        std::future::ready::<crate::Result<crate::model::Subscription>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AnalyticsHubService::list_subscriptions].
    fn list_subscriptions(
        &self,
        _req: crate::model::ListSubscriptionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListSubscriptionsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListSubscriptionsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::AnalyticsHubService::list_shared_resource_subscriptions].
    fn list_shared_resource_subscriptions(
        &self,
        _req: crate::model::ListSharedResourceSubscriptionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::ListSharedResourceSubscriptionsResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::ListSharedResourceSubscriptionsResponse>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::AnalyticsHubService::revoke_subscription].
    fn revoke_subscription(
        &self,
        _req: crate::model::RevokeSubscriptionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::RevokeSubscriptionResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::RevokeSubscriptionResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::AnalyticsHubService::delete_subscription].
    fn delete_subscription(
        &self,
        _req: crate::model::DeleteSubscriptionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AnalyticsHubService::get_iam_policy].
    fn get_iam_policy(
        &self,
        _req: iam_v1::model::GetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<iam_v1::model::Policy>> + Send {
        std::future::ready::<crate::Result<iam_v1::model::Policy>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AnalyticsHubService::set_iam_policy].
    fn set_iam_policy(
        &self,
        _req: iam_v1::model::SetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<iam_v1::model::Policy>> + Send {
        std::future::ready::<crate::Result<iam_v1::model::Policy>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AnalyticsHubService::test_iam_permissions].
    fn test_iam_permissions(
        &self,
        _req: iam_v1::model::TestIamPermissionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<iam_v1::model::TestIamPermissionsResponse>> + Send
    {
        std::future::ready::<crate::Result<iam_v1::model::TestIamPermissionsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::AnalyticsHubService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Returns the polling error policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_error_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        Arc::new(gax::polling_error_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}
