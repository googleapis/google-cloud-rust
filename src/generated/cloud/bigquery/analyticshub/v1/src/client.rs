// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Analytics Hub API.
///
/// # Service Description
///
/// The `AnalyticsHubService` API facilitates data sharing within and across
/// organizations. It allows data providers to publish listings that reference
/// shared datasets. With Analytics Hub, users can discover and search for
/// listings that they have access to. Subscribers can view and subscribe to
/// listings. When you subscribe to a listing, Analytics Hub creates a linked
/// dataset in your project.
///
/// # Configuration
///
/// `AnalyticsHubService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `AnalyticsHubService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `AnalyticsHubService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct AnalyticsHubService {
    inner: Arc<dyn crate::stubs::dynamic::AnalyticsHubService>,
}

impl AnalyticsHubService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::AnalyticsHubService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::AnalyticsHubService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::AnalyticsHubService> {
        crate::transport::AnalyticsHubService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::AnalyticsHubService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::AnalyticsHubService::new)
    }

    /// Lists all data exchanges in a given project and location.
    pub fn list_data_exchanges(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::analytics_hub_service::ListDataExchanges {
        crate::builders::analytics_hub_service::ListDataExchanges::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists all data exchanges from projects in a given organization and
    /// location.
    pub fn list_org_data_exchanges(
        &self,
        organization: impl Into<std::string::String>,
    ) -> crate::builders::analytics_hub_service::ListOrgDataExchanges {
        crate::builders::analytics_hub_service::ListOrgDataExchanges::new(self.inner.clone())
            .set_organization(organization.into())
    }

    /// Gets the details of a data exchange.
    pub fn get_data_exchange(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::analytics_hub_service::GetDataExchange {
        crate::builders::analytics_hub_service::GetDataExchange::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new data exchange.
    pub fn create_data_exchange(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::analytics_hub_service::CreateDataExchange {
        crate::builders::analytics_hub_service::CreateDataExchange::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates an existing data exchange.
    pub fn update_data_exchange(
        &self,
        data_exchange: impl Into<crate::model::DataExchange>,
    ) -> crate::builders::analytics_hub_service::UpdateDataExchange {
        crate::builders::analytics_hub_service::UpdateDataExchange::new(self.inner.clone())
            .set_data_exchange(data_exchange.into())
    }

    /// Deletes an existing data exchange.
    pub fn delete_data_exchange(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::analytics_hub_service::DeleteDataExchange {
        crate::builders::analytics_hub_service::DeleteDataExchange::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists all listings in a given project and location.
    pub fn list_listings(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::analytics_hub_service::ListListings {
        crate::builders::analytics_hub_service::ListListings::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets the details of a listing.
    pub fn get_listing(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::analytics_hub_service::GetListing {
        crate::builders::analytics_hub_service::GetListing::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new listing.
    pub fn create_listing(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::analytics_hub_service::CreateListing {
        crate::builders::analytics_hub_service::CreateListing::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates an existing listing.
    pub fn update_listing(
        &self,
        listing: impl Into<crate::model::Listing>,
    ) -> crate::builders::analytics_hub_service::UpdateListing {
        crate::builders::analytics_hub_service::UpdateListing::new(self.inner.clone())
            .set_listing(listing.into())
    }

    /// Deletes a listing.
    pub fn delete_listing(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::analytics_hub_service::DeleteListing {
        crate::builders::analytics_hub_service::DeleteListing::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Subscribes to a listing.
    ///
    /// Currently, with Analytics Hub, you can create listings that
    /// reference only BigQuery datasets.
    /// Upon subscription to a listing for a BigQuery dataset, Analytics Hub
    /// creates a linked dataset in the subscriber's project.
    pub fn subscribe_listing(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::analytics_hub_service::SubscribeListing {
        crate::builders::analytics_hub_service::SubscribeListing::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a Subscription to a Data Exchange. This is a long-running operation
    /// as it will create one or more linked datasets.
    ///
    /// # Long running operations
    ///
    /// Calling [poller()] on the resulting builder returns an implementation of
    /// the [lro::Poller] trait. You need to call `Poller::poll` on this
    /// `Poller` at least once to start the LRO. You may periodically poll this
    /// object to find the status of the operation. The poller automatically
    /// extract the final response value and any intermediate metadata values.
    ///
    /// Calling [send()] on the resulting builder starts a LRO (long-Running
    /// Operation). LROs run in the background, and the application may poll
    /// them periodically to find out if they have succeeded, or failed. See
    /// below for instructions on how to manually use the resulting [Operation].
    /// We recommend `poller()` in favor of `send()`.
    ///
    /// ## Polling until completion
    ///
    /// Applications that do not care about intermediate results in a
    /// long-running operation may use the [until_done()] function:
    ///
    /// ```
    /// # use gax::Result;
    /// # use google_cloud_bigquery_analyticshub_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::SubscribeDataExchangeResponse, model::OperationMetadata>
    /// ) -> Result<model::SubscribeDataExchangeResponse> {
    ///     poller.until_done().await
    /// }
    /// ```
    ///
    /// This will wait until the LRO completes (successfully or with an error).
    /// Applications can set the [PollingPolicy] and [PollingBackoffPolicy] to
    /// control for how long the function runs.
    ///
    /// ## Polling with detailed metadata updates
    ///
    /// Using the result of [poller()] follows a common pattern:
    ///
    /// ```
    /// # use gax::Result;
    /// # use google_cloud_bigquery_analyticshub_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::SubscribeDataExchangeResponse, model::OperationMetadata>
    /// ) -> Result<model::SubscribeDataExchangeResponse> {
    ///     while let Some(p) = poller.poll().await {
    ///         match p {
    ///             lro::PollingResult::Completed(r) => { return r; },
    ///             lro::PollingResult::InProgress(m) => { println!("in progress {m:?}"); },
    ///             lro::PollingResult::PollingError(_) => { /* ignored */ },
    ///         }
    ///         tokio::time::sleep(std::time::Duration::from_secs(1)).await;
    ///     }
    ///     Err(gax::error::Error::other("LRO never completed"))
    /// }
    /// ```
    ///
    /// ## Manually polling long-running operations
    ///
    /// If you call [send()], you need to examine the contents of the resulting
    /// [Operation][longrunning::model::Operation] to determine the result of
    /// the operation.
    ///
    /// If the `done` field is `true`, the operation has completed. The `result`
    /// field contains the final response, this will be a [crate::model::SubscribeDataExchangeResponse] (as
    /// an [Any]), or the error (as a `Status`).
    ///
    /// If the `done` field is `false`, the operation has not completed.  The
    /// operation may also include a [crate::model::OperationMetadata] value in the `metadata`
    /// field. This value would also be encoded as an [Any]. The metadata may
    /// include information about how much progress the LRO has made.
    ///
    /// To find out if the operation has completed, use the [get_operation]
    /// method and repeat the steps outlined above.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::analytics_hub_service::SubscribeDataExchange::send
    /// [poller()]: crate::builders::analytics_hub_service::SubscribeDataExchange::poller
    /// [until_done()]: lro::Poller::until_done
    /// [PollingPolicy]: gax::polling_policy::PollingPolicy
    /// [PollingBackoffPolicy]: gax::polling_backoff_policy::PollingBackoffPolicy
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    /// [Any]: wkt::Any
    pub fn subscribe_data_exchange(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::analytics_hub_service::SubscribeDataExchange {
        crate::builders::analytics_hub_service::SubscribeDataExchange::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Refreshes a Subscription to a Data Exchange. A Data Exchange can become
    /// stale when a publisher adds or removes data. This is a long-running
    /// operation as it may create many linked datasets.
    ///
    /// # Long running operations
    ///
    /// Calling [poller()] on the resulting builder returns an implementation of
    /// the [lro::Poller] trait. You need to call `Poller::poll` on this
    /// `Poller` at least once to start the LRO. You may periodically poll this
    /// object to find the status of the operation. The poller automatically
    /// extract the final response value and any intermediate metadata values.
    ///
    /// Calling [send()] on the resulting builder starts a LRO (long-Running
    /// Operation). LROs run in the background, and the application may poll
    /// them periodically to find out if they have succeeded, or failed. See
    /// below for instructions on how to manually use the resulting [Operation].
    /// We recommend `poller()` in favor of `send()`.
    ///
    /// ## Polling until completion
    ///
    /// Applications that do not care about intermediate results in a
    /// long-running operation may use the [until_done()] function:
    ///
    /// ```
    /// # use gax::Result;
    /// # use google_cloud_bigquery_analyticshub_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::RefreshSubscriptionResponse, model::OperationMetadata>
    /// ) -> Result<model::RefreshSubscriptionResponse> {
    ///     poller.until_done().await
    /// }
    /// ```
    ///
    /// This will wait until the LRO completes (successfully or with an error).
    /// Applications can set the [PollingPolicy] and [PollingBackoffPolicy] to
    /// control for how long the function runs.
    ///
    /// ## Polling with detailed metadata updates
    ///
    /// Using the result of [poller()] follows a common pattern:
    ///
    /// ```
    /// # use gax::Result;
    /// # use google_cloud_bigquery_analyticshub_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::RefreshSubscriptionResponse, model::OperationMetadata>
    /// ) -> Result<model::RefreshSubscriptionResponse> {
    ///     while let Some(p) = poller.poll().await {
    ///         match p {
    ///             lro::PollingResult::Completed(r) => { return r; },
    ///             lro::PollingResult::InProgress(m) => { println!("in progress {m:?}"); },
    ///             lro::PollingResult::PollingError(_) => { /* ignored */ },
    ///         }
    ///         tokio::time::sleep(std::time::Duration::from_secs(1)).await;
    ///     }
    ///     Err(gax::error::Error::other("LRO never completed"))
    /// }
    /// ```
    ///
    /// ## Manually polling long-running operations
    ///
    /// If you call [send()], you need to examine the contents of the resulting
    /// [Operation][longrunning::model::Operation] to determine the result of
    /// the operation.
    ///
    /// If the `done` field is `true`, the operation has completed. The `result`
    /// field contains the final response, this will be a [crate::model::RefreshSubscriptionResponse] (as
    /// an [Any]), or the error (as a `Status`).
    ///
    /// If the `done` field is `false`, the operation has not completed.  The
    /// operation may also include a [crate::model::OperationMetadata] value in the `metadata`
    /// field. This value would also be encoded as an [Any]. The metadata may
    /// include information about how much progress the LRO has made.
    ///
    /// To find out if the operation has completed, use the [get_operation]
    /// method and repeat the steps outlined above.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::analytics_hub_service::RefreshSubscription::send
    /// [poller()]: crate::builders::analytics_hub_service::RefreshSubscription::poller
    /// [until_done()]: lro::Poller::until_done
    /// [PollingPolicy]: gax::polling_policy::PollingPolicy
    /// [PollingBackoffPolicy]: gax::polling_backoff_policy::PollingBackoffPolicy
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    /// [Any]: wkt::Any
    pub fn refresh_subscription(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::analytics_hub_service::RefreshSubscription {
        crate::builders::analytics_hub_service::RefreshSubscription::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets the details of a Subscription.
    pub fn get_subscription(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::analytics_hub_service::GetSubscription {
        crate::builders::analytics_hub_service::GetSubscription::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists all subscriptions in a given project and location.
    pub fn list_subscriptions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::analytics_hub_service::ListSubscriptions {
        crate::builders::analytics_hub_service::ListSubscriptions::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists all subscriptions on a given Data Exchange or Listing.
    pub fn list_shared_resource_subscriptions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::analytics_hub_service::ListSharedResourceSubscriptions {
        crate::builders::analytics_hub_service::ListSharedResourceSubscriptions::new(
            self.inner.clone(),
        )
        .set_resource(resource.into())
    }

    /// Revokes a given subscription.
    pub fn revoke_subscription(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::analytics_hub_service::RevokeSubscription {
        crate::builders::analytics_hub_service::RevokeSubscription::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deletes a subscription.
    ///
    /// # Long running operations
    ///
    /// Calling [poller()] on the resulting builder returns an implementation of
    /// the [lro::Poller] trait. You need to call `Poller::poll` on this
    /// `Poller` at least once to start the LRO. You may periodically poll this
    /// object to find the status of the operation. The poller automatically
    /// extract the final response value and any intermediate metadata values.
    ///
    /// Calling [send()] on the resulting builder starts a LRO (long-Running
    /// Operation). LROs run in the background, and the application may poll
    /// them periodically to find out if they have succeeded, or failed. See
    /// below for instructions on how to manually use the resulting [Operation].
    /// We recommend `poller()` in favor of `send()`.
    ///
    /// ## Polling until completion
    ///
    /// Applications that do not care about intermediate results in a
    /// long-running operation may use the [until_done()] function:
    ///
    /// ```
    /// # use gax::Result;
    /// # use google_cloud_bigquery_analyticshub_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<wkt::Empty, model::OperationMetadata>
    /// ) -> Result<wkt::Empty> {
    ///     poller.until_done().await
    /// }
    /// ```
    ///
    /// This will wait until the LRO completes (successfully or with an error).
    /// Applications can set the [PollingPolicy] and [PollingBackoffPolicy] to
    /// control for how long the function runs.
    ///
    /// ## Polling with detailed metadata updates
    ///
    /// Using the result of [poller()] follows a common pattern:
    ///
    /// ```
    /// # use gax::Result;
    /// # use google_cloud_bigquery_analyticshub_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<wkt::Empty, model::OperationMetadata>
    /// ) -> Result<wkt::Empty> {
    ///     while let Some(p) = poller.poll().await {
    ///         match p {
    ///             lro::PollingResult::Completed(r) => { return r; },
    ///             lro::PollingResult::InProgress(m) => { println!("in progress {m:?}"); },
    ///             lro::PollingResult::PollingError(_) => { /* ignored */ },
    ///         }
    ///         tokio::time::sleep(std::time::Duration::from_secs(1)).await;
    ///     }
    ///     Err(gax::error::Error::other("LRO never completed"))
    /// }
    /// ```
    ///
    /// ## Manually polling long-running operations
    ///
    /// If you call [send()], you need to examine the contents of the resulting
    /// [Operation][longrunning::model::Operation] to determine the result of
    /// the operation.
    ///
    /// If the `done` field is `true`, the operation has completed. The `result`
    /// field contains the final response, this will be a [wkt::Empty] (as
    /// an [Any]), or the error (as a `Status`).
    ///
    /// If the `done` field is `false`, the operation has not completed.  The
    /// operation may also include a [crate::model::OperationMetadata] value in the `metadata`
    /// field. This value would also be encoded as an [Any]. The metadata may
    /// include information about how much progress the LRO has made.
    ///
    /// To find out if the operation has completed, use the [get_operation]
    /// method and repeat the steps outlined above.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::analytics_hub_service::DeleteSubscription::send
    /// [poller()]: crate::builders::analytics_hub_service::DeleteSubscription::poller
    /// [until_done()]: lro::Poller::until_done
    /// [PollingPolicy]: gax::polling_policy::PollingPolicy
    /// [PollingBackoffPolicy]: gax::polling_backoff_policy::PollingBackoffPolicy
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    /// [Any]: wkt::Any
    pub fn delete_subscription(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::analytics_hub_service::DeleteSubscription {
        crate::builders::analytics_hub_service::DeleteSubscription::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets the IAM policy.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::analytics_hub_service::GetIamPolicy {
        crate::builders::analytics_hub_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Sets the IAM policy.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::analytics_hub_service::SetIamPolicy {
        crate::builders::analytics_hub_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns the permissions that a caller has.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::analytics_hub_service::TestIamPermissions {
        crate::builders::analytics_hub_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::analytics_hub_service::GetOperation {
        crate::builders::analytics_hub_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
