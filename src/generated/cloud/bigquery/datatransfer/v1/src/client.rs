// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the BigQuery Data Transfer API.
///
/// # Service Description
///
/// This API allows users to manage their data transfers into BigQuery.
///
/// # Configuration
///
/// `DataTransferService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `DataTransferService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `DataTransferService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct DataTransferService {
    inner: Arc<dyn crate::stubs::dynamic::DataTransferService>,
}

impl DataTransferService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::DataTransferService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::DataTransferService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::DataTransferService> {
        crate::transport::DataTransferService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::DataTransferService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::DataTransferService::new)
    }

    /// Retrieves a supported data source and returns its settings.
    pub fn get_data_source(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_transfer_service::GetDataSource {
        crate::builders::data_transfer_service::GetDataSource::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists supported data sources and returns their settings.
    pub fn list_data_sources(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_transfer_service::ListDataSources {
        crate::builders::data_transfer_service::ListDataSources::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a new data transfer configuration.
    pub fn create_transfer_config(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_transfer_service::CreateTransferConfig {
        crate::builders::data_transfer_service::CreateTransferConfig::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a data transfer configuration.
    /// All fields must be set, even if they are not updated.
    pub fn update_transfer_config(
        &self,
        transfer_config: impl Into<crate::model::TransferConfig>,
    ) -> crate::builders::data_transfer_service::UpdateTransferConfig {
        crate::builders::data_transfer_service::UpdateTransferConfig::new(self.inner.clone())
            .set_transfer_config(transfer_config.into())
    }

    /// Deletes a data transfer configuration, including any associated transfer
    /// runs and logs.
    pub fn delete_transfer_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_transfer_service::DeleteTransferConfig {
        crate::builders::data_transfer_service::DeleteTransferConfig::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Returns information about a data transfer config.
    pub fn get_transfer_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_transfer_service::GetTransferConfig {
        crate::builders::data_transfer_service::GetTransferConfig::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Returns information about all transfer configs owned by a project in the
    /// specified location.
    pub fn list_transfer_configs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_transfer_service::ListTransferConfigs {
        crate::builders::data_transfer_service::ListTransferConfigs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates transfer runs for a time range [start_time, end_time].
    /// For each date - or whatever granularity the data source supports - in the
    /// range, one transfer run is created.
    /// Note that runs are created per UTC time in the time range.
    /// DEPRECATED: use StartManualTransferRuns instead.
    pub fn schedule_transfer_runs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_transfer_service::ScheduleTransferRuns {
        crate::builders::data_transfer_service::ScheduleTransferRuns::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Start manual transfer runs to be executed now with schedule_time equal to
    /// current time. The transfer runs can be created for a time range where the
    /// run_time is between start_time (inclusive) and end_time (exclusive), or for
    /// a specific run_time.
    pub fn start_manual_transfer_runs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_transfer_service::StartManualTransferRuns {
        crate::builders::data_transfer_service::StartManualTransferRuns::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns information about the particular transfer run.
    pub fn get_transfer_run(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_transfer_service::GetTransferRun {
        crate::builders::data_transfer_service::GetTransferRun::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deletes the specified transfer run.
    pub fn delete_transfer_run(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_transfer_service::DeleteTransferRun {
        crate::builders::data_transfer_service::DeleteTransferRun::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Returns information about running and completed transfer runs.
    pub fn list_transfer_runs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_transfer_service::ListTransferRuns {
        crate::builders::data_transfer_service::ListTransferRuns::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns log messages for the transfer run.
    pub fn list_transfer_logs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_transfer_service::ListTransferLogs {
        crate::builders::data_transfer_service::ListTransferLogs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns true if valid credentials exist for the given data source and
    /// requesting user.
    pub fn check_valid_creds(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_transfer_service::CheckValidCreds {
        crate::builders::data_transfer_service::CheckValidCreds::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Enroll data sources in a user project. This allows users to create transfer
    /// configurations for these data sources. They will also appear in the
    /// ListDataSources RPC and as such, will appear in the
    /// [BigQuery UI](https://console.cloud.google.com/bigquery), and the documents
    /// can be found in the public guide for
    /// [BigQuery Web UI](https://cloud.google.com/bigquery/bigquery-web-ui) and
    /// [Data Transfer
    /// Service](https://cloud.google.com/bigquery/docs/working-with-transfers).
    pub fn enroll_data_sources(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_transfer_service::EnrollDataSources {
        crate::builders::data_transfer_service::EnrollDataSources::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Unenroll data sources in a user project. This allows users to remove
    /// transfer configurations for these data sources. They will no longer appear
    /// in the ListDataSources RPC and will also no longer appear in the [BigQuery
    /// UI](https://console.cloud.google.com/bigquery). Data transfers
    /// configurations of unenrolled data sources will not be scheduled.
    pub fn unenroll_data_sources(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_transfer_service::UnenrollDataSources {
        crate::builders::data_transfer_service::UnenrollDataSources::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_transfer_service::ListLocations {
        crate::builders::data_transfer_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_transfer_service::GetLocation {
        crate::builders::data_transfer_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }
}
