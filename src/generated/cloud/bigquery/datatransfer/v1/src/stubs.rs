// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dynamic;

/// Defines the trait used to implement [crate::client::DataTransferService].
///
/// Application developers may need to implement this trait to mock
/// `client::DataTransferService`.  In other use-cases, application developers only
/// use `client::DataTransferService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait DataTransferService: std::fmt::Debug + Send + Sync {
    /// Implements [crate::client::DataTransferService::get_data_source].
    fn get_data_source(
        &self,
        _req: crate::model::GetDataSourceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::DataSource>> + Send {
        std::future::ready::<crate::Result<crate::model::DataSource>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::DataTransferService::list_data_sources].
    fn list_data_sources(
        &self,
        _req: crate::model::ListDataSourcesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListDataSourcesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListDataSourcesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::DataTransferService::create_transfer_config].
    fn create_transfer_config(
        &self,
        _req: crate::model::CreateTransferConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::TransferConfig>> + Send {
        std::future::ready::<crate::Result<crate::model::TransferConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::DataTransferService::update_transfer_config].
    fn update_transfer_config(
        &self,
        _req: crate::model::UpdateTransferConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::TransferConfig>> + Send {
        std::future::ready::<crate::Result<crate::model::TransferConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::DataTransferService::delete_transfer_config].
    fn delete_transfer_config(
        &self,
        _req: crate::model::DeleteTransferConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::DataTransferService::get_transfer_config].
    fn get_transfer_config(
        &self,
        _req: crate::model::GetTransferConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::TransferConfig>> + Send {
        std::future::ready::<crate::Result<crate::model::TransferConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::DataTransferService::list_transfer_configs].
    fn list_transfer_configs(
        &self,
        _req: crate::model::ListTransferConfigsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListTransferConfigsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListTransferConfigsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::DataTransferService::schedule_transfer_runs].
    fn schedule_transfer_runs(
        &self,
        _req: crate::model::ScheduleTransferRunsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ScheduleTransferRunsResponse>>
           + Send {
        std::future::ready::<crate::Result<crate::model::ScheduleTransferRunsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::DataTransferService::start_manual_transfer_runs].
    fn start_manual_transfer_runs(
        &self,
        _req: crate::model::StartManualTransferRunsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::StartManualTransferRunsResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::StartManualTransferRunsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::DataTransferService::get_transfer_run].
    fn get_transfer_run(
        &self,
        _req: crate::model::GetTransferRunRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::TransferRun>> + Send {
        std::future::ready::<crate::Result<crate::model::TransferRun>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::DataTransferService::delete_transfer_run].
    fn delete_transfer_run(
        &self,
        _req: crate::model::DeleteTransferRunRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::DataTransferService::list_transfer_runs].
    fn list_transfer_runs(
        &self,
        _req: crate::model::ListTransferRunsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListTransferRunsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListTransferRunsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::DataTransferService::list_transfer_logs].
    fn list_transfer_logs(
        &self,
        _req: crate::model::ListTransferLogsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListTransferLogsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListTransferLogsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::DataTransferService::check_valid_creds].
    fn check_valid_creds(
        &self,
        _req: crate::model::CheckValidCredsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::CheckValidCredsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::CheckValidCredsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::DataTransferService::enroll_data_sources].
    fn enroll_data_sources(
        &self,
        _req: crate::model::EnrollDataSourcesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::DataTransferService::unenroll_data_sources].
    fn unenroll_data_sources(
        &self,
        _req: crate::model::UnenrollDataSourcesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::DataTransferService::list_locations].
    fn list_locations(
        &self,
        _req: location::model::ListLocationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::ListLocationsResponse>> + Send
    {
        std::future::ready::<crate::Result<location::model::ListLocationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::DataTransferService::get_location].
    fn get_location(
        &self,
        _req: location::model::GetLocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::Location>> + Send {
        std::future::ready::<crate::Result<location::model::Location>>(Err(Error::other(
            "unimplemented",
        )))
    }
}
