// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

pub mod data_transfer_service {
    use crate::Result;
    use std::sync::Arc;

    /// Common implementation for [super::super::client::DataTransferService] request builders.
    #[derive(Clone, Debug)]
    pub(crate) struct RequestBuilder<R: std::default::Default> {
        stub: Arc<dyn super::super::stubs::dynamic::DataTransferService>,
        request: R,
        options: gax::options::RequestOptions,
    }

    impl<R> RequestBuilder<R>
    where
        R: std::default::Default,
    {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stubs::dynamic::DataTransferService>,
        ) -> Self {
            Self {
                stub,
                request: R::default(),
                options: gax::options::RequestOptions::default(),
            }
        }
    }

    /// The request builder for a DataTransferService::get_data_source call.
    #[derive(Clone, Debug)]
    pub struct GetDataSource(RequestBuilder<crate::model::GetDataSourceRequest>);

    impl GetDataSource {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stubs::dynamic::DataTransferService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetDataSourceRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::DataSource> {
            (*self.0.stub)
                .get_data_source(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::GetDataSourceRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetDataSource {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a DataTransferService::list_data_sources call.
    #[derive(Clone, Debug)]
    pub struct ListDataSources(RequestBuilder<crate::model::ListDataSourcesRequest>);

    impl ListDataSources {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stubs::dynamic::DataTransferService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListDataSourcesRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListDataSourcesResponse> {
            (*self.0.stub)
                .list_data_sources(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        pub async fn paginator(
            self,
        ) -> gax::paginator::Paginator<crate::model::ListDataSourcesResponse, gax::error::Error>
        {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [parent][crate::model::ListDataSourcesRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListDataSourcesRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListDataSourcesRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ListDataSources {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a DataTransferService::create_transfer_config call.
    #[derive(Clone, Debug)]
    pub struct CreateTransferConfig(RequestBuilder<crate::model::CreateTransferConfigRequest>);

    impl CreateTransferConfig {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stubs::dynamic::DataTransferService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CreateTransferConfigRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::TransferConfig> {
            (*self.0.stub)
                .create_transfer_config(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [parent][crate::model::CreateTransferConfigRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [transfer_config][crate::model::CreateTransferConfigRequest::transfer_config].
        pub fn set_transfer_config<T: Into<std::option::Option<crate::model::TransferConfig>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.transfer_config = v.into();
            self
        }

        /// Sets the value of [authorization_code][crate::model::CreateTransferConfigRequest::authorization_code].
        pub fn set_authorization_code<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.authorization_code = v.into();
            self
        }

        /// Sets the value of [version_info][crate::model::CreateTransferConfigRequest::version_info].
        pub fn set_version_info<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.version_info = v.into();
            self
        }

        /// Sets the value of [service_account_name][crate::model::CreateTransferConfigRequest::service_account_name].
        pub fn set_service_account_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.service_account_name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for CreateTransferConfig {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a DataTransferService::update_transfer_config call.
    #[derive(Clone, Debug)]
    pub struct UpdateTransferConfig(RequestBuilder<crate::model::UpdateTransferConfigRequest>);

    impl UpdateTransferConfig {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stubs::dynamic::DataTransferService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::UpdateTransferConfigRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::TransferConfig> {
            (*self.0.stub)
                .update_transfer_config(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [transfer_config][crate::model::UpdateTransferConfigRequest::transfer_config].
        pub fn set_transfer_config<T: Into<std::option::Option<crate::model::TransferConfig>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.transfer_config = v.into();
            self
        }

        /// Sets the value of [authorization_code][crate::model::UpdateTransferConfigRequest::authorization_code].
        pub fn set_authorization_code<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.authorization_code = v.into();
            self
        }

        /// Sets the value of [update_mask][crate::model::UpdateTransferConfigRequest::update_mask].
        pub fn set_update_mask<T: Into<std::option::Option<wkt::FieldMask>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.update_mask = v.into();
            self
        }

        /// Sets the value of [version_info][crate::model::UpdateTransferConfigRequest::version_info].
        pub fn set_version_info<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.version_info = v.into();
            self
        }

        /// Sets the value of [service_account_name][crate::model::UpdateTransferConfigRequest::service_account_name].
        pub fn set_service_account_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.service_account_name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for UpdateTransferConfig {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a DataTransferService::delete_transfer_config call.
    #[derive(Clone, Debug)]
    pub struct DeleteTransferConfig(RequestBuilder<crate::model::DeleteTransferConfigRequest>);

    impl DeleteTransferConfig {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stubs::dynamic::DataTransferService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DeleteTransferConfigRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<()> {
            (*self.0.stub)
                .delete_transfer_config(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::DeleteTransferConfigRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for DeleteTransferConfig {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a DataTransferService::get_transfer_config call.
    #[derive(Clone, Debug)]
    pub struct GetTransferConfig(RequestBuilder<crate::model::GetTransferConfigRequest>);

    impl GetTransferConfig {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stubs::dynamic::DataTransferService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetTransferConfigRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::TransferConfig> {
            (*self.0.stub)
                .get_transfer_config(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::GetTransferConfigRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetTransferConfig {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a DataTransferService::list_transfer_configs call.
    #[derive(Clone, Debug)]
    pub struct ListTransferConfigs(RequestBuilder<crate::model::ListTransferConfigsRequest>);

    impl ListTransferConfigs {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stubs::dynamic::DataTransferService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListTransferConfigsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListTransferConfigsResponse> {
            (*self.0.stub)
                .list_transfer_configs(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        pub async fn paginator(
            self,
        ) -> gax::paginator::Paginator<crate::model::ListTransferConfigsResponse, gax::error::Error>
        {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [parent][crate::model::ListTransferConfigsRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListTransferConfigsRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListTransferConfigsRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [data_source_ids][crate::model::ListTransferConfigsRequest::data_source_ids].
        pub fn set_data_source_ids<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.0.request.data_source_ids = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl gax::options::RequestBuilder for ListTransferConfigs {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a DataTransferService::schedule_transfer_runs call.
    #[derive(Clone, Debug)]
    pub struct ScheduleTransferRuns(RequestBuilder<crate::model::ScheduleTransferRunsRequest>);

    impl ScheduleTransferRuns {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stubs::dynamic::DataTransferService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ScheduleTransferRunsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ScheduleTransferRunsResponse> {
            (*self.0.stub)
                .schedule_transfer_runs(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [parent][crate::model::ScheduleTransferRunsRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [start_time][crate::model::ScheduleTransferRunsRequest::start_time].
        pub fn set_start_time<T: Into<std::option::Option<wkt::Timestamp>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.start_time = v.into();
            self
        }

        /// Sets the value of [end_time][crate::model::ScheduleTransferRunsRequest::end_time].
        pub fn set_end_time<T: Into<std::option::Option<wkt::Timestamp>>>(mut self, v: T) -> Self {
            self.0.request.end_time = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ScheduleTransferRuns {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a DataTransferService::start_manual_transfer_runs call.
    #[derive(Clone, Debug)]
    pub struct StartManualTransferRuns(
        RequestBuilder<crate::model::StartManualTransferRunsRequest>,
    );

    impl StartManualTransferRuns {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stubs::dynamic::DataTransferService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::StartManualTransferRunsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::StartManualTransferRunsResponse> {
            (*self.0.stub)
                .start_manual_transfer_runs(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [parent][crate::model::StartManualTransferRunsRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of `time`.
        pub fn set_time<T: Into<Option<crate::model::start_manual_transfer_runs_request::Time>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.time = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for StartManualTransferRuns {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a DataTransferService::get_transfer_run call.
    #[derive(Clone, Debug)]
    pub struct GetTransferRun(RequestBuilder<crate::model::GetTransferRunRequest>);

    impl GetTransferRun {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stubs::dynamic::DataTransferService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetTransferRunRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::TransferRun> {
            (*self.0.stub)
                .get_transfer_run(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::GetTransferRunRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetTransferRun {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a DataTransferService::delete_transfer_run call.
    #[derive(Clone, Debug)]
    pub struct DeleteTransferRun(RequestBuilder<crate::model::DeleteTransferRunRequest>);

    impl DeleteTransferRun {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stubs::dynamic::DataTransferService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DeleteTransferRunRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<()> {
            (*self.0.stub)
                .delete_transfer_run(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::DeleteTransferRunRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for DeleteTransferRun {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a DataTransferService::list_transfer_runs call.
    #[derive(Clone, Debug)]
    pub struct ListTransferRuns(RequestBuilder<crate::model::ListTransferRunsRequest>);

    impl ListTransferRuns {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stubs::dynamic::DataTransferService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListTransferRunsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListTransferRunsResponse> {
            (*self.0.stub)
                .list_transfer_runs(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        pub async fn paginator(
            self,
        ) -> gax::paginator::Paginator<crate::model::ListTransferRunsResponse, gax::error::Error>
        {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [parent][crate::model::ListTransferRunsRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListTransferRunsRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListTransferRunsRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [run_attempt][crate::model::ListTransferRunsRequest::run_attempt].
        pub fn set_run_attempt<T: Into<crate::model::list_transfer_runs_request::RunAttempt>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.run_attempt = v.into();
            self
        }

        /// Sets the value of [states][crate::model::ListTransferRunsRequest::states].
        pub fn set_states<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::TransferState>,
        {
            use std::iter::Iterator;
            self.0.request.states = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl gax::options::RequestBuilder for ListTransferRuns {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a DataTransferService::list_transfer_logs call.
    #[derive(Clone, Debug)]
    pub struct ListTransferLogs(RequestBuilder<crate::model::ListTransferLogsRequest>);

    impl ListTransferLogs {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stubs::dynamic::DataTransferService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListTransferLogsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListTransferLogsResponse> {
            (*self.0.stub)
                .list_transfer_logs(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        pub async fn paginator(
            self,
        ) -> gax::paginator::Paginator<crate::model::ListTransferLogsResponse, gax::error::Error>
        {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [parent][crate::model::ListTransferLogsRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListTransferLogsRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListTransferLogsRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [message_types][crate::model::ListTransferLogsRequest::message_types].
        pub fn set_message_types<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::transfer_message::MessageSeverity>,
        {
            use std::iter::Iterator;
            self.0.request.message_types = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl gax::options::RequestBuilder for ListTransferLogs {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a DataTransferService::check_valid_creds call.
    #[derive(Clone, Debug)]
    pub struct CheckValidCreds(RequestBuilder<crate::model::CheckValidCredsRequest>);

    impl CheckValidCreds {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stubs::dynamic::DataTransferService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CheckValidCredsRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::CheckValidCredsResponse> {
            (*self.0.stub)
                .check_valid_creds(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::CheckValidCredsRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for CheckValidCreds {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a DataTransferService::enroll_data_sources call.
    #[derive(Clone, Debug)]
    pub struct EnrollDataSources(RequestBuilder<crate::model::EnrollDataSourcesRequest>);

    impl EnrollDataSources {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stubs::dynamic::DataTransferService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::EnrollDataSourcesRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<()> {
            (*self.0.stub)
                .enroll_data_sources(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::EnrollDataSourcesRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [data_source_ids][crate::model::EnrollDataSourcesRequest::data_source_ids].
        pub fn set_data_source_ids<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.0.request.data_source_ids = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl gax::options::RequestBuilder for EnrollDataSources {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a DataTransferService::unenroll_data_sources call.
    #[derive(Clone, Debug)]
    pub struct UnenrollDataSources(RequestBuilder<crate::model::UnenrollDataSourcesRequest>);

    impl UnenrollDataSources {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stubs::dynamic::DataTransferService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::UnenrollDataSourcesRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<()> {
            (*self.0.stub)
                .unenroll_data_sources(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::UnenrollDataSourcesRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [data_source_ids][crate::model::UnenrollDataSourcesRequest::data_source_ids].
        pub fn set_data_source_ids<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.0.request.data_source_ids = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl gax::options::RequestBuilder for UnenrollDataSources {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a DataTransferService::list_locations call.
    #[derive(Clone, Debug)]
    pub struct ListLocations(RequestBuilder<location::model::ListLocationsRequest>);

    impl ListLocations {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stubs::dynamic::DataTransferService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<location::model::ListLocationsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<location::model::ListLocationsResponse> {
            (*self.0.stub)
                .list_locations(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        pub async fn paginator(
            self,
        ) -> gax::paginator::Paginator<location::model::ListLocationsResponse, gax::error::Error>
        {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [name][location::model::ListLocationsRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [filter][location::model::ListLocationsRequest::filter].
        pub fn set_filter<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.filter = v.into();
            self
        }

        /// Sets the value of [page_size][location::model::ListLocationsRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][location::model::ListLocationsRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ListLocations {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a DataTransferService::get_location call.
    #[derive(Clone, Debug)]
    pub struct GetLocation(RequestBuilder<location::model::GetLocationRequest>);

    impl GetLocation {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stubs::dynamic::DataTransferService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<location::model::GetLocationRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<location::model::Location> {
            (*self.0.stub)
                .get_location(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][location::model::GetLocationRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetLocation {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }
}
