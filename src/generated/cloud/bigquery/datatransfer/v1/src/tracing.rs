// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
use crate::Result;

/// Implements a [DataTransferService](crate::stubs::DataTransferService) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct DataTransferService<T>
where
    T: crate::stubs::DataTransferService + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> DataTransferService<T>
where
    T: crate::stubs::DataTransferService + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> crate::stubs::DataTransferService for DataTransferService<T>
where
    T: crate::stubs::DataTransferService + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn get_data_source(
        &self,
        req: crate::model::GetDataSourceRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::DataSource> {
        self.inner.get_data_source(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_data_sources(
        &self,
        req: crate::model::ListDataSourcesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListDataSourcesResponse> {
        self.inner.list_data_sources(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_transfer_config(
        &self,
        req: crate::model::CreateTransferConfigRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::TransferConfig> {
        self.inner.create_transfer_config(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_transfer_config(
        &self,
        req: crate::model::UpdateTransferConfigRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::TransferConfig> {
        self.inner.update_transfer_config(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_transfer_config(
        &self,
        req: crate::model::DeleteTransferConfigRequest,
        options: gax::options::RequestOptions,
    ) -> Result<wkt::Empty> {
        self.inner.delete_transfer_config(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_transfer_config(
        &self,
        req: crate::model::GetTransferConfigRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::TransferConfig> {
        self.inner.get_transfer_config(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_transfer_configs(
        &self,
        req: crate::model::ListTransferConfigsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListTransferConfigsResponse> {
        self.inner.list_transfer_configs(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn schedule_transfer_runs(
        &self,
        req: crate::model::ScheduleTransferRunsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ScheduleTransferRunsResponse> {
        self.inner.schedule_transfer_runs(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn start_manual_transfer_runs(
        &self,
        req: crate::model::StartManualTransferRunsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::StartManualTransferRunsResponse> {
        self.inner.start_manual_transfer_runs(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_transfer_run(
        &self,
        req: crate::model::GetTransferRunRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::TransferRun> {
        self.inner.get_transfer_run(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_transfer_run(
        &self,
        req: crate::model::DeleteTransferRunRequest,
        options: gax::options::RequestOptions,
    ) -> Result<wkt::Empty> {
        self.inner.delete_transfer_run(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_transfer_runs(
        &self,
        req: crate::model::ListTransferRunsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListTransferRunsResponse> {
        self.inner.list_transfer_runs(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_transfer_logs(
        &self,
        req: crate::model::ListTransferLogsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListTransferLogsResponse> {
        self.inner.list_transfer_logs(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn check_valid_creds(
        &self,
        req: crate::model::CheckValidCredsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::CheckValidCredsResponse> {
        self.inner.check_valid_creds(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn enroll_data_sources(
        &self,
        req: crate::model::EnrollDataSourcesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<wkt::Empty> {
        self.inner.enroll_data_sources(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn unenroll_data_sources(
        &self,
        req: crate::model::UnenrollDataSourcesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<wkt::Empty> {
        self.inner.unenroll_data_sources(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<location::model::ListLocationsResponse> {
        self.inner.list_locations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<location::model::Location> {
        self.inner.get_location(req, options).await
    }
}
