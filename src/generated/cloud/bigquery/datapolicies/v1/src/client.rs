// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the BigQuery Data Policy API.
///
/// # Service Description
///
/// Data Policy Service provides APIs for managing the label-policy bindings.
///
/// # Configuration
///
/// `DataPolicyService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `DataPolicyService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `DataPolicyService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct DataPolicyService {
    inner: Arc<dyn crate::stubs::dynamic::DataPolicyService>,
}

impl DataPolicyService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::DataPolicyService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::DataPolicyService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::DataPolicyService> {
        crate::transport::DataPolicyService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::DataPolicyService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::DataPolicyService::new)
    }

    /// Creates a new data policy under a project with the given `dataPolicyId`
    /// (used as the display name), policy tag, and data policy type.
    pub fn create_data_policy(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_policy_service::CreateDataPolicy {
        crate::builders::data_policy_service::CreateDataPolicy::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the metadata for an existing data policy. The target data policy
    /// can be specified by the resource name.
    pub fn update_data_policy(
        &self,
        data_policy: impl Into<crate::model::DataPolicy>,
    ) -> crate::builders::data_policy_service::UpdateDataPolicy {
        crate::builders::data_policy_service::UpdateDataPolicy::new(self.inner.clone())
            .set_data_policy(data_policy.into())
    }

    /// Renames the id (display name) of the specified data policy.
    pub fn rename_data_policy(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_policy_service::RenameDataPolicy {
        crate::builders::data_policy_service::RenameDataPolicy::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deletes the data policy specified by its resource name.
    pub fn delete_data_policy(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_policy_service::DeleteDataPolicy {
        crate::builders::data_policy_service::DeleteDataPolicy::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets the data policy specified by its resource name.
    pub fn get_data_policy(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_policy_service::GetDataPolicy {
        crate::builders::data_policy_service::GetDataPolicy::new(self.inner.clone())
            .set_name(name.into())
    }

    /// List all of the data policies in the specified parent project.
    pub fn list_data_policies(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_policy_service::ListDataPolicies {
        crate::builders::data_policy_service::ListDataPolicies::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets the IAM policy for the specified data policy.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::data_policy_service::GetIamPolicy {
        crate::builders::data_policy_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Sets the IAM policy for the specified data policy.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::data_policy_service::SetIamPolicy {
        crate::builders::data_policy_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns the caller's permission on the specified data policy resource.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::data_policy_service::TestIamPermissions {
        crate::builders::data_policy_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }
}
