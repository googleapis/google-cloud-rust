// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Assured Workloads API.
///
/// # Service Description
///
/// Service to manage AssuredWorkloads.
///
/// # Configuration
///
/// `AssuredWorkloadsService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `AssuredWorkloadsService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `AssuredWorkloadsService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct AssuredWorkloadsService {
    inner: Arc<dyn crate::stubs::dynamic::AssuredWorkloadsService>,
}

impl AssuredWorkloadsService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::AssuredWorkloadsService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::AssuredWorkloadsService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::AssuredWorkloadsService> {
        crate::transport::AssuredWorkloadsService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::AssuredWorkloadsService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::AssuredWorkloadsService::new)
    }

    /// Creates Assured Workload.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_workload(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::assured_workloads_service::CreateWorkload {
        crate::builders::assured_workloads_service::CreateWorkload::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates an existing workload.
    /// Currently allows updating of workload display_name and labels.
    /// For force updates don't set etag field in the Workload.
    /// Only one update operation per workload can be in progress.
    pub fn update_workload(
        &self,
        workload: impl Into<crate::model::Workload>,
    ) -> crate::builders::assured_workloads_service::UpdateWorkload {
        crate::builders::assured_workloads_service::UpdateWorkload::new(self.inner.clone())
            .set_workload(workload.into())
    }

    /// Restrict the list of resources allowed in the Workload environment.
    /// The current list of allowed products can be found at
    /// <https://cloud.google.com/assured-workloads/docs/supported-products>
    /// In addition to assuredworkloads.workload.update permission, the user should
    /// also have orgpolicy.policy.set permission on the folder resource
    /// to use this functionality.
    pub fn restrict_allowed_resources(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::assured_workloads_service::RestrictAllowedResources {
        crate::builders::assured_workloads_service::RestrictAllowedResources::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Deletes the workload. Make sure that workload's direct children are already
    /// in a deleted state, otherwise the request will fail with a
    /// FAILED_PRECONDITION error.
    pub fn delete_workload(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::assured_workloads_service::DeleteWorkload {
        crate::builders::assured_workloads_service::DeleteWorkload::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets Assured Workload associated with a CRM Node
    pub fn get_workload(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::assured_workloads_service::GetWorkload {
        crate::builders::assured_workloads_service::GetWorkload::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists Assured Workloads under a CRM Node.
    pub fn list_workloads(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::assured_workloads_service::ListWorkloads {
        crate::builders::assured_workloads_service::ListWorkloads::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::assured_workloads_service::ListOperations {
        crate::builders::assured_workloads_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::assured_workloads_service::GetOperation {
        crate::builders::assured_workloads_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
