// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use std::sync::Arc;

/// A dyn-compatible, crate-private version of [super::AttachedClusters].
#[async_trait::async_trait]
pub trait AttachedClusters: std::fmt::Debug + Send + Sync {
    async fn create_attached_cluster(
        &self,
        req: crate::model::CreateAttachedClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_attached_cluster(
        &self,
        req: crate::model::UpdateAttachedClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn import_attached_cluster(
        &self,
        req: crate::model::ImportAttachedClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_attached_cluster(
        &self,
        req: crate::model::GetAttachedClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AttachedCluster>;

    async fn list_attached_clusters(
        &self,
        req: crate::model::ListAttachedClustersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAttachedClustersResponse>;

    async fn delete_attached_cluster(
        &self,
        req: crate::model::DeleteAttachedClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_attached_server_config(
        &self,
        req: crate::model::GetAttachedServerConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AttachedServerConfig>;

    async fn generate_attached_cluster_install_manifest(
        &self,
        req: crate::model::GenerateAttachedClusterInstallManifestRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GenerateAttachedClusterInstallManifestResponse>;

    async fn generate_attached_cluster_agent_token(
        &self,
        req: crate::model::GenerateAttachedClusterAgentTokenRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GenerateAttachedClusterAgentTokenResponse>;

    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy>;

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}

/// All implementations of [crate::stubs::AttachedClusters] also implement [AttachedClusters].
#[async_trait::async_trait]
impl<T: crate::stubs::AttachedClusters> AttachedClusters for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn create_attached_cluster(
        &self,
        req: crate::model::CreateAttachedClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_attached_cluster(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_attached_cluster(
        &self,
        req: crate::model::UpdateAttachedClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_attached_cluster(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn import_attached_cluster(
        &self,
        req: crate::model::ImportAttachedClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::import_attached_cluster(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_attached_cluster(
        &self,
        req: crate::model::GetAttachedClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AttachedCluster> {
        T::get_attached_cluster(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_attached_clusters(
        &self,
        req: crate::model::ListAttachedClustersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAttachedClustersResponse> {
        T::list_attached_clusters(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_attached_cluster(
        &self,
        req: crate::model::DeleteAttachedClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_attached_cluster(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_attached_server_config(
        &self,
        req: crate::model::GetAttachedServerConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AttachedServerConfig> {
        T::get_attached_server_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn generate_attached_cluster_install_manifest(
        &self,
        req: crate::model::GenerateAttachedClusterInstallManifestRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GenerateAttachedClusterInstallManifestResponse> {
        T::generate_attached_cluster_install_manifest(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn generate_attached_cluster_agent_token(
        &self,
        req: crate::model::GenerateAttachedClusterAgentTokenRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GenerateAttachedClusterAgentTokenResponse> {
        T::generate_attached_cluster_agent_token(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse> {
        T::list_operations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::get_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::delete_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::cancel_operation(self, req, options).await
    }

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        T::get_polling_policy(self, options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        T::get_polling_backoff_policy(self, options)
    }
}

/// A dyn-compatible, crate-private version of [super::AwsClusters].
#[async_trait::async_trait]
pub trait AwsClusters: std::fmt::Debug + Send + Sync {
    async fn create_aws_cluster(
        &self,
        req: crate::model::CreateAwsClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_aws_cluster(
        &self,
        req: crate::model::UpdateAwsClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_aws_cluster(
        &self,
        req: crate::model::GetAwsClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AwsCluster>;

    async fn list_aws_clusters(
        &self,
        req: crate::model::ListAwsClustersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAwsClustersResponse>;

    async fn delete_aws_cluster(
        &self,
        req: crate::model::DeleteAwsClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn generate_aws_cluster_agent_token(
        &self,
        req: crate::model::GenerateAwsClusterAgentTokenRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GenerateAwsClusterAgentTokenResponse>;

    async fn generate_aws_access_token(
        &self,
        req: crate::model::GenerateAwsAccessTokenRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GenerateAwsAccessTokenResponse>;

    async fn create_aws_node_pool(
        &self,
        req: crate::model::CreateAwsNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_aws_node_pool(
        &self,
        req: crate::model::UpdateAwsNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn rollback_aws_node_pool_update(
        &self,
        req: crate::model::RollbackAwsNodePoolUpdateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_aws_node_pool(
        &self,
        req: crate::model::GetAwsNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AwsNodePool>;

    async fn list_aws_node_pools(
        &self,
        req: crate::model::ListAwsNodePoolsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAwsNodePoolsResponse>;

    async fn delete_aws_node_pool(
        &self,
        req: crate::model::DeleteAwsNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_aws_open_id_config(
        &self,
        req: crate::model::GetAwsOpenIdConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AwsOpenIdConfig>;

    async fn get_aws_json_web_keys(
        &self,
        req: crate::model::GetAwsJsonWebKeysRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AwsJsonWebKeys>;

    async fn get_aws_server_config(
        &self,
        req: crate::model::GetAwsServerConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AwsServerConfig>;

    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy>;

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}

/// All implementations of [crate::stubs::AwsClusters] also implement [AwsClusters].
#[async_trait::async_trait]
impl<T: crate::stubs::AwsClusters> AwsClusters for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn create_aws_cluster(
        &self,
        req: crate::model::CreateAwsClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_aws_cluster(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_aws_cluster(
        &self,
        req: crate::model::UpdateAwsClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_aws_cluster(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_aws_cluster(
        &self,
        req: crate::model::GetAwsClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AwsCluster> {
        T::get_aws_cluster(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_aws_clusters(
        &self,
        req: crate::model::ListAwsClustersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAwsClustersResponse> {
        T::list_aws_clusters(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_aws_cluster(
        &self,
        req: crate::model::DeleteAwsClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_aws_cluster(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn generate_aws_cluster_agent_token(
        &self,
        req: crate::model::GenerateAwsClusterAgentTokenRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GenerateAwsClusterAgentTokenResponse> {
        T::generate_aws_cluster_agent_token(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn generate_aws_access_token(
        &self,
        req: crate::model::GenerateAwsAccessTokenRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GenerateAwsAccessTokenResponse> {
        T::generate_aws_access_token(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_aws_node_pool(
        &self,
        req: crate::model::CreateAwsNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_aws_node_pool(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_aws_node_pool(
        &self,
        req: crate::model::UpdateAwsNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_aws_node_pool(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn rollback_aws_node_pool_update(
        &self,
        req: crate::model::RollbackAwsNodePoolUpdateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::rollback_aws_node_pool_update(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_aws_node_pool(
        &self,
        req: crate::model::GetAwsNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AwsNodePool> {
        T::get_aws_node_pool(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_aws_node_pools(
        &self,
        req: crate::model::ListAwsNodePoolsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAwsNodePoolsResponse> {
        T::list_aws_node_pools(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_aws_node_pool(
        &self,
        req: crate::model::DeleteAwsNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_aws_node_pool(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_aws_open_id_config(
        &self,
        req: crate::model::GetAwsOpenIdConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AwsOpenIdConfig> {
        T::get_aws_open_id_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_aws_json_web_keys(
        &self,
        req: crate::model::GetAwsJsonWebKeysRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AwsJsonWebKeys> {
        T::get_aws_json_web_keys(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_aws_server_config(
        &self,
        req: crate::model::GetAwsServerConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AwsServerConfig> {
        T::get_aws_server_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse> {
        T::list_operations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::get_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::delete_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::cancel_operation(self, req, options).await
    }

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        T::get_polling_policy(self, options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        T::get_polling_backoff_policy(self, options)
    }
}

/// A dyn-compatible, crate-private version of [super::AzureClusters].
#[async_trait::async_trait]
pub trait AzureClusters: std::fmt::Debug + Send + Sync {
    async fn create_azure_client(
        &self,
        req: crate::model::CreateAzureClientRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_azure_client(
        &self,
        req: crate::model::GetAzureClientRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AzureClient>;

    async fn list_azure_clients(
        &self,
        req: crate::model::ListAzureClientsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAzureClientsResponse>;

    async fn delete_azure_client(
        &self,
        req: crate::model::DeleteAzureClientRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn create_azure_cluster(
        &self,
        req: crate::model::CreateAzureClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_azure_cluster(
        &self,
        req: crate::model::UpdateAzureClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_azure_cluster(
        &self,
        req: crate::model::GetAzureClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AzureCluster>;

    async fn list_azure_clusters(
        &self,
        req: crate::model::ListAzureClustersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAzureClustersResponse>;

    async fn delete_azure_cluster(
        &self,
        req: crate::model::DeleteAzureClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn generate_azure_cluster_agent_token(
        &self,
        req: crate::model::GenerateAzureClusterAgentTokenRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GenerateAzureClusterAgentTokenResponse>;

    async fn generate_azure_access_token(
        &self,
        req: crate::model::GenerateAzureAccessTokenRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GenerateAzureAccessTokenResponse>;

    async fn create_azure_node_pool(
        &self,
        req: crate::model::CreateAzureNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_azure_node_pool(
        &self,
        req: crate::model::UpdateAzureNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_azure_node_pool(
        &self,
        req: crate::model::GetAzureNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AzureNodePool>;

    async fn list_azure_node_pools(
        &self,
        req: crate::model::ListAzureNodePoolsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAzureNodePoolsResponse>;

    async fn delete_azure_node_pool(
        &self,
        req: crate::model::DeleteAzureNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_azure_open_id_config(
        &self,
        req: crate::model::GetAzureOpenIdConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AzureOpenIdConfig>;

    async fn get_azure_json_web_keys(
        &self,
        req: crate::model::GetAzureJsonWebKeysRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AzureJsonWebKeys>;

    async fn get_azure_server_config(
        &self,
        req: crate::model::GetAzureServerConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AzureServerConfig>;

    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy>;

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}

/// All implementations of [crate::stubs::AzureClusters] also implement [AzureClusters].
#[async_trait::async_trait]
impl<T: crate::stubs::AzureClusters> AzureClusters for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn create_azure_client(
        &self,
        req: crate::model::CreateAzureClientRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_azure_client(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_azure_client(
        &self,
        req: crate::model::GetAzureClientRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AzureClient> {
        T::get_azure_client(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_azure_clients(
        &self,
        req: crate::model::ListAzureClientsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAzureClientsResponse> {
        T::list_azure_clients(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_azure_client(
        &self,
        req: crate::model::DeleteAzureClientRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_azure_client(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_azure_cluster(
        &self,
        req: crate::model::CreateAzureClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_azure_cluster(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_azure_cluster(
        &self,
        req: crate::model::UpdateAzureClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_azure_cluster(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_azure_cluster(
        &self,
        req: crate::model::GetAzureClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AzureCluster> {
        T::get_azure_cluster(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_azure_clusters(
        &self,
        req: crate::model::ListAzureClustersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAzureClustersResponse> {
        T::list_azure_clusters(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_azure_cluster(
        &self,
        req: crate::model::DeleteAzureClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_azure_cluster(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn generate_azure_cluster_agent_token(
        &self,
        req: crate::model::GenerateAzureClusterAgentTokenRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GenerateAzureClusterAgentTokenResponse> {
        T::generate_azure_cluster_agent_token(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn generate_azure_access_token(
        &self,
        req: crate::model::GenerateAzureAccessTokenRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GenerateAzureAccessTokenResponse> {
        T::generate_azure_access_token(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_azure_node_pool(
        &self,
        req: crate::model::CreateAzureNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_azure_node_pool(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_azure_node_pool(
        &self,
        req: crate::model::UpdateAzureNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_azure_node_pool(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_azure_node_pool(
        &self,
        req: crate::model::GetAzureNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AzureNodePool> {
        T::get_azure_node_pool(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_azure_node_pools(
        &self,
        req: crate::model::ListAzureNodePoolsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAzureNodePoolsResponse> {
        T::list_azure_node_pools(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_azure_node_pool(
        &self,
        req: crate::model::DeleteAzureNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_azure_node_pool(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_azure_open_id_config(
        &self,
        req: crate::model::GetAzureOpenIdConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AzureOpenIdConfig> {
        T::get_azure_open_id_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_azure_json_web_keys(
        &self,
        req: crate::model::GetAzureJsonWebKeysRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AzureJsonWebKeys> {
        T::get_azure_json_web_keys(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_azure_server_config(
        &self,
        req: crate::model::GetAzureServerConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AzureServerConfig> {
        T::get_azure_server_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse> {
        T::list_operations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::get_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::delete_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::cancel_operation(self, req, options).await
    }

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        T::get_polling_policy(self, options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        T::get_polling_backoff_policy(self, options)
    }
}
