// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;
use std::sync::Arc;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::AttachedClusters].
///
/// Application developers may need to implement this trait to mock
/// `client::AttachedClusters`.  In other use-cases, application developers only
/// use `client::AttachedClusters` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait AttachedClusters: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::AttachedClusters::create_attached_cluster].
    fn create_attached_cluster(
        &self,
        _req: crate::model::CreateAttachedClusterRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AttachedClusters::update_attached_cluster].
    fn update_attached_cluster(
        &self,
        _req: crate::model::UpdateAttachedClusterRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AttachedClusters::import_attached_cluster].
    fn import_attached_cluster(
        &self,
        _req: crate::model::ImportAttachedClusterRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AttachedClusters::get_attached_cluster].
    fn get_attached_cluster(
        &self,
        _req: crate::model::GetAttachedClusterRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::AttachedCluster>> + Send
    {
        std::future::ready::<crate::Result<crate::model::AttachedCluster>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AttachedClusters::list_attached_clusters].
    fn list_attached_clusters(
        &self,
        _req: crate::model::ListAttachedClustersRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListAttachedClustersResponse>>
    + Send {
        std::future::ready::<crate::Result<crate::model::ListAttachedClustersResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::AttachedClusters::delete_attached_cluster].
    fn delete_attached_cluster(
        &self,
        _req: crate::model::DeleteAttachedClusterRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AttachedClusters::get_attached_server_config].
    fn get_attached_server_config(
        &self,
        _req: crate::model::GetAttachedServerConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::AttachedServerConfig>> + Send
    {
        std::future::ready::<crate::Result<crate::model::AttachedServerConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AttachedClusters::generate_attached_cluster_install_manifest].
    fn generate_attached_cluster_install_manifest(
        &self,
        _req: crate::model::GenerateAttachedClusterInstallManifestRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::GenerateAttachedClusterInstallManifestResponse>,
    > + Send {
        std::future::ready::<
            crate::Result<crate::model::GenerateAttachedClusterInstallManifestResponse>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::AttachedClusters::generate_attached_cluster_agent_token].
    fn generate_attached_cluster_agent_token(
        &self,
        _req: crate::model::GenerateAttachedClusterAgentTokenRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::GenerateAttachedClusterAgentTokenResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::GenerateAttachedClusterAgentTokenResponse>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::AttachedClusters::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::ListOperationsResponse>>
    + Send {
        std::future::ready::<crate::Result<longrunning::model::ListOperationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::AttachedClusters::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AttachedClusters::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::AttachedClusters::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Returns the polling policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        Arc::new(gax::polling_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}

/// Defines the trait used to implement [super::client::AwsClusters].
///
/// Application developers may need to implement this trait to mock
/// `client::AwsClusters`.  In other use-cases, application developers only
/// use `client::AwsClusters` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait AwsClusters: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::AwsClusters::create_aws_cluster].
    fn create_aws_cluster(
        &self,
        _req: crate::model::CreateAwsClusterRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AwsClusters::update_aws_cluster].
    fn update_aws_cluster(
        &self,
        _req: crate::model::UpdateAwsClusterRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AwsClusters::get_aws_cluster].
    fn get_aws_cluster(
        &self,
        _req: crate::model::GetAwsClusterRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::AwsCluster>> + Send {
        std::future::ready::<crate::Result<crate::model::AwsCluster>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AwsClusters::list_aws_clusters].
    fn list_aws_clusters(
        &self,
        _req: crate::model::ListAwsClustersRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListAwsClustersResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListAwsClustersResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::AwsClusters::delete_aws_cluster].
    fn delete_aws_cluster(
        &self,
        _req: crate::model::DeleteAwsClusterRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AwsClusters::generate_aws_cluster_agent_token].
    fn generate_aws_cluster_agent_token(
        &self,
        _req: crate::model::GenerateAwsClusterAgentTokenRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::GenerateAwsClusterAgentTokenResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::GenerateAwsClusterAgentTokenResponse>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::AwsClusters::generate_aws_access_token].
    fn generate_aws_access_token(
        &self,
        _req: crate::model::GenerateAwsAccessTokenRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::GenerateAwsAccessTokenResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::GenerateAwsAccessTokenResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::AwsClusters::create_aws_node_pool].
    fn create_aws_node_pool(
        &self,
        _req: crate::model::CreateAwsNodePoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AwsClusters::update_aws_node_pool].
    fn update_aws_node_pool(
        &self,
        _req: crate::model::UpdateAwsNodePoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AwsClusters::rollback_aws_node_pool_update].
    fn rollback_aws_node_pool_update(
        &self,
        _req: crate::model::RollbackAwsNodePoolUpdateRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AwsClusters::get_aws_node_pool].
    fn get_aws_node_pool(
        &self,
        _req: crate::model::GetAwsNodePoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::AwsNodePool>> + Send {
        std::future::ready::<crate::Result<crate::model::AwsNodePool>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AwsClusters::list_aws_node_pools].
    fn list_aws_node_pools(
        &self,
        _req: crate::model::ListAwsNodePoolsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListAwsNodePoolsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListAwsNodePoolsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::AwsClusters::delete_aws_node_pool].
    fn delete_aws_node_pool(
        &self,
        _req: crate::model::DeleteAwsNodePoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AwsClusters::get_aws_open_id_config].
    fn get_aws_open_id_config(
        &self,
        _req: crate::model::GetAwsOpenIdConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::AwsOpenIdConfig>> + Send
    {
        std::future::ready::<crate::Result<crate::model::AwsOpenIdConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AwsClusters::get_aws_json_web_keys].
    fn get_aws_json_web_keys(
        &self,
        _req: crate::model::GetAwsJsonWebKeysRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::AwsJsonWebKeys>> + Send {
        std::future::ready::<crate::Result<crate::model::AwsJsonWebKeys>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AwsClusters::get_aws_server_config].
    fn get_aws_server_config(
        &self,
        _req: crate::model::GetAwsServerConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::AwsServerConfig>> + Send
    {
        std::future::ready::<crate::Result<crate::model::AwsServerConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AwsClusters::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::ListOperationsResponse>>
    + Send {
        std::future::ready::<crate::Result<longrunning::model::ListOperationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::AwsClusters::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AwsClusters::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::AwsClusters::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Returns the polling policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        Arc::new(gax::polling_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}

/// Defines the trait used to implement [super::client::AzureClusters].
///
/// Application developers may need to implement this trait to mock
/// `client::AzureClusters`.  In other use-cases, application developers only
/// use `client::AzureClusters` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait AzureClusters: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::AzureClusters::create_azure_client].
    fn create_azure_client(
        &self,
        _req: crate::model::CreateAzureClientRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AzureClusters::get_azure_client].
    fn get_azure_client(
        &self,
        _req: crate::model::GetAzureClientRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::AzureClient>> + Send {
        std::future::ready::<crate::Result<crate::model::AzureClient>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AzureClusters::list_azure_clients].
    fn list_azure_clients(
        &self,
        _req: crate::model::ListAzureClientsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListAzureClientsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListAzureClientsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::AzureClusters::delete_azure_client].
    fn delete_azure_client(
        &self,
        _req: crate::model::DeleteAzureClientRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AzureClusters::create_azure_cluster].
    fn create_azure_cluster(
        &self,
        _req: crate::model::CreateAzureClusterRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AzureClusters::update_azure_cluster].
    fn update_azure_cluster(
        &self,
        _req: crate::model::UpdateAzureClusterRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AzureClusters::get_azure_cluster].
    fn get_azure_cluster(
        &self,
        _req: crate::model::GetAzureClusterRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::AzureCluster>> + Send {
        std::future::ready::<crate::Result<crate::model::AzureCluster>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AzureClusters::list_azure_clusters].
    fn list_azure_clusters(
        &self,
        _req: crate::model::ListAzureClustersRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListAzureClustersResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListAzureClustersResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::AzureClusters::delete_azure_cluster].
    fn delete_azure_cluster(
        &self,
        _req: crate::model::DeleteAzureClusterRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AzureClusters::generate_azure_cluster_agent_token].
    fn generate_azure_cluster_agent_token(
        &self,
        _req: crate::model::GenerateAzureClusterAgentTokenRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::GenerateAzureClusterAgentTokenResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::GenerateAzureClusterAgentTokenResponse>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::AzureClusters::generate_azure_access_token].
    fn generate_azure_access_token(
        &self,
        _req: crate::model::GenerateAzureAccessTokenRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::GenerateAzureAccessTokenResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::GenerateAzureAccessTokenResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::AzureClusters::create_azure_node_pool].
    fn create_azure_node_pool(
        &self,
        _req: crate::model::CreateAzureNodePoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AzureClusters::update_azure_node_pool].
    fn update_azure_node_pool(
        &self,
        _req: crate::model::UpdateAzureNodePoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AzureClusters::get_azure_node_pool].
    fn get_azure_node_pool(
        &self,
        _req: crate::model::GetAzureNodePoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::AzureNodePool>> + Send {
        std::future::ready::<crate::Result<crate::model::AzureNodePool>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AzureClusters::list_azure_node_pools].
    fn list_azure_node_pools(
        &self,
        _req: crate::model::ListAzureNodePoolsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListAzureNodePoolsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListAzureNodePoolsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::AzureClusters::delete_azure_node_pool].
    fn delete_azure_node_pool(
        &self,
        _req: crate::model::DeleteAzureNodePoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AzureClusters::get_azure_open_id_config].
    fn get_azure_open_id_config(
        &self,
        _req: crate::model::GetAzureOpenIdConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::AzureOpenIdConfig>> + Send
    {
        std::future::ready::<crate::Result<crate::model::AzureOpenIdConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AzureClusters::get_azure_json_web_keys].
    fn get_azure_json_web_keys(
        &self,
        _req: crate::model::GetAzureJsonWebKeysRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::AzureJsonWebKeys>> + Send
    {
        std::future::ready::<crate::Result<crate::model::AzureJsonWebKeys>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AzureClusters::get_azure_server_config].
    fn get_azure_server_config(
        &self,
        _req: crate::model::GetAzureServerConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::AzureServerConfig>> + Send
    {
        std::future::ready::<crate::Result<crate::model::AzureServerConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AzureClusters::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::ListOperationsResponse>>
    + Send {
        std::future::ready::<crate::Result<longrunning::model::ListOperationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::AzureClusters::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AzureClusters::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::AzureClusters::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Returns the polling policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        Arc::new(gax::polling_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}
