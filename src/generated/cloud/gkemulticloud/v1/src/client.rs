// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the GKE Multi-Cloud API.
///
/// # Service Description
///
/// The AttachedClusters API provides a single centrally managed service
/// to register and manage Anthos attached clusters that run on customer's owned
/// infrastructure.
///
/// # Configuration
///
/// `AttachedClusters` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `AttachedClusters` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `AttachedClusters` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct AttachedClusters {
    inner: Arc<dyn crate::stubs::dynamic::AttachedClusters>,
}

impl AttachedClusters {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::AttachedClusters + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::AttachedClusters>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::AttachedClusters> {
        crate::transport::AttachedClusters::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::AttachedClusters> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::AttachedClusters::new)
    }

    /// Creates a new
    /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster] resource
    /// on a given Google Cloud Platform project and region.
    ///
    /// If successful, the response contains a newly created
    /// [Operation][google.longrunning.Operation] resource that can be
    /// described to track the status of the operation.
    ///
    /// [google.cloud.gkemulticloud.v1.AttachedCluster]: crate::model::AttachedCluster
    /// [google.longrunning.Operation]: longrunning::model::Operation
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_attached_cluster(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::attached_clusters::CreateAttachedCluster {
        crate::builders::attached_clusters::CreateAttachedCluster::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates an
    /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster].
    ///
    /// [google.cloud.gkemulticloud.v1.AttachedCluster]: crate::model::AttachedCluster
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_attached_cluster(
        &self,
        attached_cluster: impl Into<crate::model::AttachedCluster>,
    ) -> crate::builders::attached_clusters::UpdateAttachedCluster {
        crate::builders::attached_clusters::UpdateAttachedCluster::new(self.inner.clone())
            .set_attached_cluster(attached_cluster.into())
    }

    /// Imports creates a new
    /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster] resource
    /// by importing an existing Fleet Membership resource.
    ///
    /// Attached Clusters created before the introduction of the Anthos Multi-Cloud
    /// API can be imported through this method.
    ///
    /// If successful, the response contains a newly created
    /// [Operation][google.longrunning.Operation] resource that can be
    /// described to track the status of the operation.
    ///
    /// [google.cloud.gkemulticloud.v1.AttachedCluster]: crate::model::AttachedCluster
    /// [google.longrunning.Operation]: longrunning::model::Operation
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn import_attached_cluster(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::attached_clusters::ImportAttachedCluster {
        crate::builders::attached_clusters::ImportAttachedCluster::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Describes a specific
    /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster] resource.
    ///
    /// [google.cloud.gkemulticloud.v1.AttachedCluster]: crate::model::AttachedCluster
    pub fn get_attached_cluster(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::attached_clusters::GetAttachedCluster {
        crate::builders::attached_clusters::GetAttachedCluster::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists all [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster]
    /// resources on a given Google Cloud project and region.
    ///
    /// [google.cloud.gkemulticloud.v1.AttachedCluster]: crate::model::AttachedCluster
    pub fn list_attached_clusters(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::attached_clusters::ListAttachedClusters {
        crate::builders::attached_clusters::ListAttachedClusters::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a specific
    /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster] resource.
    ///
    /// If successful, the response contains a newly created
    /// [Operation][google.longrunning.Operation] resource that can be
    /// described to track the status of the operation.
    ///
    /// [google.cloud.gkemulticloud.v1.AttachedCluster]: crate::model::AttachedCluster
    /// [google.longrunning.Operation]: longrunning::model::Operation
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_attached_cluster(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::attached_clusters::DeleteAttachedCluster {
        crate::builders::attached_clusters::DeleteAttachedCluster::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Returns information, such as supported Kubernetes versions, on a given
    /// Google Cloud location.
    pub fn get_attached_server_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::attached_clusters::GetAttachedServerConfig {
        crate::builders::attached_clusters::GetAttachedServerConfig::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Generates the install manifest to be installed on the target cluster.
    pub fn generate_attached_cluster_install_manifest(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::attached_clusters::GenerateAttachedClusterInstallManifest {
        crate::builders::attached_clusters::GenerateAttachedClusterInstallManifest::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Generates an access token for a cluster agent.
    pub fn generate_attached_cluster_agent_token(
        &self,
        attached_cluster: impl Into<std::string::String>,
    ) -> crate::builders::attached_clusters::GenerateAttachedClusterAgentToken {
        crate::builders::attached_clusters::GenerateAttachedClusterAgentToken::new(
            self.inner.clone(),
        )
        .set_attached_cluster(attached_cluster.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::attached_clusters::ListOperations {
        crate::builders::attached_clusters::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::attached_clusters::GetOperation {
        crate::builders::attached_clusters::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::attached_clusters::DeleteOperation {
        crate::builders::attached_clusters::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::attached_clusters::CancelOperation {
        crate::builders::attached_clusters::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the GKE Multi-Cloud API.
///
/// # Service Description
///
/// The AwsClusters API provides a single centrally managed service
/// to create and manage Anthos clusters that run on AWS infrastructure.
///
/// # Configuration
///
/// `AwsClusters` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `AwsClusters` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `AwsClusters` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct AwsClusters {
    inner: Arc<dyn crate::stubs::dynamic::AwsClusters>,
}

impl AwsClusters {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::AwsClusters + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::AwsClusters>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::AwsClusters> {
        crate::transport::AwsClusters::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::AwsClusters> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::AwsClusters::new)
    }

    /// Creates a new [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
    /// resource on a given Google Cloud Platform project and region.
    ///
    /// If successful, the response contains a newly created
    /// [Operation][google.longrunning.Operation] resource that can be
    /// described to track the status of the operation.
    ///
    /// [google.cloud.gkemulticloud.v1.AwsCluster]: crate::model::AwsCluster
    /// [google.longrunning.Operation]: longrunning::model::Operation
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_aws_cluster(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::aws_clusters::CreateAwsCluster {
        crate::builders::aws_clusters::CreateAwsCluster::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates an [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
    ///
    /// [google.cloud.gkemulticloud.v1.AwsCluster]: crate::model::AwsCluster
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_aws_cluster(
        &self,
        aws_cluster: impl Into<crate::model::AwsCluster>,
    ) -> crate::builders::aws_clusters::UpdateAwsCluster {
        crate::builders::aws_clusters::UpdateAwsCluster::new(self.inner.clone())
            .set_aws_cluster(aws_cluster.into())
    }

    /// Describes a specific [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
    /// resource.
    ///
    /// [google.cloud.gkemulticloud.v1.AwsCluster]: crate::model::AwsCluster
    pub fn get_aws_cluster(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aws_clusters::GetAwsCluster {
        crate::builders::aws_clusters::GetAwsCluster::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists all [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resources
    /// on a given Google Cloud project and region.
    ///
    /// [google.cloud.gkemulticloud.v1.AwsCluster]: crate::model::AwsCluster
    pub fn list_aws_clusters(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::aws_clusters::ListAwsClusters {
        crate::builders::aws_clusters::ListAwsClusters::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a specific [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
    /// resource.
    ///
    /// Fails if the cluster has one or more associated
    /// [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] resources.
    ///
    /// If successful, the response contains a newly created
    /// [Operation][google.longrunning.Operation] resource that can be
    /// described to track the status of the operation.
    ///
    /// [google.cloud.gkemulticloud.v1.AwsCluster]: crate::model::AwsCluster
    /// [google.cloud.gkemulticloud.v1.AwsNodePool]: crate::model::AwsNodePool
    /// [google.longrunning.Operation]: longrunning::model::Operation
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_aws_cluster(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aws_clusters::DeleteAwsCluster {
        crate::builders::aws_clusters::DeleteAwsCluster::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Generates an access token for a cluster agent.
    pub fn generate_aws_cluster_agent_token(
        &self,
        aws_cluster: impl Into<std::string::String>,
    ) -> crate::builders::aws_clusters::GenerateAwsClusterAgentToken {
        crate::builders::aws_clusters::GenerateAwsClusterAgentToken::new(self.inner.clone())
            .set_aws_cluster(aws_cluster.into())
    }

    /// Generates a short-lived access token to authenticate to a given
    /// [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resource.
    ///
    /// [google.cloud.gkemulticloud.v1.AwsCluster]: crate::model::AwsCluster
    pub fn generate_aws_access_token(
        &self,
        aws_cluster: impl Into<std::string::String>,
    ) -> crate::builders::aws_clusters::GenerateAwsAccessToken {
        crate::builders::aws_clusters::GenerateAwsAccessToken::new(self.inner.clone())
            .set_aws_cluster(aws_cluster.into())
    }

    /// Creates a new [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool],
    /// attached to a given [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
    ///
    /// If successful, the response contains a newly created
    /// [Operation][google.longrunning.Operation] resource that can be
    /// described to track the status of the operation.
    ///
    /// [google.cloud.gkemulticloud.v1.AwsCluster]: crate::model::AwsCluster
    /// [google.cloud.gkemulticloud.v1.AwsNodePool]: crate::model::AwsNodePool
    /// [google.longrunning.Operation]: longrunning::model::Operation
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_aws_node_pool(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::aws_clusters::CreateAwsNodePool {
        crate::builders::aws_clusters::CreateAwsNodePool::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates an [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool].
    ///
    /// [google.cloud.gkemulticloud.v1.AwsNodePool]: crate::model::AwsNodePool
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_aws_node_pool(
        &self,
        aws_node_pool: impl Into<crate::model::AwsNodePool>,
    ) -> crate::builders::aws_clusters::UpdateAwsNodePool {
        crate::builders::aws_clusters::UpdateAwsNodePool::new(self.inner.clone())
            .set_aws_node_pool(aws_node_pool.into())
    }

    /// Rolls back a previously aborted or failed
    /// [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] update request.
    /// Makes no changes if the last update request successfully finished.
    /// If an update request is in progress, you cannot rollback the update.
    /// You must first cancel or let it finish unsuccessfully before you can
    /// rollback.
    ///
    /// [google.cloud.gkemulticloud.v1.AwsNodePool]: crate::model::AwsNodePool
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn rollback_aws_node_pool_update(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aws_clusters::RollbackAwsNodePoolUpdate {
        crate::builders::aws_clusters::RollbackAwsNodePoolUpdate::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Describes a specific
    /// [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] resource.
    ///
    /// [google.cloud.gkemulticloud.v1.AwsNodePool]: crate::model::AwsNodePool
    pub fn get_aws_node_pool(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aws_clusters::GetAwsNodePool {
        crate::builders::aws_clusters::GetAwsNodePool::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists all [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool]
    /// resources on a given
    /// [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
    ///
    /// [google.cloud.gkemulticloud.v1.AwsCluster]: crate::model::AwsCluster
    /// [google.cloud.gkemulticloud.v1.AwsNodePool]: crate::model::AwsNodePool
    pub fn list_aws_node_pools(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::aws_clusters::ListAwsNodePools {
        crate::builders::aws_clusters::ListAwsNodePools::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a specific [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool]
    /// resource.
    ///
    /// If successful, the response contains a newly created
    /// [Operation][google.longrunning.Operation] resource that can be
    /// described to track the status of the operation.
    ///
    /// [google.cloud.gkemulticloud.v1.AwsNodePool]: crate::model::AwsNodePool
    /// [google.longrunning.Operation]: longrunning::model::Operation
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_aws_node_pool(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aws_clusters::DeleteAwsNodePool {
        crate::builders::aws_clusters::DeleteAwsNodePool::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets the OIDC discovery document for the cluster.
    /// See the
    /// [OpenID Connect Discovery 1.0
    /// specification](https://openid.net/specs/openid-connect-discovery-1_0.html)
    /// for details.
    pub fn get_aws_open_id_config(
        &self,
        aws_cluster: impl Into<std::string::String>,
    ) -> crate::builders::aws_clusters::GetAwsOpenIdConfig {
        crate::builders::aws_clusters::GetAwsOpenIdConfig::new(self.inner.clone())
            .set_aws_cluster(aws_cluster.into())
    }

    /// Gets the public component of the cluster signing keys in
    /// JSON Web Key format.
    pub fn get_aws_json_web_keys(
        &self,
        aws_cluster: impl Into<std::string::String>,
    ) -> crate::builders::aws_clusters::GetAwsJsonWebKeys {
        crate::builders::aws_clusters::GetAwsJsonWebKeys::new(self.inner.clone())
            .set_aws_cluster(aws_cluster.into())
    }

    /// Returns information, such as supported AWS regions and Kubernetes
    /// versions, on a given Google Cloud location.
    pub fn get_aws_server_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aws_clusters::GetAwsServerConfig {
        crate::builders::aws_clusters::GetAwsServerConfig::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aws_clusters::ListOperations {
        crate::builders::aws_clusters::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aws_clusters::GetOperation {
        crate::builders::aws_clusters::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aws_clusters::DeleteOperation {
        crate::builders::aws_clusters::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aws_clusters::CancelOperation {
        crate::builders::aws_clusters::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the GKE Multi-Cloud API.
///
/// # Service Description
///
/// The AzureClusters API provides a single centrally managed service
/// to create and manage Anthos clusters that run on Azure infrastructure.
///
/// # Configuration
///
/// `AzureClusters` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `AzureClusters` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `AzureClusters` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct AzureClusters {
    inner: Arc<dyn crate::stubs::dynamic::AzureClusters>,
}

impl AzureClusters {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::AzureClusters + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::AzureClusters>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::AzureClusters> {
        crate::transport::AzureClusters::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::AzureClusters> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::AzureClusters::new)
    }

    /// Creates a new [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
    /// resource on a given Google Cloud project and region.
    ///
    /// `AzureClient` resources hold client authentication
    /// information needed by the Anthos Multicloud API to manage Azure resources
    /// on your Azure subscription on your behalf.
    ///
    /// If successful, the response contains a newly created
    /// [Operation][google.longrunning.Operation] resource that can be
    /// described to track the status of the operation.
    ///
    /// [google.cloud.gkemulticloud.v1.AzureClient]: crate::model::AzureClient
    /// [google.longrunning.Operation]: longrunning::model::Operation
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_azure_client(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::azure_clusters::CreateAzureClient {
        crate::builders::azure_clusters::CreateAzureClient::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Describes a specific
    /// [AzureClient][google.cloud.gkemulticloud.v1.AzureClient] resource.
    ///
    /// [google.cloud.gkemulticloud.v1.AzureClient]: crate::model::AzureClient
    pub fn get_azure_client(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::azure_clusters::GetAzureClient {
        crate::builders::azure_clusters::GetAzureClient::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists all [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
    /// resources on a given Google Cloud project and region.
    ///
    /// [google.cloud.gkemulticloud.v1.AzureClient]: crate::model::AzureClient
    pub fn list_azure_clients(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::azure_clusters::ListAzureClients {
        crate::builders::azure_clusters::ListAzureClients::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a specific [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
    /// resource.
    ///
    /// If the client is used by one or more clusters, deletion will
    /// fail and a `FAILED_PRECONDITION` error will be returned.
    ///
    /// If successful, the response contains a newly created
    /// [Operation][google.longrunning.Operation] resource that can be
    /// described to track the status of the operation.
    ///
    /// [google.cloud.gkemulticloud.v1.AzureClient]: crate::model::AzureClient
    /// [google.longrunning.Operation]: longrunning::model::Operation
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_azure_client(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::azure_clusters::DeleteAzureClient {
        crate::builders::azure_clusters::DeleteAzureClient::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]
    /// resource on a given Google Cloud Platform project and region.
    ///
    /// If successful, the response contains a newly created
    /// [Operation][google.longrunning.Operation] resource that can be
    /// described to track the status of the operation.
    ///
    /// [google.cloud.gkemulticloud.v1.AzureCluster]: crate::model::AzureCluster
    /// [google.longrunning.Operation]: longrunning::model::Operation
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_azure_cluster(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::azure_clusters::CreateAzureCluster {
        crate::builders::azure_clusters::CreateAzureCluster::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates an [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
    ///
    /// [google.cloud.gkemulticloud.v1.AzureCluster]: crate::model::AzureCluster
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_azure_cluster(
        &self,
        azure_cluster: impl Into<crate::model::AzureCluster>,
    ) -> crate::builders::azure_clusters::UpdateAzureCluster {
        crate::builders::azure_clusters::UpdateAzureCluster::new(self.inner.clone())
            .set_azure_cluster(azure_cluster.into())
    }

    /// Describes a specific
    /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
    ///
    /// [google.cloud.gkemulticloud.v1.AzureCluster]: crate::model::AzureCluster
    pub fn get_azure_cluster(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::azure_clusters::GetAzureCluster {
        crate::builders::azure_clusters::GetAzureCluster::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists all [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]
    /// resources on a given Google Cloud project and region.
    ///
    /// [google.cloud.gkemulticloud.v1.AzureCluster]: crate::model::AzureCluster
    pub fn list_azure_clusters(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::azure_clusters::ListAzureClusters {
        crate::builders::azure_clusters::ListAzureClusters::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a specific
    /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
    ///
    /// Fails if the cluster has one or more associated
    /// [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resources.
    ///
    /// If successful, the response contains a newly created
    /// [Operation][google.longrunning.Operation] resource that can be
    /// described to track the status of the operation.
    ///
    /// [google.cloud.gkemulticloud.v1.AzureCluster]: crate::model::AzureCluster
    /// [google.cloud.gkemulticloud.v1.AzureNodePool]: crate::model::AzureNodePool
    /// [google.longrunning.Operation]: longrunning::model::Operation
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_azure_cluster(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::azure_clusters::DeleteAzureCluster {
        crate::builders::azure_clusters::DeleteAzureCluster::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Generates an access token for a cluster agent.
    pub fn generate_azure_cluster_agent_token(
        &self,
        azure_cluster: impl Into<std::string::String>,
    ) -> crate::builders::azure_clusters::GenerateAzureClusterAgentToken {
        crate::builders::azure_clusters::GenerateAzureClusterAgentToken::new(self.inner.clone())
            .set_azure_cluster(azure_cluster.into())
    }

    /// Generates a short-lived access token to authenticate to a given
    /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
    ///
    /// [google.cloud.gkemulticloud.v1.AzureCluster]: crate::model::AzureCluster
    pub fn generate_azure_access_token(
        &self,
        azure_cluster: impl Into<std::string::String>,
    ) -> crate::builders::azure_clusters::GenerateAzureAccessToken {
        crate::builders::azure_clusters::GenerateAzureAccessToken::new(self.inner.clone())
            .set_azure_cluster(azure_cluster.into())
    }

    /// Creates a new [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool],
    /// attached to a given
    /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
    ///
    /// If successful, the response contains a newly created
    /// [Operation][google.longrunning.Operation] resource that can be
    /// described to track the status of the operation.
    ///
    /// [google.cloud.gkemulticloud.v1.AzureCluster]: crate::model::AzureCluster
    /// [google.cloud.gkemulticloud.v1.AzureNodePool]: crate::model::AzureNodePool
    /// [google.longrunning.Operation]: longrunning::model::Operation
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_azure_node_pool(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::azure_clusters::CreateAzureNodePool {
        crate::builders::azure_clusters::CreateAzureNodePool::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates an [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool].
    ///
    /// [google.cloud.gkemulticloud.v1.AzureNodePool]: crate::model::AzureNodePool
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_azure_node_pool(
        &self,
        azure_node_pool: impl Into<crate::model::AzureNodePool>,
    ) -> crate::builders::azure_clusters::UpdateAzureNodePool {
        crate::builders::azure_clusters::UpdateAzureNodePool::new(self.inner.clone())
            .set_azure_node_pool(azure_node_pool.into())
    }

    /// Describes a specific
    /// [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resource.
    ///
    /// [google.cloud.gkemulticloud.v1.AzureNodePool]: crate::model::AzureNodePool
    pub fn get_azure_node_pool(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::azure_clusters::GetAzureNodePool {
        crate::builders::azure_clusters::GetAzureNodePool::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists all [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool]
    /// resources on a given
    /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
    ///
    /// [google.cloud.gkemulticloud.v1.AzureCluster]: crate::model::AzureCluster
    /// [google.cloud.gkemulticloud.v1.AzureNodePool]: crate::model::AzureNodePool
    pub fn list_azure_node_pools(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::azure_clusters::ListAzureNodePools {
        crate::builders::azure_clusters::ListAzureNodePools::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a specific
    /// [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resource.
    ///
    /// If successful, the response contains a newly created
    /// [Operation][google.longrunning.Operation] resource that can be
    /// described to track the status of the operation.
    ///
    /// [google.cloud.gkemulticloud.v1.AzureNodePool]: crate::model::AzureNodePool
    /// [google.longrunning.Operation]: longrunning::model::Operation
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_azure_node_pool(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::azure_clusters::DeleteAzureNodePool {
        crate::builders::azure_clusters::DeleteAzureNodePool::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets the OIDC discovery document for the cluster.
    /// See the
    /// [OpenID Connect Discovery 1.0
    /// specification](https://openid.net/specs/openid-connect-discovery-1_0.html)
    /// for details.
    pub fn get_azure_open_id_config(
        &self,
        azure_cluster: impl Into<std::string::String>,
    ) -> crate::builders::azure_clusters::GetAzureOpenIdConfig {
        crate::builders::azure_clusters::GetAzureOpenIdConfig::new(self.inner.clone())
            .set_azure_cluster(azure_cluster.into())
    }

    /// Gets the public component of the cluster signing keys in
    /// JSON Web Key format.
    pub fn get_azure_json_web_keys(
        &self,
        azure_cluster: impl Into<std::string::String>,
    ) -> crate::builders::azure_clusters::GetAzureJsonWebKeys {
        crate::builders::azure_clusters::GetAzureJsonWebKeys::new(self.inner.clone())
            .set_azure_cluster(azure_cluster.into())
    }

    /// Returns information, such as supported Azure regions and Kubernetes
    /// versions, on a given Google Cloud location.
    pub fn get_azure_server_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::azure_clusters::GetAzureServerConfig {
        crate::builders::azure_clusters::GetAzureServerConfig::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::azure_clusters::ListOperations {
        crate::builders::azure_clusters::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::azure_clusters::GetOperation {
        crate::builders::azure_clusters::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::azure_clusters::DeleteOperation {
        crate::builders::azure_clusters::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::azure_clusters::CancelOperation {
        crate::builders::azure_clusters::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
