// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use crate::Result;
use std::sync::Arc;

/// An implementation of [crate::traits::WebRiskService] to make requests with.
///
/// `WebRiskService` has various configuration parameters, but the defaults
/// are set to work with most applications.
///
/// `WebRiskService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `WebRiskService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
///
/// Web Risk API defines an interface to detect malicious URLs on your
/// website and in client applications.
#[derive(Clone, Debug)]
pub struct WebRiskService {
    inner: Arc<dyn crate::traits::dyntraits::WebRiskService>,
}

impl WebRiskService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::traits::WebRiskService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::traits::dyntraits::WebRiskService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::traits::WebRiskService> {
        crate::transport::WebRiskService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::traits::WebRiskService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::WebRiskService::new)
    }

    /// Gets the most recent threat list diffs. These diffs should be applied to
    /// a local database of hashes to keep it up-to-date. If the local database is
    /// empty or excessively out-of-date, a complete snapshot of the database will
    /// be returned. This Method only updates a single ThreatList at a time. To
    /// update multiple ThreatList databases, this method needs to be called once
    /// for each list.
    pub fn compute_threat_list_diff(
        &self,
    ) -> crate::builders::web_risk_service::ComputeThreatListDiff {
        crate::builders::web_risk_service::ComputeThreatListDiff::new(self.inner.clone())
    }

    /// This method is used to check whether a URI is on a given threatList.
    /// Multiple threatLists may be searched in a single query.
    /// The response will list all requested threatLists the URI was found to
    /// match. If the URI is not found on any of the requested ThreatList an
    /// empty response will be returned.
    pub fn search_uris(&self) -> crate::builders::web_risk_service::SearchUris {
        crate::builders::web_risk_service::SearchUris::new(self.inner.clone())
    }

    /// Gets the full hashes that match the requested hash prefix.
    /// This is used after a hash prefix is looked up in a threatList
    /// and there is a match. The client side threatList only holds partial hashes
    /// so the client must query this method to determine if there is a full
    /// hash match of a threat.
    pub fn search_hashes(&self) -> crate::builders::web_risk_service::SearchHashes {
        crate::builders::web_risk_service::SearchHashes::new(self.inner.clone())
    }

    /// Creates a Submission of a URI suspected of containing phishing content to
    /// be reviewed. If the result verifies the existence of malicious phishing
    /// content, the site will be added to the [Google's Social Engineering
    /// lists](https://support.google.com/webmasters/answer/6350487/) in order to
    /// protect users that could get exposed to this threat in the future. Only
    /// allowlisted projects can use this method during Early Access. Please reach
    /// out to Sales or your customer engineer to obtain access.
    pub fn create_submission(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::web_risk_service::CreateSubmission {
        crate::builders::web_risk_service::CreateSubmission::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Submits a URI suspected of containing malicious content to be reviewed.
    /// Returns a google.longrunning.Operation which, once the review is complete,
    /// is updated with its result. You can use the [Pub/Sub API]
    /// (<https://cloud.google.com/pubsub>) to receive notifications for the returned
    /// Operation. If the result verifies the existence of malicious content, the
    /// site will be added to the [Google's Social Engineering lists]
    /// (<https://support.google.com/webmasters/answer/6350487/>) in order to
    /// protect users that could get exposed to this threat in the future. Only
    /// allowlisted projects can use this method during Early Access. Please reach
    /// out to Sales or your customer engineer to obtain access.
    ///
    /// # Long running operations
    ///
    /// Calling [poller()] on the resulting builder returns an implementation of
    /// the [lro::Poller] trait. You need to call `Poller::poll` on this
    /// `Poller` at least once to start the LRO. You may periodically poll this
    /// object to find the status of the operation. The poller automatically
    /// extract the final response value and any intermediate metadata values.
    ///
    /// Calling [send()] on the resulting builder starts a LRO (long-Running
    /// Operation). LROs run in the background, and the application may poll
    /// them periodically to find out if they have succeeded, or failed. See
    /// below for instructions on how to manually use the resulting [Operation].
    /// We recommend `poller()` in favor of `send()`.
    ///
    /// ## Polling until completion
    ///
    /// Applications that do not care about intermediate results in a
    /// long-running operation may use the [until_done()] function:
    ///
    /// ```
    /// # use gax::Result;
    /// # use gcp_sdk_webrisk_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::Submission, model::SubmitUriMetadata>
    /// ) -> Result<model::Submission> {
    ///     poller.until_done().await
    /// }
    /// ```
    ///
    /// This will wait until the LRO completes (successfully or with an error).
    /// Applications can set the [PollingPolicy] and [PollingBackoffPolicy] to
    /// control for how long the function runs.
    ///
    /// ## Polling with detailed metadata updates
    ///
    /// Using the result of [poller()] follows a common pattern:
    ///
    /// ```
    /// # use gax::Result;
    /// # use gcp_sdk_webrisk_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::Submission, model::SubmitUriMetadata>
    /// ) -> Result<model::Submission> {
    ///     while let Some(p) = poller.poll().await {
    ///         match p {
    ///             lro::PollingResult::Completed(r) => { return r; },
    ///             lro::PollingResult::InProgress(m) => { println!("in progress {m:?}"); },
    ///             lro::PollingResult::PollingError(_) => { /* ignored */ },
    ///         }
    ///         tokio::time::sleep(std::time::Duration::from_secs(1)).await;
    ///     }
    ///     Err(gax::error::Error::other("LRO never completed"))
    /// }
    /// ```
    ///
    /// ## Manually polling long-running operations
    ///
    /// If you call [send()], you need to examine the contents of the resulting
    /// [Operation][longrunning::model::Operation] to determine the result of
    /// the operation.
    ///
    /// If the `done` field is `true`, the operation has completed. The `result`
    /// field contains the final response, this will be a [crate::model::Submission] (as
    /// an [Any]), or the error (as a `Status`).
    ///
    /// If the `done` field is `false`, the operation has not completed.  The
    /// operation may also include a [crate::model::SubmitUriMetadata] value in the `metadata`
    /// field. This value would also be encoded as an [Any]. The metadata may
    /// include information about how much progress the LRO has made.
    ///
    /// To find out if the operation has completed, use the [get_operation]
    /// method and repeat the steps outlined above.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::web_risk_service::SubmitUri::send
    /// [poller()]: crate::builders::web_risk_service::SubmitUri::poller
    /// [until_done()]: lro::Poller::until_done
    /// [PollingPolicy]: gax::polling_policy::PollingPolicy
    /// [PollingBackoffPolicy]: gax::polling_backoff_policy::PollingBackoffPolicy
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    /// [Any]: wkt::Any
    pub fn submit_uri(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::web_risk_service::SubmitUri {
        crate::builders::web_risk_service::SubmitUri::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::web_risk_service::ListOperations {
        crate::builders::web_risk_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::web_risk_service::GetOperation {
        crate::builders::web_risk_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::web_risk_service::DeleteOperation {
        crate::builders::web_risk_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::web_risk_service::CancelOperation {
        crate::builders::web_risk_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
