// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the KMS Inventory API.
///
/// # Service Description
///
/// Provides a cross-region view of all Cloud KMS keys in a given Cloud project.
///
/// # Configuration
///
/// `KeyDashboardService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `KeyDashboardService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `KeyDashboardService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct KeyDashboardService {
    inner: Arc<dyn crate::stubs::dynamic::KeyDashboardService>,
}

impl KeyDashboardService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::KeyDashboardService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::KeyDashboardService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::KeyDashboardService> {
        crate::transport::KeyDashboardService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::KeyDashboardService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::KeyDashboardService::new)
    }

    /// Returns cryptographic keys managed by Cloud KMS in a given Cloud project.
    /// Note that this data is sourced from snapshots, meaning it may not
    /// completely reflect the actual state of key metadata at call time.
    pub fn list_crypto_keys(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::key_dashboard_service::ListCryptoKeys {
        crate::builders::key_dashboard_service::ListCryptoKeys::new(self.inner.clone())
            .set_parent(parent.into())
    }
}

/// Implements a client for the KMS Inventory API.
///
/// # Service Description
///
/// Returns information about the resources in an org that are protected by a
/// given Cloud KMS key via CMEK.
///
/// # Configuration
///
/// `KeyTrackingService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `KeyTrackingService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `KeyTrackingService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct KeyTrackingService {
    inner: Arc<dyn crate::stubs::dynamic::KeyTrackingService>,
}

impl KeyTrackingService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::KeyTrackingService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::KeyTrackingService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::KeyTrackingService> {
        crate::transport::KeyTrackingService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::KeyTrackingService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::KeyTrackingService::new)
    }

    /// Returns aggregate information about the resources protected by the given
    /// Cloud KMS [CryptoKey][google.cloud.kms.v1.CryptoKey]. Only resources within
    /// the same Cloud organization as the key will be returned. The project that
    /// holds the key must be part of an organization in order for this call to
    /// succeed.
    ///
    /// [google.cloud.kms.v1.CryptoKey]: kms::model::CryptoKey
    pub fn get_protected_resources_summary(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::key_tracking_service::GetProtectedResourcesSummary {
        crate::builders::key_tracking_service::GetProtectedResourcesSummary::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Returns metadata about the resources protected by the given Cloud KMS
    /// [CryptoKey][google.cloud.kms.v1.CryptoKey] in the given Cloud organization.
    ///
    /// [google.cloud.kms.v1.CryptoKey]: kms::model::CryptoKey
    pub fn search_protected_resources(
        &self,
        scope: impl Into<std::string::String>,
    ) -> crate::builders::key_tracking_service::SearchProtectedResources {
        crate::builders::key_tracking_service::SearchProtectedResources::new(self.inner.clone())
            .set_scope(scope.into())
    }
}
