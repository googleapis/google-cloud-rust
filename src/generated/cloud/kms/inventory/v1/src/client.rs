// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the KMS Inventory API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_kms_inventory_v1::client::KeyDashboardService;
/// let client = KeyDashboardService::builder().build().await?;
/// // use `client` to make requests to the {Codec.APITitle}}.
/// # gax::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// Provides a cross-region view of all Cloud KMS keys in a given Cloud project.
///
/// # Configuration
///
/// To configure `KeyDashboardService` use the `with_*` methods in the type returned
/// by [builder()][KeyDashboardService::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://kmsinventory.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::key_dashboard_service::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::key_dashboard_service::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `KeyDashboardService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `KeyDashboardService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct KeyDashboardService {
    inner: Arc<dyn super::stub::dynamic::KeyDashboardService>,
}

impl KeyDashboardService {
    /// Returns a builder for [KeyDashboardService].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_kms_inventory_v1::client::KeyDashboardService;
    /// let client = KeyDashboardService::builder().build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::key_dashboard_service::ClientBuilder {
        gax::client_builder::internal::new_builder(
            super::builder::key_dashboard_service::client::Factory,
        )
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::KeyDashboardService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    pub(crate) async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> Result<Arc<dyn super::stub::dynamic::KeyDashboardService>> {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::KeyDashboardService> {
        super::transport::KeyDashboardService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::KeyDashboardService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::KeyDashboardService::new)
    }

    /// Returns cryptographic keys managed by Cloud KMS in a given Cloud project.
    /// Note that this data is sourced from snapshots, meaning it may not
    /// completely reflect the actual state of key metadata at call time.
    pub fn list_crypto_keys(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::key_dashboard_service::ListCryptoKeys {
        super::builder::key_dashboard_service::ListCryptoKeys::new(self.inner.clone())
            .set_parent(parent.into())
    }
}

/// Implements a client for the KMS Inventory API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_kms_inventory_v1::client::KeyTrackingService;
/// let client = KeyTrackingService::builder().build().await?;
/// // use `client` to make requests to the {Codec.APITitle}}.
/// # gax::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// Returns information about the resources in an org that are protected by a
/// given Cloud KMS key via CMEK.
///
/// # Configuration
///
/// To configure `KeyTrackingService` use the `with_*` methods in the type returned
/// by [builder()][KeyTrackingService::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://kmsinventory.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::key_tracking_service::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::key_tracking_service::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `KeyTrackingService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `KeyTrackingService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct KeyTrackingService {
    inner: Arc<dyn super::stub::dynamic::KeyTrackingService>,
}

impl KeyTrackingService {
    /// Returns a builder for [KeyTrackingService].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_kms_inventory_v1::client::KeyTrackingService;
    /// let client = KeyTrackingService::builder().build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::key_tracking_service::ClientBuilder {
        gax::client_builder::internal::new_builder(
            super::builder::key_tracking_service::client::Factory,
        )
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::KeyTrackingService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    pub(crate) async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> Result<Arc<dyn super::stub::dynamic::KeyTrackingService>> {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::KeyTrackingService> {
        super::transport::KeyTrackingService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::KeyTrackingService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::KeyTrackingService::new)
    }

    /// Returns aggregate information about the resources protected by the given
    /// Cloud KMS [CryptoKey][google.cloud.kms.v1.CryptoKey]. Only resources within
    /// the same Cloud organization as the key will be returned. The project that
    /// holds the key must be part of an organization in order for this call to
    /// succeed.
    ///
    /// [google.cloud.kms.v1.CryptoKey]: kms::model::CryptoKey
    pub fn get_protected_resources_summary(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::key_tracking_service::GetProtectedResourcesSummary {
        super::builder::key_tracking_service::GetProtectedResourcesSummary::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Returns metadata about the resources protected by the given Cloud KMS
    /// [CryptoKey][google.cloud.kms.v1.CryptoKey] in the given Cloud organization.
    ///
    /// [google.cloud.kms.v1.CryptoKey]: kms::model::CryptoKey
    pub fn search_protected_resources(
        &self,
        scope: impl Into<std::string::String>,
    ) -> super::builder::key_tracking_service::SearchProtectedResources {
        super::builder::key_tracking_service::SearchProtectedResources::new(self.inner.clone())
            .set_scope(scope.into())
    }
}
