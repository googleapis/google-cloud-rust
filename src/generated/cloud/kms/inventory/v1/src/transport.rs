// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use crate::Result;
#[allow(unused_imports)]
use gax::error::Error;

/// Implements [KeyDashboardService](crate::stubs::KeyDashboardService) using a [gclient::ReqwestClient].
#[derive(Clone)]
pub struct KeyDashboardService {
    inner: gclient::ReqwestClient,
}

impl std::fmt::Debug for KeyDashboardService {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        f.debug_struct("KeyDashboardService")
            .field("inner", &self.inner)
            .finish()
    }
}

impl KeyDashboardService {
    pub async fn new(config: gclient::ClientConfig) -> Result<Self> {
        let inner = gclient::ReqwestClient::new(config, crate::DEFAULT_HOST).await?;
        Ok(Self { inner })
    }
}

impl crate::stubs::KeyDashboardService for KeyDashboardService {
    async fn list_crypto_keys(
        &self,
        req: crate::model::ListCryptoKeysRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListCryptoKeysResponse> {
        let options = options.set_default_idempotency(reqwest::Method::GET.is_idempotent());
        let builder = self
            .inner
            .builder(
                reqwest::Method::GET,
                format!("/v1/{}/cryptoKeys", req.parent),
            )
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("pageSize", &req.page_size)]);
        let builder = builder.query(&[("pageToken", &req.page_token)]);
        self.inner
            .execute(builder, None::<gclient::NoBody>, options)
            .await
    }
}

/// Implements [KeyTrackingService](crate::stubs::KeyTrackingService) using a [gclient::ReqwestClient].
#[derive(Clone)]
pub struct KeyTrackingService {
    inner: gclient::ReqwestClient,
}

impl std::fmt::Debug for KeyTrackingService {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        f.debug_struct("KeyTrackingService")
            .field("inner", &self.inner)
            .finish()
    }
}

impl KeyTrackingService {
    pub async fn new(config: gclient::ClientConfig) -> Result<Self> {
        let inner = gclient::ReqwestClient::new(config, crate::DEFAULT_HOST).await?;
        Ok(Self { inner })
    }
}

impl crate::stubs::KeyTrackingService for KeyTrackingService {
    async fn get_protected_resources_summary(
        &self,
        req: crate::model::GetProtectedResourcesSummaryRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ProtectedResourcesSummary> {
        let options = options.set_default_idempotency(reqwest::Method::GET.is_idempotent());
        let builder = self
            .inner
            .builder(
                reqwest::Method::GET,
                format!("/v1/{}/protectedResourcesSummary", req.name),
            )
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        self.inner
            .execute(builder, None::<gclient::NoBody>, options)
            .await
    }

    async fn search_protected_resources(
        &self,
        req: crate::model::SearchProtectedResourcesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::SearchProtectedResourcesResponse> {
        let options = options.set_default_idempotency(reqwest::Method::GET.is_idempotent());
        let builder = self
            .inner
            .builder(
                reqwest::Method::GET,
                format!("/v1/{}/protectedResources:search", req.scope),
            )
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("cryptoKey", &req.crypto_key)]);
        let builder = builder.query(&[("pageSize", &req.page_size)]);
        let builder = builder.query(&[("pageToken", &req.page_token)]);
        let builder = req
            .resource_types
            .iter()
            .fold(builder, |builder, p| builder.query(&[("resourceTypes", p)]));
        self.inner
            .execute(builder, None::<gclient::NoBody>, options)
            .await
    }
}
