// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
use crate::Result;

/// Implements a [KeyDashboardService](super::stub::KeyDashboardService) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct KeyDashboardService<T>
where
    T: super::stub::KeyDashboardService + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> KeyDashboardService<T>
where
    T: super::stub::KeyDashboardService + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> super::stub::KeyDashboardService for KeyDashboardService<T>
where
    T: super::stub::KeyDashboardService + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn list_crypto_keys(
        &self,
        req: crate::model::ListCryptoKeysRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListCryptoKeysResponse>> {
        self.inner.list_crypto_keys(req, options).await
    }
}

/// Implements a [KeyTrackingService](super::stub::KeyTrackingService) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct KeyTrackingService<T>
where
    T: super::stub::KeyTrackingService + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> KeyTrackingService<T>
where
    T: super::stub::KeyTrackingService + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> super::stub::KeyTrackingService for KeyTrackingService<T>
where
    T: super::stub::KeyTrackingService + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn get_protected_resources_summary(
        &self,
        req: crate::model::GetProtectedResourcesSummaryRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ProtectedResourcesSummary>> {
        self.inner
            .get_protected_resources_summary(req, options)
            .await
    }

    #[tracing::instrument(ret)]
    async fn search_protected_resources(
        &self,
        req: crate::model::SearchProtectedResourcesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::SearchProtectedResourcesResponse>> {
        self.inner.search_protected_resources(req, options).await
    }
}
