// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dynamic;

/// Defines the trait used to implement [crate::client::GSuiteAddOns].
///
/// Application developers may need to implement this trait to mock
/// `client::GSuiteAddOns`.  In other use-cases, application developers only
/// use `client::GSuiteAddOns` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait GSuiteAddOns: std::fmt::Debug + Send + Sync {
    /// Implements [crate::client::GSuiteAddOns::get_authorization].
    fn get_authorization(
        &self,
        _req: crate::model::GetAuthorizationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Authorization>> + Send {
        std::future::ready::<crate::Result<crate::model::Authorization>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::GSuiteAddOns::create_deployment].
    fn create_deployment(
        &self,
        _req: crate::model::CreateDeploymentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Deployment>> + Send {
        std::future::ready::<crate::Result<crate::model::Deployment>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::GSuiteAddOns::replace_deployment].
    fn replace_deployment(
        &self,
        _req: crate::model::ReplaceDeploymentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Deployment>> + Send {
        std::future::ready::<crate::Result<crate::model::Deployment>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::GSuiteAddOns::get_deployment].
    fn get_deployment(
        &self,
        _req: crate::model::GetDeploymentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Deployment>> + Send {
        std::future::ready::<crate::Result<crate::model::Deployment>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::GSuiteAddOns::list_deployments].
    fn list_deployments(
        &self,
        _req: crate::model::ListDeploymentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListDeploymentsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListDeploymentsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::GSuiteAddOns::delete_deployment].
    fn delete_deployment(
        &self,
        _req: crate::model::DeleteDeploymentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::GSuiteAddOns::install_deployment].
    fn install_deployment(
        &self,
        _req: crate::model::InstallDeploymentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::GSuiteAddOns::uninstall_deployment].
    fn uninstall_deployment(
        &self,
        _req: crate::model::UninstallDeploymentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::GSuiteAddOns::get_install_status].
    fn get_install_status(
        &self,
        _req: crate::model::GetInstallStatusRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::InstallStatus>> + Send {
        std::future::ready::<crate::Result<crate::model::InstallStatus>>(Err(Error::other(
            "unimplemented",
        )))
    }
}
