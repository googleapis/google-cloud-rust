// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Network Services API.
///
/// # Service Description
///
/// Service describing handlers for resources.
///
/// # Configuration
///
/// `DepService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `DepService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `DepService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct DepService {
    inner: Arc<dyn crate::stubs::dynamic::DepService>,
}

impl DepService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::DepService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::DepService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::DepService> {
        crate::transport::DepService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::DepService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::DepService::new)
    }

    /// Lists `LbTrafficExtension` resources in a given project and location.
    pub fn list_lb_traffic_extensions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::dep_service::ListLbTrafficExtensions {
        crate::builders::dep_service::ListLbTrafficExtensions::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of the specified `LbTrafficExtension` resource.
    pub fn get_lb_traffic_extension(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dep_service::GetLbTrafficExtension {
        crate::builders::dep_service::GetLbTrafficExtension::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new `LbTrafficExtension` resource in a given project and
    /// location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_lb_traffic_extension(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::dep_service::CreateLbTrafficExtension {
        crate::builders::dep_service::CreateLbTrafficExtension::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of the specified `LbTrafficExtension` resource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_lb_traffic_extension(
        &self,
        lb_traffic_extension: impl Into<crate::model::LbTrafficExtension>,
    ) -> crate::builders::dep_service::UpdateLbTrafficExtension {
        crate::builders::dep_service::UpdateLbTrafficExtension::new(self.inner.clone())
            .set_lb_traffic_extension(lb_traffic_extension.into())
    }

    /// Deletes the specified `LbTrafficExtension` resource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_lb_traffic_extension(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dep_service::DeleteLbTrafficExtension {
        crate::builders::dep_service::DeleteLbTrafficExtension::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists `LbRouteExtension` resources in a given project and location.
    pub fn list_lb_route_extensions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::dep_service::ListLbRouteExtensions {
        crate::builders::dep_service::ListLbRouteExtensions::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of the specified `LbRouteExtension` resource.
    pub fn get_lb_route_extension(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dep_service::GetLbRouteExtension {
        crate::builders::dep_service::GetLbRouteExtension::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new `LbRouteExtension` resource in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_lb_route_extension(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::dep_service::CreateLbRouteExtension {
        crate::builders::dep_service::CreateLbRouteExtension::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of the specified `LbRouteExtension` resource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_lb_route_extension(
        &self,
        lb_route_extension: impl Into<crate::model::LbRouteExtension>,
    ) -> crate::builders::dep_service::UpdateLbRouteExtension {
        crate::builders::dep_service::UpdateLbRouteExtension::new(self.inner.clone())
            .set_lb_route_extension(lb_route_extension.into())
    }

    /// Deletes the specified `LbRouteExtension` resource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_lb_route_extension(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dep_service::DeleteLbRouteExtension {
        crate::builders::dep_service::DeleteLbRouteExtension::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dep_service::ListLocations {
        crate::builders::dep_service::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dep_service::GetLocation {
        crate::builders::dep_service::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::dep_service::SetIamPolicy {
        crate::builders::dep_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::dep_service::GetIamPolicy {
        crate::builders::dep_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::dep_service::TestIamPermissions {
        crate::builders::dep_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dep_service::ListOperations {
        crate::builders::dep_service::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dep_service::GetOperation {
        crate::builders::dep_service::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dep_service::DeleteOperation {
        crate::builders::dep_service::DeleteOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dep_service::CancelOperation {
        crate::builders::dep_service::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Network Services API.
///
/// # Service Description
///
/// Service describing handlers for resources.
///
/// # Configuration
///
/// `NetworkServices` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `NetworkServices` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `NetworkServices` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct NetworkServices {
    inner: Arc<dyn crate::stubs::dynamic::NetworkServices>,
}

impl NetworkServices {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::NetworkServices + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::NetworkServices>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::NetworkServices> {
        crate::transport::NetworkServices::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::NetworkServices> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::NetworkServices::new)
    }

    /// Lists EndpointPolicies in a given project and location.
    pub fn list_endpoint_policies(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::network_services::ListEndpointPolicies {
        crate::builders::network_services::ListEndpointPolicies::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single EndpointPolicy.
    pub fn get_endpoint_policy(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::network_services::GetEndpointPolicy {
        crate::builders::network_services::GetEndpointPolicy::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new EndpointPolicy in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_endpoint_policy(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::network_services::CreateEndpointPolicy {
        crate::builders::network_services::CreateEndpointPolicy::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of a single EndpointPolicy.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_endpoint_policy(
        &self,
        endpoint_policy: impl Into<crate::model::EndpointPolicy>,
    ) -> crate::builders::network_services::UpdateEndpointPolicy {
        crate::builders::network_services::UpdateEndpointPolicy::new(self.inner.clone())
            .set_endpoint_policy(endpoint_policy.into())
    }

    /// Deletes a single EndpointPolicy.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_endpoint_policy(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::network_services::DeleteEndpointPolicy {
        crate::builders::network_services::DeleteEndpointPolicy::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists Gateways in a given project and location.
    pub fn list_gateways(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::network_services::ListGateways {
        crate::builders::network_services::ListGateways::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single Gateway.
    pub fn get_gateway(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::network_services::GetGateway {
        crate::builders::network_services::GetGateway::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a new Gateway in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_gateway(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::network_services::CreateGateway {
        crate::builders::network_services::CreateGateway::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of a single Gateway.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_gateway(
        &self,
        gateway: impl Into<crate::model::Gateway>,
    ) -> crate::builders::network_services::UpdateGateway {
        crate::builders::network_services::UpdateGateway::new(self.inner.clone())
            .set_gateway(gateway.into())
    }

    /// Deletes a single Gateway.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_gateway(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::network_services::DeleteGateway {
        crate::builders::network_services::DeleteGateway::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists GrpcRoutes in a given project and location.
    pub fn list_grpc_routes(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::network_services::ListGrpcRoutes {
        crate::builders::network_services::ListGrpcRoutes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single GrpcRoute.
    pub fn get_grpc_route(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::network_services::GetGrpcRoute {
        crate::builders::network_services::GetGrpcRoute::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new GrpcRoute in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_grpc_route(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::network_services::CreateGrpcRoute {
        crate::builders::network_services::CreateGrpcRoute::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of a single GrpcRoute.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_grpc_route(
        &self,
        grpc_route: impl Into<crate::model::GrpcRoute>,
    ) -> crate::builders::network_services::UpdateGrpcRoute {
        crate::builders::network_services::UpdateGrpcRoute::new(self.inner.clone())
            .set_grpc_route(grpc_route.into())
    }

    /// Deletes a single GrpcRoute.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_grpc_route(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::network_services::DeleteGrpcRoute {
        crate::builders::network_services::DeleteGrpcRoute::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists HttpRoute in a given project and location.
    pub fn list_http_routes(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::network_services::ListHttpRoutes {
        crate::builders::network_services::ListHttpRoutes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single HttpRoute.
    pub fn get_http_route(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::network_services::GetHttpRoute {
        crate::builders::network_services::GetHttpRoute::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new HttpRoute in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_http_route(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::network_services::CreateHttpRoute {
        crate::builders::network_services::CreateHttpRoute::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of a single HttpRoute.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_http_route(
        &self,
        http_route: impl Into<crate::model::HttpRoute>,
    ) -> crate::builders::network_services::UpdateHttpRoute {
        crate::builders::network_services::UpdateHttpRoute::new(self.inner.clone())
            .set_http_route(http_route.into())
    }

    /// Deletes a single HttpRoute.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_http_route(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::network_services::DeleteHttpRoute {
        crate::builders::network_services::DeleteHttpRoute::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists TcpRoute in a given project and location.
    pub fn list_tcp_routes(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::network_services::ListTcpRoutes {
        crate::builders::network_services::ListTcpRoutes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single TcpRoute.
    pub fn get_tcp_route(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::network_services::GetTcpRoute {
        crate::builders::network_services::GetTcpRoute::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new TcpRoute in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_tcp_route(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::network_services::CreateTcpRoute {
        crate::builders::network_services::CreateTcpRoute::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of a single TcpRoute.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_tcp_route(
        &self,
        tcp_route: impl Into<crate::model::TcpRoute>,
    ) -> crate::builders::network_services::UpdateTcpRoute {
        crate::builders::network_services::UpdateTcpRoute::new(self.inner.clone())
            .set_tcp_route(tcp_route.into())
    }

    /// Deletes a single TcpRoute.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_tcp_route(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::network_services::DeleteTcpRoute {
        crate::builders::network_services::DeleteTcpRoute::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists TlsRoute in a given project and location.
    pub fn list_tls_routes(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::network_services::ListTlsRoutes {
        crate::builders::network_services::ListTlsRoutes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single TlsRoute.
    pub fn get_tls_route(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::network_services::GetTlsRoute {
        crate::builders::network_services::GetTlsRoute::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new TlsRoute in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_tls_route(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::network_services::CreateTlsRoute {
        crate::builders::network_services::CreateTlsRoute::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of a single TlsRoute.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_tls_route(
        &self,
        tls_route: impl Into<crate::model::TlsRoute>,
    ) -> crate::builders::network_services::UpdateTlsRoute {
        crate::builders::network_services::UpdateTlsRoute::new(self.inner.clone())
            .set_tls_route(tls_route.into())
    }

    /// Deletes a single TlsRoute.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_tls_route(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::network_services::DeleteTlsRoute {
        crate::builders::network_services::DeleteTlsRoute::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists ServiceBinding in a given project and location.
    pub fn list_service_bindings(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::network_services::ListServiceBindings {
        crate::builders::network_services::ListServiceBindings::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single ServiceBinding.
    pub fn get_service_binding(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::network_services::GetServiceBinding {
        crate::builders::network_services::GetServiceBinding::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new ServiceBinding in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_service_binding(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::network_services::CreateServiceBinding {
        crate::builders::network_services::CreateServiceBinding::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a single ServiceBinding.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_service_binding(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::network_services::DeleteServiceBinding {
        crate::builders::network_services::DeleteServiceBinding::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists Meshes in a given project and location.
    pub fn list_meshes(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::network_services::ListMeshes {
        crate::builders::network_services::ListMeshes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single Mesh.
    pub fn get_mesh(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::network_services::GetMesh {
        crate::builders::network_services::GetMesh::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a new Mesh in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_mesh(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::network_services::CreateMesh {
        crate::builders::network_services::CreateMesh::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of a single Mesh.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_mesh(
        &self,
        mesh: impl Into<crate::model::Mesh>,
    ) -> crate::builders::network_services::UpdateMesh {
        crate::builders::network_services::UpdateMesh::new(self.inner.clone()).set_mesh(mesh.into())
    }

    /// Deletes a single Mesh.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_mesh(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::network_services::DeleteMesh {
        crate::builders::network_services::DeleteMesh::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::network_services::ListLocations {
        crate::builders::network_services::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::network_services::GetLocation {
        crate::builders::network_services::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::network_services::SetIamPolicy {
        crate::builders::network_services::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::network_services::GetIamPolicy {
        crate::builders::network_services::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::network_services::TestIamPermissions {
        crate::builders::network_services::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::network_services::ListOperations {
        crate::builders::network_services::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::network_services::GetOperation {
        crate::builders::network_services::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::network_services::DeleteOperation {
        crate::builders::network_services::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::network_services::CancelOperation {
        crate::builders::network_services::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
