// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate iam_v1;
extern crate lazy_static;
extern crate location;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// Represents the metadata of the long-running operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OperationMetadata {
    /// Output only. The time the operation was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the operation finished running.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Server-defined resource path for the target of the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target: std::string::String,

    /// Output only. Name of the verb executed by the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub verb: std::string::String,

    /// Output only. Human-readable status of the operation, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub status_message: std::string::String,

    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have successfully been cancelled
    /// have [Operation.error][] value with a
    /// [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
    /// `Code.CANCELLED`.
    ///
    /// [google.rpc.Status.code]: rpc::model::Status::code
    pub requested_cancellation: bool,

    /// Output only. API version used to start the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub api_version: std::string::String,
}

impl OperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [create_time][crate::model::OperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::OperationMetadata::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [target][crate::model::OperationMetadata::target].
    pub fn set_target<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [verb][crate::model::OperationMetadata::verb].
    pub fn set_verb<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.verb = v.into();
        self
    }

    /// Sets the value of [status_message][crate::model::OperationMetadata::status_message].
    pub fn set_status_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.status_message = v.into();
        self
    }

    /// Sets the value of [requested_cancellation][crate::model::OperationMetadata::requested_cancellation].
    pub fn set_requested_cancellation<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.requested_cancellation = v.into();
        self
    }

    /// Sets the value of [api_version][crate::model::OperationMetadata::api_version].
    pub fn set_api_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.api_version = v.into();
        self
    }
}

impl wkt::message::Message for OperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.OperationMetadata"
    }
}

/// Specification of a port-based selector.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TrafficPortSelector {
    /// Optional. A list of ports. Can be port numbers or port range
    /// (example, [80-90] specifies all ports from 80 to 90, including
    /// 80 and 90) or named ports or * to specify all ports. If the
    /// list is empty, all ports are selected.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub ports: std::vec::Vec<std::string::String>,
}

impl TrafficPortSelector {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [ports][crate::model::TrafficPortSelector::ports].
    pub fn set_ports<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.ports = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for TrafficPortSelector {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.TrafficPortSelector"
    }
}

/// A definition of a matcher that selects endpoints to which the policies
/// should be applied.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct EndpointMatcher {
    /// Specifies type of the matcher used for this endpoint matcher.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub matcher_type: std::option::Option<crate::model::endpoint_matcher::MatcherType>,
}

impl EndpointMatcher {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of `matcher_type`.
    pub fn set_matcher_type<
        T: std::convert::Into<std::option::Option<crate::model::endpoint_matcher::MatcherType>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.matcher_type = v.into();
        self
    }

    /// The value of [matcher_type][crate::model::EndpointMatcher::matcher_type]
    /// if it holds a `MetadataLabelMatcher`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_metadata_label_matcher(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::endpoint_matcher::MetadataLabelMatcher>>
    {
        #[allow(unreachable_patterns)]
        self.matcher_type.as_ref().and_then(|v| match v {
            crate::model::endpoint_matcher::MatcherType::MetadataLabelMatcher(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [matcher_type][crate::model::EndpointMatcher::matcher_type]
    /// to hold a `MetadataLabelMatcher`.
    ///
    /// Note that all the setters affecting `matcher_type` are
    /// mutually exclusive.
    pub fn set_metadata_label_matcher<
        T: std::convert::Into<std::boxed::Box<crate::model::endpoint_matcher::MetadataLabelMatcher>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.matcher_type = std::option::Option::Some(
            crate::model::endpoint_matcher::MatcherType::MetadataLabelMatcher(v.into()),
        );
        self
    }
}

impl wkt::message::Message for EndpointMatcher {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.EndpointMatcher"
    }
}

/// Defines additional types related to EndpointMatcher
pub mod endpoint_matcher {
    #[allow(unused_imports)]
    use super::*;

    /// The matcher that is based on node metadata presented by xDS clients.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct MetadataLabelMatcher {
        /// Specifies how matching should be done.
        ///
        /// Supported values are:
        /// MATCH_ANY: At least one of the Labels specified in the
        /// matcher should match the metadata presented by xDS client.
        /// MATCH_ALL: The metadata presented by the xDS client should
        /// contain all of the labels specified here.
        ///
        /// The selection is determined based on the best match. For
        /// example, suppose there are three EndpointPolicy
        /// resources P1, P2 and P3 and if P1 has a the matcher as
        /// MATCH_ANY <A:1, B:1>, P2 has MATCH_ALL <A:1,B:1>, and P3 has
        /// MATCH_ALL <A:1,B:1,C:1>.
        ///
        /// If a client with label <A:1> connects, the config from P1
        /// will be selected.
        ///
        /// If a client with label <A:1,B:1> connects, the config from P2
        /// will be selected.
        ///
        /// If a client with label <A:1,B:1,C:1> connects, the config
        /// from P3 will be selected.
        ///
        /// If there is more than one best match, (for example, if a
        /// config P4 with selector <A:1,D:1> exists and if a client with
        /// label <A:1,B:1,D:1> connects), an error will be thrown.
        pub metadata_label_match_criteria:
            crate::model::endpoint_matcher::metadata_label_matcher::MetadataLabelMatchCriteria,

        /// The list of label value pairs that must match labels in the
        /// provided metadata based on filterMatchCriteria This list can
        /// have at most 64 entries. The list can be empty if the match
        /// criteria is MATCH_ANY, to specify a wildcard match (i.e this
        /// matches any client).
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub metadata_labels:
            std::vec::Vec<crate::model::endpoint_matcher::metadata_label_matcher::MetadataLabels>,
    }

    impl MetadataLabelMatcher {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [metadata_label_match_criteria][crate::model::endpoint_matcher::MetadataLabelMatcher::metadata_label_match_criteria].
        pub fn set_metadata_label_match_criteria<
            T: std::convert::Into<
                crate::model::endpoint_matcher::metadata_label_matcher::MetadataLabelMatchCriteria,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.metadata_label_match_criteria = v.into();
            self
        }

        /// Sets the value of [metadata_labels][crate::model::endpoint_matcher::MetadataLabelMatcher::metadata_labels].
        pub fn set_metadata_labels<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<
                crate::model::endpoint_matcher::metadata_label_matcher::MetadataLabels,
            >,
        {
            use std::iter::Iterator;
            self.metadata_labels = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for MetadataLabelMatcher {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.EndpointMatcher.MetadataLabelMatcher"
        }
    }

    /// Defines additional types related to MetadataLabelMatcher
    pub mod metadata_label_matcher {
        #[allow(unused_imports)]
        use super::*;

        /// Defines a name-pair value for a single label.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct MetadataLabels {
            /// Required. Label name presented as key in xDS Node Metadata.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub label_name: std::string::String,

            /// Required. Label value presented as value corresponding to the above
            /// key, in xDS Node Metadata.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub label_value: std::string::String,
        }

        impl MetadataLabels {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [label_name][crate::model::endpoint_matcher::metadata_label_matcher::MetadataLabels::label_name].
            pub fn set_label_name<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.label_name = v.into();
                self
            }

            /// Sets the value of [label_value][crate::model::endpoint_matcher::metadata_label_matcher::MetadataLabels::label_value].
            pub fn set_label_value<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.label_value = v.into();
                self
            }
        }

        impl wkt::message::Message for MetadataLabels {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.networkservices.v1.EndpointMatcher.MetadataLabelMatcher.MetadataLabels"
            }
        }

        /// Possible criteria values that define logic of how matching is made.
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct MetadataLabelMatchCriteria(std::borrow::Cow<'static, str>);

        impl MetadataLabelMatchCriteria {
            /// Creates a new MetadataLabelMatchCriteria instance.
            pub const fn new(v: &'static str) -> Self {
                Self(std::borrow::Cow::Borrowed(v))
            }

            /// Gets the enum value.
            pub fn value(&self) -> &str {
                &self.0
            }
        }

        /// Useful constants to work with [MetadataLabelMatchCriteria](MetadataLabelMatchCriteria)
        pub mod metadata_label_match_criteria {
            use super::MetadataLabelMatchCriteria;

            /// Default value. Should not be used.
            pub const METADATA_LABEL_MATCH_CRITERIA_UNSPECIFIED: MetadataLabelMatchCriteria =
                MetadataLabelMatchCriteria::new("METADATA_LABEL_MATCH_CRITERIA_UNSPECIFIED");

            /// At least one of the Labels specified in the matcher should match the
            /// metadata presented by xDS client.
            pub const MATCH_ANY: MetadataLabelMatchCriteria =
                MetadataLabelMatchCriteria::new("MATCH_ANY");

            /// The metadata presented by the xDS client should contain all of the
            /// labels specified here.
            pub const MATCH_ALL: MetadataLabelMatchCriteria =
                MetadataLabelMatchCriteria::new("MATCH_ALL");
        }

        impl std::convert::From<std::string::String> for MetadataLabelMatchCriteria {
            fn from(value: std::string::String) -> Self {
                Self(std::borrow::Cow::Owned(value))
            }
        }
    }

    /// Specifies type of the matcher used for this endpoint matcher.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum MatcherType {
        /// The matcher is based on node metadata presented by xDS clients.
        MetadataLabelMatcher(std::boxed::Box<crate::model::endpoint_matcher::MetadataLabelMatcher>),
    }
}

/// A single extension chain wrapper that contains the match conditions and
/// extensions to execute.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExtensionChain {
    /// Required. The name for this extension chain.
    /// The name is logged as part of the HTTP request logs.
    /// The name must conform with RFC-1034, is restricted to lower-cased letters,
    /// numbers and hyphens, and can have a maximum length of 63 characters.
    /// Additionally, the first character must be a letter and the last a letter or
    /// a number.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. Conditions under which this chain is invoked for a request.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub match_condition: std::option::Option<crate::model::extension_chain::MatchCondition>,

    /// Required. A set of extensions to execute for the matching request.
    /// At least one extension is required.
    /// Up to 3 extensions can be defined for each extension chain
    /// for `LbTrafficExtension` resource.
    /// `LbRouteExtension` chains are limited to 1 extension per extension chain.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub extensions: std::vec::Vec<crate::model::extension_chain::Extension>,
}

impl ExtensionChain {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ExtensionChain::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [match_condition][crate::model::ExtensionChain::match_condition].
    pub fn set_match_condition<
        T: std::convert::Into<std::option::Option<crate::model::extension_chain::MatchCondition>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.match_condition = v.into();
        self
    }

    /// Sets the value of [extensions][crate::model::ExtensionChain::extensions].
    pub fn set_extensions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::extension_chain::Extension>,
    {
        use std::iter::Iterator;
        self.extensions = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ExtensionChain {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.ExtensionChain"
    }
}

/// Defines additional types related to ExtensionChain
pub mod extension_chain {
    #[allow(unused_imports)]
    use super::*;

    /// Conditions under which this chain is invoked for a request.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct MatchCondition {
        /// Required. A Common Expression Language (CEL) expression that is used to
        /// match requests for which the extension chain is executed.
        ///
        /// For more information, see [CEL matcher language
        /// reference](https://cloud.google.com/service-extensions/docs/cel-matcher-language-reference).
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub cel_expression: std::string::String,
    }

    impl MatchCondition {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [cel_expression][crate::model::extension_chain::MatchCondition::cel_expression].
        pub fn set_cel_expression<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.cel_expression = v.into();
            self
        }
    }

    impl wkt::message::Message for MatchCondition {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.ExtensionChain.MatchCondition"
        }
    }

    /// A single extension in the chain to execute for the matching request.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Extension {
        /// Required. The name for this extension.
        /// The name is logged as part of the HTTP request logs.
        /// The name must conform with RFC-1034, is restricted to lower-cased
        /// letters, numbers and hyphens, and can have a maximum length of 63
        /// characters. Additionally, the first character must be a letter and the
        /// last a letter or a number.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub name: std::string::String,

        /// Optional. The `:authority` header in the gRPC request sent from Envoy
        /// to the extension service.
        /// Required for Callout extensions.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub authority: std::string::String,

        /// Required. The reference to the service that runs the extension.
        ///
        /// Currently only callout extensions are supported here.
        ///
        /// To configure a callout extension, `service` must be a fully-qualified
        /// reference
        /// to a [backend
        /// service](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices)
        /// in the format:
        /// `<https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}>`
        /// or
        /// `<https://www.googleapis.com/compute/v1/projects/{project}/global/backendServices/{backendService}>`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub service: std::string::String,

        /// Optional. A set of events during request or response processing for which
        /// this extension is called. This field is required for the
        /// `LbTrafficExtension` resource. It must not be set for the
        /// `LbRouteExtension` resource.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub supported_events: std::vec::Vec<crate::model::EventType>,

        /// Optional. Specifies the timeout for each individual message on the
        /// stream. The timeout must be between 10-1000 milliseconds. Required for
        /// Callout extensions.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub timeout: std::option::Option<wkt::Duration>,

        /// Optional. Determines how the proxy behaves if the call to the extension
        /// fails or times out.
        ///
        /// When set to `TRUE`, request or response processing continues without
        /// error. Any subsequent extensions in the extension chain are also
        /// executed. When set to `FALSE` or the default setting of `FALSE` is used,
        /// one of the following happens:
        ///
        /// * If response headers have not been delivered to the downstream client,
        ///   a generic 500 error is returned to the client. The error response can be
        ///   tailored by configuring a custom error response in the load balancer.
        ///
        /// * If response headers have been delivered, then the HTTP stream to the
        ///   downstream client is reset.
        ///
        pub fail_open: bool,

        /// Optional. List of the HTTP headers to forward to the extension
        /// (from the client or backend). If omitted, all headers are sent.
        /// Each element is a string indicating the header name.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub forward_headers: std::vec::Vec<std::string::String>,
    }

    impl Extension {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [name][crate::model::extension_chain::Extension::name].
        pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.name = v.into();
            self
        }

        /// Sets the value of [authority][crate::model::extension_chain::Extension::authority].
        pub fn set_authority<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.authority = v.into();
            self
        }

        /// Sets the value of [service][crate::model::extension_chain::Extension::service].
        pub fn set_service<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.service = v.into();
            self
        }

        /// Sets the value of [timeout][crate::model::extension_chain::Extension::timeout].
        pub fn set_timeout<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.timeout = v.into();
            self
        }

        /// Sets the value of [fail_open][crate::model::extension_chain::Extension::fail_open].
        pub fn set_fail_open<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.fail_open = v.into();
            self
        }

        /// Sets the value of [supported_events][crate::model::extension_chain::Extension::supported_events].
        pub fn set_supported_events<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::EventType>,
        {
            use std::iter::Iterator;
            self.supported_events = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [forward_headers][crate::model::extension_chain::Extension::forward_headers].
        pub fn set_forward_headers<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.forward_headers = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for Extension {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.ExtensionChain.Extension"
        }
    }
}

/// `LbTrafficExtension` is a resource that lets the extension service modify the
/// headers and payloads of both requests and responses without impacting the
/// choice of backend services or any other security policies associated with the
/// backend service.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct LbTrafficExtension {
    /// Required. Identifier. Name of the `LbTrafficExtension` resource in the
    /// following format:
    /// `projects/{project}/locations/{location}/lbTrafficExtensions/{lb_traffic_extension}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The timestamp when the resource was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The timestamp when the resource was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional. A human-readable description of the resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. Set of labels associated with the `LbTrafficExtension` resource.
    ///
    /// The format must comply with [the requirements for
    /// labels](https://cloud.google.com/compute/docs/labeling-resources#requirements)
    /// for Google Cloud resources.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Required. A list of references to the forwarding rules to which this
    /// service extension is attached to. At least one forwarding rule is required.
    /// There can be only one `LBTrafficExtension` resource per forwarding rule.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub forwarding_rules: std::vec::Vec<std::string::String>,

    /// Required. A set of ordered extension chains that contain the match
    /// conditions and extensions to execute. Match conditions for each extension
    /// chain are evaluated in sequence for a given request. The first extension
    /// chain that has a condition that matches the request is executed.
    /// Any subsequent extension chains do not execute.
    /// Limited to 5 extension chains per resource.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub extension_chains: std::vec::Vec<crate::model::ExtensionChain>,

    /// Required. All backend services and forwarding rules referenced by this
    /// extension must share the same load balancing scheme. Supported values:
    /// `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`. For more information, refer to
    /// [Choosing a load
    /// balancer](https://cloud.google.com/load-balancing/docs/backend-service).
    pub load_balancing_scheme: crate::model::LoadBalancingScheme,

    /// Optional. The metadata provided here is included in the
    /// `ProcessingRequest.metadata_context.filter_metadata` map field. The
    /// metadata is available under the key
    /// `com.google.lb_traffic_extension.<resource_name>`.
    /// The following variables are supported in the metadata:
    ///
    /// `{forwarding_rule_id}` - substituted with the forwarding rule's fully
    /// qualified resource name.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub metadata: std::option::Option<wkt::Struct>,
}

impl LbTrafficExtension {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::LbTrafficExtension::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::LbTrafficExtension::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::LbTrafficExtension::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::LbTrafficExtension::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [load_balancing_scheme][crate::model::LbTrafficExtension::load_balancing_scheme].
    pub fn set_load_balancing_scheme<T: std::convert::Into<crate::model::LoadBalancingScheme>>(
        mut self,
        v: T,
    ) -> Self {
        self.load_balancing_scheme = v.into();
        self
    }

    /// Sets the value of [metadata][crate::model::LbTrafficExtension::metadata].
    pub fn set_metadata<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
        mut self,
        v: T,
    ) -> Self {
        self.metadata = v.into();
        self
    }

    /// Sets the value of [forwarding_rules][crate::model::LbTrafficExtension::forwarding_rules].
    pub fn set_forwarding_rules<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.forwarding_rules = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [extension_chains][crate::model::LbTrafficExtension::extension_chains].
    pub fn set_extension_chains<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ExtensionChain>,
    {
        use std::iter::Iterator;
        self.extension_chains = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [labels][crate::model::LbTrafficExtension::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for LbTrafficExtension {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.LbTrafficExtension"
    }
}

/// Message for requesting list of `LbTrafficExtension` resources.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListLbTrafficExtensionsRequest {
    /// Required. The project and location from which the `LbTrafficExtension`
    /// resources are listed, specified in the following format:
    /// `projects/{project}/locations/{location}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. Requested page size. The server might return fewer items than
    /// requested. If unspecified, the server picks an appropriate default.
    pub page_size: i32,

    /// Optional. A token identifying a page of results that the server returns.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. Filtering results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. Hint for how to order the results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListLbTrafficExtensionsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListLbTrafficExtensionsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListLbTrafficExtensionsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListLbTrafficExtensionsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListLbTrafficExtensionsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListLbTrafficExtensionsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListLbTrafficExtensionsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.ListLbTrafficExtensionsRequest"
    }
}

/// Message for response to listing `LbTrafficExtension` resources.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListLbTrafficExtensionsResponse {
    /// The list of `LbTrafficExtension` resources.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub lb_traffic_extensions: std::vec::Vec<crate::model::LbTrafficExtension>,

    /// A token identifying a page of results that the server returns.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListLbTrafficExtensionsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListLbTrafficExtensionsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [lb_traffic_extensions][crate::model::ListLbTrafficExtensionsResponse::lb_traffic_extensions].
    pub fn set_lb_traffic_extensions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::LbTrafficExtension>,
    {
        use std::iter::Iterator;
        self.lb_traffic_extensions = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListLbTrafficExtensionsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListLbTrafficExtensionsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.ListLbTrafficExtensionsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListLbTrafficExtensionsResponse {
    type PageItem = crate::model::LbTrafficExtension;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.lb_traffic_extensions
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Message for getting a `LbTrafficExtension` resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetLbTrafficExtensionRequest {
    /// Required. A name of the `LbTrafficExtension` resource to get. Must be in
    /// the format
    /// `projects/{project}/locations/{location}/lbTrafficExtensions/{lb_traffic_extension}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetLbTrafficExtensionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetLbTrafficExtensionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetLbTrafficExtensionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.GetLbTrafficExtensionRequest"
    }
}

/// Message for creating a `LbTrafficExtension` resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateLbTrafficExtensionRequest {
    /// Required. The parent resource of the `LbTrafficExtension` resource. Must be
    /// in the format `projects/{project}/locations/{location}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. User-provided ID of the `LbTrafficExtension` resource to be
    /// created.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub lb_traffic_extension_id: std::string::String,

    /// Required. `LbTrafficExtension` resource to be created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub lb_traffic_extension: std::option::Option<crate::model::LbTrafficExtension>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server can ignore
    /// the request if it has already been completed. The server guarantees
    /// that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, ignores the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl CreateLbTrafficExtensionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateLbTrafficExtensionRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [lb_traffic_extension_id][crate::model::CreateLbTrafficExtensionRequest::lb_traffic_extension_id].
    pub fn set_lb_traffic_extension_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.lb_traffic_extension_id = v.into();
        self
    }

    /// Sets the value of [lb_traffic_extension][crate::model::CreateLbTrafficExtensionRequest::lb_traffic_extension].
    pub fn set_lb_traffic_extension<
        T: std::convert::Into<std::option::Option<crate::model::LbTrafficExtension>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.lb_traffic_extension = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateLbTrafficExtensionRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateLbTrafficExtensionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.CreateLbTrafficExtensionRequest"
    }
}

/// Message for updating a `LbTrafficExtension` resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateLbTrafficExtensionRequest {
    /// Optional. Used to specify the fields to be overwritten in the
    /// `LbTrafficExtension` resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field is overwritten if it is in the mask. If the
    /// user does not specify a mask, then all fields are overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. `LbTrafficExtension` resource being updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub lb_traffic_extension: std::option::Option<crate::model::LbTrafficExtension>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server can ignore
    /// the request if it has already been completed. The server guarantees
    /// that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, ignores the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl UpdateLbTrafficExtensionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateLbTrafficExtensionRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [lb_traffic_extension][crate::model::UpdateLbTrafficExtensionRequest::lb_traffic_extension].
    pub fn set_lb_traffic_extension<
        T: std::convert::Into<std::option::Option<crate::model::LbTrafficExtension>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.lb_traffic_extension = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateLbTrafficExtensionRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for UpdateLbTrafficExtensionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.UpdateLbTrafficExtensionRequest"
    }
}

/// Message for deleting a `LbTrafficExtension` resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteLbTrafficExtensionRequest {
    /// Required. The name of the `LbTrafficExtension` resource to delete. Must be
    /// in the format
    /// `projects/{project}/locations/{location}/lbTrafficExtensions/{lb_traffic_extension}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server can ignore
    /// the request if it has already been completed. The server guarantees
    /// that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, ignores the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl DeleteLbTrafficExtensionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteLbTrafficExtensionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteLbTrafficExtensionRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for DeleteLbTrafficExtensionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.DeleteLbTrafficExtensionRequest"
    }
}

/// `LbRouteExtension` is a resource that lets you control where traffic is
/// routed to for a given request.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct LbRouteExtension {
    /// Required. Identifier. Name of the `LbRouteExtension` resource in the
    /// following format:
    /// `projects/{project}/locations/{location}/lbRouteExtensions/{lb_route_extension}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The timestamp when the resource was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The timestamp when the resource was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional. A human-readable description of the resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. Set of labels associated with the `LbRouteExtension` resource.
    ///
    /// The format must comply with [the requirements for
    /// labels](https://cloud.google.com/compute/docs/labeling-resources#requirements)
    /// for Google Cloud resources.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Required. A list of references to the forwarding rules to which this
    /// service extension is attached to. At least one forwarding rule is required.
    /// There can be only one `LbRouteExtension` resource per forwarding rule.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub forwarding_rules: std::vec::Vec<std::string::String>,

    /// Required. A set of ordered extension chains that contain the match
    /// conditions and extensions to execute. Match conditions for each extension
    /// chain are evaluated in sequence for a given request. The first extension
    /// chain that has a condition that matches the request is executed.
    /// Any subsequent extension chains do not execute.
    /// Limited to 5 extension chains per resource.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub extension_chains: std::vec::Vec<crate::model::ExtensionChain>,

    /// Required. All backend services and forwarding rules referenced by this
    /// extension must share the same load balancing scheme. Supported values:
    /// `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`. For more information, refer to
    /// [Choosing a load
    /// balancer](https://cloud.google.com/load-balancing/docs/backend-service).
    pub load_balancing_scheme: crate::model::LoadBalancingScheme,

    /// Optional. The metadata provided here is included as part of the
    /// `metadata_context` (of type `google.protobuf.Struct`) in the
    /// `ProcessingRequest` message sent to the extension
    /// server. The metadata is available under the namespace
    /// `com.google.lb_route_extension.<resource_name>`.
    /// The following variables are supported in the metadata Struct:
    ///
    /// `{forwarding_rule_id}` - substituted with the forwarding rule's fully
    /// qualified resource name.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub metadata: std::option::Option<wkt::Struct>,
}

impl LbRouteExtension {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::LbRouteExtension::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::LbRouteExtension::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::LbRouteExtension::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::LbRouteExtension::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [load_balancing_scheme][crate::model::LbRouteExtension::load_balancing_scheme].
    pub fn set_load_balancing_scheme<T: std::convert::Into<crate::model::LoadBalancingScheme>>(
        mut self,
        v: T,
    ) -> Self {
        self.load_balancing_scheme = v.into();
        self
    }

    /// Sets the value of [metadata][crate::model::LbRouteExtension::metadata].
    pub fn set_metadata<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
        mut self,
        v: T,
    ) -> Self {
        self.metadata = v.into();
        self
    }

    /// Sets the value of [forwarding_rules][crate::model::LbRouteExtension::forwarding_rules].
    pub fn set_forwarding_rules<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.forwarding_rules = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [extension_chains][crate::model::LbRouteExtension::extension_chains].
    pub fn set_extension_chains<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ExtensionChain>,
    {
        use std::iter::Iterator;
        self.extension_chains = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [labels][crate::model::LbRouteExtension::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for LbRouteExtension {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.LbRouteExtension"
    }
}

/// Message for requesting list of `LbRouteExtension` resources.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListLbRouteExtensionsRequest {
    /// Required. The project and location from which the `LbRouteExtension`
    /// resources are listed, specified in the following format:
    /// `projects/{project}/locations/{location}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. Requested page size. The server might return fewer items than
    /// requested. If unspecified, the server picks an appropriate default.
    pub page_size: i32,

    /// Optional. A token identifying a page of results that the server returns.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. Filtering results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. Hint for how to order the results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListLbRouteExtensionsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListLbRouteExtensionsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListLbRouteExtensionsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListLbRouteExtensionsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListLbRouteExtensionsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListLbRouteExtensionsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListLbRouteExtensionsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.ListLbRouteExtensionsRequest"
    }
}

/// Message for response to listing `LbRouteExtension` resources.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListLbRouteExtensionsResponse {
    /// The list of `LbRouteExtension` resources.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub lb_route_extensions: std::vec::Vec<crate::model::LbRouteExtension>,

    /// A token identifying a page of results that the server returns.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListLbRouteExtensionsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListLbRouteExtensionsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [lb_route_extensions][crate::model::ListLbRouteExtensionsResponse::lb_route_extensions].
    pub fn set_lb_route_extensions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::LbRouteExtension>,
    {
        use std::iter::Iterator;
        self.lb_route_extensions = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListLbRouteExtensionsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListLbRouteExtensionsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.ListLbRouteExtensionsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListLbRouteExtensionsResponse {
    type PageItem = crate::model::LbRouteExtension;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.lb_route_extensions
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Message for getting a `LbRouteExtension` resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetLbRouteExtensionRequest {
    /// Required. A name of the `LbRouteExtension` resource to get. Must be in the
    /// format
    /// `projects/{project}/locations/{location}/lbRouteExtensions/{lb_route_extension}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetLbRouteExtensionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetLbRouteExtensionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetLbRouteExtensionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.GetLbRouteExtensionRequest"
    }
}

/// Message for creating a `LbRouteExtension` resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateLbRouteExtensionRequest {
    /// Required. The parent resource of the `LbRouteExtension` resource. Must be
    /// in the format `projects/{project}/locations/{location}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. User-provided ID of the `LbRouteExtension` resource to be
    /// created.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub lb_route_extension_id: std::string::String,

    /// Required. `LbRouteExtension` resource to be created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub lb_route_extension: std::option::Option<crate::model::LbRouteExtension>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server can ignore
    /// the request if it has already been completed. The server guarantees
    /// that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, ignores the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl CreateLbRouteExtensionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateLbRouteExtensionRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [lb_route_extension_id][crate::model::CreateLbRouteExtensionRequest::lb_route_extension_id].
    pub fn set_lb_route_extension_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.lb_route_extension_id = v.into();
        self
    }

    /// Sets the value of [lb_route_extension][crate::model::CreateLbRouteExtensionRequest::lb_route_extension].
    pub fn set_lb_route_extension<
        T: std::convert::Into<std::option::Option<crate::model::LbRouteExtension>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.lb_route_extension = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateLbRouteExtensionRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateLbRouteExtensionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.CreateLbRouteExtensionRequest"
    }
}

/// Message for updating a `LbRouteExtension` resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateLbRouteExtensionRequest {
    /// Optional. Used to specify the fields to be overwritten in the
    /// `LbRouteExtension` resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field is overwritten if it is in the mask. If the
    /// user does not specify a mask, then all fields are overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. `LbRouteExtension` resource being updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub lb_route_extension: std::option::Option<crate::model::LbRouteExtension>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server can ignore
    /// the request if it has already been completed. The server guarantees
    /// that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, ignores the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl UpdateLbRouteExtensionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateLbRouteExtensionRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [lb_route_extension][crate::model::UpdateLbRouteExtensionRequest::lb_route_extension].
    pub fn set_lb_route_extension<
        T: std::convert::Into<std::option::Option<crate::model::LbRouteExtension>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.lb_route_extension = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateLbRouteExtensionRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for UpdateLbRouteExtensionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.UpdateLbRouteExtensionRequest"
    }
}

/// Message for deleting a `LbRouteExtension` resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteLbRouteExtensionRequest {
    /// Required. The name of the `LbRouteExtension` resource to delete. Must be in
    /// the format
    /// `projects/{project}/locations/{location}/lbRouteExtensions/{lb_route_extension}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server can ignore
    /// the request if it has already been completed. The server guarantees
    /// that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, ignores the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl DeleteLbRouteExtensionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteLbRouteExtensionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteLbRouteExtensionRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for DeleteLbRouteExtensionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.DeleteLbRouteExtensionRequest"
    }
}

/// EndpointPolicy is a resource that helps apply desired configuration
/// on the endpoints that match specific criteria.
/// For example, this resource can be used to apply "authentication config"
/// an all endpoints that serve on port 8080.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct EndpointPolicy {
    /// Required. Name of the EndpointPolicy resource. It matches pattern
    /// `projects/{project}/locations/global/endpointPolicies/{endpoint_policy}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The timestamp when the resource was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The timestamp when the resource was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional. Set of label tags associated with the EndpointPolicy resource.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Required. The type of endpoint policy. This is primarily used to validate
    /// the configuration.
    #[serde(rename = "type")]
    pub r#type: crate::model::endpoint_policy::EndpointPolicyType,

    /// Optional. This field specifies the URL of AuthorizationPolicy resource that
    /// applies authorization policies to the inbound traffic at the
    /// matched endpoints. Refer to Authorization. If this field is not
    /// specified, authorization is disabled(no authz checks) for this
    /// endpoint.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub authorization_policy: std::string::String,

    /// Required. A matcher that selects endpoints to which the policies should be
    /// applied.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub endpoint_matcher: std::option::Option<crate::model::EndpointMatcher>,

    /// Optional. Port selector for the (matched) endpoints. If no port selector is
    /// provided, the matched config is applied to all ports.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub traffic_port_selector: std::option::Option<crate::model::TrafficPortSelector>,

    /// Optional. A free-text description of the resource. Max length 1024
    /// characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. A URL referring to ServerTlsPolicy resource. ServerTlsPolicy is
    /// used to determine the authentication policy to be applied to terminate the
    /// inbound traffic at the identified backends. If this field is not set,
    /// authentication is disabled(open) for this endpoint.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub server_tls_policy: std::string::String,

    /// Optional. A URL referring to a ClientTlsPolicy resource. ClientTlsPolicy
    /// can be set to specify the authentication for traffic from the proxy to the
    /// actual endpoints. More specifically, it is applied to the outgoing traffic
    /// from the proxy to the endpoint. This is typically used for sidecar model
    /// where the proxy identifies itself as endpoint to the control plane, with
    /// the connection between sidecar and endpoint requiring authentication. If
    /// this field is not set, authentication is disabled(open). Applicable only
    /// when EndpointPolicyType is SIDECAR_PROXY.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub client_tls_policy: std::string::String,
}

impl EndpointPolicy {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::EndpointPolicy::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::EndpointPolicy::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::EndpointPolicy::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::EndpointPolicy::type].
    pub fn set_type<T: std::convert::Into<crate::model::endpoint_policy::EndpointPolicyType>>(
        mut self,
        v: T,
    ) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [authorization_policy][crate::model::EndpointPolicy::authorization_policy].
    pub fn set_authorization_policy<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.authorization_policy = v.into();
        self
    }

    /// Sets the value of [endpoint_matcher][crate::model::EndpointPolicy::endpoint_matcher].
    pub fn set_endpoint_matcher<
        T: std::convert::Into<std::option::Option<crate::model::EndpointMatcher>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.endpoint_matcher = v.into();
        self
    }

    /// Sets the value of [traffic_port_selector][crate::model::EndpointPolicy::traffic_port_selector].
    pub fn set_traffic_port_selector<
        T: std::convert::Into<std::option::Option<crate::model::TrafficPortSelector>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.traffic_port_selector = v.into();
        self
    }

    /// Sets the value of [description][crate::model::EndpointPolicy::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [server_tls_policy][crate::model::EndpointPolicy::server_tls_policy].
    pub fn set_server_tls_policy<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.server_tls_policy = v.into();
        self
    }

    /// Sets the value of [client_tls_policy][crate::model::EndpointPolicy::client_tls_policy].
    pub fn set_client_tls_policy<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.client_tls_policy = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::EndpointPolicy::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for EndpointPolicy {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.EndpointPolicy"
    }
}

/// Defines additional types related to EndpointPolicy
pub mod endpoint_policy {
    #[allow(unused_imports)]
    use super::*;

    /// The type of endpoint policy.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct EndpointPolicyType(std::borrow::Cow<'static, str>);

    impl EndpointPolicyType {
        /// Creates a new EndpointPolicyType instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [EndpointPolicyType](EndpointPolicyType)
    pub mod endpoint_policy_type {
        use super::EndpointPolicyType;

        /// Default value. Must not be used.
        pub const ENDPOINT_POLICY_TYPE_UNSPECIFIED: EndpointPolicyType =
            EndpointPolicyType::new("ENDPOINT_POLICY_TYPE_UNSPECIFIED");

        /// Represents a proxy deployed as a sidecar.
        pub const SIDECAR_PROXY: EndpointPolicyType = EndpointPolicyType::new("SIDECAR_PROXY");

        /// Represents a proxyless gRPC backend.
        pub const GRPC_SERVER: EndpointPolicyType = EndpointPolicyType::new("GRPC_SERVER");
    }

    impl std::convert::From<std::string::String> for EndpointPolicyType {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Request used with the ListEndpointPolicies method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListEndpointPoliciesRequest {
    /// Required. The project and location from which the EndpointPolicies should
    /// be listed, specified in the format `projects/*/locations/global`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Maximum number of EndpointPolicies to return per call.
    pub page_size: i32,

    /// The value returned by the last `ListEndpointPoliciesResponse`
    /// Indicates that this is a continuation of a prior
    /// `ListEndpointPolicies` call, and that the system should return the
    /// next page of data.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListEndpointPoliciesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListEndpointPoliciesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListEndpointPoliciesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListEndpointPoliciesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListEndpointPoliciesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.ListEndpointPoliciesRequest"
    }
}

/// Response returned by the ListEndpointPolicies method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListEndpointPoliciesResponse {
    /// List of EndpointPolicy resources.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub endpoint_policies: std::vec::Vec<crate::model::EndpointPolicy>,

    /// If there might be more results than those appearing in this response, then
    /// `next_page_token` is included. To get the next set of results, call this
    /// method again using the value of `next_page_token` as `page_token`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListEndpointPoliciesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListEndpointPoliciesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [endpoint_policies][crate::model::ListEndpointPoliciesResponse::endpoint_policies].
    pub fn set_endpoint_policies<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::EndpointPolicy>,
    {
        use std::iter::Iterator;
        self.endpoint_policies = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListEndpointPoliciesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.ListEndpointPoliciesResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListEndpointPoliciesResponse {
    type PageItem = crate::model::EndpointPolicy;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.endpoint_policies
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request used with the GetEndpointPolicy method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetEndpointPolicyRequest {
    /// Required. A name of the EndpointPolicy to get. Must be in the format
    /// `projects/*/locations/global/endpointPolicies/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetEndpointPolicyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetEndpointPolicyRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetEndpointPolicyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.GetEndpointPolicyRequest"
    }
}

/// Request used with the CreateEndpointPolicy method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateEndpointPolicyRequest {
    /// Required. The parent resource of the EndpointPolicy. Must be in the
    /// format `projects/*/locations/global`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Short name of the EndpointPolicy resource to be created.
    /// E.g. "CustomECS".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub endpoint_policy_id: std::string::String,

    /// Required. EndpointPolicy resource to be created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub endpoint_policy: std::option::Option<crate::model::EndpointPolicy>,
}

impl CreateEndpointPolicyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateEndpointPolicyRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [endpoint_policy_id][crate::model::CreateEndpointPolicyRequest::endpoint_policy_id].
    pub fn set_endpoint_policy_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.endpoint_policy_id = v.into();
        self
    }

    /// Sets the value of [endpoint_policy][crate::model::CreateEndpointPolicyRequest::endpoint_policy].
    pub fn set_endpoint_policy<
        T: std::convert::Into<std::option::Option<crate::model::EndpointPolicy>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.endpoint_policy = v.into();
        self
    }
}

impl wkt::message::Message for CreateEndpointPolicyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.CreateEndpointPolicyRequest"
    }
}

/// Request used with the UpdateEndpointPolicy method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateEndpointPolicyRequest {
    /// Optional. Field mask is used to specify the fields to be overwritten in the
    /// EndpointPolicy resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. Updated EndpointPolicy resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub endpoint_policy: std::option::Option<crate::model::EndpointPolicy>,
}

impl UpdateEndpointPolicyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateEndpointPolicyRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [endpoint_policy][crate::model::UpdateEndpointPolicyRequest::endpoint_policy].
    pub fn set_endpoint_policy<
        T: std::convert::Into<std::option::Option<crate::model::EndpointPolicy>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.endpoint_policy = v.into();
        self
    }
}

impl wkt::message::Message for UpdateEndpointPolicyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.UpdateEndpointPolicyRequest"
    }
}

/// Request used with the DeleteEndpointPolicy method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteEndpointPolicyRequest {
    /// Required. A name of the EndpointPolicy to delete. Must be in the format
    /// `projects/*/locations/global/endpointPolicies/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteEndpointPolicyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteEndpointPolicyRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteEndpointPolicyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.DeleteEndpointPolicyRequest"
    }
}

/// Gateway represents the configuration for a proxy, typically a load balancer.
/// It captures the ip:port over which the services are exposed by the proxy,
/// along with any policy configurations. Routes have reference to to Gateways to
/// dictate how requests should be routed by this Gateway.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Gateway {
    /// Required. Name of the Gateway resource. It matches pattern
    /// `projects/*/locations/*/gateways/<gateway_name>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Server-defined URL of this resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub self_link: std::string::String,

    /// Output only. The timestamp when the resource was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The timestamp when the resource was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional. Set of label tags associated with the Gateway resource.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Optional. A free-text description of the resource. Max length 1024
    /// characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Immutable. The type of the customer managed gateway.
    /// This field is required. If unspecified, an error is returned.
    #[serde(rename = "type")]
    pub r#type: crate::model::gateway::Type,

    /// Required. One or more ports that the Gateway must receive traffic on. The
    /// proxy binds to the ports specified. Gateway listen on 0.0.0.0 on the ports
    /// specified below.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub ports: std::vec::Vec<i32>,

    /// Required. Immutable. Scope determines how configuration across multiple
    /// Gateway instances are merged. The configuration for multiple Gateway
    /// instances with the same scope will be merged as presented as a single
    /// coniguration to the proxy/load balancer.
    ///
    /// Max length 64 characters.
    /// Scope should start with a letter and can only have letters, numbers,
    /// hyphens.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub scope: std::string::String,

    /// Optional. A fully-qualified ServerTLSPolicy URL reference. Specifies how
    /// TLS traffic is terminated. If empty, TLS termination is disabled.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub server_tls_policy: std::string::String,
}

impl Gateway {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Gateway::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [self_link][crate::model::Gateway::self_link].
    pub fn set_self_link<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.self_link = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Gateway::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Gateway::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Gateway::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::Gateway::type].
    pub fn set_type<T: std::convert::Into<crate::model::gateway::Type>>(mut self, v: T) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [scope][crate::model::Gateway::scope].
    pub fn set_scope<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.scope = v.into();
        self
    }

    /// Sets the value of [server_tls_policy][crate::model::Gateway::server_tls_policy].
    pub fn set_server_tls_policy<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.server_tls_policy = v.into();
        self
    }

    /// Sets the value of [ports][crate::model::Gateway::ports].
    pub fn set_ports<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<i32>,
    {
        use std::iter::Iterator;
        self.ports = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [labels][crate::model::Gateway::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Gateway {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.Gateway"
    }
}

/// Defines additional types related to Gateway
pub mod gateway {
    #[allow(unused_imports)]
    use super::*;

    /// The type of the customer-managed gateway.
    /// Possible values are:
    ///
    /// * OPEN_MESH
    /// * SECURE_WEB_GATEWAY
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Type(std::borrow::Cow<'static, str>);

    impl Type {
        /// Creates a new Type instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [Type](Type)
    pub mod r#type {
        use super::Type;

        /// The type of the customer managed gateway is unspecified.
        pub const TYPE_UNSPECIFIED: Type = Type::new("TYPE_UNSPECIFIED");

        /// The type of the customer managed gateway is TrafficDirector Open
        /// Mesh.
        pub const OPEN_MESH: Type = Type::new("OPEN_MESH");

        /// The type of the customer managed gateway is SecureWebGateway (SWG).
        pub const SECURE_WEB_GATEWAY: Type = Type::new("SECURE_WEB_GATEWAY");
    }

    impl std::convert::From<std::string::String> for Type {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Request used with the ListGateways method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListGatewaysRequest {
    /// Required. The project and location from which the Gateways should be
    /// listed, specified in the format `projects/*/locations/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Maximum number of Gateways to return per call.
    pub page_size: i32,

    /// The value returned by the last `ListGatewaysResponse`
    /// Indicates that this is a continuation of a prior `ListGateways` call,
    /// and that the system should return the next page of data.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListGatewaysRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListGatewaysRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListGatewaysRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListGatewaysRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListGatewaysRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.ListGatewaysRequest"
    }
}

/// Response returned by the ListGateways method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListGatewaysResponse {
    /// List of Gateway resources.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub gateways: std::vec::Vec<crate::model::Gateway>,

    /// If there might be more results than those appearing in this response, then
    /// `next_page_token` is included. To get the next set of results, call this
    /// method again using the value of `next_page_token` as `page_token`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListGatewaysResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListGatewaysResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [gateways][crate::model::ListGatewaysResponse::gateways].
    pub fn set_gateways<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Gateway>,
    {
        use std::iter::Iterator;
        self.gateways = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListGatewaysResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.ListGatewaysResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListGatewaysResponse {
    type PageItem = crate::model::Gateway;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.gateways
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request used by the GetGateway method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetGatewayRequest {
    /// Required. A name of the Gateway to get. Must be in the format
    /// `projects/*/locations/*/gateways/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetGatewayRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetGatewayRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetGatewayRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.GetGatewayRequest"
    }
}

/// Request used by the CreateGateway method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateGatewayRequest {
    /// Required. The parent resource of the Gateway. Must be in the
    /// format `projects/*/locations/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Short name of the Gateway resource to be created.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub gateway_id: std::string::String,

    /// Required. Gateway resource to be created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub gateway: std::option::Option<crate::model::Gateway>,
}

impl CreateGatewayRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateGatewayRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [gateway_id][crate::model::CreateGatewayRequest::gateway_id].
    pub fn set_gateway_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.gateway_id = v.into();
        self
    }

    /// Sets the value of [gateway][crate::model::CreateGatewayRequest::gateway].
    pub fn set_gateway<T: std::convert::Into<std::option::Option<crate::model::Gateway>>>(
        mut self,
        v: T,
    ) -> Self {
        self.gateway = v.into();
        self
    }
}

impl wkt::message::Message for CreateGatewayRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.CreateGatewayRequest"
    }
}

/// Request used by the UpdateGateway method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateGatewayRequest {
    /// Optional. Field mask is used to specify the fields to be overwritten in the
    /// Gateway resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. Updated Gateway resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub gateway: std::option::Option<crate::model::Gateway>,
}

impl UpdateGatewayRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateGatewayRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [gateway][crate::model::UpdateGatewayRequest::gateway].
    pub fn set_gateway<T: std::convert::Into<std::option::Option<crate::model::Gateway>>>(
        mut self,
        v: T,
    ) -> Self {
        self.gateway = v.into();
        self
    }
}

impl wkt::message::Message for UpdateGatewayRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.UpdateGatewayRequest"
    }
}

/// Request used by the DeleteGateway method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteGatewayRequest {
    /// Required. A name of the Gateway to delete. Must be in the format
    /// `projects/*/locations/*/gateways/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteGatewayRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteGatewayRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteGatewayRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.DeleteGatewayRequest"
    }
}

/// GrpcRoute is the resource defining how gRPC traffic routed by a Mesh
/// or Gateway resource is routed.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GrpcRoute {
    /// Required. Name of the GrpcRoute resource. It matches pattern
    /// `projects/*/locations/global/grpcRoutes/<grpc_route_name>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Server-defined URL of this resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub self_link: std::string::String,

    /// Output only. The timestamp when the resource was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The timestamp when the resource was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional. Set of label tags associated with the GrpcRoute resource.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Optional. A free-text description of the resource. Max length 1024
    /// characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Required. Service hostnames with an optional port for which this route
    /// describes traffic.
    ///
    /// Format: \<hostname\>[:\<port\>]
    ///
    /// Hostname is the fully qualified domain name of a network host. This matches
    /// the RFC 1123 definition of a hostname with 2 notable exceptions:
    ///
    /// - IPs are not allowed.
    /// - A hostname may be prefixed with a wildcard label (`*.`). The wildcard
    ///   label must appear by itself as the first label.
    ///
    /// Hostname can be "precise" which is a domain name without the terminating
    /// dot of a network host (e.g. `foo.example.com`) or "wildcard", which is a
    /// domain name prefixed with a single wildcard label (e.g. `*.example.com`).
    ///
    /// Note that as per RFC1035 and RFC1123, a label must consist of lower case
    /// alphanumeric characters or '-', and must start and end with an alphanumeric
    /// character. No other punctuation is allowed.
    ///
    /// The routes associated with a Mesh or Gateway must have unique hostnames. If
    /// you attempt to attach multiple routes with conflicting hostnames, the
    /// configuration will be rejected.
    ///
    /// For example, while it is acceptable for routes for the hostnames
    /// `*.foo.bar.com` and `*.bar.com` to be associated with the same route, it is
    /// not possible to associate two routes both with `*.bar.com` or both with
    /// `bar.com`.
    ///
    /// If a port is specified, then gRPC clients must use the channel URI with the
    /// port to match this rule (i.e. "xds:///service:123"), otherwise they must
    /// supply the URI without a port (i.e. "xds:///service").
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub hostnames: std::vec::Vec<std::string::String>,

    /// Optional. Meshes defines a list of meshes this GrpcRoute is attached to, as
    /// one of the routing rules to route the requests served by the mesh.
    ///
    /// Each mesh reference should match the pattern:
    /// `projects/*/locations/global/meshes/<mesh_name>`
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub meshes: std::vec::Vec<std::string::String>,

    /// Optional. Gateways defines a list of gateways this GrpcRoute is attached
    /// to, as one of the routing rules to route the requests served by the
    /// gateway.
    ///
    /// Each gateway reference should match the pattern:
    /// `projects/*/locations/global/gateways/<gateway_name>`
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub gateways: std::vec::Vec<std::string::String>,

    /// Required. A list of detailed rules defining how to route traffic.
    ///
    /// Within a single GrpcRoute, the GrpcRoute.RouteAction associated with the
    /// first matching GrpcRoute.RouteRule will be executed. At least one rule
    /// must be supplied.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub rules: std::vec::Vec<crate::model::grpc_route::RouteRule>,
}

impl GrpcRoute {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GrpcRoute::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [self_link][crate::model::GrpcRoute::self_link].
    pub fn set_self_link<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.self_link = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::GrpcRoute::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::GrpcRoute::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::GrpcRoute::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [hostnames][crate::model::GrpcRoute::hostnames].
    pub fn set_hostnames<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.hostnames = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [meshes][crate::model::GrpcRoute::meshes].
    pub fn set_meshes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.meshes = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [gateways][crate::model::GrpcRoute::gateways].
    pub fn set_gateways<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.gateways = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [rules][crate::model::GrpcRoute::rules].
    pub fn set_rules<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::grpc_route::RouteRule>,
    {
        use std::iter::Iterator;
        self.rules = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [labels][crate::model::GrpcRoute::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for GrpcRoute {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.GrpcRoute"
    }
}

/// Defines additional types related to GrpcRoute
pub mod grpc_route {
    #[allow(unused_imports)]
    use super::*;

    /// Specifies a match against a method.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct MethodMatch {
        /// Optional. Specifies how to match against the name. If not specified, a
        /// default value of "EXACT" is used.
        #[serde(rename = "type")]
        pub r#type: crate::model::grpc_route::method_match::Type,

        /// Required. Name of the service to match against. If unspecified, will
        /// match all services.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub grpc_service: std::string::String,

        /// Required. Name of the method to match against. If unspecified, will match
        /// all methods.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub grpc_method: std::string::String,

        /// Optional. Specifies that matches are case sensitive.  The default value
        /// is true. case_sensitive must not be used with a type of
        /// REGULAR_EXPRESSION.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub case_sensitive: std::option::Option<bool>,
    }

    impl MethodMatch {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [r#type][crate::model::grpc_route::MethodMatch::type].
        pub fn set_type<T: std::convert::Into<crate::model::grpc_route::method_match::Type>>(
            mut self,
            v: T,
        ) -> Self {
            self.r#type = v.into();
            self
        }

        /// Sets the value of [grpc_service][crate::model::grpc_route::MethodMatch::grpc_service].
        pub fn set_grpc_service<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.grpc_service = v.into();
            self
        }

        /// Sets the value of [grpc_method][crate::model::grpc_route::MethodMatch::grpc_method].
        pub fn set_grpc_method<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.grpc_method = v.into();
            self
        }

        /// Sets the value of [case_sensitive][crate::model::grpc_route::MethodMatch::case_sensitive].
        pub fn set_case_sensitive<T: std::convert::Into<std::option::Option<bool>>>(
            mut self,
            v: T,
        ) -> Self {
            self.case_sensitive = v.into();
            self
        }
    }

    impl wkt::message::Message for MethodMatch {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.GrpcRoute.MethodMatch"
        }
    }

    /// Defines additional types related to MethodMatch
    pub mod method_match {
        #[allow(unused_imports)]
        use super::*;

        /// The type of the match.
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct Type(std::borrow::Cow<'static, str>);

        impl Type {
            /// Creates a new Type instance.
            pub const fn new(v: &'static str) -> Self {
                Self(std::borrow::Cow::Borrowed(v))
            }

            /// Gets the enum value.
            pub fn value(&self) -> &str {
                &self.0
            }
        }

        /// Useful constants to work with [Type](Type)
        pub mod r#type {
            use super::Type;

            /// Unspecified.
            pub const TYPE_UNSPECIFIED: Type = Type::new("TYPE_UNSPECIFIED");

            /// Will only match the exact name provided.
            pub const EXACT: Type = Type::new("EXACT");

            /// Will interpret grpc_method and grpc_service as regexes. RE2 syntax is
            /// supported.
            pub const REGULAR_EXPRESSION: Type = Type::new("REGULAR_EXPRESSION");
        }

        impl std::convert::From<std::string::String> for Type {
            fn from(value: std::string::String) -> Self {
                Self(std::borrow::Cow::Owned(value))
            }
        }
    }

    /// A match against a collection of headers.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct HeaderMatch {
        /// Optional. Specifies how to match against the value of the header. If not
        /// specified, a default value of EXACT is used.
        #[serde(rename = "type")]
        pub r#type: crate::model::grpc_route::header_match::Type,

        /// Required. The key of the header.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub key: std::string::String,

        /// Required. The value of the header.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub value: std::string::String,
    }

    impl HeaderMatch {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [r#type][crate::model::grpc_route::HeaderMatch::type].
        pub fn set_type<T: std::convert::Into<crate::model::grpc_route::header_match::Type>>(
            mut self,
            v: T,
        ) -> Self {
            self.r#type = v.into();
            self
        }

        /// Sets the value of [key][crate::model::grpc_route::HeaderMatch::key].
        pub fn set_key<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.key = v.into();
            self
        }

        /// Sets the value of [value][crate::model::grpc_route::HeaderMatch::value].
        pub fn set_value<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.value = v.into();
            self
        }
    }

    impl wkt::message::Message for HeaderMatch {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.GrpcRoute.HeaderMatch"
        }
    }

    /// Defines additional types related to HeaderMatch
    pub mod header_match {
        #[allow(unused_imports)]
        use super::*;

        /// The type of match.
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct Type(std::borrow::Cow<'static, str>);

        impl Type {
            /// Creates a new Type instance.
            pub const fn new(v: &'static str) -> Self {
                Self(std::borrow::Cow::Borrowed(v))
            }

            /// Gets the enum value.
            pub fn value(&self) -> &str {
                &self.0
            }
        }

        /// Useful constants to work with [Type](Type)
        pub mod r#type {
            use super::Type;

            /// Unspecified.
            pub const TYPE_UNSPECIFIED: Type = Type::new("TYPE_UNSPECIFIED");

            /// Will only match the exact value provided.
            pub const EXACT: Type = Type::new("EXACT");

            /// Will match paths conforming to the prefix specified by value. RE2
            /// syntax is supported.
            pub const REGULAR_EXPRESSION: Type = Type::new("REGULAR_EXPRESSION");
        }

        impl std::convert::From<std::string::String> for Type {
            fn from(value: std::string::String) -> Self {
                Self(std::borrow::Cow::Owned(value))
            }
        }
    }

    /// Criteria for matching traffic. A RouteMatch will be considered to match
    /// when all supplied fields match.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct RouteMatch {
        /// Optional. A gRPC method to match against. If this field is empty or
        /// omitted, will match all methods.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub method: std::option::Option<crate::model::grpc_route::MethodMatch>,

        /// Optional. Specifies a collection of headers to match.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub headers: std::vec::Vec<crate::model::grpc_route::HeaderMatch>,
    }

    impl RouteMatch {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [method][crate::model::grpc_route::RouteMatch::method].
        pub fn set_method<
            T: std::convert::Into<std::option::Option<crate::model::grpc_route::MethodMatch>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.method = v.into();
            self
        }

        /// Sets the value of [headers][crate::model::grpc_route::RouteMatch::headers].
        pub fn set_headers<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::grpc_route::HeaderMatch>,
        {
            use std::iter::Iterator;
            self.headers = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for RouteMatch {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.GrpcRoute.RouteMatch"
        }
    }

    /// The destination to which traffic will be routed.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Destination {
        /// Optional. Specifies the proportion of requests forwarded to the backend
        /// referenced by the serviceName field. This is computed as:
        ///
        /// - weight/Sum(weights in this destination list).
        ///   For non-zero values, there may be some epsilon from the exact proportion
        ///   defined here depending on the precision an implementation supports.
        ///
        /// If only one serviceName is specified and it has a weight greater than 0,
        /// 100% of the traffic is forwarded to that backend.
        ///
        /// If weights are specified for any one service name, they need to be
        /// specified for all of them.
        ///
        /// If weights are unspecified for all services, then, traffic is distributed
        /// in equal proportions to all of them.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub weight: std::option::Option<i32>,

        /// Specifies the kind of destination to which traffic will be routed.
        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub destination_type:
            std::option::Option<crate::model::grpc_route::destination::DestinationType>,
    }

    impl Destination {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [weight][crate::model::grpc_route::Destination::weight].
        pub fn set_weight<T: std::convert::Into<std::option::Option<i32>>>(mut self, v: T) -> Self {
            self.weight = v.into();
            self
        }

        /// Sets the value of `destination_type`.
        pub fn set_destination_type<
            T: std::convert::Into<
                std::option::Option<crate::model::grpc_route::destination::DestinationType>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.destination_type = v.into();
            self
        }

        /// The value of [destination_type][crate::model::grpc_route::Destination::destination_type]
        /// if it holds a `ServiceName`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_service_name(&self) -> std::option::Option<&std::string::String> {
            #[allow(unreachable_patterns)]
            self.destination_type.as_ref().and_then(|v| match v {
                crate::model::grpc_route::destination::DestinationType::ServiceName(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [destination_type][crate::model::grpc_route::Destination::destination_type]
        /// to hold a `ServiceName`.
        ///
        /// Note that all the setters affecting `destination_type` are
        /// mutually exclusive.
        pub fn set_service_name<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.destination_type = std::option::Option::Some(
                crate::model::grpc_route::destination::DestinationType::ServiceName(v.into()),
            );
            self
        }
    }

    impl wkt::message::Message for Destination {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.GrpcRoute.Destination"
        }
    }

    /// Defines additional types related to Destination
    pub mod destination {
        #[allow(unused_imports)]
        use super::*;

        /// Specifies the kind of destination to which traffic will be routed.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum DestinationType {
            /// Required. The URL of a destination service to which to route traffic.
            /// Must refer to either a BackendService or ServiceDirectoryService.
            ServiceName(std::string::String),
        }
    }

    /// The specification for fault injection introduced into traffic to test the
    /// resiliency of clients to destination service failure. As part of fault
    /// injection, when clients send requests to a destination, delays can be
    /// introduced on a percentage of requests before sending those requests to the
    /// destination service. Similarly requests from clients can be aborted by for
    /// a percentage of requests.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct FaultInjectionPolicy {
        /// The specification for injecting delay to client requests.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub delay: std::option::Option<crate::model::grpc_route::fault_injection_policy::Delay>,

        /// The specification for aborting to client requests.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub abort: std::option::Option<crate::model::grpc_route::fault_injection_policy::Abort>,
    }

    impl FaultInjectionPolicy {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [delay][crate::model::grpc_route::FaultInjectionPolicy::delay].
        pub fn set_delay<
            T: std::convert::Into<
                std::option::Option<crate::model::grpc_route::fault_injection_policy::Delay>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.delay = v.into();
            self
        }

        /// Sets the value of [abort][crate::model::grpc_route::FaultInjectionPolicy::abort].
        pub fn set_abort<
            T: std::convert::Into<
                std::option::Option<crate::model::grpc_route::fault_injection_policy::Abort>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.abort = v.into();
            self
        }
    }

    impl wkt::message::Message for FaultInjectionPolicy {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.GrpcRoute.FaultInjectionPolicy"
        }
    }

    /// Defines additional types related to FaultInjectionPolicy
    pub mod fault_injection_policy {
        #[allow(unused_imports)]
        use super::*;

        /// Specification of how client requests are delayed as part of fault
        /// injection before being sent to a destination.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct Delay {
            /// Specify a fixed delay before forwarding the request.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub fixed_delay: std::option::Option<wkt::Duration>,

            /// The percentage of traffic on which delay will be injected.
            ///
            /// The value must be between [0, 100]
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub percentage: std::option::Option<i32>,
        }

        impl Delay {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [fixed_delay][crate::model::grpc_route::fault_injection_policy::Delay::fixed_delay].
            pub fn set_fixed_delay<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
                mut self,
                v: T,
            ) -> Self {
                self.fixed_delay = v.into();
                self
            }

            /// Sets the value of [percentage][crate::model::grpc_route::fault_injection_policy::Delay::percentage].
            pub fn set_percentage<T: std::convert::Into<std::option::Option<i32>>>(
                mut self,
                v: T,
            ) -> Self {
                self.percentage = v.into();
                self
            }
        }

        impl wkt::message::Message for Delay {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.networkservices.v1.GrpcRoute.FaultInjectionPolicy.Delay"
            }
        }

        /// Specification of how client requests are aborted as part of fault
        /// injection before being sent to a destination.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct Abort {
            /// The HTTP status code used to abort the request.
            ///
            /// The value must be between 200 and 599 inclusive.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub http_status: std::option::Option<i32>,

            /// The percentage of traffic which will be aborted.
            ///
            /// The value must be between [0, 100]
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub percentage: std::option::Option<i32>,
        }

        impl Abort {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [http_status][crate::model::grpc_route::fault_injection_policy::Abort::http_status].
            pub fn set_http_status<T: std::convert::Into<std::option::Option<i32>>>(
                mut self,
                v: T,
            ) -> Self {
                self.http_status = v.into();
                self
            }

            /// Sets the value of [percentage][crate::model::grpc_route::fault_injection_policy::Abort::percentage].
            pub fn set_percentage<T: std::convert::Into<std::option::Option<i32>>>(
                mut self,
                v: T,
            ) -> Self {
                self.percentage = v.into();
                self
            }
        }

        impl wkt::message::Message for Abort {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.networkservices.v1.GrpcRoute.FaultInjectionPolicy.Abort"
            }
        }
    }

    /// The specifications for retries.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct RetryPolicy {
        /// - connect-failure: Router will retry on failures connecting to Backend
        ///   Services, for example due to connection timeouts.
        /// - refused-stream: Router will retry if the backend service resets the
        ///   stream
        ///   with a REFUSED_STREAM error code. This reset type indicates that it is
        ///   safe to retry.
        /// - cancelled: Router will retry if the gRPC status code in the response
        ///   header
        ///   is set to cancelled
        /// - deadline-exceeded: Router will retry if the gRPC status code in the
        ///   response
        ///   header is set to deadline-exceeded
        /// - resource-exhausted: Router will retry if the gRPC status code in the
        ///   response header is set to resource-exhausted
        /// - unavailable: Router will retry if the gRPC status code in the response
        ///   header is set to unavailable
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub retry_conditions: std::vec::Vec<std::string::String>,

        /// Specifies the allowed number of retries. This number must be > 0. If not
        /// specified, default to 1.
        pub num_retries: u32,
    }

    impl RetryPolicy {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [num_retries][crate::model::grpc_route::RetryPolicy::num_retries].
        pub fn set_num_retries<T: std::convert::Into<u32>>(mut self, v: T) -> Self {
            self.num_retries = v.into();
            self
        }

        /// Sets the value of [retry_conditions][crate::model::grpc_route::RetryPolicy::retry_conditions].
        pub fn set_retry_conditions<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.retry_conditions = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for RetryPolicy {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.GrpcRoute.RetryPolicy"
        }
    }

    /// Specifies how to route matched traffic.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct RouteAction {
        /// Optional. The destination services to which traffic should be forwarded.
        /// If multiple destinations are specified, traffic will be split between
        /// Backend Service(s) according to the weight field of these destinations.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub destinations: std::vec::Vec<crate::model::grpc_route::Destination>,

        /// Optional. The specification for fault injection introduced into traffic to test the
        /// resiliency of clients to destination service failure. As part of fault
        /// injection, when clients send requests to a destination, delays can be
        /// introduced on a percentage of requests before sending those requests to
        /// the destination service. Similarly requests from clients can be aborted
        /// by for a percentage of requests.
        ///
        /// timeout and retry_policy will be ignored by clients that are configured
        /// with a fault_injection_policy
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub fault_injection_policy:
            std::option::Option<crate::model::grpc_route::FaultInjectionPolicy>,

        /// Optional. Specifies the timeout for selected route. Timeout is computed
        /// from the time the request has been fully processed (i.e. end of stream)
        /// up until the response has been completely processed. Timeout includes all
        /// retries.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub timeout: std::option::Option<wkt::Duration>,

        /// Optional. Specifies the retry policy associated with this route.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub retry_policy: std::option::Option<crate::model::grpc_route::RetryPolicy>,
    }

    impl RouteAction {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [fault_injection_policy][crate::model::grpc_route::RouteAction::fault_injection_policy].
        pub fn set_fault_injection_policy<
            T: std::convert::Into<std::option::Option<crate::model::grpc_route::FaultInjectionPolicy>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.fault_injection_policy = v.into();
            self
        }

        /// Sets the value of [timeout][crate::model::grpc_route::RouteAction::timeout].
        pub fn set_timeout<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.timeout = v.into();
            self
        }

        /// Sets the value of [retry_policy][crate::model::grpc_route::RouteAction::retry_policy].
        pub fn set_retry_policy<
            T: std::convert::Into<std::option::Option<crate::model::grpc_route::RetryPolicy>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.retry_policy = v.into();
            self
        }

        /// Sets the value of [destinations][crate::model::grpc_route::RouteAction::destinations].
        pub fn set_destinations<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::grpc_route::Destination>,
        {
            use std::iter::Iterator;
            self.destinations = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for RouteAction {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.GrpcRoute.RouteAction"
        }
    }

    /// Describes how to route traffic.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct RouteRule {
        /// Optional. Matches define conditions used for matching the rule against
        /// incoming gRPC requests. Each match is independent, i.e. this rule will be
        /// matched if ANY one of the matches is satisfied.  If no matches field is
        /// specified, this rule will unconditionally match traffic.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub matches: std::vec::Vec<crate::model::grpc_route::RouteMatch>,

        /// Required. A detailed rule defining how to route traffic. This field is
        /// required.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub action: std::option::Option<crate::model::grpc_route::RouteAction>,
    }

    impl RouteRule {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [action][crate::model::grpc_route::RouteRule::action].
        pub fn set_action<
            T: std::convert::Into<std::option::Option<crate::model::grpc_route::RouteAction>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.action = v.into();
            self
        }

        /// Sets the value of [matches][crate::model::grpc_route::RouteRule::matches].
        pub fn set_matches<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::grpc_route::RouteMatch>,
        {
            use std::iter::Iterator;
            self.matches = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for RouteRule {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.GrpcRoute.RouteRule"
        }
    }
}

/// Request used with the ListGrpcRoutes method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListGrpcRoutesRequest {
    /// Required. The project and location from which the GrpcRoutes should be
    /// listed, specified in the format `projects/*/locations/global`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Maximum number of GrpcRoutes to return per call.
    pub page_size: i32,

    /// The value returned by the last `ListGrpcRoutesResponse`
    /// Indicates that this is a continuation of a prior `ListGrpcRoutes` call,
    /// and that the system should return the next page of data.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListGrpcRoutesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListGrpcRoutesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListGrpcRoutesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListGrpcRoutesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListGrpcRoutesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.ListGrpcRoutesRequest"
    }
}

/// Response returned by the ListGrpcRoutes method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListGrpcRoutesResponse {
    /// List of GrpcRoute resources.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub grpc_routes: std::vec::Vec<crate::model::GrpcRoute>,

    /// If there might be more results than those appearing in this response, then
    /// `next_page_token` is included. To get the next set of results, call this
    /// method again using the value of `next_page_token` as `page_token`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListGrpcRoutesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListGrpcRoutesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [grpc_routes][crate::model::ListGrpcRoutesResponse::grpc_routes].
    pub fn set_grpc_routes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::GrpcRoute>,
    {
        use std::iter::Iterator;
        self.grpc_routes = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListGrpcRoutesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.ListGrpcRoutesResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListGrpcRoutesResponse {
    type PageItem = crate::model::GrpcRoute;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.grpc_routes
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request used by the GetGrpcRoute method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetGrpcRouteRequest {
    /// Required. A name of the GrpcRoute to get. Must be in the format
    /// `projects/*/locations/global/grpcRoutes/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetGrpcRouteRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetGrpcRouteRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetGrpcRouteRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.GetGrpcRouteRequest"
    }
}

/// Request used by the CreateGrpcRoute method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateGrpcRouteRequest {
    /// Required. The parent resource of the GrpcRoute. Must be in the
    /// format `projects/*/locations/global`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Short name of the GrpcRoute resource to be created.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub grpc_route_id: std::string::String,

    /// Required. GrpcRoute resource to be created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub grpc_route: std::option::Option<crate::model::GrpcRoute>,
}

impl CreateGrpcRouteRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateGrpcRouteRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [grpc_route_id][crate::model::CreateGrpcRouteRequest::grpc_route_id].
    pub fn set_grpc_route_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.grpc_route_id = v.into();
        self
    }

    /// Sets the value of [grpc_route][crate::model::CreateGrpcRouteRequest::grpc_route].
    pub fn set_grpc_route<T: std::convert::Into<std::option::Option<crate::model::GrpcRoute>>>(
        mut self,
        v: T,
    ) -> Self {
        self.grpc_route = v.into();
        self
    }
}

impl wkt::message::Message for CreateGrpcRouteRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.CreateGrpcRouteRequest"
    }
}

/// Request used by the UpdateGrpcRoute method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateGrpcRouteRequest {
    /// Optional. Field mask is used to specify the fields to be overwritten in the
    /// GrpcRoute resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. Updated GrpcRoute resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub grpc_route: std::option::Option<crate::model::GrpcRoute>,
}

impl UpdateGrpcRouteRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateGrpcRouteRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [grpc_route][crate::model::UpdateGrpcRouteRequest::grpc_route].
    pub fn set_grpc_route<T: std::convert::Into<std::option::Option<crate::model::GrpcRoute>>>(
        mut self,
        v: T,
    ) -> Self {
        self.grpc_route = v.into();
        self
    }
}

impl wkt::message::Message for UpdateGrpcRouteRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.UpdateGrpcRouteRequest"
    }
}

/// Request used by the DeleteGrpcRoute method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteGrpcRouteRequest {
    /// Required. A name of the GrpcRoute to delete. Must be in the format
    /// `projects/*/locations/global/grpcRoutes/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteGrpcRouteRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteGrpcRouteRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteGrpcRouteRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.DeleteGrpcRouteRequest"
    }
}

/// HttpRoute is the resource defining how HTTP traffic should be routed by a
/// Mesh or Gateway resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct HttpRoute {
    /// Required. Name of the HttpRoute resource. It matches pattern
    /// `projects/*/locations/global/httpRoutes/http_route_name>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Server-defined URL of this resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub self_link: std::string::String,

    /// Optional. A free-text description of the resource. Max length 1024
    /// characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Output only. The timestamp when the resource was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The timestamp when the resource was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Required. Hostnames define a set of hosts that should match against the
    /// HTTP host header to select a HttpRoute to process the request. Hostname is
    /// the fully qualified domain name of a network host, as defined by RFC 1123
    /// with the exception that:
    ///
    /// - IPs are not allowed.
    /// - A hostname may be prefixed with a wildcard label (`*.`). The wildcard
    ///   label must appear by itself as the first label.
    ///
    /// Hostname can be "precise" which is a domain name without the terminating
    /// dot of a network host (e.g. `foo.example.com`) or "wildcard", which is a
    /// domain name prefixed with a single wildcard label (e.g. `*.example.com`).
    ///
    /// Note that as per RFC1035 and RFC1123, a label must consist of lower case
    /// alphanumeric characters or '-', and must start and end with an alphanumeric
    /// character. No other punctuation is allowed.
    ///
    /// The routes associated with a Mesh or Gateways  must have unique hostnames.
    /// If you attempt to attach multiple routes with conflicting hostnames,
    /// the configuration will be rejected.
    ///
    /// For example, while it is acceptable for routes for the hostnames
    /// `*.foo.bar.com` and `*.bar.com` to be associated with the same Mesh (or
    /// Gateways under the same scope), it is not possible to associate two routes
    /// both with `*.bar.com` or both with `bar.com`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub hostnames: std::vec::Vec<std::string::String>,

    /// Optional. Meshes defines a list of meshes this HttpRoute is attached to, as
    /// one of the routing rules to route the requests served by the mesh.
    ///
    /// Each mesh reference should match the pattern:
    /// `projects/*/locations/global/meshes/<mesh_name>`
    ///
    /// The attached Mesh should be of a type SIDECAR
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub meshes: std::vec::Vec<std::string::String>,

    /// Optional. Gateways defines a list of gateways this HttpRoute is attached
    /// to, as one of the routing rules to route the requests served by the
    /// gateway.
    ///
    /// Each gateway reference should match the pattern:
    /// `projects/*/locations/global/gateways/<gateway_name>`
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub gateways: std::vec::Vec<std::string::String>,

    /// Optional. Set of label tags associated with the HttpRoute resource.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Required. Rules that define how traffic is routed and handled.
    /// Rules will be matched sequentially based on the RouteMatch specified for
    /// the rule.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub rules: std::vec::Vec<crate::model::http_route::RouteRule>,
}

impl HttpRoute {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::HttpRoute::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [self_link][crate::model::HttpRoute::self_link].
    pub fn set_self_link<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.self_link = v.into();
        self
    }

    /// Sets the value of [description][crate::model::HttpRoute::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::HttpRoute::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::HttpRoute::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [hostnames][crate::model::HttpRoute::hostnames].
    pub fn set_hostnames<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.hostnames = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [meshes][crate::model::HttpRoute::meshes].
    pub fn set_meshes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.meshes = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [gateways][crate::model::HttpRoute::gateways].
    pub fn set_gateways<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.gateways = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [rules][crate::model::HttpRoute::rules].
    pub fn set_rules<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::http_route::RouteRule>,
    {
        use std::iter::Iterator;
        self.rules = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [labels][crate::model::HttpRoute::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for HttpRoute {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.HttpRoute"
    }
}

/// Defines additional types related to HttpRoute
pub mod http_route {
    #[allow(unused_imports)]
    use super::*;

    /// Specifies how to select a route rule based on HTTP request headers.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct HeaderMatch {
        /// The name of the HTTP header to match against.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub header: std::string::String,

        /// If specified, the match result will be inverted before checking. Default
        /// value is set to false.
        pub invert_match: bool,

        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub match_type: std::option::Option<crate::model::http_route::header_match::MatchType>,
    }

    impl HeaderMatch {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [header][crate::model::http_route::HeaderMatch::header].
        pub fn set_header<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.header = v.into();
            self
        }

        /// Sets the value of [invert_match][crate::model::http_route::HeaderMatch::invert_match].
        pub fn set_invert_match<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.invert_match = v.into();
            self
        }

        /// Sets the value of `match_type`.
        pub fn set_match_type<
            T: std::convert::Into<
                std::option::Option<crate::model::http_route::header_match::MatchType>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.match_type = v.into();
            self
        }

        /// The value of [match_type][crate::model::http_route::HeaderMatch::match_type]
        /// if it holds a `ExactMatch`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_exact_match(&self) -> std::option::Option<&std::string::String> {
            #[allow(unreachable_patterns)]
            self.match_type.as_ref().and_then(|v| match v {
                crate::model::http_route::header_match::MatchType::ExactMatch(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [match_type][crate::model::http_route::HeaderMatch::match_type]
        /// if it holds a `RegexMatch`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_regex_match(&self) -> std::option::Option<&std::string::String> {
            #[allow(unreachable_patterns)]
            self.match_type.as_ref().and_then(|v| match v {
                crate::model::http_route::header_match::MatchType::RegexMatch(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [match_type][crate::model::http_route::HeaderMatch::match_type]
        /// if it holds a `PrefixMatch`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_prefix_match(&self) -> std::option::Option<&std::string::String> {
            #[allow(unreachable_patterns)]
            self.match_type.as_ref().and_then(|v| match v {
                crate::model::http_route::header_match::MatchType::PrefixMatch(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [match_type][crate::model::http_route::HeaderMatch::match_type]
        /// if it holds a `PresentMatch`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_present_match(&self) -> std::option::Option<&bool> {
            #[allow(unreachable_patterns)]
            self.match_type.as_ref().and_then(|v| match v {
                crate::model::http_route::header_match::MatchType::PresentMatch(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [match_type][crate::model::http_route::HeaderMatch::match_type]
        /// if it holds a `SuffixMatch`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_suffix_match(&self) -> std::option::Option<&std::string::String> {
            #[allow(unreachable_patterns)]
            self.match_type.as_ref().and_then(|v| match v {
                crate::model::http_route::header_match::MatchType::SuffixMatch(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [match_type][crate::model::http_route::HeaderMatch::match_type]
        /// if it holds a `RangeMatch`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_range_match(
            &self,
        ) -> std::option::Option<
            &std::boxed::Box<crate::model::http_route::header_match::IntegerRange>,
        > {
            #[allow(unreachable_patterns)]
            self.match_type.as_ref().and_then(|v| match v {
                crate::model::http_route::header_match::MatchType::RangeMatch(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [match_type][crate::model::http_route::HeaderMatch::match_type]
        /// to hold a `ExactMatch`.
        ///
        /// Note that all the setters affecting `match_type` are
        /// mutually exclusive.
        pub fn set_exact_match<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.match_type = std::option::Option::Some(
                crate::model::http_route::header_match::MatchType::ExactMatch(v.into()),
            );
            self
        }

        /// Sets the value of [match_type][crate::model::http_route::HeaderMatch::match_type]
        /// to hold a `RegexMatch`.
        ///
        /// Note that all the setters affecting `match_type` are
        /// mutually exclusive.
        pub fn set_regex_match<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.match_type = std::option::Option::Some(
                crate::model::http_route::header_match::MatchType::RegexMatch(v.into()),
            );
            self
        }

        /// Sets the value of [match_type][crate::model::http_route::HeaderMatch::match_type]
        /// to hold a `PrefixMatch`.
        ///
        /// Note that all the setters affecting `match_type` are
        /// mutually exclusive.
        pub fn set_prefix_match<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.match_type = std::option::Option::Some(
                crate::model::http_route::header_match::MatchType::PrefixMatch(v.into()),
            );
            self
        }

        /// Sets the value of [match_type][crate::model::http_route::HeaderMatch::match_type]
        /// to hold a `PresentMatch`.
        ///
        /// Note that all the setters affecting `match_type` are
        /// mutually exclusive.
        pub fn set_present_match<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.match_type = std::option::Option::Some(
                crate::model::http_route::header_match::MatchType::PresentMatch(v.into()),
            );
            self
        }

        /// Sets the value of [match_type][crate::model::http_route::HeaderMatch::match_type]
        /// to hold a `SuffixMatch`.
        ///
        /// Note that all the setters affecting `match_type` are
        /// mutually exclusive.
        pub fn set_suffix_match<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.match_type = std::option::Option::Some(
                crate::model::http_route::header_match::MatchType::SuffixMatch(v.into()),
            );
            self
        }

        /// Sets the value of [match_type][crate::model::http_route::HeaderMatch::match_type]
        /// to hold a `RangeMatch`.
        ///
        /// Note that all the setters affecting `match_type` are
        /// mutually exclusive.
        pub fn set_range_match<
            T: std::convert::Into<
                std::boxed::Box<crate::model::http_route::header_match::IntegerRange>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.match_type = std::option::Option::Some(
                crate::model::http_route::header_match::MatchType::RangeMatch(v.into()),
            );
            self
        }
    }

    impl wkt::message::Message for HeaderMatch {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.HttpRoute.HeaderMatch"
        }
    }

    /// Defines additional types related to HeaderMatch
    pub mod header_match {
        #[allow(unused_imports)]
        use super::*;

        /// Represents an integer value range.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct IntegerRange {
            /// Start of the range (inclusive)
            pub start: i32,

            /// End of the range (exclusive)
            pub end: i32,
        }

        impl IntegerRange {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [start][crate::model::http_route::header_match::IntegerRange::start].
            pub fn set_start<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
                self.start = v.into();
                self
            }

            /// Sets the value of [end][crate::model::http_route::header_match::IntegerRange::end].
            pub fn set_end<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
                self.end = v.into();
                self
            }
        }

        impl wkt::message::Message for IntegerRange {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.networkservices.v1.HttpRoute.HeaderMatch.IntegerRange"
            }
        }

        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum MatchType {
            /// The value of the header should match exactly the content of
            /// exact_match.
            ExactMatch(std::string::String),
            /// The value of the header must match the regular expression specified in
            /// regex_match. For regular expression grammar, please see:
            /// <https://github.com/google/re2/wiki/Syntax>
            RegexMatch(std::string::String),
            /// The value of the header must start with the contents of prefix_match.
            PrefixMatch(std::string::String),
            /// A header with header_name must exist. The match takes place whether or
            /// not the header has a value.
            PresentMatch(bool),
            /// The value of the header must end with the contents of suffix_match.
            SuffixMatch(std::string::String),
            /// If specified, the rule will match if the request header value is within
            /// the range.
            RangeMatch(std::boxed::Box<crate::model::http_route::header_match::IntegerRange>),
        }
    }

    /// Specifications to match a query parameter in the request.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct QueryParameterMatch {
        /// The name of the query parameter to match.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub query_parameter: std::string::String,

        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub match_type:
            std::option::Option<crate::model::http_route::query_parameter_match::MatchType>,
    }

    impl QueryParameterMatch {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [query_parameter][crate::model::http_route::QueryParameterMatch::query_parameter].
        pub fn set_query_parameter<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.query_parameter = v.into();
            self
        }

        /// Sets the value of `match_type`.
        pub fn set_match_type<
            T: std::convert::Into<
                std::option::Option<crate::model::http_route::query_parameter_match::MatchType>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.match_type = v.into();
            self
        }

        /// The value of [match_type][crate::model::http_route::QueryParameterMatch::match_type]
        /// if it holds a `ExactMatch`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_exact_match(&self) -> std::option::Option<&std::string::String> {
            #[allow(unreachable_patterns)]
            self.match_type.as_ref().and_then(|v| match v {
                crate::model::http_route::query_parameter_match::MatchType::ExactMatch(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [match_type][crate::model::http_route::QueryParameterMatch::match_type]
        /// if it holds a `RegexMatch`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_regex_match(&self) -> std::option::Option<&std::string::String> {
            #[allow(unreachable_patterns)]
            self.match_type.as_ref().and_then(|v| match v {
                crate::model::http_route::query_parameter_match::MatchType::RegexMatch(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [match_type][crate::model::http_route::QueryParameterMatch::match_type]
        /// if it holds a `PresentMatch`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_present_match(&self) -> std::option::Option<&bool> {
            #[allow(unreachable_patterns)]
            self.match_type.as_ref().and_then(|v| match v {
                crate::model::http_route::query_parameter_match::MatchType::PresentMatch(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [match_type][crate::model::http_route::QueryParameterMatch::match_type]
        /// to hold a `ExactMatch`.
        ///
        /// Note that all the setters affecting `match_type` are
        /// mutually exclusive.
        pub fn set_exact_match<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.match_type = std::option::Option::Some(
                crate::model::http_route::query_parameter_match::MatchType::ExactMatch(v.into()),
            );
            self
        }

        /// Sets the value of [match_type][crate::model::http_route::QueryParameterMatch::match_type]
        /// to hold a `RegexMatch`.
        ///
        /// Note that all the setters affecting `match_type` are
        /// mutually exclusive.
        pub fn set_regex_match<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.match_type = std::option::Option::Some(
                crate::model::http_route::query_parameter_match::MatchType::RegexMatch(v.into()),
            );
            self
        }

        /// Sets the value of [match_type][crate::model::http_route::QueryParameterMatch::match_type]
        /// to hold a `PresentMatch`.
        ///
        /// Note that all the setters affecting `match_type` are
        /// mutually exclusive.
        pub fn set_present_match<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.match_type = std::option::Option::Some(
                crate::model::http_route::query_parameter_match::MatchType::PresentMatch(v.into()),
            );
            self
        }
    }

    impl wkt::message::Message for QueryParameterMatch {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.HttpRoute.QueryParameterMatch"
        }
    }

    /// Defines additional types related to QueryParameterMatch
    pub mod query_parameter_match {
        #[allow(unused_imports)]
        use super::*;

        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum MatchType {
            /// The value of the query parameter must exactly match the contents of
            /// exact_match.
            ///
            /// Only one of exact_match, regex_match, or present_match must be set.
            ExactMatch(std::string::String),
            /// The value of the query parameter must match the regular expression
            /// specified by regex_match. For regular expression grammar, please see
            /// <https://github.com/google/re2/wiki/Syntax>
            ///
            /// Only one of exact_match, regex_match, or present_match must be set.
            RegexMatch(std::string::String),
            /// Specifies that the QueryParameterMatcher matches if request contains
            /// query parameter, irrespective of whether the parameter has a value or
            /// not.
            ///
            /// Only one of exact_match, regex_match, or present_match must be set.
            PresentMatch(bool),
        }
    }

    /// RouteMatch defines specifications used to match requests. If multiple match
    /// types are set, this RouteMatch will match if ALL type of matches are
    /// matched.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct RouteMatch {
        /// Specifies if prefix_match and full_path_match matches are case sensitive.
        /// The default value is false.
        pub ignore_case: bool,

        /// Specifies a list of HTTP request headers to match against. ALL of the
        /// supplied headers must be matched.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub headers: std::vec::Vec<crate::model::http_route::HeaderMatch>,

        /// Specifies a list of query parameters to match against. ALL of the query
        /// parameters must be matched.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub query_parameters: std::vec::Vec<crate::model::http_route::QueryParameterMatch>,

        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub path_match: std::option::Option<crate::model::http_route::route_match::PathMatch>,
    }

    impl RouteMatch {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [ignore_case][crate::model::http_route::RouteMatch::ignore_case].
        pub fn set_ignore_case<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.ignore_case = v.into();
            self
        }

        /// Sets the value of [headers][crate::model::http_route::RouteMatch::headers].
        pub fn set_headers<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::http_route::HeaderMatch>,
        {
            use std::iter::Iterator;
            self.headers = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [query_parameters][crate::model::http_route::RouteMatch::query_parameters].
        pub fn set_query_parameters<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::http_route::QueryParameterMatch>,
        {
            use std::iter::Iterator;
            self.query_parameters = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of `path_match`.
        pub fn set_path_match<
            T: std::convert::Into<
                std::option::Option<crate::model::http_route::route_match::PathMatch>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.path_match = v.into();
            self
        }

        /// The value of [path_match][crate::model::http_route::RouteMatch::path_match]
        /// if it holds a `FullPathMatch`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_full_path_match(&self) -> std::option::Option<&std::string::String> {
            #[allow(unreachable_patterns)]
            self.path_match.as_ref().and_then(|v| match v {
                crate::model::http_route::route_match::PathMatch::FullPathMatch(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [path_match][crate::model::http_route::RouteMatch::path_match]
        /// if it holds a `PrefixMatch`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_prefix_match(&self) -> std::option::Option<&std::string::String> {
            #[allow(unreachable_patterns)]
            self.path_match.as_ref().and_then(|v| match v {
                crate::model::http_route::route_match::PathMatch::PrefixMatch(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [path_match][crate::model::http_route::RouteMatch::path_match]
        /// if it holds a `RegexMatch`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_regex_match(&self) -> std::option::Option<&std::string::String> {
            #[allow(unreachable_patterns)]
            self.path_match.as_ref().and_then(|v| match v {
                crate::model::http_route::route_match::PathMatch::RegexMatch(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [path_match][crate::model::http_route::RouteMatch::path_match]
        /// to hold a `FullPathMatch`.
        ///
        /// Note that all the setters affecting `path_match` are
        /// mutually exclusive.
        pub fn set_full_path_match<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.path_match = std::option::Option::Some(
                crate::model::http_route::route_match::PathMatch::FullPathMatch(v.into()),
            );
            self
        }

        /// Sets the value of [path_match][crate::model::http_route::RouteMatch::path_match]
        /// to hold a `PrefixMatch`.
        ///
        /// Note that all the setters affecting `path_match` are
        /// mutually exclusive.
        pub fn set_prefix_match<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.path_match = std::option::Option::Some(
                crate::model::http_route::route_match::PathMatch::PrefixMatch(v.into()),
            );
            self
        }

        /// Sets the value of [path_match][crate::model::http_route::RouteMatch::path_match]
        /// to hold a `RegexMatch`.
        ///
        /// Note that all the setters affecting `path_match` are
        /// mutually exclusive.
        pub fn set_regex_match<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.path_match = std::option::Option::Some(
                crate::model::http_route::route_match::PathMatch::RegexMatch(v.into()),
            );
            self
        }
    }

    impl wkt::message::Message for RouteMatch {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.HttpRoute.RouteMatch"
        }
    }

    /// Defines additional types related to RouteMatch
    pub mod route_match {
        #[allow(unused_imports)]
        use super::*;

        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum PathMatch {
            /// The HTTP request path value should exactly match this value.
            ///
            /// Only one of full_path_match, prefix_match, or regex_match should be
            /// used.
            FullPathMatch(std::string::String),
            /// The HTTP request path value must begin with specified prefix_match.
            /// prefix_match must begin with a /.
            ///
            /// Only one of full_path_match, prefix_match, or regex_match should be
            /// used.
            PrefixMatch(std::string::String),
            /// The HTTP request path value must satisfy the regular expression
            /// specified by regex_match after removing any query parameters and anchor
            /// supplied with the original URL. For regular expression grammar, please
            /// see <https://github.com/google/re2/wiki/Syntax>
            ///
            /// Only one of full_path_match, prefix_match, or regex_match should be
            /// used.
            RegexMatch(std::string::String),
        }
    }

    /// Specifications of a destination to which the request should be routed to.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Destination {
        /// The URL of a BackendService to route traffic to.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub service_name: std::string::String,

        /// Specifies the proportion of requests forwarded to the backend referenced
        /// by the serviceName field. This is computed as:
        ///
        /// - weight/Sum(weights in this destination list).
        ///   For non-zero values, there may be some epsilon from the exact proportion
        ///   defined here depending on the precision an implementation supports.
        ///
        /// If only one serviceName is specified and it has a weight greater than 0,
        /// 100% of the traffic is forwarded to that backend.
        ///
        /// If weights are specified for any one service name, they need to be
        /// specified for all of them.
        ///
        /// If weights are unspecified for all services, then, traffic is distributed
        /// in equal proportions to all of them.
        pub weight: i32,
    }

    impl Destination {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [service_name][crate::model::http_route::Destination::service_name].
        pub fn set_service_name<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.service_name = v.into();
            self
        }

        /// Sets the value of [weight][crate::model::http_route::Destination::weight].
        pub fn set_weight<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.weight = v.into();
            self
        }
    }

    impl wkt::message::Message for Destination {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.HttpRoute.Destination"
        }
    }

    /// The specification for redirecting traffic.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Redirect {
        /// The host that will be used in the redirect response instead of the one
        /// that was supplied in the request.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub host_redirect: std::string::String,

        /// The path that will be used in the redirect response instead of the one
        /// that was supplied in the request.
        /// path_redirect can not be supplied together with prefix_redirect. Supply
        /// one alone or neither. If neither is supplied, the path of the original
        /// request will be used for the redirect.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub path_redirect: std::string::String,

        /// Indicates that during redirection, the matched prefix (or path) should be
        /// swapped with this value. This option allows URLs be dynamically created
        /// based on the request.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub prefix_rewrite: std::string::String,

        /// The HTTP Status code to use for the redirect.
        pub response_code: crate::model::http_route::redirect::ResponseCode,

        /// If set to true, the URL scheme in the redirected request is set to https.
        /// If set to false, the URL scheme of the redirected request will remain the
        /// same as that of the request.
        ///
        /// The default is set to false.
        pub https_redirect: bool,

        /// if set to true, any accompanying query portion of the original URL is
        /// removed prior to redirecting the request. If set to false, the query
        /// portion of the original URL is retained.
        ///
        /// The default is set to false.
        pub strip_query: bool,

        /// The port that will be used in the redirected request instead of the one
        /// that was supplied in the request.
        pub port_redirect: i32,
    }

    impl Redirect {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [host_redirect][crate::model::http_route::Redirect::host_redirect].
        pub fn set_host_redirect<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.host_redirect = v.into();
            self
        }

        /// Sets the value of [path_redirect][crate::model::http_route::Redirect::path_redirect].
        pub fn set_path_redirect<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.path_redirect = v.into();
            self
        }

        /// Sets the value of [prefix_rewrite][crate::model::http_route::Redirect::prefix_rewrite].
        pub fn set_prefix_rewrite<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.prefix_rewrite = v.into();
            self
        }

        /// Sets the value of [response_code][crate::model::http_route::Redirect::response_code].
        pub fn set_response_code<
            T: std::convert::Into<crate::model::http_route::redirect::ResponseCode>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.response_code = v.into();
            self
        }

        /// Sets the value of [https_redirect][crate::model::http_route::Redirect::https_redirect].
        pub fn set_https_redirect<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.https_redirect = v.into();
            self
        }

        /// Sets the value of [strip_query][crate::model::http_route::Redirect::strip_query].
        pub fn set_strip_query<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.strip_query = v.into();
            self
        }

        /// Sets the value of [port_redirect][crate::model::http_route::Redirect::port_redirect].
        pub fn set_port_redirect<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.port_redirect = v.into();
            self
        }
    }

    impl wkt::message::Message for Redirect {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.HttpRoute.Redirect"
        }
    }

    /// Defines additional types related to Redirect
    pub mod redirect {
        #[allow(unused_imports)]
        use super::*;

        /// Supported HTTP response code.
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct ResponseCode(std::borrow::Cow<'static, str>);

        impl ResponseCode {
            /// Creates a new ResponseCode instance.
            pub const fn new(v: &'static str) -> Self {
                Self(std::borrow::Cow::Borrowed(v))
            }

            /// Gets the enum value.
            pub fn value(&self) -> &str {
                &self.0
            }
        }

        /// Useful constants to work with [ResponseCode](ResponseCode)
        pub mod response_code {
            use super::ResponseCode;

            /// Default value
            pub const RESPONSE_CODE_UNSPECIFIED: ResponseCode =
                ResponseCode::new("RESPONSE_CODE_UNSPECIFIED");

            /// Corresponds to 301.
            pub const MOVED_PERMANENTLY_DEFAULT: ResponseCode =
                ResponseCode::new("MOVED_PERMANENTLY_DEFAULT");

            /// Corresponds to 302.
            pub const FOUND: ResponseCode = ResponseCode::new("FOUND");

            /// Corresponds to 303.
            pub const SEE_OTHER: ResponseCode = ResponseCode::new("SEE_OTHER");

            /// Corresponds to 307. In this case, the request method will be retained.
            pub const TEMPORARY_REDIRECT: ResponseCode = ResponseCode::new("TEMPORARY_REDIRECT");

            /// Corresponds to 308. In this case, the request method will be retained.
            pub const PERMANENT_REDIRECT: ResponseCode = ResponseCode::new("PERMANENT_REDIRECT");
        }

        impl std::convert::From<std::string::String> for ResponseCode {
            fn from(value: std::string::String) -> Self {
                Self(std::borrow::Cow::Owned(value))
            }
        }
    }

    /// The specification for fault injection introduced into traffic to test the
    /// resiliency of clients to destination service failure. As part of fault
    /// injection, when clients send requests to a destination, delays can be
    /// introduced by client proxy on a percentage of requests before sending those
    /// requests to the destination service. Similarly requests can be aborted by
    /// client proxy for a percentage of requests.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct FaultInjectionPolicy {
        /// The specification for injecting delay to client requests.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub delay: std::option::Option<crate::model::http_route::fault_injection_policy::Delay>,

        /// The specification for aborting to client requests.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub abort: std::option::Option<crate::model::http_route::fault_injection_policy::Abort>,
    }

    impl FaultInjectionPolicy {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [delay][crate::model::http_route::FaultInjectionPolicy::delay].
        pub fn set_delay<
            T: std::convert::Into<
                std::option::Option<crate::model::http_route::fault_injection_policy::Delay>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.delay = v.into();
            self
        }

        /// Sets the value of [abort][crate::model::http_route::FaultInjectionPolicy::abort].
        pub fn set_abort<
            T: std::convert::Into<
                std::option::Option<crate::model::http_route::fault_injection_policy::Abort>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.abort = v.into();
            self
        }
    }

    impl wkt::message::Message for FaultInjectionPolicy {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.HttpRoute.FaultInjectionPolicy"
        }
    }

    /// Defines additional types related to FaultInjectionPolicy
    pub mod fault_injection_policy {
        #[allow(unused_imports)]
        use super::*;

        /// Specification of how client requests are delayed as part of fault
        /// injection before being sent to a destination.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct Delay {
            /// Specify a fixed delay before forwarding the request.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub fixed_delay: std::option::Option<wkt::Duration>,

            /// The percentage of traffic on which delay will be injected.
            ///
            /// The value must be between [0, 100]
            pub percentage: i32,
        }

        impl Delay {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [fixed_delay][crate::model::http_route::fault_injection_policy::Delay::fixed_delay].
            pub fn set_fixed_delay<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
                mut self,
                v: T,
            ) -> Self {
                self.fixed_delay = v.into();
                self
            }

            /// Sets the value of [percentage][crate::model::http_route::fault_injection_policy::Delay::percentage].
            pub fn set_percentage<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
                self.percentage = v.into();
                self
            }
        }

        impl wkt::message::Message for Delay {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.networkservices.v1.HttpRoute.FaultInjectionPolicy.Delay"
            }
        }

        /// Specification of how client requests are aborted as part of fault
        /// injection before being sent to a destination.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct Abort {
            /// The HTTP status code used to abort the request.
            ///
            /// The value must be between 200 and 599 inclusive.
            pub http_status: i32,

            /// The percentage of traffic which will be aborted.
            ///
            /// The value must be between [0, 100]
            pub percentage: i32,
        }

        impl Abort {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [http_status][crate::model::http_route::fault_injection_policy::Abort::http_status].
            pub fn set_http_status<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
                self.http_status = v.into();
                self
            }

            /// Sets the value of [percentage][crate::model::http_route::fault_injection_policy::Abort::percentage].
            pub fn set_percentage<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
                self.percentage = v.into();
                self
            }
        }

        impl wkt::message::Message for Abort {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.networkservices.v1.HttpRoute.FaultInjectionPolicy.Abort"
            }
        }
    }

    /// The specification for modifying HTTP header in HTTP request and HTTP
    /// response.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct HeaderModifier {
        /// Completely overwrite/replace the headers with given map where key is the
        /// name of the header, value is the value of the header.
        #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
        pub set: std::collections::HashMap<std::string::String, std::string::String>,

        /// Add the headers with given map where key is the name of the header, value
        /// is the value of the header.
        #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
        pub add: std::collections::HashMap<std::string::String, std::string::String>,

        /// Remove headers (matching by header names) specified in the list.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub remove: std::vec::Vec<std::string::String>,
    }

    impl HeaderModifier {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [remove][crate::model::http_route::HeaderModifier::remove].
        pub fn set_remove<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.remove = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [set][crate::model::http_route::HeaderModifier::set].
        pub fn set_set<T, K, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = (K, V)>,
            K: std::convert::Into<std::string::String>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.set = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
            self
        }

        /// Sets the value of [add][crate::model::http_route::HeaderModifier::add].
        pub fn set_add<T, K, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = (K, V)>,
            K: std::convert::Into<std::string::String>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.add = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
            self
        }
    }

    impl wkt::message::Message for HeaderModifier {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.HttpRoute.HeaderModifier"
        }
    }

    /// The specification for modifying the URL of the request, prior to forwarding
    /// the request to the destination.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct URLRewrite {
        /// Prior to forwarding the request to the selected destination, the matching
        /// portion of the requests path is replaced by this value.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub path_prefix_rewrite: std::string::String,

        /// Prior to forwarding the request to the selected destination, the requests
        /// host header is replaced by this value.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub host_rewrite: std::string::String,
    }

    impl URLRewrite {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [path_prefix_rewrite][crate::model::http_route::URLRewrite::path_prefix_rewrite].
        pub fn set_path_prefix_rewrite<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.path_prefix_rewrite = v.into();
            self
        }

        /// Sets the value of [host_rewrite][crate::model::http_route::URLRewrite::host_rewrite].
        pub fn set_host_rewrite<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.host_rewrite = v.into();
            self
        }
    }

    impl wkt::message::Message for URLRewrite {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.HttpRoute.URLRewrite"
        }
    }

    /// The specifications for retries.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct RetryPolicy {
        /// Specifies one or more conditions when this retry policy applies. Valid
        /// values are:
        /// 5xx: Proxy will attempt a retry if the destination service responds
        /// with any 5xx response code, of if the destination service does not
        /// respond at all, example: disconnect, reset, read timeout, connection
        /// failure and refused streams.
        ///
        /// gateway-error: Similar to 5xx, but only applies to response codes 502,
        /// 503, 504.
        ///
        /// reset: Proxy will attempt a retry if the destination service does not
        /// respond at all (disconnect/reset/read timeout)
        ///
        /// connect-failure: Proxy will retry on failures connecting to destination
        /// for example due to connection timeouts.
        ///
        /// retriable-4xx: Proxy will retry fro retriable 4xx response codes.
        /// Currently the only retriable error supported is 409.
        ///
        /// refused-stream: Proxy will retry if the destination resets the stream
        /// with a REFUSED_STREAM error code. This reset type indicates that it
        /// is safe to retry.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub retry_conditions: std::vec::Vec<std::string::String>,

        /// Specifies the allowed number of retries. This number must be > 0. If not
        /// specified, default to 1.
        pub num_retries: i32,

        /// Specifies a non-zero timeout per retry attempt.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub per_try_timeout: std::option::Option<wkt::Duration>,
    }

    impl RetryPolicy {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [num_retries][crate::model::http_route::RetryPolicy::num_retries].
        pub fn set_num_retries<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.num_retries = v.into();
            self
        }

        /// Sets the value of [per_try_timeout][crate::model::http_route::RetryPolicy::per_try_timeout].
        pub fn set_per_try_timeout<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.per_try_timeout = v.into();
            self
        }

        /// Sets the value of [retry_conditions][crate::model::http_route::RetryPolicy::retry_conditions].
        pub fn set_retry_conditions<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.retry_conditions = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for RetryPolicy {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.HttpRoute.RetryPolicy"
        }
    }

    /// Specifies the policy on how requests are shadowed to a separate mirrored
    /// destination service. The proxy does not wait for responses from the
    /// shadow service. Prior to sending traffic to the shadow service, the
    /// host/authority header is suffixed with -shadow.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct RequestMirrorPolicy {
        /// The destination the requests will be mirrored to. The weight of the
        /// destination will be ignored.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub destination: std::option::Option<crate::model::http_route::Destination>,
    }

    impl RequestMirrorPolicy {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [destination][crate::model::http_route::RequestMirrorPolicy::destination].
        pub fn set_destination<
            T: std::convert::Into<std::option::Option<crate::model::http_route::Destination>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.destination = v.into();
            self
        }
    }

    impl wkt::message::Message for RequestMirrorPolicy {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.HttpRoute.RequestMirrorPolicy"
        }
    }

    /// The Specification for allowing client side cross-origin requests.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct CorsPolicy {
        /// Specifies the list of origins that will be allowed to do CORS requests.
        /// An origin is allowed if it matches either an item in allow_origins or
        /// an item in allow_origin_regexes.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub allow_origins: std::vec::Vec<std::string::String>,

        /// Specifies the regular expression patterns that match allowed origins. For
        /// regular expression grammar, please see
        /// <https://github.com/google/re2/wiki/Syntax>.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub allow_origin_regexes: std::vec::Vec<std::string::String>,

        /// Specifies the content for Access-Control-Allow-Methods header.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub allow_methods: std::vec::Vec<std::string::String>,

        /// Specifies the content for Access-Control-Allow-Headers header.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub allow_headers: std::vec::Vec<std::string::String>,

        /// Specifies the content for Access-Control-Expose-Headers header.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub expose_headers: std::vec::Vec<std::string::String>,

        /// Specifies how long result of a preflight request can be cached in
        /// seconds. This translates to the Access-Control-Max-Age header.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub max_age: std::string::String,

        /// In response to a preflight request, setting this to true indicates that
        /// the actual request can include user credentials. This translates to the
        /// Access-Control-Allow-Credentials header.
        ///
        /// Default value is false.
        pub allow_credentials: bool,

        /// If true, the CORS policy is disabled. The default value is false, which
        /// indicates that the CORS policy is in effect.
        pub disabled: bool,
    }

    impl CorsPolicy {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [max_age][crate::model::http_route::CorsPolicy::max_age].
        pub fn set_max_age<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.max_age = v.into();
            self
        }

        /// Sets the value of [allow_credentials][crate::model::http_route::CorsPolicy::allow_credentials].
        pub fn set_allow_credentials<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.allow_credentials = v.into();
            self
        }

        /// Sets the value of [disabled][crate::model::http_route::CorsPolicy::disabled].
        pub fn set_disabled<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.disabled = v.into();
            self
        }

        /// Sets the value of [allow_origins][crate::model::http_route::CorsPolicy::allow_origins].
        pub fn set_allow_origins<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.allow_origins = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [allow_origin_regexes][crate::model::http_route::CorsPolicy::allow_origin_regexes].
        pub fn set_allow_origin_regexes<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.allow_origin_regexes = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [allow_methods][crate::model::http_route::CorsPolicy::allow_methods].
        pub fn set_allow_methods<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.allow_methods = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [allow_headers][crate::model::http_route::CorsPolicy::allow_headers].
        pub fn set_allow_headers<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.allow_headers = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [expose_headers][crate::model::http_route::CorsPolicy::expose_headers].
        pub fn set_expose_headers<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.expose_headers = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for CorsPolicy {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.HttpRoute.CorsPolicy"
        }
    }

    /// The specifications for routing traffic and applying associated policies.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct RouteAction {
        /// The destination to which traffic should be forwarded.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub destinations: std::vec::Vec<crate::model::http_route::Destination>,

        /// If set, the request is directed as configured by this field.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub redirect: std::option::Option<crate::model::http_route::Redirect>,

        /// The specification for fault injection introduced into traffic to test the
        /// resiliency of clients to backend service failure. As part of fault
        /// injection, when clients send requests to a backend service, delays can be
        /// introduced  on a percentage of requests before sending those requests to
        /// the backend service. Similarly requests from clients can be aborted for a
        /// percentage of requests.
        ///
        /// timeout and retry_policy will be ignored by clients that are configured
        /// with a fault_injection_policy
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub fault_injection_policy:
            std::option::Option<crate::model::http_route::FaultInjectionPolicy>,

        /// The specification for modifying the headers of a matching request prior
        /// to delivery of the request to the destination. If HeaderModifiers are set
        /// on both the Destination and the RouteAction, they will be merged.
        /// Conflicts between the two will not be resolved on the configuration.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub request_header_modifier: std::option::Option<crate::model::http_route::HeaderModifier>,

        /// The specification for modifying the headers of a response prior to
        /// sending the response back to the client. If HeaderModifiers are set
        /// on both the Destination and the RouteAction, they will be merged.
        /// Conflicts between the two will not be resolved on the configuration.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub response_header_modifier: std::option::Option<crate::model::http_route::HeaderModifier>,

        /// The specification for rewrite URL before forwarding requests to the
        /// destination.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub url_rewrite: std::option::Option<crate::model::http_route::URLRewrite>,

        /// Specifies the timeout for selected route. Timeout is computed from the
        /// time the request has been fully processed (i.e. end of stream) up until
        /// the response has been completely processed. Timeout includes all retries.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub timeout: std::option::Option<wkt::Duration>,

        /// Specifies the retry policy associated with this route.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub retry_policy: std::option::Option<crate::model::http_route::RetryPolicy>,

        /// Specifies the policy on how requests intended for the routes destination
        /// are shadowed to a separate mirrored destination. Proxy will not wait for
        /// the shadow destination to respond before returning the response. Prior to
        /// sending traffic to the shadow service, the host/authority header is
        /// suffixed with -shadow.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub request_mirror_policy:
            std::option::Option<crate::model::http_route::RequestMirrorPolicy>,

        /// The specification for allowing client side cross-origin requests.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub cors_policy: std::option::Option<crate::model::http_route::CorsPolicy>,
    }

    impl RouteAction {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [redirect][crate::model::http_route::RouteAction::redirect].
        pub fn set_redirect<
            T: std::convert::Into<std::option::Option<crate::model::http_route::Redirect>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.redirect = v.into();
            self
        }

        /// Sets the value of [fault_injection_policy][crate::model::http_route::RouteAction::fault_injection_policy].
        pub fn set_fault_injection_policy<
            T: std::convert::Into<std::option::Option<crate::model::http_route::FaultInjectionPolicy>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.fault_injection_policy = v.into();
            self
        }

        /// Sets the value of [request_header_modifier][crate::model::http_route::RouteAction::request_header_modifier].
        pub fn set_request_header_modifier<
            T: std::convert::Into<std::option::Option<crate::model::http_route::HeaderModifier>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.request_header_modifier = v.into();
            self
        }

        /// Sets the value of [response_header_modifier][crate::model::http_route::RouteAction::response_header_modifier].
        pub fn set_response_header_modifier<
            T: std::convert::Into<std::option::Option<crate::model::http_route::HeaderModifier>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.response_header_modifier = v.into();
            self
        }

        /// Sets the value of [url_rewrite][crate::model::http_route::RouteAction::url_rewrite].
        pub fn set_url_rewrite<
            T: std::convert::Into<std::option::Option<crate::model::http_route::URLRewrite>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.url_rewrite = v.into();
            self
        }

        /// Sets the value of [timeout][crate::model::http_route::RouteAction::timeout].
        pub fn set_timeout<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.timeout = v.into();
            self
        }

        /// Sets the value of [retry_policy][crate::model::http_route::RouteAction::retry_policy].
        pub fn set_retry_policy<
            T: std::convert::Into<std::option::Option<crate::model::http_route::RetryPolicy>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.retry_policy = v.into();
            self
        }

        /// Sets the value of [request_mirror_policy][crate::model::http_route::RouteAction::request_mirror_policy].
        pub fn set_request_mirror_policy<
            T: std::convert::Into<std::option::Option<crate::model::http_route::RequestMirrorPolicy>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.request_mirror_policy = v.into();
            self
        }

        /// Sets the value of [cors_policy][crate::model::http_route::RouteAction::cors_policy].
        pub fn set_cors_policy<
            T: std::convert::Into<std::option::Option<crate::model::http_route::CorsPolicy>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.cors_policy = v.into();
            self
        }

        /// Sets the value of [destinations][crate::model::http_route::RouteAction::destinations].
        pub fn set_destinations<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::http_route::Destination>,
        {
            use std::iter::Iterator;
            self.destinations = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for RouteAction {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.HttpRoute.RouteAction"
        }
    }

    /// Specifies how to match traffic and how to route traffic when traffic is
    /// matched.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct RouteRule {
        /// A list of matches define conditions used for matching the rule against
        /// incoming HTTP requests. Each match is independent, i.e. this rule will be
        /// matched if ANY one of the matches is satisfied.
        ///
        /// If no matches field is specified, this rule will unconditionally match
        /// traffic.
        ///
        /// If a default rule is desired to be configured, add a rule with no matches
        /// specified to the end of the rules list.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub matches: std::vec::Vec<crate::model::http_route::RouteMatch>,

        /// The detailed rule defining how to route matched traffic.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub action: std::option::Option<crate::model::http_route::RouteAction>,
    }

    impl RouteRule {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [action][crate::model::http_route::RouteRule::action].
        pub fn set_action<
            T: std::convert::Into<std::option::Option<crate::model::http_route::RouteAction>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.action = v.into();
            self
        }

        /// Sets the value of [matches][crate::model::http_route::RouteRule::matches].
        pub fn set_matches<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::http_route::RouteMatch>,
        {
            use std::iter::Iterator;
            self.matches = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for RouteRule {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.HttpRoute.RouteRule"
        }
    }
}

/// Request used with the ListHttpRoutes method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListHttpRoutesRequest {
    /// Required. The project and location from which the HttpRoutes should be
    /// listed, specified in the format `projects/*/locations/global`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Maximum number of HttpRoutes to return per call.
    pub page_size: i32,

    /// The value returned by the last `ListHttpRoutesResponse`
    /// Indicates that this is a continuation of a prior `ListHttpRoutes` call,
    /// and that the system should return the next page of data.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListHttpRoutesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListHttpRoutesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListHttpRoutesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListHttpRoutesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListHttpRoutesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.ListHttpRoutesRequest"
    }
}

/// Response returned by the ListHttpRoutes method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListHttpRoutesResponse {
    /// List of HttpRoute resources.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub http_routes: std::vec::Vec<crate::model::HttpRoute>,

    /// If there might be more results than those appearing in this response, then
    /// `next_page_token` is included. To get the next set of results, call this
    /// method again using the value of `next_page_token` as `page_token`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListHttpRoutesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListHttpRoutesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [http_routes][crate::model::ListHttpRoutesResponse::http_routes].
    pub fn set_http_routes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::HttpRoute>,
    {
        use std::iter::Iterator;
        self.http_routes = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListHttpRoutesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.ListHttpRoutesResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListHttpRoutesResponse {
    type PageItem = crate::model::HttpRoute;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.http_routes
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request used by the GetHttpRoute method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetHttpRouteRequest {
    /// Required. A name of the HttpRoute to get. Must be in the format
    /// `projects/*/locations/global/httpRoutes/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetHttpRouteRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetHttpRouteRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetHttpRouteRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.GetHttpRouteRequest"
    }
}

/// Request used by the HttpRoute method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateHttpRouteRequest {
    /// Required. The parent resource of the HttpRoute. Must be in the
    /// format `projects/*/locations/global`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Short name of the HttpRoute resource to be created.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub http_route_id: std::string::String,

    /// Required. HttpRoute resource to be created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub http_route: std::option::Option<crate::model::HttpRoute>,
}

impl CreateHttpRouteRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateHttpRouteRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [http_route_id][crate::model::CreateHttpRouteRequest::http_route_id].
    pub fn set_http_route_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.http_route_id = v.into();
        self
    }

    /// Sets the value of [http_route][crate::model::CreateHttpRouteRequest::http_route].
    pub fn set_http_route<T: std::convert::Into<std::option::Option<crate::model::HttpRoute>>>(
        mut self,
        v: T,
    ) -> Self {
        self.http_route = v.into();
        self
    }
}

impl wkt::message::Message for CreateHttpRouteRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.CreateHttpRouteRequest"
    }
}

/// Request used by the UpdateHttpRoute method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateHttpRouteRequest {
    /// Optional. Field mask is used to specify the fields to be overwritten in the
    /// HttpRoute resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. Updated HttpRoute resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub http_route: std::option::Option<crate::model::HttpRoute>,
}

impl UpdateHttpRouteRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateHttpRouteRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [http_route][crate::model::UpdateHttpRouteRequest::http_route].
    pub fn set_http_route<T: std::convert::Into<std::option::Option<crate::model::HttpRoute>>>(
        mut self,
        v: T,
    ) -> Self {
        self.http_route = v.into();
        self
    }
}

impl wkt::message::Message for UpdateHttpRouteRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.UpdateHttpRouteRequest"
    }
}

/// Request used by the DeleteHttpRoute method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteHttpRouteRequest {
    /// Required. A name of the HttpRoute to delete. Must be in the format
    /// `projects/*/locations/global/httpRoutes/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteHttpRouteRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteHttpRouteRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteHttpRouteRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.DeleteHttpRouteRequest"
    }
}

/// Mesh represents a logical configuration grouping for workload to workload
/// communication within a service mesh. Routes that point to mesh dictate how
/// requests are routed within this logical mesh boundary.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Mesh {
    /// Required. Name of the Mesh resource. It matches pattern
    /// `projects/*/locations/global/meshes/<mesh_name>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Server-defined URL of this resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub self_link: std::string::String,

    /// Output only. The timestamp when the resource was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The timestamp when the resource was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional. Set of label tags associated with the Mesh resource.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Optional. A free-text description of the resource. Max length 1024
    /// characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. If set to a valid TCP port (1-65535), instructs the SIDECAR proxy
    /// to listen on the specified port of localhost (127.0.0.1) address. The
    /// SIDECAR proxy will expect all traffic to be redirected to this port
    /// regardless of its actual ip:port destination. If unset, a port '15001' is
    /// used as the interception port. This is applicable only for sidecar proxy
    /// deployments.
    pub interception_port: i32,
}

impl Mesh {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Mesh::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [self_link][crate::model::Mesh::self_link].
    pub fn set_self_link<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.self_link = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Mesh::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Mesh::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Mesh::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [interception_port][crate::model::Mesh::interception_port].
    pub fn set_interception_port<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.interception_port = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::Mesh::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Mesh {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.Mesh"
    }
}

/// Request used with the ListMeshes method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListMeshesRequest {
    /// Required. The project and location from which the Meshes should be
    /// listed, specified in the format `projects/*/locations/global`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Maximum number of Meshes to return per call.
    pub page_size: i32,

    /// The value returned by the last `ListMeshesResponse`
    /// Indicates that this is a continuation of a prior `ListMeshes` call,
    /// and that the system should return the next page of data.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListMeshesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListMeshesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListMeshesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListMeshesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListMeshesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.ListMeshesRequest"
    }
}

/// Response returned by the ListMeshes method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListMeshesResponse {
    /// List of Mesh resources.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub meshes: std::vec::Vec<crate::model::Mesh>,

    /// If there might be more results than those appearing in this response, then
    /// `next_page_token` is included. To get the next set of results, call this
    /// method again using the value of `next_page_token` as `page_token`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListMeshesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListMeshesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [meshes][crate::model::ListMeshesResponse::meshes].
    pub fn set_meshes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Mesh>,
    {
        use std::iter::Iterator;
        self.meshes = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListMeshesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.ListMeshesResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListMeshesResponse {
    type PageItem = crate::model::Mesh;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.meshes
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request used by the GetMesh method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetMeshRequest {
    /// Required. A name of the Mesh to get. Must be in the format
    /// `projects/*/locations/global/meshes/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetMeshRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetMeshRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetMeshRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.GetMeshRequest"
    }
}

/// Request used by the CreateMesh method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateMeshRequest {
    /// Required. The parent resource of the Mesh. Must be in the
    /// format `projects/*/locations/global`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Short name of the Mesh resource to be created.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub mesh_id: std::string::String,

    /// Required. Mesh resource to be created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub mesh: std::option::Option<crate::model::Mesh>,
}

impl CreateMeshRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateMeshRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [mesh_id][crate::model::CreateMeshRequest::mesh_id].
    pub fn set_mesh_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.mesh_id = v.into();
        self
    }

    /// Sets the value of [mesh][crate::model::CreateMeshRequest::mesh].
    pub fn set_mesh<T: std::convert::Into<std::option::Option<crate::model::Mesh>>>(
        mut self,
        v: T,
    ) -> Self {
        self.mesh = v.into();
        self
    }
}

impl wkt::message::Message for CreateMeshRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.CreateMeshRequest"
    }
}

/// Request used by the UpdateMesh method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateMeshRequest {
    /// Optional. Field mask is used to specify the fields to be overwritten in the
    /// Mesh resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. Updated Mesh resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub mesh: std::option::Option<crate::model::Mesh>,
}

impl UpdateMeshRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateMeshRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [mesh][crate::model::UpdateMeshRequest::mesh].
    pub fn set_mesh<T: std::convert::Into<std::option::Option<crate::model::Mesh>>>(
        mut self,
        v: T,
    ) -> Self {
        self.mesh = v.into();
        self
    }
}

impl wkt::message::Message for UpdateMeshRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.UpdateMeshRequest"
    }
}

/// Request used by the DeleteMesh method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteMeshRequest {
    /// Required. A name of the Mesh to delete. Must be in the format
    /// `projects/*/locations/global/meshes/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteMeshRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteMeshRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteMeshRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.DeleteMeshRequest"
    }
}

/// ServiceBinding is the resource that defines a Service Directory Service to
/// be used in a BackendService resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ServiceBinding {
    /// Required. Name of the ServiceBinding resource. It matches pattern
    /// `projects/*/locations/global/serviceBindings/service_binding_name`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. A free-text description of the resource. Max length 1024
    /// characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Output only. The timestamp when the resource was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The timestamp when the resource was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Required. The full service directory service name of the format
    /// /projects/*/locations/*/namespaces/*/services/*
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service: std::string::String,

    /// Optional. Set of label tags associated with the ServiceBinding resource.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,
}

impl ServiceBinding {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ServiceBinding::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::ServiceBinding::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::ServiceBinding::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::ServiceBinding::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [service][crate::model::ServiceBinding::service].
    pub fn set_service<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::ServiceBinding::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for ServiceBinding {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.ServiceBinding"
    }
}

/// Request used with the ListServiceBindings method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListServiceBindingsRequest {
    /// Required. The project and location from which the ServiceBindings should be
    /// listed, specified in the format `projects/*/locations/global`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Maximum number of ServiceBindings to return per call.
    pub page_size: i32,

    /// The value returned by the last `ListServiceBindingsResponse`
    /// Indicates that this is a continuation of a prior `ListRouters` call,
    /// and that the system should return the next page of data.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListServiceBindingsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListServiceBindingsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListServiceBindingsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListServiceBindingsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListServiceBindingsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.ListServiceBindingsRequest"
    }
}

/// Response returned by the ListServiceBindings method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListServiceBindingsResponse {
    /// List of ServiceBinding resources.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub service_bindings: std::vec::Vec<crate::model::ServiceBinding>,

    /// If there might be more results than those appearing in this response, then
    /// `next_page_token` is included. To get the next set of results, call this
    /// method again using the value of `next_page_token` as `page_token`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListServiceBindingsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListServiceBindingsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [service_bindings][crate::model::ListServiceBindingsResponse::service_bindings].
    pub fn set_service_bindings<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ServiceBinding>,
    {
        use std::iter::Iterator;
        self.service_bindings = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListServiceBindingsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.ListServiceBindingsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListServiceBindingsResponse {
    type PageItem = crate::model::ServiceBinding;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.service_bindings
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request used by the GetServiceBinding method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetServiceBindingRequest {
    /// Required. A name of the ServiceBinding to get. Must be in the format
    /// `projects/*/locations/global/serviceBindings/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetServiceBindingRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetServiceBindingRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetServiceBindingRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.GetServiceBindingRequest"
    }
}

/// Request used by the ServiceBinding method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateServiceBindingRequest {
    /// Required. The parent resource of the ServiceBinding. Must be in the
    /// format `projects/*/locations/global`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Short name of the ServiceBinding resource to be created.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_binding_id: std::string::String,

    /// Required. ServiceBinding resource to be created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub service_binding: std::option::Option<crate::model::ServiceBinding>,
}

impl CreateServiceBindingRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateServiceBindingRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [service_binding_id][crate::model::CreateServiceBindingRequest::service_binding_id].
    pub fn set_service_binding_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.service_binding_id = v.into();
        self
    }

    /// Sets the value of [service_binding][crate::model::CreateServiceBindingRequest::service_binding].
    pub fn set_service_binding<
        T: std::convert::Into<std::option::Option<crate::model::ServiceBinding>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.service_binding = v.into();
        self
    }
}

impl wkt::message::Message for CreateServiceBindingRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.CreateServiceBindingRequest"
    }
}

/// Request used by the DeleteServiceBinding method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteServiceBindingRequest {
    /// Required. A name of the ServiceBinding to delete. Must be in the format
    /// `projects/*/locations/global/serviceBindings/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteServiceBindingRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteServiceBindingRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteServiceBindingRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.DeleteServiceBindingRequest"
    }
}

/// TcpRoute is the resource defining how TCP traffic should be routed by a
/// Mesh/Gateway resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TcpRoute {
    /// Required. Name of the TcpRoute resource. It matches pattern
    /// `projects/*/locations/global/tcpRoutes/tcp_route_name>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Server-defined URL of this resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub self_link: std::string::String,

    /// Output only. The timestamp when the resource was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The timestamp when the resource was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional. A free-text description of the resource. Max length 1024
    /// characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Required. Rules that define how traffic is routed and handled. At least one
    /// RouteRule must be supplied. If there are multiple rules then the action
    /// taken will be the first rule to match.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub rules: std::vec::Vec<crate::model::tcp_route::RouteRule>,

    /// Optional. Meshes defines a list of meshes this TcpRoute is attached to, as
    /// one of the routing rules to route the requests served by the mesh.
    ///
    /// Each mesh reference should match the pattern:
    /// `projects/*/locations/global/meshes/<mesh_name>`
    ///
    /// The attached Mesh should be of a type SIDECAR
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub meshes: std::vec::Vec<std::string::String>,

    /// Optional. Gateways defines a list of gateways this TcpRoute is attached to,
    /// as one of the routing rules to route the requests served by the gateway.
    ///
    /// Each gateway reference should match the pattern:
    /// `projects/*/locations/global/gateways/<gateway_name>`
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub gateways: std::vec::Vec<std::string::String>,

    /// Optional. Set of label tags associated with the TcpRoute resource.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,
}

impl TcpRoute {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::TcpRoute::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [self_link][crate::model::TcpRoute::self_link].
    pub fn set_self_link<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.self_link = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::TcpRoute::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::TcpRoute::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::TcpRoute::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [rules][crate::model::TcpRoute::rules].
    pub fn set_rules<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::tcp_route::RouteRule>,
    {
        use std::iter::Iterator;
        self.rules = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [meshes][crate::model::TcpRoute::meshes].
    pub fn set_meshes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.meshes = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [gateways][crate::model::TcpRoute::gateways].
    pub fn set_gateways<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.gateways = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [labels][crate::model::TcpRoute::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for TcpRoute {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.TcpRoute"
    }
}

/// Defines additional types related to TcpRoute
pub mod tcp_route {
    #[allow(unused_imports)]
    use super::*;

    /// Specifies how to match traffic and how to route traffic when traffic is
    /// matched.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct RouteRule {
        /// Optional. RouteMatch defines the predicate used to match requests to a
        /// given action. Multiple match types are "OR"ed for evaluation. If no
        /// routeMatch field is specified, this rule will unconditionally match
        /// traffic.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub matches: std::vec::Vec<crate::model::tcp_route::RouteMatch>,

        /// Required. The detailed rule defining how to route matched traffic.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub action: std::option::Option<crate::model::tcp_route::RouteAction>,
    }

    impl RouteRule {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [action][crate::model::tcp_route::RouteRule::action].
        pub fn set_action<
            T: std::convert::Into<std::option::Option<crate::model::tcp_route::RouteAction>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.action = v.into();
            self
        }

        /// Sets the value of [matches][crate::model::tcp_route::RouteRule::matches].
        pub fn set_matches<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::tcp_route::RouteMatch>,
        {
            use std::iter::Iterator;
            self.matches = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for RouteRule {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.TcpRoute.RouteRule"
        }
    }

    /// RouteMatch defines the predicate used to match requests to a given action.
    /// Multiple match types are "OR"ed for evaluation.
    /// If no routeMatch field is specified, this rule will unconditionally match
    /// traffic.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct RouteMatch {
        /// Required. Must be specified in the CIDR range format. A CIDR range
        /// consists of an IP Address and a prefix length to construct the subnet
        /// mask. By default, the prefix length is 32 (i.e. matches a single IP
        /// address). Only IPV4 addresses are supported.
        /// Examples:
        /// "10.0.0.1" - matches against this exact IP address.
        /// "10.0.0.0/8" - matches against any IP address within the 10.0.0.0 subnet
        /// and 255.255.255.0 mask.
        /// "0.0.0.0/0" - matches against any IP address'.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub address: std::string::String,

        /// Required. Specifies the destination port to match against.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub port: std::string::String,
    }

    impl RouteMatch {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [address][crate::model::tcp_route::RouteMatch::address].
        pub fn set_address<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.address = v.into();
            self
        }

        /// Sets the value of [port][crate::model::tcp_route::RouteMatch::port].
        pub fn set_port<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.port = v.into();
            self
        }
    }

    impl wkt::message::Message for RouteMatch {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.TcpRoute.RouteMatch"
        }
    }

    /// The specifications for routing traffic and applying associated policies.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct RouteAction {
        /// Optional. The destination services to which traffic should be forwarded.
        /// At least one destination service is required. Only one of route
        /// destination or original destination can be set.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub destinations: std::vec::Vec<crate::model::tcp_route::RouteDestination>,

        /// Optional. If true, Router will use the destination IP and port of the
        /// original connection as the destination of the request. Default is false.
        /// Only one of route destinations or original destination can be set.
        pub original_destination: bool,
    }

    impl RouteAction {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [original_destination][crate::model::tcp_route::RouteAction::original_destination].
        pub fn set_original_destination<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.original_destination = v.into();
            self
        }

        /// Sets the value of [destinations][crate::model::tcp_route::RouteAction::destinations].
        pub fn set_destinations<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::tcp_route::RouteDestination>,
        {
            use std::iter::Iterator;
            self.destinations = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for RouteAction {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.TcpRoute.RouteAction"
        }
    }

    /// Describe the destination for traffic to be routed to.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct RouteDestination {
        /// Required. The URL of a BackendService to route traffic to.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub service_name: std::string::String,

        /// Optional. Specifies the proportion of requests forwarded to the backend
        /// referenced by the serviceName field. This is computed as:
        ///
        /// - weight/Sum(weights in this destination list).
        ///   For non-zero values, there may be some epsilon from the exact proportion
        ///   defined here depending on the precision an implementation supports.
        ///
        /// If only one serviceName is specified and it has a weight greater than 0,
        /// 100% of the traffic is forwarded to that backend.
        ///
        /// If weights are specified for any one service name, they need to be
        /// specified for all of them.
        ///
        /// If weights are unspecified for all services, then, traffic is distributed
        /// in equal proportions to all of them.
        pub weight: i32,
    }

    impl RouteDestination {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [service_name][crate::model::tcp_route::RouteDestination::service_name].
        pub fn set_service_name<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.service_name = v.into();
            self
        }

        /// Sets the value of [weight][crate::model::tcp_route::RouteDestination::weight].
        pub fn set_weight<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.weight = v.into();
            self
        }
    }

    impl wkt::message::Message for RouteDestination {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.TcpRoute.RouteDestination"
        }
    }
}

/// Request used with the ListTcpRoutes method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListTcpRoutesRequest {
    /// Required. The project and location from which the TcpRoutes should be
    /// listed, specified in the format `projects/*/locations/global`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Maximum number of TcpRoutes to return per call.
    pub page_size: i32,

    /// The value returned by the last `ListTcpRoutesResponse`
    /// Indicates that this is a continuation of a prior `ListTcpRoutes` call,
    /// and that the system should return the next page of data.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListTcpRoutesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListTcpRoutesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListTcpRoutesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListTcpRoutesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListTcpRoutesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.ListTcpRoutesRequest"
    }
}

/// Response returned by the ListTcpRoutes method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListTcpRoutesResponse {
    /// List of TcpRoute resources.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub tcp_routes: std::vec::Vec<crate::model::TcpRoute>,

    /// If there might be more results than those appearing in this response, then
    /// `next_page_token` is included. To get the next set of results, call this
    /// method again using the value of `next_page_token` as `page_token`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListTcpRoutesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListTcpRoutesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [tcp_routes][crate::model::ListTcpRoutesResponse::tcp_routes].
    pub fn set_tcp_routes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TcpRoute>,
    {
        use std::iter::Iterator;
        self.tcp_routes = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListTcpRoutesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.ListTcpRoutesResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListTcpRoutesResponse {
    type PageItem = crate::model::TcpRoute;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.tcp_routes
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request used by the GetTcpRoute method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetTcpRouteRequest {
    /// Required. A name of the TcpRoute to get. Must be in the format
    /// `projects/*/locations/global/tcpRoutes/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetTcpRouteRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetTcpRouteRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetTcpRouteRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.GetTcpRouteRequest"
    }
}

/// Request used by the TcpRoute method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateTcpRouteRequest {
    /// Required. The parent resource of the TcpRoute. Must be in the
    /// format `projects/*/locations/global`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Short name of the TcpRoute resource to be created.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub tcp_route_id: std::string::String,

    /// Required. TcpRoute resource to be created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub tcp_route: std::option::Option<crate::model::TcpRoute>,
}

impl CreateTcpRouteRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateTcpRouteRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [tcp_route_id][crate::model::CreateTcpRouteRequest::tcp_route_id].
    pub fn set_tcp_route_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.tcp_route_id = v.into();
        self
    }

    /// Sets the value of [tcp_route][crate::model::CreateTcpRouteRequest::tcp_route].
    pub fn set_tcp_route<T: std::convert::Into<std::option::Option<crate::model::TcpRoute>>>(
        mut self,
        v: T,
    ) -> Self {
        self.tcp_route = v.into();
        self
    }
}

impl wkt::message::Message for CreateTcpRouteRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.CreateTcpRouteRequest"
    }
}

/// Request used by the UpdateTcpRoute method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateTcpRouteRequest {
    /// Optional. Field mask is used to specify the fields to be overwritten in the
    /// TcpRoute resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. Updated TcpRoute resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub tcp_route: std::option::Option<crate::model::TcpRoute>,
}

impl UpdateTcpRouteRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateTcpRouteRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [tcp_route][crate::model::UpdateTcpRouteRequest::tcp_route].
    pub fn set_tcp_route<T: std::convert::Into<std::option::Option<crate::model::TcpRoute>>>(
        mut self,
        v: T,
    ) -> Self {
        self.tcp_route = v.into();
        self
    }
}

impl wkt::message::Message for UpdateTcpRouteRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.UpdateTcpRouteRequest"
    }
}

/// Request used by the DeleteTcpRoute method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteTcpRouteRequest {
    /// Required. A name of the TcpRoute to delete. Must be in the format
    /// `projects/*/locations/global/tcpRoutes/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteTcpRouteRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteTcpRouteRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteTcpRouteRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.DeleteTcpRouteRequest"
    }
}

/// TlsRoute defines how traffic should be routed based on SNI and other matching
/// L3 attributes.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TlsRoute {
    /// Required. Name of the TlsRoute resource. It matches pattern
    /// `projects/*/locations/global/tlsRoutes/tls_route_name>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Server-defined URL of this resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub self_link: std::string::String,

    /// Output only. The timestamp when the resource was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The timestamp when the resource was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional. A free-text description of the resource. Max length 1024
    /// characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Required. Rules that define how traffic is routed and handled. At least one
    /// RouteRule must be supplied. If there are multiple rules then the action
    /// taken will be the first rule to match.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub rules: std::vec::Vec<crate::model::tls_route::RouteRule>,

    /// Optional. Meshes defines a list of meshes this TlsRoute is attached to, as
    /// one of the routing rules to route the requests served by the mesh.
    ///
    /// Each mesh reference should match the pattern:
    /// `projects/*/locations/global/meshes/<mesh_name>`
    ///
    /// The attached Mesh should be of a type SIDECAR
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub meshes: std::vec::Vec<std::string::String>,

    /// Optional. Gateways defines a list of gateways this TlsRoute is attached to,
    /// as one of the routing rules to route the requests served by the gateway.
    ///
    /// Each gateway reference should match the pattern:
    /// `projects/*/locations/global/gateways/<gateway_name>`
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub gateways: std::vec::Vec<std::string::String>,
}

impl TlsRoute {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::TlsRoute::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [self_link][crate::model::TlsRoute::self_link].
    pub fn set_self_link<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.self_link = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::TlsRoute::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::TlsRoute::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::TlsRoute::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [rules][crate::model::TlsRoute::rules].
    pub fn set_rules<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::tls_route::RouteRule>,
    {
        use std::iter::Iterator;
        self.rules = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [meshes][crate::model::TlsRoute::meshes].
    pub fn set_meshes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.meshes = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [gateways][crate::model::TlsRoute::gateways].
    pub fn set_gateways<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.gateways = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for TlsRoute {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.TlsRoute"
    }
}

/// Defines additional types related to TlsRoute
pub mod tls_route {
    #[allow(unused_imports)]
    use super::*;

    /// Specifies how to match traffic and how to route traffic when traffic is
    /// matched.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct RouteRule {
        /// Required. RouteMatch defines the predicate used to match requests to a
        /// given action. Multiple match types are "OR"ed for evaluation.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub matches: std::vec::Vec<crate::model::tls_route::RouteMatch>,

        /// Required. The detailed rule defining how to route matched traffic.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub action: std::option::Option<crate::model::tls_route::RouteAction>,
    }

    impl RouteRule {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [action][crate::model::tls_route::RouteRule::action].
        pub fn set_action<
            T: std::convert::Into<std::option::Option<crate::model::tls_route::RouteAction>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.action = v.into();
            self
        }

        /// Sets the value of [matches][crate::model::tls_route::RouteRule::matches].
        pub fn set_matches<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::tls_route::RouteMatch>,
        {
            use std::iter::Iterator;
            self.matches = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for RouteRule {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.TlsRoute.RouteRule"
        }
    }

    /// RouteMatch defines the predicate used to match requests to a given action.
    /// Multiple match types are "AND"ed for evaluation.
    /// If no routeMatch field is specified, this rule will unconditionally match
    /// traffic.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct RouteMatch {
        /// Optional. SNI (server name indicator) to match against.
        /// SNI will be matched against all wildcard domains, i.e. `www.example.com`
        /// will be first matched against `www.example.com`, then `*.example.com`,
        /// then `*.com.`
        /// Partial wildcards are not supported, and values like *w.example.com are
        /// invalid.
        /// At least one of sni_host and alpn is required.
        /// Up to 5 sni hosts across all matches can be set.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub sni_host: std::vec::Vec<std::string::String>,

        /// Optional. ALPN (Application-Layer Protocol Negotiation) to match against.
        /// Examples: "http/1.1", "h2".
        /// At least one of sni_host and alpn is required.
        /// Up to 5 alpns across all matches can be set.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub alpn: std::vec::Vec<std::string::String>,
    }

    impl RouteMatch {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [sni_host][crate::model::tls_route::RouteMatch::sni_host].
        pub fn set_sni_host<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.sni_host = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [alpn][crate::model::tls_route::RouteMatch::alpn].
        pub fn set_alpn<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.alpn = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for RouteMatch {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.TlsRoute.RouteMatch"
        }
    }

    /// The specifications for routing traffic and applying associated policies.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct RouteAction {
        /// Required. The destination services to which traffic should be forwarded.
        /// At least one destination service is required.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub destinations: std::vec::Vec<crate::model::tls_route::RouteDestination>,
    }

    impl RouteAction {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [destinations][crate::model::tls_route::RouteAction::destinations].
        pub fn set_destinations<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::tls_route::RouteDestination>,
        {
            use std::iter::Iterator;
            self.destinations = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for RouteAction {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.TlsRoute.RouteAction"
        }
    }

    /// Describe the destination for traffic to be routed to.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct RouteDestination {
        /// Required. The URL of a BackendService to route traffic to.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub service_name: std::string::String,

        /// Optional. Specifies the proportion of requests forwareded to the backend
        /// referenced by the service_name field. This is computed as:
        ///
        /// - weight/Sum(weights in destinations)
        ///   Weights in all destinations does not need to sum up to 100.
        pub weight: i32,
    }

    impl RouteDestination {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [service_name][crate::model::tls_route::RouteDestination::service_name].
        pub fn set_service_name<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.service_name = v.into();
            self
        }

        /// Sets the value of [weight][crate::model::tls_route::RouteDestination::weight].
        pub fn set_weight<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.weight = v.into();
            self
        }
    }

    impl wkt::message::Message for RouteDestination {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkservices.v1.TlsRoute.RouteDestination"
        }
    }
}

/// Request used with the ListTlsRoutes method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListTlsRoutesRequest {
    /// Required. The project and location from which the TlsRoutes should be
    /// listed, specified in the format `projects/*/locations/global`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Maximum number of TlsRoutes to return per call.
    pub page_size: i32,

    /// The value returned by the last `ListTlsRoutesResponse`
    /// Indicates that this is a continuation of a prior `ListTlsRoutes` call,
    /// and that the system should return the next page of data.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListTlsRoutesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListTlsRoutesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListTlsRoutesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListTlsRoutesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListTlsRoutesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.ListTlsRoutesRequest"
    }
}

/// Response returned by the ListTlsRoutes method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListTlsRoutesResponse {
    /// List of TlsRoute resources.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub tls_routes: std::vec::Vec<crate::model::TlsRoute>,

    /// If there might be more results than those appearing in this response, then
    /// `next_page_token` is included. To get the next set of results, call this
    /// method again using the value of `next_page_token` as `page_token`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListTlsRoutesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListTlsRoutesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [tls_routes][crate::model::ListTlsRoutesResponse::tls_routes].
    pub fn set_tls_routes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TlsRoute>,
    {
        use std::iter::Iterator;
        self.tls_routes = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListTlsRoutesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.ListTlsRoutesResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListTlsRoutesResponse {
    type PageItem = crate::model::TlsRoute;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.tls_routes
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request used by the GetTlsRoute method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetTlsRouteRequest {
    /// Required. A name of the TlsRoute to get. Must be in the format
    /// `projects/*/locations/global/tlsRoutes/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetTlsRouteRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetTlsRouteRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetTlsRouteRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.GetTlsRouteRequest"
    }
}

/// Request used by the TlsRoute method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateTlsRouteRequest {
    /// Required. The parent resource of the TlsRoute. Must be in the
    /// format `projects/*/locations/global`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Short name of the TlsRoute resource to be created.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub tls_route_id: std::string::String,

    /// Required. TlsRoute resource to be created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub tls_route: std::option::Option<crate::model::TlsRoute>,
}

impl CreateTlsRouteRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateTlsRouteRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [tls_route_id][crate::model::CreateTlsRouteRequest::tls_route_id].
    pub fn set_tls_route_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.tls_route_id = v.into();
        self
    }

    /// Sets the value of [tls_route][crate::model::CreateTlsRouteRequest::tls_route].
    pub fn set_tls_route<T: std::convert::Into<std::option::Option<crate::model::TlsRoute>>>(
        mut self,
        v: T,
    ) -> Self {
        self.tls_route = v.into();
        self
    }
}

impl wkt::message::Message for CreateTlsRouteRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.CreateTlsRouteRequest"
    }
}

/// Request used by the UpdateTlsRoute method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateTlsRouteRequest {
    /// Optional. Field mask is used to specify the fields to be overwritten in the
    /// TlsRoute resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. Updated TlsRoute resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub tls_route: std::option::Option<crate::model::TlsRoute>,
}

impl UpdateTlsRouteRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateTlsRouteRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [tls_route][crate::model::UpdateTlsRouteRequest::tls_route].
    pub fn set_tls_route<T: std::convert::Into<std::option::Option<crate::model::TlsRoute>>>(
        mut self,
        v: T,
    ) -> Self {
        self.tls_route = v.into();
        self
    }
}

impl wkt::message::Message for UpdateTlsRouteRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.UpdateTlsRouteRequest"
    }
}

/// Request used by the DeleteTlsRoute method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteTlsRouteRequest {
    /// Required. A name of the TlsRoute to delete. Must be in the format
    /// `projects/*/locations/global/tlsRoutes/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteTlsRouteRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteTlsRouteRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteTlsRouteRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkservices.v1.DeleteTlsRouteRequest"
    }
}

/// The part of the request or response for which the extension is called.
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct EventType(std::borrow::Cow<'static, str>);

impl EventType {
    /// Creates a new EventType instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [EventType](EventType)
pub mod event_type {
    use super::EventType;

    /// Unspecified value. Do not use.
    pub const EVENT_TYPE_UNSPECIFIED: EventType = EventType::new("EVENT_TYPE_UNSPECIFIED");

    /// If included in `supported_events`,
    /// the extension is called when the HTTP request headers arrive.
    pub const REQUEST_HEADERS: EventType = EventType::new("REQUEST_HEADERS");

    /// If included in `supported_events`,
    /// the extension is called when the HTTP request body arrives.
    pub const REQUEST_BODY: EventType = EventType::new("REQUEST_BODY");

    /// If included in `supported_events`,
    /// the extension is called when the HTTP response headers arrive.
    pub const RESPONSE_HEADERS: EventType = EventType::new("RESPONSE_HEADERS");

    /// If included in `supported_events`,
    /// the extension is called when the HTTP response body arrives.
    pub const RESPONSE_BODY: EventType = EventType::new("RESPONSE_BODY");

    /// If included in `supported_events`,
    /// the extension is called when the HTTP request trailers arrives.
    pub const REQUEST_TRAILERS: EventType = EventType::new("REQUEST_TRAILERS");

    /// If included in `supported_events`,
    /// the extension is called when the HTTP response trailers arrives.
    pub const RESPONSE_TRAILERS: EventType = EventType::new("RESPONSE_TRAILERS");
}

impl std::convert::From<std::string::String> for EventType {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}

/// Load balancing schemes supported by the `LbTrafficExtension` resource and
/// `LbRouteExtension` resource.
/// For more information, refer to [Choosing a load
/// balancer](https://cloud.google.com/load-balancing/docs/backend-service).
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct LoadBalancingScheme(std::borrow::Cow<'static, str>);

impl LoadBalancingScheme {
    /// Creates a new LoadBalancingScheme instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [LoadBalancingScheme](LoadBalancingScheme)
pub mod load_balancing_scheme {
    use super::LoadBalancingScheme;

    /// Default value. Do not use.
    pub const LOAD_BALANCING_SCHEME_UNSPECIFIED: LoadBalancingScheme =
        LoadBalancingScheme::new("LOAD_BALANCING_SCHEME_UNSPECIFIED");

    /// Signifies that this is used for Internal HTTP(S) Load Balancing.
    pub const INTERNAL_MANAGED: LoadBalancingScheme = LoadBalancingScheme::new("INTERNAL_MANAGED");

    /// Signifies that this is used for External Managed HTTP(S) Load
    /// Balancing.
    pub const EXTERNAL_MANAGED: LoadBalancingScheme = LoadBalancingScheme::new("EXTERNAL_MANAGED");
}

impl std::convert::From<std::string::String> for LoadBalancingScheme {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}
