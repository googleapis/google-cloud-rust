// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
use crate::Result;

/// Implements a [DirectAccessService](super::stub::DirectAccessService) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct DirectAccessService<T>
where
    T: super::stub::DirectAccessService + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> DirectAccessService<T>
where
    T: super::stub::DirectAccessService + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> super::stub::DirectAccessService for DirectAccessService<T>
where
    T: super::stub::DirectAccessService + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn create_device_session(
        &self,
        req: crate::model::CreateDeviceSessionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::DeviceSession>> {
        self.inner.create_device_session(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_device_sessions(
        &self,
        req: crate::model::ListDeviceSessionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListDeviceSessionsResponse>> {
        self.inner.list_device_sessions(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_device_session(
        &self,
        req: crate::model::GetDeviceSessionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::DeviceSession>> {
        self.inner.get_device_session(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn cancel_device_session(
        &self,
        req: crate::model::CancelDeviceSessionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        self.inner.cancel_device_session(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_device_session(
        &self,
        req: crate::model::UpdateDeviceSessionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::DeviceSession>> {
        self.inner.update_device_session(req, options).await
    }
}
