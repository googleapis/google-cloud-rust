// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

/// Implements a client for the Device Streaming API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_devicestreaming_v1::client::DirectAccessService;
/// let client = DirectAccessService::builder().build().await?;
/// // use `client` to make requests to the Device Streaming API.
/// # gax::client_builder::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// A service for allocating Android devices and interacting with the
/// live-allocated devices.
///
/// Each Session will wait for available capacity, at a higher
/// priority over Test Execution. When allocated, the session will be exposed
/// through a stream for integration.
///
/// DirectAccessService is currently available as a preview to select developers.
/// You can register today on behalf of you and your team at
/// <https://developer.android.com/studio/preview/android-device-streaming>
///
/// # Configuration
///
/// To configure `DirectAccessService` use the `with_*` methods in the type returned
/// by [builder()][DirectAccessService::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://devicestreaming.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::direct_access_service::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::direct_access_service::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `DirectAccessService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `DirectAccessService` in
/// an [Rc](std::rc::Rc) or [Arc](std::sync::Arc) to reuse it, because it
/// already uses an `Arc` internally.
#[derive(Clone, Debug)]
pub struct DirectAccessService {
    inner: std::sync::Arc<dyn super::stub::dynamic::DirectAccessService>,
}

impl DirectAccessService {
    /// Returns a builder for [DirectAccessService].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_devicestreaming_v1::client::DirectAccessService;
    /// let client = DirectAccessService::builder().build().await?;
    /// # gax::client_builder::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::direct_access_service::ClientBuilder {
        gax::client_builder::internal::new_builder(
            super::builder::direct_access_service::client::Factory,
        )
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::DirectAccessService + 'static,
    {
        Self {
            inner: std::sync::Arc::new(stub),
        }
    }

    pub(crate) async fn new(
        config: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<std::sync::Arc<dyn super::stub::dynamic::DirectAccessService>>
    {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(std::sync::Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(std::sync::Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<impl super::stub::DirectAccessService> {
        super::transport::DirectAccessService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<impl super::stub::DirectAccessService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::DirectAccessService::new)
    }

    /// Creates a DeviceSession.
    pub fn create_device_session(
        &self,
    ) -> super::builder::direct_access_service::CreateDeviceSession {
        super::builder::direct_access_service::CreateDeviceSession::new(self.inner.clone())
    }

    /// Lists DeviceSessions owned by the project user.
    pub fn list_device_sessions(
        &self,
    ) -> super::builder::direct_access_service::ListDeviceSessions {
        super::builder::direct_access_service::ListDeviceSessions::new(self.inner.clone())
    }

    /// Gets a DeviceSession, which documents the allocation status and
    /// whether the device is allocated. Clients making requests from this API
    /// must poll GetDeviceSession.
    pub fn get_device_session(&self) -> super::builder::direct_access_service::GetDeviceSession {
        super::builder::direct_access_service::GetDeviceSession::new(self.inner.clone())
    }

    /// Cancel a DeviceSession.
    /// This RPC changes the DeviceSession to state FINISHED and terminates all
    /// connections.
    /// Canceled sessions are not deleted and can be retrieved or
    /// listed by the user until they expire based on the 28 day deletion policy.
    pub fn cancel_device_session(
        &self,
    ) -> super::builder::direct_access_service::CancelDeviceSession {
        super::builder::direct_access_service::CancelDeviceSession::new(self.inner.clone())
    }

    /// Updates the current DeviceSession to the fields described by the
    /// update_mask.
    pub fn update_device_session(
        &self,
    ) -> super::builder::direct_access_service::UpdateDeviceSession {
        super::builder::direct_access_service::UpdateDeviceSession::new(self.inner.clone())
    }
}
