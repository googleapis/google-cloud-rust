// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::AnalyticsService].
///
/// Application developers may need to implement this trait to mock
/// `client::AnalyticsService`.  In other use-cases, application developers only
/// use `client::AnalyticsService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait AnalyticsService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::AnalyticsService::export_analytics_metrics].
    fn export_analytics_metrics(
        &self,
        _req: crate::model::ExportAnalyticsMetricsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::AnalyticsService::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::AnalyticsService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Returns the polling error policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_error_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        std::sync::Arc::new(gax::polling_error_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        std::sync::Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}

/// Defines the trait used to implement [super::client::CatalogService].
///
/// Application developers may need to implement this trait to mock
/// `client::CatalogService`.  In other use-cases, application developers only
/// use `client::CatalogService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait CatalogService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::CatalogService::list_catalogs].
    fn list_catalogs(
        &self,
        _req: crate::model::ListCatalogsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListCatalogsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListCatalogsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CatalogService::update_catalog].
    fn update_catalog(
        &self,
        _req: crate::model::UpdateCatalogRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Catalog>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Catalog>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::CatalogService::set_default_branch].
    fn set_default_branch(
        &self,
        _req: crate::model::SetDefaultBranchRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CatalogService::get_default_branch].
    fn get_default_branch(
        &self,
        _req: crate::model::GetDefaultBranchRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::GetDefaultBranchResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::GetDefaultBranchResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CatalogService::get_completion_config].
    fn get_completion_config(
        &self,
        _req: crate::model::GetCompletionConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::CompletionConfig>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::CompletionConfig>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CatalogService::update_completion_config].
    fn update_completion_config(
        &self,
        _req: crate::model::UpdateCompletionConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::CompletionConfig>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::CompletionConfig>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CatalogService::get_attributes_config].
    fn get_attributes_config(
        &self,
        _req: crate::model::GetAttributesConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::AttributesConfig>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::AttributesConfig>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CatalogService::update_attributes_config].
    fn update_attributes_config(
        &self,
        _req: crate::model::UpdateAttributesConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::AttributesConfig>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::AttributesConfig>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CatalogService::add_catalog_attribute].
    fn add_catalog_attribute(
        &self,
        _req: crate::model::AddCatalogAttributeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::AttributesConfig>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::AttributesConfig>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CatalogService::remove_catalog_attribute].
    fn remove_catalog_attribute(
        &self,
        _req: crate::model::RemoveCatalogAttributeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::AttributesConfig>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::AttributesConfig>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CatalogService::replace_catalog_attribute].
    fn replace_catalog_attribute(
        &self,
        _req: crate::model::ReplaceCatalogAttributeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::AttributesConfig>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::AttributesConfig>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CatalogService::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CatalogService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }
}

/// Defines the trait used to implement [super::client::CompletionService].
///
/// Application developers may need to implement this trait to mock
/// `client::CompletionService`.  In other use-cases, application developers only
/// use `client::CompletionService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait CompletionService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::CompletionService::complete_query].
    fn complete_query(
        &self,
        _req: crate::model::CompleteQueryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::CompleteQueryResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::CompleteQueryResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CompletionService::import_completion_data].
    fn import_completion_data(
        &self,
        _req: crate::model::ImportCompletionDataRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::CompletionService::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CompletionService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Returns the polling error policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_error_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        std::sync::Arc::new(gax::polling_error_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        std::sync::Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}

/// Defines the trait used to implement [super::client::ControlService].
///
/// Application developers may need to implement this trait to mock
/// `client::ControlService`.  In other use-cases, application developers only
/// use `client::ControlService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait ControlService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::ControlService::create_control].
    fn create_control(
        &self,
        _req: crate::model::CreateControlRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Control>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Control>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::ControlService::delete_control].
    fn delete_control(
        &self,
        _req: crate::model::DeleteControlRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::ControlService::update_control].
    fn update_control(
        &self,
        _req: crate::model::UpdateControlRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Control>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Control>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::ControlService::get_control].
    fn get_control(
        &self,
        _req: crate::model::GetControlRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Control>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Control>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::ControlService::list_controls].
    fn list_controls(
        &self,
        _req: crate::model::ListControlsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListControlsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListControlsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::ControlService::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::ControlService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }
}

/// Defines the trait used to implement [super::client::GenerativeQuestionService].
///
/// Application developers may need to implement this trait to mock
/// `client::GenerativeQuestionService`.  In other use-cases, application developers only
/// use `client::GenerativeQuestionService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait GenerativeQuestionService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::GenerativeQuestionService::update_generative_questions_feature_config].
    fn update_generative_questions_feature_config(
        &self,
        _req: crate::model::UpdateGenerativeQuestionsFeatureConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::GenerativeQuestionsFeatureConfig>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::GenerativeQuestionsFeatureConfig>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::GenerativeQuestionService::get_generative_questions_feature_config].
    fn get_generative_questions_feature_config(
        &self,
        _req: crate::model::GetGenerativeQuestionsFeatureConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::GenerativeQuestionsFeatureConfig>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::GenerativeQuestionsFeatureConfig>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::GenerativeQuestionService::list_generative_question_configs].
    fn list_generative_question_configs(
        &self,
        _req: crate::model::ListGenerativeQuestionConfigsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::ListGenerativeQuestionConfigsResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<
                gax::response::Response<crate::model::ListGenerativeQuestionConfigsResponse>,
            >,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::GenerativeQuestionService::update_generative_question_config].
    fn update_generative_question_config(
        &self,
        _req: crate::model::UpdateGenerativeQuestionConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::GenerativeQuestionConfig>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::GenerativeQuestionConfig>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::GenerativeQuestionService::batch_update_generative_question_configs].
    fn batch_update_generative_question_configs(
        &self,
        _req: crate::model::BatchUpdateGenerativeQuestionConfigsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::BatchUpdateGenerativeQuestionConfigsResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<
                gax::response::Response<crate::model::BatchUpdateGenerativeQuestionConfigsResponse>,
            >,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::GenerativeQuestionService::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::GenerativeQuestionService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }
}

/// Defines the trait used to implement [super::client::ModelService].
///
/// Application developers may need to implement this trait to mock
/// `client::ModelService`.  In other use-cases, application developers only
/// use `client::ModelService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait ModelService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::ModelService::create_model].
    fn create_model(
        &self,
        _req: crate::model::CreateModelRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::ModelService::get_model].
    fn get_model(
        &self,
        _req: crate::model::GetModelRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Model>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Model>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::ModelService::pause_model].
    fn pause_model(
        &self,
        _req: crate::model::PauseModelRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Model>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Model>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::ModelService::resume_model].
    fn resume_model(
        &self,
        _req: crate::model::ResumeModelRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Model>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Model>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::ModelService::delete_model].
    fn delete_model(
        &self,
        _req: crate::model::DeleteModelRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::ModelService::list_models].
    fn list_models(
        &self,
        _req: crate::model::ListModelsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListModelsResponse>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::ListModelsResponse>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::ModelService::update_model].
    fn update_model(
        &self,
        _req: crate::model::UpdateModelRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Model>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Model>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::ModelService::tune_model].
    fn tune_model(
        &self,
        _req: crate::model::TuneModelRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::ModelService::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::ModelService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Returns the polling error policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_error_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        std::sync::Arc::new(gax::polling_error_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        std::sync::Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}

/// Defines the trait used to implement [super::client::PredictionService].
///
/// Application developers may need to implement this trait to mock
/// `client::PredictionService`.  In other use-cases, application developers only
/// use `client::PredictionService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait PredictionService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::PredictionService::predict].
    fn predict(
        &self,
        _req: crate::model::PredictRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::PredictResponse>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::PredictResponse>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::PredictionService::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::PredictionService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }
}

/// Defines the trait used to implement [super::client::ProductService].
///
/// Application developers may need to implement this trait to mock
/// `client::ProductService`.  In other use-cases, application developers only
/// use `client::ProductService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait ProductService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::ProductService::create_product].
    fn create_product(
        &self,
        _req: crate::model::CreateProductRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Product>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Product>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::ProductService::get_product].
    fn get_product(
        &self,
        _req: crate::model::GetProductRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Product>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Product>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::ProductService::list_products].
    fn list_products(
        &self,
        _req: crate::model::ListProductsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListProductsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListProductsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::ProductService::update_product].
    fn update_product(
        &self,
        _req: crate::model::UpdateProductRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Product>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Product>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::ProductService::delete_product].
    fn delete_product(
        &self,
        _req: crate::model::DeleteProductRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::ProductService::purge_products].
    fn purge_products(
        &self,
        _req: crate::model::PurgeProductsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::ProductService::import_products].
    fn import_products(
        &self,
        _req: crate::model::ImportProductsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::ProductService::set_inventory].
    fn set_inventory(
        &self,
        _req: crate::model::SetInventoryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::ProductService::add_fulfillment_places].
    fn add_fulfillment_places(
        &self,
        _req: crate::model::AddFulfillmentPlacesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::ProductService::remove_fulfillment_places].
    fn remove_fulfillment_places(
        &self,
        _req: crate::model::RemoveFulfillmentPlacesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::ProductService::add_local_inventories].
    fn add_local_inventories(
        &self,
        _req: crate::model::AddLocalInventoriesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::ProductService::remove_local_inventories].
    fn remove_local_inventories(
        &self,
        _req: crate::model::RemoveLocalInventoriesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::ProductService::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::ProductService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Returns the polling error policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_error_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        std::sync::Arc::new(gax::polling_error_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        std::sync::Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}

/// Defines the trait used to implement [super::client::SearchService].
///
/// Application developers may need to implement this trait to mock
/// `client::SearchService`.  In other use-cases, application developers only
/// use `client::SearchService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait SearchService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::SearchService::search].
    fn search(
        &self,
        _req: crate::model::SearchRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::SearchResponse>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::SearchResponse>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::SearchService::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::SearchService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }
}

/// Defines the trait used to implement [super::client::ServingConfigService].
///
/// Application developers may need to implement this trait to mock
/// `client::ServingConfigService`.  In other use-cases, application developers only
/// use `client::ServingConfigService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait ServingConfigService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::ServingConfigService::create_serving_config].
    fn create_serving_config(
        &self,
        _req: crate::model::CreateServingConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ServingConfig>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::ServingConfig>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::ServingConfigService::delete_serving_config].
    fn delete_serving_config(
        &self,
        _req: crate::model::DeleteServingConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::ServingConfigService::update_serving_config].
    fn update_serving_config(
        &self,
        _req: crate::model::UpdateServingConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ServingConfig>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::ServingConfig>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::ServingConfigService::get_serving_config].
    fn get_serving_config(
        &self,
        _req: crate::model::GetServingConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ServingConfig>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::ServingConfig>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::ServingConfigService::list_serving_configs].
    fn list_serving_configs(
        &self,
        _req: crate::model::ListServingConfigsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListServingConfigsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListServingConfigsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::ServingConfigService::add_control].
    fn add_control(
        &self,
        _req: crate::model::AddControlRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ServingConfig>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::ServingConfig>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::ServingConfigService::remove_control].
    fn remove_control(
        &self,
        _req: crate::model::RemoveControlRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ServingConfig>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::ServingConfig>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::ServingConfigService::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::ServingConfigService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }
}

/// Defines the trait used to implement [super::client::UserEventService].
///
/// Application developers may need to implement this trait to mock
/// `client::UserEventService`.  In other use-cases, application developers only
/// use `client::UserEventService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait UserEventService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::UserEventService::write_user_event].
    fn write_user_event(
        &self,
        _req: crate::model::WriteUserEventRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::UserEvent>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::UserEvent>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::UserEventService::collect_user_event].
    fn collect_user_event(
        &self,
        _req: crate::model::CollectUserEventRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<api::model::HttpBody>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<api::model::HttpBody>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::UserEventService::purge_user_events].
    fn purge_user_events(
        &self,
        _req: crate::model::PurgeUserEventsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::UserEventService::import_user_events].
    fn import_user_events(
        &self,
        _req: crate::model::ImportUserEventsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::UserEventService::rejoin_user_events].
    fn rejoin_user_events(
        &self,
        _req: crate::model::RejoinUserEventsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::UserEventService::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::UserEventService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Returns the polling error policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_error_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        std::sync::Arc::new(gax::polling_error_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        std::sync::Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}
