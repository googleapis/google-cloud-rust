// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Google Cloud Client Libraries for Rust - Vertex AI API
//!
//! **WARNING:** this crate is under active development. We expect multiple
//! breaking changes in the upcoming releases. Testing is also incomplete, we do
//! **not** recommend that you use this crate in production. We welcome feedback
//! about the APIs, documentation, missing features, bugs, etc.
//!
//! This crate contains traits, types, and functions to interact with Vertex AI API
//! Most applications will use the structs defined in the [client] module.
//! More specifically:
//!
//! * [DatasetService](client/struct.DatasetService.html)
//! * [DeploymentResourcePoolService](client/struct.DeploymentResourcePoolService.html)
//! * [EndpointService](client/struct.EndpointService.html)
//! * [EvaluationService](client/struct.EvaluationService.html)
//! * [FeatureOnlineStoreAdminService](client/struct.FeatureOnlineStoreAdminService.html)
//! * [FeatureOnlineStoreService](client/struct.FeatureOnlineStoreService.html)
//! * [FeatureRegistryService](client/struct.FeatureRegistryService.html)
//! * [FeaturestoreOnlineServingService](client/struct.FeaturestoreOnlineServingService.html)
//! * [FeaturestoreService](client/struct.FeaturestoreService.html)
//! * [GenAiCacheService](client/struct.GenAiCacheService.html)
//! * [GenAiTuningService](client/struct.GenAiTuningService.html)
//! * [IndexEndpointService](client/struct.IndexEndpointService.html)
//! * [IndexService](client/struct.IndexService.html)
//! * [JobService](client/struct.JobService.html)
//! * [LlmUtilityService](client/struct.LlmUtilityService.html)
//! * [MatchService](client/struct.MatchService.html)
//! * [MetadataService](client/struct.MetadataService.html)
//! * [MigrationService](client/struct.MigrationService.html)
//! * [ModelGardenService](client/struct.ModelGardenService.html)
//! * [ModelService](client/struct.ModelService.html)
//! * [NotebookService](client/struct.NotebookService.html)
//! * [PersistentResourceService](client/struct.PersistentResourceService.html)
//! * [PipelineService](client/struct.PipelineService.html)
//! * [PredictionService](client/struct.PredictionService.html)
//! * [ReasoningEngineExecutionService](client/struct.ReasoningEngineExecutionService.html)
//! * [ReasoningEngineService](client/struct.ReasoningEngineService.html)
//! * [ScheduleService](client/struct.ScheduleService.html)
//! * [SpecialistPoolService](client/struct.SpecialistPoolService.html)
//! * [TensorboardService](client/struct.TensorboardService.html)
//! * [VertexRagDataService](client/struct.VertexRagDataService.html)
//! * [VertexRagService](client/struct.VertexRagService.html)
//! * [VizierService](client/struct.VizierService.html)

/// The messages and enums that are part of this client library.
#[allow(clippy::module_inception)]
pub mod model;

pub use gax::Result;
pub use gax::error::Error;

#[allow(rustdoc::invalid_html_tags)]
#[allow(rustdoc::redundant_explicit_links)]
pub mod stub;

/// Concrete implementations of this client library traits.
pub mod client;

/// Request builders.
pub mod builder;

#[doc(hidden)]
pub(crate) mod tracing;

#[doc(hidden)]
pub(crate) mod transport;

/// The default host used by the service.
#[cfg(any(
    feature = "dataset_service",
    feature = "deployment_resource_pool_service",
    feature = "endpoint_service",
    feature = "evaluation_service",
    feature = "feature_online_store_admin_service",
    feature = "feature_online_store_service",
    feature = "feature_registry_service",
    feature = "featurestore_online_serving_service",
    feature = "featurestore_service",
    feature = "gen_ai_cache_service",
    feature = "gen_ai_tuning_service",
    feature = "index_endpoint_service",
    feature = "index_service",
    feature = "job_service",
    feature = "llm_utility_service",
    feature = "match_service",
    feature = "metadata_service",
    feature = "migration_service",
    feature = "model_garden_service",
    feature = "model_service",
    feature = "notebook_service",
    feature = "persistent_resource_service",
    feature = "pipeline_service",
    feature = "prediction_service",
    feature = "reasoning_engine_execution_service",
    feature = "reasoning_engine_service",
    feature = "schedule_service",
    feature = "specialist_pool_service",
    feature = "tensorboard_service",
    feature = "vertex_rag_data_service",
    feature = "vertex_rag_service",
    feature = "vizier_service",
))]
const DEFAULT_HOST: &str = "https://aiplatform.googleapis.com/";

#[cfg(any(
    feature = "dataset_service",
    feature = "deployment_resource_pool_service",
    feature = "endpoint_service",
    feature = "evaluation_service",
    feature = "feature_online_store_admin_service",
    feature = "feature_online_store_service",
    feature = "feature_registry_service",
    feature = "featurestore_online_serving_service",
    feature = "featurestore_service",
    feature = "gen_ai_cache_service",
    feature = "gen_ai_tuning_service",
    feature = "index_endpoint_service",
    feature = "index_service",
    feature = "job_service",
    feature = "llm_utility_service",
    feature = "match_service",
    feature = "metadata_service",
    feature = "migration_service",
    feature = "model_garden_service",
    feature = "model_service",
    feature = "notebook_service",
    feature = "persistent_resource_service",
    feature = "pipeline_service",
    feature = "prediction_service",
    feature = "reasoning_engine_execution_service",
    feature = "reasoning_engine_service",
    feature = "schedule_service",
    feature = "specialist_pool_service",
    feature = "tensorboard_service",
    feature = "vertex_rag_data_service",
    feature = "vertex_rag_service",
    feature = "vizier_service",
))]
pub(crate) mod info {
    const NAME: &str = env!("CARGO_PKG_NAME");
    const VERSION: &str = env!("CARGO_PKG_VERSION");
    lazy_static::lazy_static! {
        pub(crate) static ref X_GOOG_API_CLIENT_HEADER: String = {
            let ac = gaxi::api_header::XGoogApiClient{
                name:          NAME,
                version:       VERSION,
                library_type:  gaxi::api_header::GAPIC,
            };
            ac.header_value()
        };
    }
}

pub use lro::Poller;
pub use lro::PollingResult;
