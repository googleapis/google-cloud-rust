// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![allow(rustdoc::invalid_html_tags)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// The service that manages Vertex AI Dataset and its child resources.
///
/// # Configuration
///
/// `DatasetService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `DatasetService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `DatasetService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct DatasetService {
    inner: Arc<dyn crate::stubs::dynamic::DatasetService>,
}

impl DatasetService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::DatasetService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::DatasetService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::DatasetService> {
        crate::transport::DatasetService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::DatasetService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::DatasetService::new)
    }

    /// Creates a Dataset.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_dataset(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::CreateDataset {
        crate::builders::dataset_service::CreateDataset::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a Dataset.
    pub fn get_dataset(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::GetDataset {
        crate::builders::dataset_service::GetDataset::new(self.inner.clone()).set_name(name.into())
    }

    /// Updates a Dataset.
    pub fn update_dataset(
        &self,
        dataset: impl Into<crate::model::Dataset>,
    ) -> crate::builders::dataset_service::UpdateDataset {
        crate::builders::dataset_service::UpdateDataset::new(self.inner.clone())
            .set_dataset(dataset.into())
    }

    /// Lists Datasets in a Location.
    pub fn list_datasets(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::ListDatasets {
        crate::builders::dataset_service::ListDatasets::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a Dataset.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_dataset(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::DeleteDataset {
        crate::builders::dataset_service::DeleteDataset::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Imports data into a Dataset.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn import_data(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::ImportData {
        crate::builders::dataset_service::ImportData::new(self.inner.clone()).set_name(name.into())
    }

    /// Exports data from a Dataset.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn export_data(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::ExportData {
        crate::builders::dataset_service::ExportData::new(self.inner.clone()).set_name(name.into())
    }

    /// Create a version from a Dataset.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_dataset_version(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::CreateDatasetVersion {
        crate::builders::dataset_service::CreateDatasetVersion::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a DatasetVersion.
    pub fn update_dataset_version(
        &self,
        dataset_version: impl Into<crate::model::DatasetVersion>,
    ) -> crate::builders::dataset_service::UpdateDatasetVersion {
        crate::builders::dataset_service::UpdateDatasetVersion::new(self.inner.clone())
            .set_dataset_version(dataset_version.into())
    }

    /// Deletes a Dataset version.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_dataset_version(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::DeleteDatasetVersion {
        crate::builders::dataset_service::DeleteDatasetVersion::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets a Dataset version.
    pub fn get_dataset_version(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::GetDatasetVersion {
        crate::builders::dataset_service::GetDatasetVersion::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists DatasetVersions in a Dataset.
    pub fn list_dataset_versions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::ListDatasetVersions {
        crate::builders::dataset_service::ListDatasetVersions::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Restores a dataset version.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn restore_dataset_version(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::RestoreDatasetVersion {
        crate::builders::dataset_service::RestoreDatasetVersion::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists DataItems in a Dataset.
    pub fn list_data_items(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::ListDataItems {
        crate::builders::dataset_service::ListDataItems::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Searches DataItems in a Dataset.
    pub fn search_data_items(
        &self,
        dataset: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::SearchDataItems {
        crate::builders::dataset_service::SearchDataItems::new(self.inner.clone())
            .set_dataset(dataset.into())
    }

    /// Lists SavedQueries in a Dataset.
    pub fn list_saved_queries(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::ListSavedQueries {
        crate::builders::dataset_service::ListSavedQueries::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a SavedQuery.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_saved_query(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::DeleteSavedQuery {
        crate::builders::dataset_service::DeleteSavedQuery::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets an AnnotationSpec.
    pub fn get_annotation_spec(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::GetAnnotationSpec {
        crate::builders::dataset_service::GetAnnotationSpec::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists Annotations belongs to a dataitem
    /// This RPC is only available in InternalDatasetService. It is only used for
    /// exporting conversation data to CCAI Insights.
    pub fn list_annotations(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::ListAnnotations {
        crate::builders::dataset_service::ListAnnotations::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::ListLocations {
        crate::builders::dataset_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::GetLocation {
        crate::builders::dataset_service::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::SetIamPolicy {
        crate::builders::dataset_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::GetIamPolicy {
        crate::builders::dataset_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::TestIamPermissions {
        crate::builders::dataset_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::ListOperations {
        crate::builders::dataset_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::GetOperation {
        crate::builders::dataset_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::DeleteOperation {
        crate::builders::dataset_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::CancelOperation {
        crate::builders::dataset_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataset_service::WaitOperation {
        crate::builders::dataset_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// A service that manages the DeploymentResourcePool resource.
///
/// # Configuration
///
/// `DeploymentResourcePoolService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `DeploymentResourcePoolService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `DeploymentResourcePoolService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct DeploymentResourcePoolService {
    inner: Arc<dyn crate::stubs::dynamic::DeploymentResourcePoolService>,
}

impl DeploymentResourcePoolService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::DeploymentResourcePoolService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::DeploymentResourcePoolService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::DeploymentResourcePoolService> {
        crate::transport::DeploymentResourcePoolService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::DeploymentResourcePoolService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::DeploymentResourcePoolService::new)
    }

    /// Create a DeploymentResourcePool.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_deployment_resource_pool(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::deployment_resource_pool_service::CreateDeploymentResourcePool {
        crate::builders::deployment_resource_pool_service::CreateDeploymentResourcePool::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Get a DeploymentResourcePool.
    pub fn get_deployment_resource_pool(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::deployment_resource_pool_service::GetDeploymentResourcePool {
        crate::builders::deployment_resource_pool_service::GetDeploymentResourcePool::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// List DeploymentResourcePools in a location.
    pub fn list_deployment_resource_pools(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::deployment_resource_pool_service::ListDeploymentResourcePools {
        crate::builders::deployment_resource_pool_service::ListDeploymentResourcePools::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Update a DeploymentResourcePool.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_deployment_resource_pool(
        &self,
        deployment_resource_pool: impl Into<crate::model::DeploymentResourcePool>,
    ) -> crate::builders::deployment_resource_pool_service::UpdateDeploymentResourcePool {
        crate::builders::deployment_resource_pool_service::UpdateDeploymentResourcePool::new(
            self.inner.clone(),
        )
        .set_deployment_resource_pool(deployment_resource_pool.into())
    }

    /// Delete a DeploymentResourcePool.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_deployment_resource_pool(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::deployment_resource_pool_service::DeleteDeploymentResourcePool {
        crate::builders::deployment_resource_pool_service::DeleteDeploymentResourcePool::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// List DeployedModels that have been deployed on this DeploymentResourcePool.
    pub fn query_deployed_models(
        &self,
        deployment_resource_pool: impl Into<std::string::String>,
    ) -> crate::builders::deployment_resource_pool_service::QueryDeployedModels {
        crate::builders::deployment_resource_pool_service::QueryDeployedModels::new(
            self.inner.clone(),
        )
        .set_deployment_resource_pool(deployment_resource_pool.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::deployment_resource_pool_service::ListLocations {
        crate::builders::deployment_resource_pool_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::deployment_resource_pool_service::GetLocation {
        crate::builders::deployment_resource_pool_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::deployment_resource_pool_service::SetIamPolicy {
        crate::builders::deployment_resource_pool_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::deployment_resource_pool_service::GetIamPolicy {
        crate::builders::deployment_resource_pool_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::deployment_resource_pool_service::TestIamPermissions {
        crate::builders::deployment_resource_pool_service::TestIamPermissions::new(
            self.inner.clone(),
        )
        .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::deployment_resource_pool_service::ListOperations {
        crate::builders::deployment_resource_pool_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::deployment_resource_pool_service::GetOperation {
        crate::builders::deployment_resource_pool_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::deployment_resource_pool_service::DeleteOperation {
        crate::builders::deployment_resource_pool_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::deployment_resource_pool_service::CancelOperation {
        crate::builders::deployment_resource_pool_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::deployment_resource_pool_service::WaitOperation {
        crate::builders::deployment_resource_pool_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// A service for managing Vertex AI's Endpoints.
///
/// # Configuration
///
/// `EndpointService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `EndpointService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `EndpointService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct EndpointService {
    inner: Arc<dyn crate::stubs::dynamic::EndpointService>,
}

impl EndpointService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::EndpointService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::EndpointService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::EndpointService> {
        crate::transport::EndpointService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::EndpointService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::EndpointService::new)
    }

    /// Creates an Endpoint.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_endpoint(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::endpoint_service::CreateEndpoint {
        crate::builders::endpoint_service::CreateEndpoint::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets an Endpoint.
    pub fn get_endpoint(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::endpoint_service::GetEndpoint {
        crate::builders::endpoint_service::GetEndpoint::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists Endpoints in a Location.
    pub fn list_endpoints(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::endpoint_service::ListEndpoints {
        crate::builders::endpoint_service::ListEndpoints::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates an Endpoint.
    pub fn update_endpoint(
        &self,
        endpoint: impl Into<crate::model::Endpoint>,
    ) -> crate::builders::endpoint_service::UpdateEndpoint {
        crate::builders::endpoint_service::UpdateEndpoint::new(self.inner.clone())
            .set_endpoint(endpoint.into())
    }

    /// Updates an Endpoint with a long running operation.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_endpoint_long_running(
        &self,
        endpoint: impl Into<crate::model::Endpoint>,
    ) -> crate::builders::endpoint_service::UpdateEndpointLongRunning {
        crate::builders::endpoint_service::UpdateEndpointLongRunning::new(self.inner.clone())
            .set_endpoint(endpoint.into())
    }

    /// Deletes an Endpoint.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_endpoint(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::endpoint_service::DeleteEndpoint {
        crate::builders::endpoint_service::DeleteEndpoint::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deploys a Model into this Endpoint, creating a DeployedModel within it.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn deploy_model(
        &self,
        endpoint: impl Into<std::string::String>,
    ) -> crate::builders::endpoint_service::DeployModel {
        crate::builders::endpoint_service::DeployModel::new(self.inner.clone())
            .set_endpoint(endpoint.into())
    }

    /// Undeploys a Model from an Endpoint, removing a DeployedModel from it, and
    /// freeing all resources it's using.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn undeploy_model(
        &self,
        endpoint: impl Into<std::string::String>,
    ) -> crate::builders::endpoint_service::UndeployModel {
        crate::builders::endpoint_service::UndeployModel::new(self.inner.clone())
            .set_endpoint(endpoint.into())
    }

    /// Updates an existing deployed model. Updatable fields include
    /// `min_replica_count`, `max_replica_count`, `autoscaling_metric_specs`,
    /// `disable_container_logging` (v1 only), and `enable_container_logging`
    /// (v1beta1 only).
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn mutate_deployed_model(
        &self,
        endpoint: impl Into<std::string::String>,
    ) -> crate::builders::endpoint_service::MutateDeployedModel {
        crate::builders::endpoint_service::MutateDeployedModel::new(self.inner.clone())
            .set_endpoint(endpoint.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::endpoint_service::ListLocations {
        crate::builders::endpoint_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::endpoint_service::GetLocation {
        crate::builders::endpoint_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::endpoint_service::SetIamPolicy {
        crate::builders::endpoint_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::endpoint_service::GetIamPolicy {
        crate::builders::endpoint_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::endpoint_service::TestIamPermissions {
        crate::builders::endpoint_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::endpoint_service::ListOperations {
        crate::builders::endpoint_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::endpoint_service::GetOperation {
        crate::builders::endpoint_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::endpoint_service::DeleteOperation {
        crate::builders::endpoint_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::endpoint_service::CancelOperation {
        crate::builders::endpoint_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::endpoint_service::WaitOperation {
        crate::builders::endpoint_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// Vertex AI Online Evaluation Service.
///
/// # Configuration
///
/// `EvaluationService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `EvaluationService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `EvaluationService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct EvaluationService {
    inner: Arc<dyn crate::stubs::dynamic::EvaluationService>,
}

impl EvaluationService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::EvaluationService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::EvaluationService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::EvaluationService> {
        crate::transport::EvaluationService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::EvaluationService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::EvaluationService::new)
    }

    /// Evaluates instances based on a given metric.
    pub fn evaluate_instances(
        &self,
        location: impl Into<std::string::String>,
    ) -> crate::builders::evaluation_service::EvaluateInstances {
        crate::builders::evaluation_service::EvaluateInstances::new(self.inner.clone())
            .set_location(location.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::evaluation_service::ListLocations {
        crate::builders::evaluation_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::evaluation_service::GetLocation {
        crate::builders::evaluation_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::evaluation_service::SetIamPolicy {
        crate::builders::evaluation_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::evaluation_service::GetIamPolicy {
        crate::builders::evaluation_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::evaluation_service::TestIamPermissions {
        crate::builders::evaluation_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::evaluation_service::ListOperations {
        crate::builders::evaluation_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::evaluation_service::GetOperation {
        crate::builders::evaluation_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::evaluation_service::DeleteOperation {
        crate::builders::evaluation_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::evaluation_service::CancelOperation {
        crate::builders::evaluation_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::evaluation_service::WaitOperation {
        crate::builders::evaluation_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// The service that handles CRUD and List for resources for
/// FeatureOnlineStore.
///
/// # Configuration
///
/// `FeatureOnlineStoreAdminService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `FeatureOnlineStoreAdminService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `FeatureOnlineStoreAdminService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct FeatureOnlineStoreAdminService {
    inner: Arc<dyn crate::stubs::dynamic::FeatureOnlineStoreAdminService>,
}

impl FeatureOnlineStoreAdminService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::FeatureOnlineStoreAdminService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::FeatureOnlineStoreAdminService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::FeatureOnlineStoreAdminService> {
        crate::transport::FeatureOnlineStoreAdminService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::FeatureOnlineStoreAdminService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::FeatureOnlineStoreAdminService::new)
    }

    /// Creates a new FeatureOnlineStore in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_feature_online_store(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_admin_service::CreateFeatureOnlineStore {
        crate::builders::feature_online_store_admin_service::CreateFeatureOnlineStore::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Gets details of a single FeatureOnlineStore.
    pub fn get_feature_online_store(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_admin_service::GetFeatureOnlineStore {
        crate::builders::feature_online_store_admin_service::GetFeatureOnlineStore::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Lists FeatureOnlineStores in a given project and location.
    pub fn list_feature_online_stores(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_admin_service::ListFeatureOnlineStores {
        crate::builders::feature_online_store_admin_service::ListFeatureOnlineStores::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Updates the parameters of a single FeatureOnlineStore.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_feature_online_store(
        &self,
        feature_online_store: impl Into<crate::model::FeatureOnlineStore>,
    ) -> crate::builders::feature_online_store_admin_service::UpdateFeatureOnlineStore {
        crate::builders::feature_online_store_admin_service::UpdateFeatureOnlineStore::new(
            self.inner.clone(),
        )
        .set_feature_online_store(feature_online_store.into())
    }

    /// Deletes a single FeatureOnlineStore. The FeatureOnlineStore must not
    /// contain any FeatureViews.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_feature_online_store(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_admin_service::DeleteFeatureOnlineStore {
        crate::builders::feature_online_store_admin_service::DeleteFeatureOnlineStore::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Creates a new FeatureView in a given FeatureOnlineStore.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_feature_view(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_admin_service::CreateFeatureView {
        crate::builders::feature_online_store_admin_service::CreateFeatureView::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Gets details of a single FeatureView.
    pub fn get_feature_view(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_admin_service::GetFeatureView {
        crate::builders::feature_online_store_admin_service::GetFeatureView::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists FeatureViews in a given FeatureOnlineStore.
    pub fn list_feature_views(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_admin_service::ListFeatureViews {
        crate::builders::feature_online_store_admin_service::ListFeatureViews::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Updates the parameters of a single FeatureView.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_feature_view(
        &self,
        feature_view: impl Into<crate::model::FeatureView>,
    ) -> crate::builders::feature_online_store_admin_service::UpdateFeatureView {
        crate::builders::feature_online_store_admin_service::UpdateFeatureView::new(
            self.inner.clone(),
        )
        .set_feature_view(feature_view.into())
    }

    /// Deletes a single FeatureView.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_feature_view(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_admin_service::DeleteFeatureView {
        crate::builders::feature_online_store_admin_service::DeleteFeatureView::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Triggers on-demand sync for the FeatureView.
    pub fn sync_feature_view(
        &self,
        feature_view: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_admin_service::SyncFeatureView {
        crate::builders::feature_online_store_admin_service::SyncFeatureView::new(
            self.inner.clone(),
        )
        .set_feature_view(feature_view.into())
    }

    /// Gets details of a single FeatureViewSync.
    pub fn get_feature_view_sync(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_admin_service::GetFeatureViewSync {
        crate::builders::feature_online_store_admin_service::GetFeatureViewSync::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Lists FeatureViewSyncs in a given FeatureView.
    pub fn list_feature_view_syncs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_admin_service::ListFeatureViewSyncs {
        crate::builders::feature_online_store_admin_service::ListFeatureViewSyncs::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_admin_service::ListLocations {
        crate::builders::feature_online_store_admin_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_admin_service::GetLocation {
        crate::builders::feature_online_store_admin_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_admin_service::SetIamPolicy {
        crate::builders::feature_online_store_admin_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_admin_service::GetIamPolicy {
        crate::builders::feature_online_store_admin_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_admin_service::TestIamPermissions {
        crate::builders::feature_online_store_admin_service::TestIamPermissions::new(
            self.inner.clone(),
        )
        .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_admin_service::ListOperations {
        crate::builders::feature_online_store_admin_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_admin_service::GetOperation {
        crate::builders::feature_online_store_admin_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_admin_service::DeleteOperation {
        crate::builders::feature_online_store_admin_service::DeleteOperation::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_admin_service::CancelOperation {
        crate::builders::feature_online_store_admin_service::CancelOperation::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_admin_service::WaitOperation {
        crate::builders::feature_online_store_admin_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// A service for fetching feature values from the online store.
///
/// # Configuration
///
/// `FeatureOnlineStoreService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `FeatureOnlineStoreService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `FeatureOnlineStoreService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct FeatureOnlineStoreService {
    inner: Arc<dyn crate::stubs::dynamic::FeatureOnlineStoreService>,
}

impl FeatureOnlineStoreService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::FeatureOnlineStoreService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::FeatureOnlineStoreService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::FeatureOnlineStoreService> {
        crate::transport::FeatureOnlineStoreService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::FeatureOnlineStoreService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::FeatureOnlineStoreService::new)
    }

    /// Fetch feature values under a FeatureView.
    pub fn fetch_feature_values(
        &self,
        feature_view: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_service::FetchFeatureValues {
        crate::builders::feature_online_store_service::FetchFeatureValues::new(self.inner.clone())
            .set_feature_view(feature_view.into())
    }

    /// Search the nearest entities under a FeatureView.
    /// Search only works for indexable feature view; if a feature view isn't
    /// indexable, returns Invalid argument response.
    pub fn search_nearest_entities(
        &self,
        feature_view: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_service::SearchNearestEntities {
        crate::builders::feature_online_store_service::SearchNearestEntities::new(
            self.inner.clone(),
        )
        .set_feature_view(feature_view.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_service::ListLocations {
        crate::builders::feature_online_store_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_service::GetLocation {
        crate::builders::feature_online_store_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_service::SetIamPolicy {
        crate::builders::feature_online_store_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_service::GetIamPolicy {
        crate::builders::feature_online_store_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_service::TestIamPermissions {
        crate::builders::feature_online_store_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_service::ListOperations {
        crate::builders::feature_online_store_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_service::GetOperation {
        crate::builders::feature_online_store_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_service::DeleteOperation {
        crate::builders::feature_online_store_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_service::CancelOperation {
        crate::builders::feature_online_store_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_online_store_service::WaitOperation {
        crate::builders::feature_online_store_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// The service that handles CRUD and List for resources for
/// FeatureRegistry.
///
/// # Configuration
///
/// `FeatureRegistryService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `FeatureRegistryService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `FeatureRegistryService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct FeatureRegistryService {
    inner: Arc<dyn crate::stubs::dynamic::FeatureRegistryService>,
}

impl FeatureRegistryService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::FeatureRegistryService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::FeatureRegistryService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::FeatureRegistryService> {
        crate::transport::FeatureRegistryService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::FeatureRegistryService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::FeatureRegistryService::new)
    }

    /// Creates a new FeatureGroup in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_feature_group(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::feature_registry_service::CreateFeatureGroup {
        crate::builders::feature_registry_service::CreateFeatureGroup::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single FeatureGroup.
    pub fn get_feature_group(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_registry_service::GetFeatureGroup {
        crate::builders::feature_registry_service::GetFeatureGroup::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists FeatureGroups in a given project and location.
    pub fn list_feature_groups(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::feature_registry_service::ListFeatureGroups {
        crate::builders::feature_registry_service::ListFeatureGroups::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of a single FeatureGroup.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_feature_group(
        &self,
        feature_group: impl Into<crate::model::FeatureGroup>,
    ) -> crate::builders::feature_registry_service::UpdateFeatureGroup {
        crate::builders::feature_registry_service::UpdateFeatureGroup::new(self.inner.clone())
            .set_feature_group(feature_group.into())
    }

    /// Deletes a single FeatureGroup.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_feature_group(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_registry_service::DeleteFeatureGroup {
        crate::builders::feature_registry_service::DeleteFeatureGroup::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new Feature in a given FeatureGroup.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_feature(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::feature_registry_service::CreateFeature {
        crate::builders::feature_registry_service::CreateFeature::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a batch of Features in a given FeatureGroup.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_create_features(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::feature_registry_service::BatchCreateFeatures {
        crate::builders::feature_registry_service::BatchCreateFeatures::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single Feature.
    pub fn get_feature(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_registry_service::GetFeature {
        crate::builders::feature_registry_service::GetFeature::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists Features in a given FeatureGroup.
    pub fn list_features(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::feature_registry_service::ListFeatures {
        crate::builders::feature_registry_service::ListFeatures::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of a single Feature.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_feature(
        &self,
        feature: impl Into<crate::model::Feature>,
    ) -> crate::builders::feature_registry_service::UpdateFeature {
        crate::builders::feature_registry_service::UpdateFeature::new(self.inner.clone())
            .set_feature(feature.into())
    }

    /// Deletes a single Feature.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_feature(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_registry_service::DeleteFeature {
        crate::builders::feature_registry_service::DeleteFeature::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_registry_service::ListLocations {
        crate::builders::feature_registry_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_registry_service::GetLocation {
        crate::builders::feature_registry_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::feature_registry_service::SetIamPolicy {
        crate::builders::feature_registry_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::feature_registry_service::GetIamPolicy {
        crate::builders::feature_registry_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::feature_registry_service::TestIamPermissions {
        crate::builders::feature_registry_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_registry_service::ListOperations {
        crate::builders::feature_registry_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_registry_service::GetOperation {
        crate::builders::feature_registry_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_registry_service::DeleteOperation {
        crate::builders::feature_registry_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_registry_service::CancelOperation {
        crate::builders::feature_registry_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::feature_registry_service::WaitOperation {
        crate::builders::feature_registry_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// A service for serving online feature values.
///
/// # Configuration
///
/// `FeaturestoreOnlineServingService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `FeaturestoreOnlineServingService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `FeaturestoreOnlineServingService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct FeaturestoreOnlineServingService {
    inner: Arc<dyn crate::stubs::dynamic::FeaturestoreOnlineServingService>,
}

impl FeaturestoreOnlineServingService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::FeaturestoreOnlineServingService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::FeaturestoreOnlineServingService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::FeaturestoreOnlineServingService> {
        crate::transport::FeaturestoreOnlineServingService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::FeaturestoreOnlineServingService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::FeaturestoreOnlineServingService::new)
    }

    /// Reads Feature values of a specific entity of an EntityType. For reading
    /// feature values of multiple entities of an EntityType, please use
    /// StreamingReadFeatureValues.
    pub fn read_feature_values(
        &self,
        entity_type: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_online_serving_service::ReadFeatureValues {
        crate::builders::featurestore_online_serving_service::ReadFeatureValues::new(
            self.inner.clone(),
        )
        .set_entity_type(entity_type.into())
    }

    /// Writes Feature values of one or more entities of an EntityType.
    ///
    /// The Feature values are merged into existing entities if any. The Feature
    /// values to be written must have timestamp within the online storage
    /// retention.
    pub fn write_feature_values(
        &self,
        entity_type: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_online_serving_service::WriteFeatureValues {
        crate::builders::featurestore_online_serving_service::WriteFeatureValues::new(
            self.inner.clone(),
        )
        .set_entity_type(entity_type.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_online_serving_service::ListLocations {
        crate::builders::featurestore_online_serving_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_online_serving_service::GetLocation {
        crate::builders::featurestore_online_serving_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_online_serving_service::SetIamPolicy {
        crate::builders::featurestore_online_serving_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_online_serving_service::GetIamPolicy {
        crate::builders::featurestore_online_serving_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_online_serving_service::TestIamPermissions {
        crate::builders::featurestore_online_serving_service::TestIamPermissions::new(
            self.inner.clone(),
        )
        .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_online_serving_service::ListOperations {
        crate::builders::featurestore_online_serving_service::ListOperations::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_online_serving_service::GetOperation {
        crate::builders::featurestore_online_serving_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_online_serving_service::DeleteOperation {
        crate::builders::featurestore_online_serving_service::DeleteOperation::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_online_serving_service::CancelOperation {
        crate::builders::featurestore_online_serving_service::CancelOperation::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_online_serving_service::WaitOperation {
        crate::builders::featurestore_online_serving_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// The service that handles CRUD and List for resources for Featurestore.
///
/// # Configuration
///
/// `FeaturestoreService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `FeaturestoreService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `FeaturestoreService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct FeaturestoreService {
    inner: Arc<dyn crate::stubs::dynamic::FeaturestoreService>,
}

impl FeaturestoreService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::FeaturestoreService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::FeaturestoreService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::FeaturestoreService> {
        crate::transport::FeaturestoreService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::FeaturestoreService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::FeaturestoreService::new)
    }

    /// Creates a new Featurestore in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_featurestore(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::CreateFeaturestore {
        crate::builders::featurestore_service::CreateFeaturestore::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single Featurestore.
    pub fn get_featurestore(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::GetFeaturestore {
        crate::builders::featurestore_service::GetFeaturestore::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists Featurestores in a given project and location.
    pub fn list_featurestores(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::ListFeaturestores {
        crate::builders::featurestore_service::ListFeaturestores::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of a single Featurestore.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_featurestore(
        &self,
        featurestore: impl Into<crate::model::Featurestore>,
    ) -> crate::builders::featurestore_service::UpdateFeaturestore {
        crate::builders::featurestore_service::UpdateFeaturestore::new(self.inner.clone())
            .set_featurestore(featurestore.into())
    }

    /// Deletes a single Featurestore. The Featurestore must not contain any
    /// EntityTypes or `force` must be set to true for the request to succeed.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_featurestore(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::DeleteFeaturestore {
        crate::builders::featurestore_service::DeleteFeaturestore::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new EntityType in a given Featurestore.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_entity_type(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::CreateEntityType {
        crate::builders::featurestore_service::CreateEntityType::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single EntityType.
    pub fn get_entity_type(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::GetEntityType {
        crate::builders::featurestore_service::GetEntityType::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists EntityTypes in a given Featurestore.
    pub fn list_entity_types(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::ListEntityTypes {
        crate::builders::featurestore_service::ListEntityTypes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of a single EntityType.
    pub fn update_entity_type(
        &self,
        entity_type: impl Into<crate::model::EntityType>,
    ) -> crate::builders::featurestore_service::UpdateEntityType {
        crate::builders::featurestore_service::UpdateEntityType::new(self.inner.clone())
            .set_entity_type(entity_type.into())
    }

    /// Deletes a single EntityType. The EntityType must not have any Features
    /// or `force` must be set to true for the request to succeed.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_entity_type(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::DeleteEntityType {
        crate::builders::featurestore_service::DeleteEntityType::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new Feature in a given EntityType.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_feature(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::CreateFeature {
        crate::builders::featurestore_service::CreateFeature::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a batch of Features in a given EntityType.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_create_features(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::BatchCreateFeatures {
        crate::builders::featurestore_service::BatchCreateFeatures::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single Feature.
    pub fn get_feature(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::GetFeature {
        crate::builders::featurestore_service::GetFeature::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists Features in a given EntityType.
    pub fn list_features(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::ListFeatures {
        crate::builders::featurestore_service::ListFeatures::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of a single Feature.
    pub fn update_feature(
        &self,
        feature: impl Into<crate::model::Feature>,
    ) -> crate::builders::featurestore_service::UpdateFeature {
        crate::builders::featurestore_service::UpdateFeature::new(self.inner.clone())
            .set_feature(feature.into())
    }

    /// Deletes a single Feature.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_feature(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::DeleteFeature {
        crate::builders::featurestore_service::DeleteFeature::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Imports Feature values into the Featurestore from a source storage.
    ///
    /// The progress of the import is tracked by the returned operation. The
    /// imported features are guaranteed to be visible to subsequent read
    /// operations after the operation is marked as successfully done.
    ///
    /// If an import operation fails, the Feature values returned from
    /// reads and exports may be inconsistent. If consistency is
    /// required, the caller must retry the same import request again and wait till
    /// the new operation returned is marked as successfully done.
    ///
    /// There are also scenarios where the caller can cause inconsistency.
    ///
    /// - Source data for import contains multiple distinct Feature values for
    ///   the same entity ID and timestamp.
    /// - Source is modified during an import. This includes adding, updating, or
    ///   removing source data and/or metadata. Examples of updating metadata
    ///   include but are not limited to changing storage location, storage class,
    ///   or retention policy.
    /// - Online serving cluster is under-provisioned.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn import_feature_values(
        &self,
        entity_type: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::ImportFeatureValues {
        crate::builders::featurestore_service::ImportFeatureValues::new(self.inner.clone())
            .set_entity_type(entity_type.into())
    }

    /// Batch reads Feature values from a Featurestore.
    ///
    /// This API enables batch reading Feature values, where each read
    /// instance in the batch may read Feature values of entities from one or
    /// more EntityTypes. Point-in-time correctness is guaranteed for Feature
    /// values of each read instance as of each instance's read timestamp.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_read_feature_values(
        &self,
        featurestore: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::BatchReadFeatureValues {
        crate::builders::featurestore_service::BatchReadFeatureValues::new(self.inner.clone())
            .set_featurestore(featurestore.into())
    }

    /// Exports Feature values from all the entities of a target EntityType.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn export_feature_values(
        &self,
        entity_type: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::ExportFeatureValues {
        crate::builders::featurestore_service::ExportFeatureValues::new(self.inner.clone())
            .set_entity_type(entity_type.into())
    }

    /// Delete Feature values from Featurestore.
    ///
    /// The progress of the deletion is tracked by the returned operation. The
    /// deleted feature values are guaranteed to be invisible to subsequent read
    /// operations after the operation is marked as successfully done.
    ///
    /// If a delete feature values operation fails, the feature values
    /// returned from reads and exports may be inconsistent. If consistency is
    /// required, the caller must retry the same delete request again and wait till
    /// the new operation returned is marked as successfully done.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_feature_values(
        &self,
        entity_type: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::DeleteFeatureValues {
        crate::builders::featurestore_service::DeleteFeatureValues::new(self.inner.clone())
            .set_entity_type(entity_type.into())
    }

    /// Searches Features matching a query in a given project.
    pub fn search_features(
        &self,
        location: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::SearchFeatures {
        crate::builders::featurestore_service::SearchFeatures::new(self.inner.clone())
            .set_location(location.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::ListLocations {
        crate::builders::featurestore_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::GetLocation {
        crate::builders::featurestore_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::SetIamPolicy {
        crate::builders::featurestore_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::GetIamPolicy {
        crate::builders::featurestore_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::TestIamPermissions {
        crate::builders::featurestore_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::ListOperations {
        crate::builders::featurestore_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::GetOperation {
        crate::builders::featurestore_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::DeleteOperation {
        crate::builders::featurestore_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::CancelOperation {
        crate::builders::featurestore_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::featurestore_service::WaitOperation {
        crate::builders::featurestore_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// Service for managing Vertex AI's CachedContent resource.
///
/// # Configuration
///
/// `GenAiCacheService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `GenAiCacheService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `GenAiCacheService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct GenAiCacheService {
    inner: Arc<dyn crate::stubs::dynamic::GenAiCacheService>,
}

impl GenAiCacheService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::GenAiCacheService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::GenAiCacheService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::GenAiCacheService> {
        crate::transport::GenAiCacheService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::GenAiCacheService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::GenAiCacheService::new)
    }

    /// Creates cached content, this call will initialize the cached content in the
    /// data storage, and users need to pay for the cache data storage.
    pub fn create_cached_content(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_cache_service::CreateCachedContent {
        crate::builders::gen_ai_cache_service::CreateCachedContent::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets cached content configurations
    pub fn get_cached_content(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_cache_service::GetCachedContent {
        crate::builders::gen_ai_cache_service::GetCachedContent::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates cached content configurations
    pub fn update_cached_content(
        &self,
        cached_content: impl Into<crate::model::CachedContent>,
    ) -> crate::builders::gen_ai_cache_service::UpdateCachedContent {
        crate::builders::gen_ai_cache_service::UpdateCachedContent::new(self.inner.clone())
            .set_cached_content(cached_content.into())
    }

    /// Deletes cached content
    pub fn delete_cached_content(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_cache_service::DeleteCachedContent {
        crate::builders::gen_ai_cache_service::DeleteCachedContent::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists cached contents in a project
    pub fn list_cached_contents(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_cache_service::ListCachedContents {
        crate::builders::gen_ai_cache_service::ListCachedContents::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_cache_service::ListLocations {
        crate::builders::gen_ai_cache_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_cache_service::GetLocation {
        crate::builders::gen_ai_cache_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_cache_service::SetIamPolicy {
        crate::builders::gen_ai_cache_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_cache_service::GetIamPolicy {
        crate::builders::gen_ai_cache_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_cache_service::TestIamPermissions {
        crate::builders::gen_ai_cache_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_cache_service::ListOperations {
        crate::builders::gen_ai_cache_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_cache_service::GetOperation {
        crate::builders::gen_ai_cache_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_cache_service::DeleteOperation {
        crate::builders::gen_ai_cache_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_cache_service::CancelOperation {
        crate::builders::gen_ai_cache_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_cache_service::WaitOperation {
        crate::builders::gen_ai_cache_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// A service for creating and managing GenAI Tuning Jobs.
///
/// # Configuration
///
/// `GenAiTuningService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `GenAiTuningService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `GenAiTuningService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct GenAiTuningService {
    inner: Arc<dyn crate::stubs::dynamic::GenAiTuningService>,
}

impl GenAiTuningService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::GenAiTuningService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::GenAiTuningService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::GenAiTuningService> {
        crate::transport::GenAiTuningService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::GenAiTuningService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::GenAiTuningService::new)
    }

    /// Creates a TuningJob. A created TuningJob right away will be attempted to
    /// be run.
    pub fn create_tuning_job(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_tuning_service::CreateTuningJob {
        crate::builders::gen_ai_tuning_service::CreateTuningJob::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a TuningJob.
    pub fn get_tuning_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_tuning_service::GetTuningJob {
        crate::builders::gen_ai_tuning_service::GetTuningJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists TuningJobs in a Location.
    pub fn list_tuning_jobs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_tuning_service::ListTuningJobs {
        crate::builders::gen_ai_tuning_service::ListTuningJobs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Cancels a TuningJob.
    /// Starts asynchronous cancellation on the TuningJob. The server makes a best
    /// effort to cancel the job, but success is not guaranteed. Clients can use
    /// [GenAiTuningService.GetTuningJob][google.cloud.aiplatform.v1.GenAiTuningService.GetTuningJob]
    /// or other methods to check whether the cancellation succeeded or whether the
    /// job completed despite cancellation. On successful cancellation, the
    /// TuningJob is not deleted; instead it becomes a job with a
    /// [TuningJob.error][google.cloud.aiplatform.v1.TuningJob.error] value with a
    /// [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
    /// `Code.CANCELLED`, and
    /// [TuningJob.state][google.cloud.aiplatform.v1.TuningJob.state] is set to
    /// `CANCELLED`.
    ///
    /// [google.cloud.aiplatform.v1.GenAiTuningService.GetTuningJob]: crate::client::GenAiTuningService::get_tuning_job
    /// [google.cloud.aiplatform.v1.TuningJob.error]: crate::model::TuningJob::error
    /// [google.cloud.aiplatform.v1.TuningJob.state]: crate::model::TuningJob::state
    /// [google.rpc.Status.code]: rpc::model::Status::code
    pub fn cancel_tuning_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_tuning_service::CancelTuningJob {
        crate::builders::gen_ai_tuning_service::CancelTuningJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Rebase a TunedModel.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn rebase_tuned_model(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_tuning_service::RebaseTunedModel {
        crate::builders::gen_ai_tuning_service::RebaseTunedModel::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_tuning_service::ListLocations {
        crate::builders::gen_ai_tuning_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_tuning_service::GetLocation {
        crate::builders::gen_ai_tuning_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_tuning_service::SetIamPolicy {
        crate::builders::gen_ai_tuning_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_tuning_service::GetIamPolicy {
        crate::builders::gen_ai_tuning_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_tuning_service::TestIamPermissions {
        crate::builders::gen_ai_tuning_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_tuning_service::ListOperations {
        crate::builders::gen_ai_tuning_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_tuning_service::GetOperation {
        crate::builders::gen_ai_tuning_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_tuning_service::DeleteOperation {
        crate::builders::gen_ai_tuning_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_tuning_service::CancelOperation {
        crate::builders::gen_ai_tuning_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gen_ai_tuning_service::WaitOperation {
        crate::builders::gen_ai_tuning_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// A service for managing Vertex AI's IndexEndpoints.
///
/// # Configuration
///
/// `IndexEndpointService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `IndexEndpointService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `IndexEndpointService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct IndexEndpointService {
    inner: Arc<dyn crate::stubs::dynamic::IndexEndpointService>,
}

impl IndexEndpointService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::IndexEndpointService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::IndexEndpointService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::IndexEndpointService> {
        crate::transport::IndexEndpointService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::IndexEndpointService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::IndexEndpointService::new)
    }

    /// Creates an IndexEndpoint.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_index_endpoint(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::index_endpoint_service::CreateIndexEndpoint {
        crate::builders::index_endpoint_service::CreateIndexEndpoint::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets an IndexEndpoint.
    pub fn get_index_endpoint(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::index_endpoint_service::GetIndexEndpoint {
        crate::builders::index_endpoint_service::GetIndexEndpoint::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists IndexEndpoints in a Location.
    pub fn list_index_endpoints(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::index_endpoint_service::ListIndexEndpoints {
        crate::builders::index_endpoint_service::ListIndexEndpoints::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates an IndexEndpoint.
    pub fn update_index_endpoint(
        &self,
        index_endpoint: impl Into<crate::model::IndexEndpoint>,
    ) -> crate::builders::index_endpoint_service::UpdateIndexEndpoint {
        crate::builders::index_endpoint_service::UpdateIndexEndpoint::new(self.inner.clone())
            .set_index_endpoint(index_endpoint.into())
    }

    /// Deletes an IndexEndpoint.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_index_endpoint(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::index_endpoint_service::DeleteIndexEndpoint {
        crate::builders::index_endpoint_service::DeleteIndexEndpoint::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deploys an Index into this IndexEndpoint, creating a DeployedIndex within
    /// it.
    /// Only non-empty Indexes can be deployed.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn deploy_index(
        &self,
        index_endpoint: impl Into<std::string::String>,
    ) -> crate::builders::index_endpoint_service::DeployIndex {
        crate::builders::index_endpoint_service::DeployIndex::new(self.inner.clone())
            .set_index_endpoint(index_endpoint.into())
    }

    /// Undeploys an Index from an IndexEndpoint, removing a DeployedIndex from it,
    /// and freeing all resources it's using.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn undeploy_index(
        &self,
        index_endpoint: impl Into<std::string::String>,
    ) -> crate::builders::index_endpoint_service::UndeployIndex {
        crate::builders::index_endpoint_service::UndeployIndex::new(self.inner.clone())
            .set_index_endpoint(index_endpoint.into())
    }

    /// Update an existing DeployedIndex under an IndexEndpoint.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn mutate_deployed_index(
        &self,
        index_endpoint: impl Into<std::string::String>,
    ) -> crate::builders::index_endpoint_service::MutateDeployedIndex {
        crate::builders::index_endpoint_service::MutateDeployedIndex::new(self.inner.clone())
            .set_index_endpoint(index_endpoint.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::index_endpoint_service::ListLocations {
        crate::builders::index_endpoint_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::index_endpoint_service::GetLocation {
        crate::builders::index_endpoint_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::index_endpoint_service::SetIamPolicy {
        crate::builders::index_endpoint_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::index_endpoint_service::GetIamPolicy {
        crate::builders::index_endpoint_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::index_endpoint_service::TestIamPermissions {
        crate::builders::index_endpoint_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::index_endpoint_service::ListOperations {
        crate::builders::index_endpoint_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::index_endpoint_service::GetOperation {
        crate::builders::index_endpoint_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::index_endpoint_service::DeleteOperation {
        crate::builders::index_endpoint_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::index_endpoint_service::CancelOperation {
        crate::builders::index_endpoint_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::index_endpoint_service::WaitOperation {
        crate::builders::index_endpoint_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// A service for creating and managing Vertex AI's Index resources.
///
/// # Configuration
///
/// `IndexService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `IndexService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `IndexService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct IndexService {
    inner: Arc<dyn crate::stubs::dynamic::IndexService>,
}

impl IndexService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::IndexService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::IndexService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::IndexService> {
        crate::transport::IndexService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::IndexService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::IndexService::new)
    }

    /// Creates an Index.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_index(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::index_service::CreateIndex {
        crate::builders::index_service::CreateIndex::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets an Index.
    pub fn get_index(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::index_service::GetIndex {
        crate::builders::index_service::GetIndex::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists Indexes in a Location.
    pub fn list_indexes(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::index_service::ListIndexes {
        crate::builders::index_service::ListIndexes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates an Index.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_index(
        &self,
        index: impl Into<crate::model::Index>,
    ) -> crate::builders::index_service::UpdateIndex {
        crate::builders::index_service::UpdateIndex::new(self.inner.clone()).set_index(index.into())
    }

    /// Deletes an Index.
    /// An Index can only be deleted when all its
    /// [DeployedIndexes][google.cloud.aiplatform.v1.Index.deployed_indexes] had
    /// been undeployed.
    ///
    /// [google.cloud.aiplatform.v1.Index.deployed_indexes]: crate::model::Index::deployed_indexes
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_index(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::index_service::DeleteIndex {
        crate::builders::index_service::DeleteIndex::new(self.inner.clone()).set_name(name.into())
    }

    /// Add/update Datapoints into an Index.
    pub fn upsert_datapoints(
        &self,
        index: impl Into<std::string::String>,
    ) -> crate::builders::index_service::UpsertDatapoints {
        crate::builders::index_service::UpsertDatapoints::new(self.inner.clone())
            .set_index(index.into())
    }

    /// Remove Datapoints from an Index.
    pub fn remove_datapoints(
        &self,
        index: impl Into<std::string::String>,
    ) -> crate::builders::index_service::RemoveDatapoints {
        crate::builders::index_service::RemoveDatapoints::new(self.inner.clone())
            .set_index(index.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::index_service::ListLocations {
        crate::builders::index_service::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::index_service::GetLocation {
        crate::builders::index_service::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::index_service::SetIamPolicy {
        crate::builders::index_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::index_service::GetIamPolicy {
        crate::builders::index_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::index_service::TestIamPermissions {
        crate::builders::index_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::index_service::ListOperations {
        crate::builders::index_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::index_service::GetOperation {
        crate::builders::index_service::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::index_service::DeleteOperation {
        crate::builders::index_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::index_service::CancelOperation {
        crate::builders::index_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::index_service::WaitOperation {
        crate::builders::index_service::WaitOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// A service for creating and managing Vertex AI's jobs.
///
/// # Configuration
///
/// `JobService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `JobService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `JobService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct JobService {
    inner: Arc<dyn crate::stubs::dynamic::JobService>,
}

impl JobService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::JobService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::JobService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::JobService> {
        crate::transport::JobService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::JobService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::JobService::new)
    }

    /// Creates a CustomJob. A created CustomJob right away
    /// will be attempted to be run.
    pub fn create_custom_job(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::job_service::CreateCustomJob {
        crate::builders::job_service::CreateCustomJob::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a CustomJob.
    pub fn get_custom_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::GetCustomJob {
        crate::builders::job_service::GetCustomJob::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists CustomJobs in a Location.
    pub fn list_custom_jobs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::job_service::ListCustomJobs {
        crate::builders::job_service::ListCustomJobs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a CustomJob.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_custom_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::DeleteCustomJob {
        crate::builders::job_service::DeleteCustomJob::new(self.inner.clone()).set_name(name.into())
    }

    /// Cancels a CustomJob.
    /// Starts asynchronous cancellation on the CustomJob. The server
    /// makes a best effort to cancel the job, but success is not
    /// guaranteed. Clients can use
    /// [JobService.GetCustomJob][google.cloud.aiplatform.v1.JobService.GetCustomJob]
    /// or other methods to check whether the cancellation succeeded or whether the
    /// job completed despite cancellation. On successful cancellation,
    /// the CustomJob is not deleted; instead it becomes a job with
    /// a [CustomJob.error][google.cloud.aiplatform.v1.CustomJob.error] value with
    /// a [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
    /// `Code.CANCELLED`, and
    /// [CustomJob.state][google.cloud.aiplatform.v1.CustomJob.state] is set to
    /// `CANCELLED`.
    ///
    /// [google.cloud.aiplatform.v1.CustomJob.error]: crate::model::CustomJob::error
    /// [google.cloud.aiplatform.v1.CustomJob.state]: crate::model::CustomJob::state
    /// [google.cloud.aiplatform.v1.JobService.GetCustomJob]: crate::client::JobService::get_custom_job
    /// [google.rpc.Status.code]: rpc::model::Status::code
    pub fn cancel_custom_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::CancelCustomJob {
        crate::builders::job_service::CancelCustomJob::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a DataLabelingJob.
    pub fn create_data_labeling_job(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::job_service::CreateDataLabelingJob {
        crate::builders::job_service::CreateDataLabelingJob::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a DataLabelingJob.
    pub fn get_data_labeling_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::GetDataLabelingJob {
        crate::builders::job_service::GetDataLabelingJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists DataLabelingJobs in a Location.
    pub fn list_data_labeling_jobs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::job_service::ListDataLabelingJobs {
        crate::builders::job_service::ListDataLabelingJobs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a DataLabelingJob.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_data_labeling_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::DeleteDataLabelingJob {
        crate::builders::job_service::DeleteDataLabelingJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Cancels a DataLabelingJob. Success of cancellation is not guaranteed.
    pub fn cancel_data_labeling_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::CancelDataLabelingJob {
        crate::builders::job_service::CancelDataLabelingJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a HyperparameterTuningJob
    pub fn create_hyperparameter_tuning_job(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::job_service::CreateHyperparameterTuningJob {
        crate::builders::job_service::CreateHyperparameterTuningJob::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a HyperparameterTuningJob
    pub fn get_hyperparameter_tuning_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::GetHyperparameterTuningJob {
        crate::builders::job_service::GetHyperparameterTuningJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists HyperparameterTuningJobs in a Location.
    pub fn list_hyperparameter_tuning_jobs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::job_service::ListHyperparameterTuningJobs {
        crate::builders::job_service::ListHyperparameterTuningJobs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a HyperparameterTuningJob.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_hyperparameter_tuning_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::DeleteHyperparameterTuningJob {
        crate::builders::job_service::DeleteHyperparameterTuningJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Cancels a HyperparameterTuningJob.
    /// Starts asynchronous cancellation on the HyperparameterTuningJob. The server
    /// makes a best effort to cancel the job, but success is not
    /// guaranteed. Clients can use
    /// [JobService.GetHyperparameterTuningJob][google.cloud.aiplatform.v1.JobService.GetHyperparameterTuningJob]
    /// or other methods to check whether the cancellation succeeded or whether the
    /// job completed despite cancellation. On successful cancellation,
    /// the HyperparameterTuningJob is not deleted; instead it becomes a job with
    /// a
    /// [HyperparameterTuningJob.error][google.cloud.aiplatform.v1.HyperparameterTuningJob.error]
    /// value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
    /// corresponding to `Code.CANCELLED`, and
    /// [HyperparameterTuningJob.state][google.cloud.aiplatform.v1.HyperparameterTuningJob.state]
    /// is set to `CANCELLED`.
    ///
    /// [google.cloud.aiplatform.v1.HyperparameterTuningJob.error]: crate::model::HyperparameterTuningJob::error
    /// [google.cloud.aiplatform.v1.HyperparameterTuningJob.state]: crate::model::HyperparameterTuningJob::state
    /// [google.cloud.aiplatform.v1.JobService.GetHyperparameterTuningJob]: crate::client::JobService::get_hyperparameter_tuning_job
    /// [google.rpc.Status.code]: rpc::model::Status::code
    pub fn cancel_hyperparameter_tuning_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::CancelHyperparameterTuningJob {
        crate::builders::job_service::CancelHyperparameterTuningJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a NasJob
    pub fn create_nas_job(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::job_service::CreateNasJob {
        crate::builders::job_service::CreateNasJob::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a NasJob
    pub fn get_nas_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::GetNasJob {
        crate::builders::job_service::GetNasJob::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists NasJobs in a Location.
    pub fn list_nas_jobs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::job_service::ListNasJobs {
        crate::builders::job_service::ListNasJobs::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Deletes a NasJob.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_nas_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::DeleteNasJob {
        crate::builders::job_service::DeleteNasJob::new(self.inner.clone()).set_name(name.into())
    }

    /// Cancels a NasJob.
    /// Starts asynchronous cancellation on the NasJob. The server
    /// makes a best effort to cancel the job, but success is not
    /// guaranteed. Clients can use
    /// [JobService.GetNasJob][google.cloud.aiplatform.v1.JobService.GetNasJob] or
    /// other methods to check whether the cancellation succeeded or whether the
    /// job completed despite cancellation. On successful cancellation,
    /// the NasJob is not deleted; instead it becomes a job with
    /// a [NasJob.error][google.cloud.aiplatform.v1.NasJob.error] value with a
    /// [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
    /// `Code.CANCELLED`, and
    /// [NasJob.state][google.cloud.aiplatform.v1.NasJob.state] is set to
    /// `CANCELLED`.
    ///
    /// [google.cloud.aiplatform.v1.JobService.GetNasJob]: crate::client::JobService::get_nas_job
    /// [google.cloud.aiplatform.v1.NasJob.error]: crate::model::NasJob::error
    /// [google.cloud.aiplatform.v1.NasJob.state]: crate::model::NasJob::state
    /// [google.rpc.Status.code]: rpc::model::Status::code
    pub fn cancel_nas_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::CancelNasJob {
        crate::builders::job_service::CancelNasJob::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets a NasTrialDetail.
    pub fn get_nas_trial_detail(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::GetNasTrialDetail {
        crate::builders::job_service::GetNasTrialDetail::new(self.inner.clone())
            .set_name(name.into())
    }

    /// List top NasTrialDetails of a NasJob.
    pub fn list_nas_trial_details(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::job_service::ListNasTrialDetails {
        crate::builders::job_service::ListNasTrialDetails::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a BatchPredictionJob. A BatchPredictionJob once created will
    /// right away be attempted to start.
    pub fn create_batch_prediction_job(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::job_service::CreateBatchPredictionJob {
        crate::builders::job_service::CreateBatchPredictionJob::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a BatchPredictionJob
    pub fn get_batch_prediction_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::GetBatchPredictionJob {
        crate::builders::job_service::GetBatchPredictionJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists BatchPredictionJobs in a Location.
    pub fn list_batch_prediction_jobs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::job_service::ListBatchPredictionJobs {
        crate::builders::job_service::ListBatchPredictionJobs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a BatchPredictionJob. Can only be called on jobs that already
    /// finished.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_batch_prediction_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::DeleteBatchPredictionJob {
        crate::builders::job_service::DeleteBatchPredictionJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Cancels a BatchPredictionJob.
    ///
    /// Starts asynchronous cancellation on the BatchPredictionJob. The server
    /// makes the best effort to cancel the job, but success is not
    /// guaranteed. Clients can use
    /// [JobService.GetBatchPredictionJob][google.cloud.aiplatform.v1.JobService.GetBatchPredictionJob]
    /// or other methods to check whether the cancellation succeeded or whether the
    /// job completed despite cancellation. On a successful cancellation,
    /// the BatchPredictionJob is not deleted;instead its
    /// [BatchPredictionJob.state][google.cloud.aiplatform.v1.BatchPredictionJob.state]
    /// is set to `CANCELLED`. Any files already outputted by the job are not
    /// deleted.
    ///
    /// [google.cloud.aiplatform.v1.BatchPredictionJob.state]: crate::model::BatchPredictionJob::state
    /// [google.cloud.aiplatform.v1.JobService.GetBatchPredictionJob]: crate::client::JobService::get_batch_prediction_job
    pub fn cancel_batch_prediction_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::CancelBatchPredictionJob {
        crate::builders::job_service::CancelBatchPredictionJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a ModelDeploymentMonitoringJob. It will run periodically on a
    /// configured interval.
    pub fn create_model_deployment_monitoring_job(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::job_service::CreateModelDeploymentMonitoringJob {
        crate::builders::job_service::CreateModelDeploymentMonitoringJob::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Searches Model Monitoring Statistics generated within a given time window.
    pub fn search_model_deployment_monitoring_stats_anomalies(
        &self,
        model_deployment_monitoring_job: impl Into<std::string::String>,
    ) -> crate::builders::job_service::SearchModelDeploymentMonitoringStatsAnomalies {
        crate::builders::job_service::SearchModelDeploymentMonitoringStatsAnomalies::new(
            self.inner.clone(),
        )
        .set_model_deployment_monitoring_job(model_deployment_monitoring_job.into())
    }

    /// Gets a ModelDeploymentMonitoringJob.
    pub fn get_model_deployment_monitoring_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::GetModelDeploymentMonitoringJob {
        crate::builders::job_service::GetModelDeploymentMonitoringJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists ModelDeploymentMonitoringJobs in a Location.
    pub fn list_model_deployment_monitoring_jobs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::job_service::ListModelDeploymentMonitoringJobs {
        crate::builders::job_service::ListModelDeploymentMonitoringJobs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a ModelDeploymentMonitoringJob.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_model_deployment_monitoring_job(
        &self,
        model_deployment_monitoring_job: impl Into<crate::model::ModelDeploymentMonitoringJob>,
    ) -> crate::builders::job_service::UpdateModelDeploymentMonitoringJob {
        crate::builders::job_service::UpdateModelDeploymentMonitoringJob::new(self.inner.clone())
            .set_model_deployment_monitoring_job(model_deployment_monitoring_job.into())
    }

    /// Deletes a ModelDeploymentMonitoringJob.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_model_deployment_monitoring_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::DeleteModelDeploymentMonitoringJob {
        crate::builders::job_service::DeleteModelDeploymentMonitoringJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Pauses a ModelDeploymentMonitoringJob. If the job is running, the server
    /// makes a best effort to cancel the job. Will mark
    /// [ModelDeploymentMonitoringJob.state][google.cloud.aiplatform.v1.ModelDeploymentMonitoringJob.state]
    /// to 'PAUSED'.
    ///
    /// [google.cloud.aiplatform.v1.ModelDeploymentMonitoringJob.state]: crate::model::ModelDeploymentMonitoringJob::state
    pub fn pause_model_deployment_monitoring_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::PauseModelDeploymentMonitoringJob {
        crate::builders::job_service::PauseModelDeploymentMonitoringJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Resumes a paused ModelDeploymentMonitoringJob. It will start to run from
    /// next scheduled time. A deleted ModelDeploymentMonitoringJob can't be
    /// resumed.
    pub fn resume_model_deployment_monitoring_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::ResumeModelDeploymentMonitoringJob {
        crate::builders::job_service::ResumeModelDeploymentMonitoringJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::ListLocations {
        crate::builders::job_service::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::GetLocation {
        crate::builders::job_service::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::job_service::SetIamPolicy {
        crate::builders::job_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::job_service::GetIamPolicy {
        crate::builders::job_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::job_service::TestIamPermissions {
        crate::builders::job_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::ListOperations {
        crate::builders::job_service::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::GetOperation {
        crate::builders::job_service::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::DeleteOperation {
        crate::builders::job_service::DeleteOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::CancelOperation {
        crate::builders::job_service::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::WaitOperation {
        crate::builders::job_service::WaitOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// Service for LLM related utility functions.
///
/// # Configuration
///
/// `LlmUtilityService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `LlmUtilityService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `LlmUtilityService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct LlmUtilityService {
    inner: Arc<dyn crate::stubs::dynamic::LlmUtilityService>,
}

impl LlmUtilityService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::LlmUtilityService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::LlmUtilityService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::LlmUtilityService> {
        crate::transport::LlmUtilityService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::LlmUtilityService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::LlmUtilityService::new)
    }

    /// Perform a token counting.
    pub fn count_tokens(
        &self,
        endpoint: impl Into<std::string::String>,
    ) -> crate::builders::llm_utility_service::CountTokens {
        crate::builders::llm_utility_service::CountTokens::new(self.inner.clone())
            .set_endpoint(endpoint.into())
    }

    /// Return a list of tokens based on the input text.
    pub fn compute_tokens(
        &self,
        endpoint: impl Into<std::string::String>,
    ) -> crate::builders::llm_utility_service::ComputeTokens {
        crate::builders::llm_utility_service::ComputeTokens::new(self.inner.clone())
            .set_endpoint(endpoint.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::llm_utility_service::ListLocations {
        crate::builders::llm_utility_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::llm_utility_service::GetLocation {
        crate::builders::llm_utility_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::llm_utility_service::SetIamPolicy {
        crate::builders::llm_utility_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::llm_utility_service::GetIamPolicy {
        crate::builders::llm_utility_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::llm_utility_service::TestIamPermissions {
        crate::builders::llm_utility_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::llm_utility_service::ListOperations {
        crate::builders::llm_utility_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::llm_utility_service::GetOperation {
        crate::builders::llm_utility_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::llm_utility_service::DeleteOperation {
        crate::builders::llm_utility_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::llm_utility_service::CancelOperation {
        crate::builders::llm_utility_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::llm_utility_service::WaitOperation {
        crate::builders::llm_utility_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// MatchService is a Google managed service for efficient vector similarity
/// search at scale.
///
/// # Configuration
///
/// `MatchService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `MatchService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `MatchService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct MatchService {
    inner: Arc<dyn crate::stubs::dynamic::MatchService>,
}

impl MatchService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::MatchService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::MatchService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::MatchService> {
        crate::transport::MatchService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::MatchService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::MatchService::new)
    }

    /// Finds the nearest neighbors of each vector within the request.
    pub fn find_neighbors(
        &self,
        index_endpoint: impl Into<std::string::String>,
    ) -> crate::builders::match_service::FindNeighbors {
        crate::builders::match_service::FindNeighbors::new(self.inner.clone())
            .set_index_endpoint(index_endpoint.into())
    }

    /// Reads the datapoints/vectors of the given IDs.
    /// A maximum of 1000 datapoints can be retrieved in a batch.
    pub fn read_index_datapoints(
        &self,
        index_endpoint: impl Into<std::string::String>,
    ) -> crate::builders::match_service::ReadIndexDatapoints {
        crate::builders::match_service::ReadIndexDatapoints::new(self.inner.clone())
            .set_index_endpoint(index_endpoint.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::match_service::ListLocations {
        crate::builders::match_service::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::match_service::GetLocation {
        crate::builders::match_service::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::match_service::SetIamPolicy {
        crate::builders::match_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::match_service::GetIamPolicy {
        crate::builders::match_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::match_service::TestIamPermissions {
        crate::builders::match_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::match_service::ListOperations {
        crate::builders::match_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::match_service::GetOperation {
        crate::builders::match_service::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::match_service::DeleteOperation {
        crate::builders::match_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::match_service::CancelOperation {
        crate::builders::match_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::match_service::WaitOperation {
        crate::builders::match_service::WaitOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// Service for reading and writing metadata entries.
///
/// # Configuration
///
/// `MetadataService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `MetadataService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `MetadataService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct MetadataService {
    inner: Arc<dyn crate::stubs::dynamic::MetadataService>,
}

impl MetadataService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::MetadataService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::MetadataService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::MetadataService> {
        crate::transport::MetadataService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::MetadataService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::MetadataService::new)
    }

    /// Initializes a MetadataStore, including allocation of resources.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_metadata_store(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::CreateMetadataStore {
        crate::builders::metadata_service::CreateMetadataStore::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves a specific MetadataStore.
    pub fn get_metadata_store(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::GetMetadataStore {
        crate::builders::metadata_service::GetMetadataStore::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists MetadataStores for a Location.
    pub fn list_metadata_stores(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::ListMetadataStores {
        crate::builders::metadata_service::ListMetadataStores::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a single MetadataStore and all its child resources (Artifacts,
    /// Executions, and Contexts).
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_metadata_store(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::DeleteMetadataStore {
        crate::builders::metadata_service::DeleteMetadataStore::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates an Artifact associated with a MetadataStore.
    pub fn create_artifact(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::CreateArtifact {
        crate::builders::metadata_service::CreateArtifact::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves a specific Artifact.
    pub fn get_artifact(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::GetArtifact {
        crate::builders::metadata_service::GetArtifact::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists Artifacts in the MetadataStore.
    pub fn list_artifacts(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::ListArtifacts {
        crate::builders::metadata_service::ListArtifacts::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a stored Artifact.
    pub fn update_artifact(
        &self,
        artifact: impl Into<crate::model::Artifact>,
    ) -> crate::builders::metadata_service::UpdateArtifact {
        crate::builders::metadata_service::UpdateArtifact::new(self.inner.clone())
            .set_artifact(artifact.into())
    }

    /// Deletes an Artifact.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_artifact(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::DeleteArtifact {
        crate::builders::metadata_service::DeleteArtifact::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Purges Artifacts.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn purge_artifacts(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::PurgeArtifacts {
        crate::builders::metadata_service::PurgeArtifacts::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a Context associated with a MetadataStore.
    pub fn create_context(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::CreateContext {
        crate::builders::metadata_service::CreateContext::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves a specific Context.
    pub fn get_context(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::GetContext {
        crate::builders::metadata_service::GetContext::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists Contexts on the MetadataStore.
    pub fn list_contexts(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::ListContexts {
        crate::builders::metadata_service::ListContexts::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a stored Context.
    pub fn update_context(
        &self,
        context: impl Into<crate::model::Context>,
    ) -> crate::builders::metadata_service::UpdateContext {
        crate::builders::metadata_service::UpdateContext::new(self.inner.clone())
            .set_context(context.into())
    }

    /// Deletes a stored Context.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_context(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::DeleteContext {
        crate::builders::metadata_service::DeleteContext::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Purges Contexts.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn purge_contexts(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::PurgeContexts {
        crate::builders::metadata_service::PurgeContexts::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Adds a set of Artifacts and Executions to a Context. If any of the
    /// Artifacts or Executions have already been added to a Context, they are
    /// simply skipped.
    pub fn add_context_artifacts_and_executions(
        &self,
        context: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::AddContextArtifactsAndExecutions {
        crate::builders::metadata_service::AddContextArtifactsAndExecutions::new(self.inner.clone())
            .set_context(context.into())
    }

    /// Adds a set of Contexts as children to a parent Context. If any of the
    /// child Contexts have already been added to the parent Context, they are
    /// simply skipped. If this call would create a cycle or cause any Context to
    /// have more than 10 parents, the request will fail with an INVALID_ARGUMENT
    /// error.
    pub fn add_context_children(
        &self,
        context: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::AddContextChildren {
        crate::builders::metadata_service::AddContextChildren::new(self.inner.clone())
            .set_context(context.into())
    }

    /// Remove a set of children contexts from a parent Context. If any of the
    /// child Contexts were NOT added to the parent Context, they are
    /// simply skipped.
    pub fn remove_context_children(
        &self,
        context: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::RemoveContextChildren {
        crate::builders::metadata_service::RemoveContextChildren::new(self.inner.clone())
            .set_context(context.into())
    }

    /// Retrieves Artifacts and Executions within the specified Context, connected
    /// by Event edges and returned as a LineageSubgraph.
    pub fn query_context_lineage_subgraph(
        &self,
        context: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::QueryContextLineageSubgraph {
        crate::builders::metadata_service::QueryContextLineageSubgraph::new(self.inner.clone())
            .set_context(context.into())
    }

    /// Creates an Execution associated with a MetadataStore.
    pub fn create_execution(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::CreateExecution {
        crate::builders::metadata_service::CreateExecution::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves a specific Execution.
    pub fn get_execution(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::GetExecution {
        crate::builders::metadata_service::GetExecution::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists Executions in the MetadataStore.
    pub fn list_executions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::ListExecutions {
        crate::builders::metadata_service::ListExecutions::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a stored Execution.
    pub fn update_execution(
        &self,
        execution: impl Into<crate::model::Execution>,
    ) -> crate::builders::metadata_service::UpdateExecution {
        crate::builders::metadata_service::UpdateExecution::new(self.inner.clone())
            .set_execution(execution.into())
    }

    /// Deletes an Execution.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_execution(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::DeleteExecution {
        crate::builders::metadata_service::DeleteExecution::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Purges Executions.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn purge_executions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::PurgeExecutions {
        crate::builders::metadata_service::PurgeExecutions::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Adds Events to the specified Execution. An Event indicates whether an
    /// Artifact was used as an input or output for an Execution. If an Event
    /// already exists between the Execution and the Artifact, the Event is
    /// skipped.
    pub fn add_execution_events(
        &self,
        execution: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::AddExecutionEvents {
        crate::builders::metadata_service::AddExecutionEvents::new(self.inner.clone())
            .set_execution(execution.into())
    }

    /// Obtains the set of input and output Artifacts for this Execution, in the
    /// form of LineageSubgraph that also contains the Execution and connecting
    /// Events.
    pub fn query_execution_inputs_and_outputs(
        &self,
        execution: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::QueryExecutionInputsAndOutputs {
        crate::builders::metadata_service::QueryExecutionInputsAndOutputs::new(self.inner.clone())
            .set_execution(execution.into())
    }

    /// Creates a MetadataSchema.
    pub fn create_metadata_schema(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::CreateMetadataSchema {
        crate::builders::metadata_service::CreateMetadataSchema::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves a specific MetadataSchema.
    pub fn get_metadata_schema(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::GetMetadataSchema {
        crate::builders::metadata_service::GetMetadataSchema::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists MetadataSchemas.
    pub fn list_metadata_schemas(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::ListMetadataSchemas {
        crate::builders::metadata_service::ListMetadataSchemas::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves lineage of an Artifact represented through Artifacts and
    /// Executions connected by Event edges and returned as a LineageSubgraph.
    pub fn query_artifact_lineage_subgraph(
        &self,
        artifact: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::QueryArtifactLineageSubgraph {
        crate::builders::metadata_service::QueryArtifactLineageSubgraph::new(self.inner.clone())
            .set_artifact(artifact.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::ListLocations {
        crate::builders::metadata_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::GetLocation {
        crate::builders::metadata_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::SetIamPolicy {
        crate::builders::metadata_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::GetIamPolicy {
        crate::builders::metadata_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::TestIamPermissions {
        crate::builders::metadata_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::ListOperations {
        crate::builders::metadata_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::GetOperation {
        crate::builders::metadata_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::DeleteOperation {
        crate::builders::metadata_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::CancelOperation {
        crate::builders::metadata_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::metadata_service::WaitOperation {
        crate::builders::metadata_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// A service that migrates resources from automl.googleapis.com,
/// datalabeling.googleapis.com and ml.googleapis.com to Vertex AI.
///
/// # Configuration
///
/// `MigrationService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `MigrationService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `MigrationService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct MigrationService {
    inner: Arc<dyn crate::stubs::dynamic::MigrationService>,
}

impl MigrationService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::MigrationService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::MigrationService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::MigrationService> {
        crate::transport::MigrationService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::MigrationService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::MigrationService::new)
    }

    /// Searches all of the resources in automl.googleapis.com,
    /// datalabeling.googleapis.com and ml.googleapis.com that can be migrated to
    /// Vertex AI's given location.
    pub fn search_migratable_resources(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::migration_service::SearchMigratableResources {
        crate::builders::migration_service::SearchMigratableResources::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Batch migrates resources from ml.googleapis.com, automl.googleapis.com,
    /// and datalabeling.googleapis.com to Vertex AI.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_migrate_resources(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::migration_service::BatchMigrateResources {
        crate::builders::migration_service::BatchMigrateResources::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::migration_service::ListLocations {
        crate::builders::migration_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::migration_service::GetLocation {
        crate::builders::migration_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::migration_service::SetIamPolicy {
        crate::builders::migration_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::migration_service::GetIamPolicy {
        crate::builders::migration_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::migration_service::TestIamPermissions {
        crate::builders::migration_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::migration_service::ListOperations {
        crate::builders::migration_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::migration_service::GetOperation {
        crate::builders::migration_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::migration_service::DeleteOperation {
        crate::builders::migration_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::migration_service::CancelOperation {
        crate::builders::migration_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::migration_service::WaitOperation {
        crate::builders::migration_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// The interface of Model Garden Service.
///
/// # Configuration
///
/// `ModelGardenService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `ModelGardenService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ModelGardenService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct ModelGardenService {
    inner: Arc<dyn crate::stubs::dynamic::ModelGardenService>,
}

impl ModelGardenService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::ModelGardenService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::ModelGardenService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ModelGardenService> {
        crate::transport::ModelGardenService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ModelGardenService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::ModelGardenService::new)
    }

    /// Gets a Model Garden publisher model.
    pub fn get_publisher_model(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::model_garden_service::GetPublisherModel {
        crate::builders::model_garden_service::GetPublisherModel::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::model_garden_service::ListLocations {
        crate::builders::model_garden_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::model_garden_service::GetLocation {
        crate::builders::model_garden_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::model_garden_service::SetIamPolicy {
        crate::builders::model_garden_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::model_garden_service::GetIamPolicy {
        crate::builders::model_garden_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::model_garden_service::TestIamPermissions {
        crate::builders::model_garden_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::model_garden_service::ListOperations {
        crate::builders::model_garden_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::model_garden_service::GetOperation {
        crate::builders::model_garden_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::model_garden_service::DeleteOperation {
        crate::builders::model_garden_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::model_garden_service::CancelOperation {
        crate::builders::model_garden_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::model_garden_service::WaitOperation {
        crate::builders::model_garden_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// A service for managing Vertex AI's machine learning Models.
///
/// # Configuration
///
/// `ModelService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `ModelService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ModelService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct ModelService {
    inner: Arc<dyn crate::stubs::dynamic::ModelService>,
}

impl ModelService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::ModelService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::ModelService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ModelService> {
        crate::transport::ModelService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ModelService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::ModelService::new)
    }

    /// Uploads a Model artifact into Vertex AI.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn upload_model(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::model_service::UploadModel {
        crate::builders::model_service::UploadModel::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a Model.
    pub fn get_model(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::model_service::GetModel {
        crate::builders::model_service::GetModel::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists Models in a Location.
    pub fn list_models(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::model_service::ListModels {
        crate::builders::model_service::ListModels::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists versions of the specified model.
    pub fn list_model_versions(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::model_service::ListModelVersions {
        crate::builders::model_service::ListModelVersions::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists checkpoints of the specified model version.
    pub fn list_model_version_checkpoints(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::model_service::ListModelVersionCheckpoints {
        crate::builders::model_service::ListModelVersionCheckpoints::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates a Model.
    pub fn update_model(
        &self,
        model: impl Into<crate::model::Model>,
    ) -> crate::builders::model_service::UpdateModel {
        crate::builders::model_service::UpdateModel::new(self.inner.clone()).set_model(model.into())
    }

    /// Incrementally update the dataset used for an examples model.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_explanation_dataset(
        &self,
        model: impl Into<std::string::String>,
    ) -> crate::builders::model_service::UpdateExplanationDataset {
        crate::builders::model_service::UpdateExplanationDataset::new(self.inner.clone())
            .set_model(model.into())
    }

    /// Deletes a Model.
    ///
    /// A model cannot be deleted if any
    /// [Endpoint][google.cloud.aiplatform.v1.Endpoint] resource has a
    /// [DeployedModel][google.cloud.aiplatform.v1.DeployedModel] based on the
    /// model in its
    /// [deployed_models][google.cloud.aiplatform.v1.Endpoint.deployed_models]
    /// field.
    ///
    /// [google.cloud.aiplatform.v1.DeployedModel]: crate::model::DeployedModel
    /// [google.cloud.aiplatform.v1.Endpoint]: crate::model::Endpoint
    /// [google.cloud.aiplatform.v1.Endpoint.deployed_models]: crate::model::Endpoint::deployed_models
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_model(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::model_service::DeleteModel {
        crate::builders::model_service::DeleteModel::new(self.inner.clone()).set_name(name.into())
    }

    /// Deletes a Model version.
    ///
    /// Model version can only be deleted if there are no
    /// [DeployedModels][google.cloud.aiplatform.v1.DeployedModel] created from it.
    /// Deleting the only version in the Model is not allowed. Use
    /// [DeleteModel][google.cloud.aiplatform.v1.ModelService.DeleteModel] for
    /// deleting the Model instead.
    ///
    /// [google.cloud.aiplatform.v1.DeployedModel]: crate::model::DeployedModel
    /// [google.cloud.aiplatform.v1.ModelService.DeleteModel]: crate::client::ModelService::delete_model
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_model_version(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::model_service::DeleteModelVersion {
        crate::builders::model_service::DeleteModelVersion::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Merges a set of aliases for a Model version.
    pub fn merge_version_aliases(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::model_service::MergeVersionAliases {
        crate::builders::model_service::MergeVersionAliases::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Exports a trained, exportable Model to a location specified by the
    /// user. A Model is considered to be exportable if it has at least one
    /// [supported export
    /// format][google.cloud.aiplatform.v1.Model.supported_export_formats].
    ///
    /// [google.cloud.aiplatform.v1.Model.supported_export_formats]: crate::model::Model::supported_export_formats
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn export_model(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::model_service::ExportModel {
        crate::builders::model_service::ExportModel::new(self.inner.clone()).set_name(name.into())
    }

    /// Copies an already existing Vertex AI Model into the specified Location.
    /// The source Model must exist in the same Project.
    /// When copying custom Models, the users themselves are responsible for
    /// [Model.metadata][google.cloud.aiplatform.v1.Model.metadata] content to be
    /// region-agnostic, as well as making sure that any resources (e.g. files) it
    /// depends on remain accessible.
    ///
    /// [google.cloud.aiplatform.v1.Model.metadata]: crate::model::Model::metadata
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn copy_model(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::model_service::CopyModel {
        crate::builders::model_service::CopyModel::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Imports an externally generated ModelEvaluation.
    pub fn import_model_evaluation(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::model_service::ImportModelEvaluation {
        crate::builders::model_service::ImportModelEvaluation::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Imports a list of externally generated ModelEvaluationSlice.
    pub fn batch_import_model_evaluation_slices(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::model_service::BatchImportModelEvaluationSlices {
        crate::builders::model_service::BatchImportModelEvaluationSlices::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Imports a list of externally generated EvaluatedAnnotations.
    pub fn batch_import_evaluated_annotations(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::model_service::BatchImportEvaluatedAnnotations {
        crate::builders::model_service::BatchImportEvaluatedAnnotations::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a ModelEvaluation.
    pub fn get_model_evaluation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::model_service::GetModelEvaluation {
        crate::builders::model_service::GetModelEvaluation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists ModelEvaluations in a Model.
    pub fn list_model_evaluations(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::model_service::ListModelEvaluations {
        crate::builders::model_service::ListModelEvaluations::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a ModelEvaluationSlice.
    pub fn get_model_evaluation_slice(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::model_service::GetModelEvaluationSlice {
        crate::builders::model_service::GetModelEvaluationSlice::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists ModelEvaluationSlices in a ModelEvaluation.
    pub fn list_model_evaluation_slices(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::model_service::ListModelEvaluationSlices {
        crate::builders::model_service::ListModelEvaluationSlices::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::model_service::ListLocations {
        crate::builders::model_service::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::model_service::GetLocation {
        crate::builders::model_service::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::model_service::SetIamPolicy {
        crate::builders::model_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::model_service::GetIamPolicy {
        crate::builders::model_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::model_service::TestIamPermissions {
        crate::builders::model_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::model_service::ListOperations {
        crate::builders::model_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::model_service::GetOperation {
        crate::builders::model_service::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::model_service::DeleteOperation {
        crate::builders::model_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::model_service::CancelOperation {
        crate::builders::model_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::model_service::WaitOperation {
        crate::builders::model_service::WaitOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// The interface for Vertex Notebook service (a.k.a. Colab on Workbench).
///
/// # Configuration
///
/// `NotebookService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `NotebookService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `NotebookService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct NotebookService {
    inner: Arc<dyn crate::stubs::dynamic::NotebookService>,
}

impl NotebookService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::NotebookService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::NotebookService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::NotebookService> {
        crate::transport::NotebookService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::NotebookService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::NotebookService::new)
    }

    /// Creates a NotebookRuntimeTemplate.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_notebook_runtime_template(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::CreateNotebookRuntimeTemplate {
        crate::builders::notebook_service::CreateNotebookRuntimeTemplate::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a NotebookRuntimeTemplate.
    pub fn get_notebook_runtime_template(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::GetNotebookRuntimeTemplate {
        crate::builders::notebook_service::GetNotebookRuntimeTemplate::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists NotebookRuntimeTemplates in a Location.
    pub fn list_notebook_runtime_templates(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::ListNotebookRuntimeTemplates {
        crate::builders::notebook_service::ListNotebookRuntimeTemplates::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a NotebookRuntimeTemplate.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_notebook_runtime_template(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::DeleteNotebookRuntimeTemplate {
        crate::builders::notebook_service::DeleteNotebookRuntimeTemplate::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates a NotebookRuntimeTemplate.
    pub fn update_notebook_runtime_template(
        &self,
        notebook_runtime_template: impl Into<crate::model::NotebookRuntimeTemplate>,
    ) -> crate::builders::notebook_service::UpdateNotebookRuntimeTemplate {
        crate::builders::notebook_service::UpdateNotebookRuntimeTemplate::new(self.inner.clone())
            .set_notebook_runtime_template(notebook_runtime_template.into())
    }

    /// Assigns a NotebookRuntime to a user for a particular Notebook file. This
    /// method will either returns an existing assignment or generates a new one.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn assign_notebook_runtime(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::AssignNotebookRuntime {
        crate::builders::notebook_service::AssignNotebookRuntime::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a NotebookRuntime.
    pub fn get_notebook_runtime(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::GetNotebookRuntime {
        crate::builders::notebook_service::GetNotebookRuntime::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists NotebookRuntimes in a Location.
    pub fn list_notebook_runtimes(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::ListNotebookRuntimes {
        crate::builders::notebook_service::ListNotebookRuntimes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a NotebookRuntime.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_notebook_runtime(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::DeleteNotebookRuntime {
        crate::builders::notebook_service::DeleteNotebookRuntime::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Upgrades a NotebookRuntime.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn upgrade_notebook_runtime(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::UpgradeNotebookRuntime {
        crate::builders::notebook_service::UpgradeNotebookRuntime::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Starts a NotebookRuntime.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn start_notebook_runtime(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::StartNotebookRuntime {
        crate::builders::notebook_service::StartNotebookRuntime::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Stops a NotebookRuntime.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn stop_notebook_runtime(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::StopNotebookRuntime {
        crate::builders::notebook_service::StopNotebookRuntime::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a NotebookExecutionJob.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_notebook_execution_job(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::CreateNotebookExecutionJob {
        crate::builders::notebook_service::CreateNotebookExecutionJob::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a NotebookExecutionJob.
    pub fn get_notebook_execution_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::GetNotebookExecutionJob {
        crate::builders::notebook_service::GetNotebookExecutionJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists NotebookExecutionJobs in a Location.
    pub fn list_notebook_execution_jobs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::ListNotebookExecutionJobs {
        crate::builders::notebook_service::ListNotebookExecutionJobs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a NotebookExecutionJob.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_notebook_execution_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::DeleteNotebookExecutionJob {
        crate::builders::notebook_service::DeleteNotebookExecutionJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::ListLocations {
        crate::builders::notebook_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::GetLocation {
        crate::builders::notebook_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::SetIamPolicy {
        crate::builders::notebook_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::GetIamPolicy {
        crate::builders::notebook_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::TestIamPermissions {
        crate::builders::notebook_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::ListOperations {
        crate::builders::notebook_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::GetOperation {
        crate::builders::notebook_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::DeleteOperation {
        crate::builders::notebook_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::CancelOperation {
        crate::builders::notebook_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::notebook_service::WaitOperation {
        crate::builders::notebook_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// A service for managing Vertex AI's machine learning PersistentResource.
///
/// # Configuration
///
/// `PersistentResourceService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `PersistentResourceService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `PersistentResourceService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct PersistentResourceService {
    inner: Arc<dyn crate::stubs::dynamic::PersistentResourceService>,
}

impl PersistentResourceService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::PersistentResourceService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::PersistentResourceService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::PersistentResourceService> {
        crate::transport::PersistentResourceService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::PersistentResourceService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::PersistentResourceService::new)
    }

    /// Creates a PersistentResource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_persistent_resource(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::persistent_resource_service::CreatePersistentResource {
        crate::builders::persistent_resource_service::CreatePersistentResource::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Gets a PersistentResource.
    pub fn get_persistent_resource(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::persistent_resource_service::GetPersistentResource {
        crate::builders::persistent_resource_service::GetPersistentResource::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists PersistentResources in a Location.
    pub fn list_persistent_resources(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::persistent_resource_service::ListPersistentResources {
        crate::builders::persistent_resource_service::ListPersistentResources::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Deletes a PersistentResource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_persistent_resource(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::persistent_resource_service::DeletePersistentResource {
        crate::builders::persistent_resource_service::DeletePersistentResource::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Updates a PersistentResource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_persistent_resource(
        &self,
        persistent_resource: impl Into<crate::model::PersistentResource>,
    ) -> crate::builders::persistent_resource_service::UpdatePersistentResource {
        crate::builders::persistent_resource_service::UpdatePersistentResource::new(
            self.inner.clone(),
        )
        .set_persistent_resource(persistent_resource.into())
    }

    /// Reboots a PersistentResource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn reboot_persistent_resource(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::persistent_resource_service::RebootPersistentResource {
        crate::builders::persistent_resource_service::RebootPersistentResource::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::persistent_resource_service::ListLocations {
        crate::builders::persistent_resource_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::persistent_resource_service::GetLocation {
        crate::builders::persistent_resource_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::persistent_resource_service::SetIamPolicy {
        crate::builders::persistent_resource_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::persistent_resource_service::GetIamPolicy {
        crate::builders::persistent_resource_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::persistent_resource_service::TestIamPermissions {
        crate::builders::persistent_resource_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::persistent_resource_service::ListOperations {
        crate::builders::persistent_resource_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::persistent_resource_service::GetOperation {
        crate::builders::persistent_resource_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::persistent_resource_service::DeleteOperation {
        crate::builders::persistent_resource_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::persistent_resource_service::CancelOperation {
        crate::builders::persistent_resource_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::persistent_resource_service::WaitOperation {
        crate::builders::persistent_resource_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// A service for creating and managing Vertex AI's pipelines. This includes both
/// `TrainingPipeline` resources (used for AutoML and custom training) and
/// `PipelineJob` resources (used for Vertex AI Pipelines).
///
/// # Configuration
///
/// `PipelineService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `PipelineService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `PipelineService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct PipelineService {
    inner: Arc<dyn crate::stubs::dynamic::PipelineService>,
}

impl PipelineService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::PipelineService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::PipelineService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::PipelineService> {
        crate::transport::PipelineService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::PipelineService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::PipelineService::new)
    }

    /// Creates a TrainingPipeline. A created TrainingPipeline right away will be
    /// attempted to be run.
    pub fn create_training_pipeline(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::pipeline_service::CreateTrainingPipeline {
        crate::builders::pipeline_service::CreateTrainingPipeline::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a TrainingPipeline.
    pub fn get_training_pipeline(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::pipeline_service::GetTrainingPipeline {
        crate::builders::pipeline_service::GetTrainingPipeline::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists TrainingPipelines in a Location.
    pub fn list_training_pipelines(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::pipeline_service::ListTrainingPipelines {
        crate::builders::pipeline_service::ListTrainingPipelines::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a TrainingPipeline.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_training_pipeline(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::pipeline_service::DeleteTrainingPipeline {
        crate::builders::pipeline_service::DeleteTrainingPipeline::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Cancels a TrainingPipeline.
    /// Starts asynchronous cancellation on the TrainingPipeline. The server
    /// makes a best effort to cancel the pipeline, but success is not
    /// guaranteed. Clients can use
    /// [PipelineService.GetTrainingPipeline][google.cloud.aiplatform.v1.PipelineService.GetTrainingPipeline]
    /// or other methods to check whether the cancellation succeeded or whether the
    /// pipeline completed despite cancellation. On successful cancellation,
    /// the TrainingPipeline is not deleted; instead it becomes a pipeline with
    /// a
    /// [TrainingPipeline.error][google.cloud.aiplatform.v1.TrainingPipeline.error]
    /// value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
    /// corresponding to `Code.CANCELLED`, and
    /// [TrainingPipeline.state][google.cloud.aiplatform.v1.TrainingPipeline.state]
    /// is set to `CANCELLED`.
    ///
    /// [google.cloud.aiplatform.v1.PipelineService.GetTrainingPipeline]: crate::client::PipelineService::get_training_pipeline
    /// [google.cloud.aiplatform.v1.TrainingPipeline.error]: crate::model::TrainingPipeline::error
    /// [google.cloud.aiplatform.v1.TrainingPipeline.state]: crate::model::TrainingPipeline::state
    /// [google.rpc.Status.code]: rpc::model::Status::code
    pub fn cancel_training_pipeline(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::pipeline_service::CancelTrainingPipeline {
        crate::builders::pipeline_service::CancelTrainingPipeline::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a PipelineJob. A PipelineJob will run immediately when created.
    pub fn create_pipeline_job(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::pipeline_service::CreatePipelineJob {
        crate::builders::pipeline_service::CreatePipelineJob::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a PipelineJob.
    pub fn get_pipeline_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::pipeline_service::GetPipelineJob {
        crate::builders::pipeline_service::GetPipelineJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists PipelineJobs in a Location.
    pub fn list_pipeline_jobs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::pipeline_service::ListPipelineJobs {
        crate::builders::pipeline_service::ListPipelineJobs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a PipelineJob.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_pipeline_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::pipeline_service::DeletePipelineJob {
        crate::builders::pipeline_service::DeletePipelineJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Batch deletes PipelineJobs
    /// The Operation is atomic. If it fails, none of the PipelineJobs are deleted.
    /// If it succeeds, all of the PipelineJobs are deleted.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_delete_pipeline_jobs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::pipeline_service::BatchDeletePipelineJobs {
        crate::builders::pipeline_service::BatchDeletePipelineJobs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Cancels a PipelineJob.
    /// Starts asynchronous cancellation on the PipelineJob. The server
    /// makes a best effort to cancel the pipeline, but success is not
    /// guaranteed. Clients can use
    /// [PipelineService.GetPipelineJob][google.cloud.aiplatform.v1.PipelineService.GetPipelineJob]
    /// or other methods to check whether the cancellation succeeded or whether the
    /// pipeline completed despite cancellation. On successful cancellation,
    /// the PipelineJob is not deleted; instead it becomes a pipeline with
    /// a [PipelineJob.error][google.cloud.aiplatform.v1.PipelineJob.error] value
    /// with a [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding
    /// to `Code.CANCELLED`, and
    /// [PipelineJob.state][google.cloud.aiplatform.v1.PipelineJob.state] is set to
    /// `CANCELLED`.
    ///
    /// [google.cloud.aiplatform.v1.PipelineJob.error]: crate::model::PipelineJob::error
    /// [google.cloud.aiplatform.v1.PipelineJob.state]: crate::model::PipelineJob::state
    /// [google.cloud.aiplatform.v1.PipelineService.GetPipelineJob]: crate::client::PipelineService::get_pipeline_job
    /// [google.rpc.Status.code]: rpc::model::Status::code
    pub fn cancel_pipeline_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::pipeline_service::CancelPipelineJob {
        crate::builders::pipeline_service::CancelPipelineJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Batch cancel PipelineJobs.
    /// Firstly the server will check if all the jobs are in non-terminal states,
    /// and skip the jobs that are already terminated.
    /// If the operation failed, none of the pipeline jobs are cancelled.
    /// The server will poll the states of all the pipeline jobs periodically
    /// to check the cancellation status.
    /// This operation will return an LRO.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_cancel_pipeline_jobs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::pipeline_service::BatchCancelPipelineJobs {
        crate::builders::pipeline_service::BatchCancelPipelineJobs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::pipeline_service::ListLocations {
        crate::builders::pipeline_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::pipeline_service::GetLocation {
        crate::builders::pipeline_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::pipeline_service::SetIamPolicy {
        crate::builders::pipeline_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::pipeline_service::GetIamPolicy {
        crate::builders::pipeline_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::pipeline_service::TestIamPermissions {
        crate::builders::pipeline_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::pipeline_service::ListOperations {
        crate::builders::pipeline_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::pipeline_service::GetOperation {
        crate::builders::pipeline_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::pipeline_service::DeleteOperation {
        crate::builders::pipeline_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::pipeline_service::CancelOperation {
        crate::builders::pipeline_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::pipeline_service::WaitOperation {
        crate::builders::pipeline_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// A service for online predictions and explanations.
///
/// # Configuration
///
/// `PredictionService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `PredictionService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `PredictionService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct PredictionService {
    inner: Arc<dyn crate::stubs::dynamic::PredictionService>,
}

impl PredictionService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::PredictionService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::PredictionService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::PredictionService> {
        crate::transport::PredictionService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::PredictionService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::PredictionService::new)
    }

    /// Perform an online prediction.
    pub fn predict(
        &self,
        endpoint: impl Into<std::string::String>,
    ) -> crate::builders::prediction_service::Predict {
        crate::builders::prediction_service::Predict::new(self.inner.clone())
            .set_endpoint(endpoint.into())
    }

    /// Perform an online prediction with an arbitrary HTTP payload.
    ///
    /// The response includes the following HTTP headers:
    ///
    /// * `X-Vertex-AI-Endpoint-Id`: ID of the
    ///   [Endpoint][google.cloud.aiplatform.v1.Endpoint] that served this
    ///   prediction.
    ///
    /// * `X-Vertex-AI-Deployed-Model-Id`: ID of the Endpoint's
    ///   [DeployedModel][google.cloud.aiplatform.v1.DeployedModel] that served this
    ///   prediction.
    ///
    ///
    /// [google.cloud.aiplatform.v1.DeployedModel]: crate::model::DeployedModel
    /// [google.cloud.aiplatform.v1.Endpoint]: crate::model::Endpoint
    pub fn raw_predict(
        &self,
        endpoint: impl Into<std::string::String>,
    ) -> crate::builders::prediction_service::RawPredict {
        crate::builders::prediction_service::RawPredict::new(self.inner.clone())
            .set_endpoint(endpoint.into())
    }

    /// Perform an unary online prediction request to a gRPC model server for
    /// Vertex first-party products and frameworks.
    pub fn direct_predict(
        &self,
        endpoint: impl Into<std::string::String>,
    ) -> crate::builders::prediction_service::DirectPredict {
        crate::builders::prediction_service::DirectPredict::new(self.inner.clone())
            .set_endpoint(endpoint.into())
    }

    /// Perform an unary online prediction request to a gRPC model server for
    /// custom containers.
    pub fn direct_raw_predict(
        &self,
        endpoint: impl Into<std::string::String>,
    ) -> crate::builders::prediction_service::DirectRawPredict {
        crate::builders::prediction_service::DirectRawPredict::new(self.inner.clone())
            .set_endpoint(endpoint.into())
    }

    /// Perform an online explanation.
    ///
    /// If
    /// [deployed_model_id][google.cloud.aiplatform.v1.ExplainRequest.deployed_model_id]
    /// is specified, the corresponding DeployModel must have
    /// [explanation_spec][google.cloud.aiplatform.v1.DeployedModel.explanation_spec]
    /// populated. If
    /// [deployed_model_id][google.cloud.aiplatform.v1.ExplainRequest.deployed_model_id]
    /// is not specified, all DeployedModels must have
    /// [explanation_spec][google.cloud.aiplatform.v1.DeployedModel.explanation_spec]
    /// populated.
    ///
    /// [google.cloud.aiplatform.v1.DeployedModel.explanation_spec]: crate::model::DeployedModel::explanation_spec
    /// [google.cloud.aiplatform.v1.ExplainRequest.deployed_model_id]: crate::model::ExplainRequest::deployed_model_id
    pub fn explain(
        &self,
        endpoint: impl Into<std::string::String>,
    ) -> crate::builders::prediction_service::Explain {
        crate::builders::prediction_service::Explain::new(self.inner.clone())
            .set_endpoint(endpoint.into())
    }

    /// Generate content with multimodal inputs.
    pub fn generate_content(
        &self,
        model: impl Into<std::string::String>,
    ) -> crate::builders::prediction_service::GenerateContent {
        crate::builders::prediction_service::GenerateContent::new(self.inner.clone())
            .set_model(model.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::prediction_service::ListLocations {
        crate::builders::prediction_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::prediction_service::GetLocation {
        crate::builders::prediction_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::prediction_service::SetIamPolicy {
        crate::builders::prediction_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::prediction_service::GetIamPolicy {
        crate::builders::prediction_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::prediction_service::TestIamPermissions {
        crate::builders::prediction_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::prediction_service::ListOperations {
        crate::builders::prediction_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::prediction_service::GetOperation {
        crate::builders::prediction_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::prediction_service::DeleteOperation {
        crate::builders::prediction_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::prediction_service::CancelOperation {
        crate::builders::prediction_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::prediction_service::WaitOperation {
        crate::builders::prediction_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// A service for executing queries on Reasoning Engine.
///
/// # Configuration
///
/// `ReasoningEngineExecutionService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `ReasoningEngineExecutionService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ReasoningEngineExecutionService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct ReasoningEngineExecutionService {
    inner: Arc<dyn crate::stubs::dynamic::ReasoningEngineExecutionService>,
}

impl ReasoningEngineExecutionService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::ReasoningEngineExecutionService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::ReasoningEngineExecutionService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ReasoningEngineExecutionService> {
        crate::transport::ReasoningEngineExecutionService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ReasoningEngineExecutionService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::ReasoningEngineExecutionService::new)
    }

    /// Queries using a reasoning engine.
    pub fn query_reasoning_engine(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_execution_service::QueryReasoningEngine {
        crate::builders::reasoning_engine_execution_service::QueryReasoningEngine::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_execution_service::ListLocations {
        crate::builders::reasoning_engine_execution_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_execution_service::GetLocation {
        crate::builders::reasoning_engine_execution_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_execution_service::SetIamPolicy {
        crate::builders::reasoning_engine_execution_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_execution_service::GetIamPolicy {
        crate::builders::reasoning_engine_execution_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_execution_service::TestIamPermissions {
        crate::builders::reasoning_engine_execution_service::TestIamPermissions::new(
            self.inner.clone(),
        )
        .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_execution_service::ListOperations {
        crate::builders::reasoning_engine_execution_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_execution_service::GetOperation {
        crate::builders::reasoning_engine_execution_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_execution_service::DeleteOperation {
        crate::builders::reasoning_engine_execution_service::DeleteOperation::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_execution_service::CancelOperation {
        crate::builders::reasoning_engine_execution_service::CancelOperation::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_execution_service::WaitOperation {
        crate::builders::reasoning_engine_execution_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// A service for managing Vertex AI's Reasoning Engines.
///
/// # Configuration
///
/// `ReasoningEngineService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `ReasoningEngineService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ReasoningEngineService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct ReasoningEngineService {
    inner: Arc<dyn crate::stubs::dynamic::ReasoningEngineService>,
}

impl ReasoningEngineService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::ReasoningEngineService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::ReasoningEngineService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ReasoningEngineService> {
        crate::transport::ReasoningEngineService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ReasoningEngineService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::ReasoningEngineService::new)
    }

    /// Creates a reasoning engine.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_reasoning_engine(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_service::CreateReasoningEngine {
        crate::builders::reasoning_engine_service::CreateReasoningEngine::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a reasoning engine.
    pub fn get_reasoning_engine(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_service::GetReasoningEngine {
        crate::builders::reasoning_engine_service::GetReasoningEngine::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists reasoning engines in a location.
    pub fn list_reasoning_engines(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_service::ListReasoningEngines {
        crate::builders::reasoning_engine_service::ListReasoningEngines::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a reasoning engine.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_reasoning_engine(
        &self,
        reasoning_engine: impl Into<crate::model::ReasoningEngine>,
    ) -> crate::builders::reasoning_engine_service::UpdateReasoningEngine {
        crate::builders::reasoning_engine_service::UpdateReasoningEngine::new(self.inner.clone())
            .set_reasoning_engine(reasoning_engine.into())
    }

    /// Deletes a reasoning engine.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_reasoning_engine(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_service::DeleteReasoningEngine {
        crate::builders::reasoning_engine_service::DeleteReasoningEngine::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_service::ListLocations {
        crate::builders::reasoning_engine_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_service::GetLocation {
        crate::builders::reasoning_engine_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_service::SetIamPolicy {
        crate::builders::reasoning_engine_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_service::GetIamPolicy {
        crate::builders::reasoning_engine_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_service::TestIamPermissions {
        crate::builders::reasoning_engine_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_service::ListOperations {
        crate::builders::reasoning_engine_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_service::GetOperation {
        crate::builders::reasoning_engine_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_service::DeleteOperation {
        crate::builders::reasoning_engine_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_service::CancelOperation {
        crate::builders::reasoning_engine_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::reasoning_engine_service::WaitOperation {
        crate::builders::reasoning_engine_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// A service for creating and managing Vertex AI's Schedule resources to
/// periodically launch shceudled runs to make API calls.
///
/// # Configuration
///
/// `ScheduleService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `ScheduleService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ScheduleService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct ScheduleService {
    inner: Arc<dyn crate::stubs::dynamic::ScheduleService>,
}

impl ScheduleService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::ScheduleService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::ScheduleService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ScheduleService> {
        crate::transport::ScheduleService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ScheduleService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::ScheduleService::new)
    }

    /// Creates a Schedule.
    pub fn create_schedule(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::schedule_service::CreateSchedule {
        crate::builders::schedule_service::CreateSchedule::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a Schedule.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_schedule(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::schedule_service::DeleteSchedule {
        crate::builders::schedule_service::DeleteSchedule::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets a Schedule.
    pub fn get_schedule(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::schedule_service::GetSchedule {
        crate::builders::schedule_service::GetSchedule::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists Schedules in a Location.
    pub fn list_schedules(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::schedule_service::ListSchedules {
        crate::builders::schedule_service::ListSchedules::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Pauses a Schedule. Will mark
    /// [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'PAUSED'. If
    /// the schedule is paused, no new runs will be created. Already created runs
    /// will NOT be paused or canceled.
    ///
    /// [google.cloud.aiplatform.v1.Schedule.state]: crate::model::Schedule::state
    pub fn pause_schedule(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::schedule_service::PauseSchedule {
        crate::builders::schedule_service::PauseSchedule::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Resumes a paused Schedule to start scheduling new runs. Will mark
    /// [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'ACTIVE'.
    /// Only paused Schedule can be resumed.
    ///
    /// When the Schedule is resumed, new runs will be scheduled starting from the
    /// next execution time after the current time based on the time_specification
    /// in the Schedule. If
    /// [Schedule.catch_up][google.cloud.aiplatform.v1.Schedule.catch_up] is set up
    /// true, all missed runs will be scheduled for backfill first.
    ///
    /// [google.cloud.aiplatform.v1.Schedule.catch_up]: crate::model::Schedule::catch_up
    /// [google.cloud.aiplatform.v1.Schedule.state]: crate::model::Schedule::state
    pub fn resume_schedule(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::schedule_service::ResumeSchedule {
        crate::builders::schedule_service::ResumeSchedule::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates an active or paused Schedule.
    ///
    /// When the Schedule is updated, new runs will be scheduled starting from the
    /// updated next execution time after the update time based on the
    /// time_specification in the updated Schedule. All unstarted runs before the
    /// update time will be skipped while already created runs will NOT be paused
    /// or canceled.
    pub fn update_schedule(
        &self,
        schedule: impl Into<crate::model::Schedule>,
    ) -> crate::builders::schedule_service::UpdateSchedule {
        crate::builders::schedule_service::UpdateSchedule::new(self.inner.clone())
            .set_schedule(schedule.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::schedule_service::ListLocations {
        crate::builders::schedule_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::schedule_service::GetLocation {
        crate::builders::schedule_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::schedule_service::SetIamPolicy {
        crate::builders::schedule_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::schedule_service::GetIamPolicy {
        crate::builders::schedule_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::schedule_service::TestIamPermissions {
        crate::builders::schedule_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::schedule_service::ListOperations {
        crate::builders::schedule_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::schedule_service::GetOperation {
        crate::builders::schedule_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::schedule_service::DeleteOperation {
        crate::builders::schedule_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::schedule_service::CancelOperation {
        crate::builders::schedule_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::schedule_service::WaitOperation {
        crate::builders::schedule_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// A service for creating and managing Customer SpecialistPools.
/// When customers start Data Labeling jobs, they can reuse/create Specialist
/// Pools to bring their own Specialists to label the data.
/// Customers can add/remove Managers for the Specialist Pool on Cloud console,
/// then Managers will get email notifications to manage Specialists and tasks on
/// CrowdCompute console.
///
/// # Configuration
///
/// `SpecialistPoolService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `SpecialistPoolService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `SpecialistPoolService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct SpecialistPoolService {
    inner: Arc<dyn crate::stubs::dynamic::SpecialistPoolService>,
}

impl SpecialistPoolService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::SpecialistPoolService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::SpecialistPoolService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::SpecialistPoolService> {
        crate::transport::SpecialistPoolService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::SpecialistPoolService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::SpecialistPoolService::new)
    }

    /// Creates a SpecialistPool.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_specialist_pool(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::specialist_pool_service::CreateSpecialistPool {
        crate::builders::specialist_pool_service::CreateSpecialistPool::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a SpecialistPool.
    pub fn get_specialist_pool(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::specialist_pool_service::GetSpecialistPool {
        crate::builders::specialist_pool_service::GetSpecialistPool::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists SpecialistPools in a Location.
    pub fn list_specialist_pools(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::specialist_pool_service::ListSpecialistPools {
        crate::builders::specialist_pool_service::ListSpecialistPools::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a SpecialistPool as well as all Specialists in the pool.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_specialist_pool(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::specialist_pool_service::DeleteSpecialistPool {
        crate::builders::specialist_pool_service::DeleteSpecialistPool::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates a SpecialistPool.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_specialist_pool(
        &self,
        specialist_pool: impl Into<crate::model::SpecialistPool>,
    ) -> crate::builders::specialist_pool_service::UpdateSpecialistPool {
        crate::builders::specialist_pool_service::UpdateSpecialistPool::new(self.inner.clone())
            .set_specialist_pool(specialist_pool.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::specialist_pool_service::ListLocations {
        crate::builders::specialist_pool_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::specialist_pool_service::GetLocation {
        crate::builders::specialist_pool_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::specialist_pool_service::SetIamPolicy {
        crate::builders::specialist_pool_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::specialist_pool_service::GetIamPolicy {
        crate::builders::specialist_pool_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::specialist_pool_service::TestIamPermissions {
        crate::builders::specialist_pool_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::specialist_pool_service::ListOperations {
        crate::builders::specialist_pool_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::specialist_pool_service::GetOperation {
        crate::builders::specialist_pool_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::specialist_pool_service::DeleteOperation {
        crate::builders::specialist_pool_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::specialist_pool_service::CancelOperation {
        crate::builders::specialist_pool_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::specialist_pool_service::WaitOperation {
        crate::builders::specialist_pool_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// TensorboardService
///
/// # Configuration
///
/// `TensorboardService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `TensorboardService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `TensorboardService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct TensorboardService {
    inner: Arc<dyn crate::stubs::dynamic::TensorboardService>,
}

impl TensorboardService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::TensorboardService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::TensorboardService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::TensorboardService> {
        crate::transport::TensorboardService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::TensorboardService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::TensorboardService::new)
    }

    /// Creates a Tensorboard.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_tensorboard(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::CreateTensorboard {
        crate::builders::tensorboard_service::CreateTensorboard::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a Tensorboard.
    pub fn get_tensorboard(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::GetTensorboard {
        crate::builders::tensorboard_service::GetTensorboard::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates a Tensorboard.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_tensorboard(
        &self,
        tensorboard: impl Into<crate::model::Tensorboard>,
    ) -> crate::builders::tensorboard_service::UpdateTensorboard {
        crate::builders::tensorboard_service::UpdateTensorboard::new(self.inner.clone())
            .set_tensorboard(tensorboard.into())
    }

    /// Lists Tensorboards in a Location.
    pub fn list_tensorboards(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::ListTensorboards {
        crate::builders::tensorboard_service::ListTensorboards::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a Tensorboard.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_tensorboard(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::DeleteTensorboard {
        crate::builders::tensorboard_service::DeleteTensorboard::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Returns a list of monthly active users for a given TensorBoard instance.
    pub fn read_tensorboard_usage(
        &self,
        tensorboard: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::ReadTensorboardUsage {
        crate::builders::tensorboard_service::ReadTensorboardUsage::new(self.inner.clone())
            .set_tensorboard(tensorboard.into())
    }

    /// Returns the storage size for a given TensorBoard instance.
    pub fn read_tensorboard_size(
        &self,
        tensorboard: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::ReadTensorboardSize {
        crate::builders::tensorboard_service::ReadTensorboardSize::new(self.inner.clone())
            .set_tensorboard(tensorboard.into())
    }

    /// Creates a TensorboardExperiment.
    pub fn create_tensorboard_experiment(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::CreateTensorboardExperiment {
        crate::builders::tensorboard_service::CreateTensorboardExperiment::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a TensorboardExperiment.
    pub fn get_tensorboard_experiment(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::GetTensorboardExperiment {
        crate::builders::tensorboard_service::GetTensorboardExperiment::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates a TensorboardExperiment.
    pub fn update_tensorboard_experiment(
        &self,
        tensorboard_experiment: impl Into<crate::model::TensorboardExperiment>,
    ) -> crate::builders::tensorboard_service::UpdateTensorboardExperiment {
        crate::builders::tensorboard_service::UpdateTensorboardExperiment::new(self.inner.clone())
            .set_tensorboard_experiment(tensorboard_experiment.into())
    }

    /// Lists TensorboardExperiments in a Location.
    pub fn list_tensorboard_experiments(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::ListTensorboardExperiments {
        crate::builders::tensorboard_service::ListTensorboardExperiments::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a TensorboardExperiment.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_tensorboard_experiment(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::DeleteTensorboardExperiment {
        crate::builders::tensorboard_service::DeleteTensorboardExperiment::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a TensorboardRun.
    pub fn create_tensorboard_run(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::CreateTensorboardRun {
        crate::builders::tensorboard_service::CreateTensorboardRun::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Batch create TensorboardRuns.
    pub fn batch_create_tensorboard_runs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::BatchCreateTensorboardRuns {
        crate::builders::tensorboard_service::BatchCreateTensorboardRuns::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a TensorboardRun.
    pub fn get_tensorboard_run(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::GetTensorboardRun {
        crate::builders::tensorboard_service::GetTensorboardRun::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates a TensorboardRun.
    pub fn update_tensorboard_run(
        &self,
        tensorboard_run: impl Into<crate::model::TensorboardRun>,
    ) -> crate::builders::tensorboard_service::UpdateTensorboardRun {
        crate::builders::tensorboard_service::UpdateTensorboardRun::new(self.inner.clone())
            .set_tensorboard_run(tensorboard_run.into())
    }

    /// Lists TensorboardRuns in a Location.
    pub fn list_tensorboard_runs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::ListTensorboardRuns {
        crate::builders::tensorboard_service::ListTensorboardRuns::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a TensorboardRun.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_tensorboard_run(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::DeleteTensorboardRun {
        crate::builders::tensorboard_service::DeleteTensorboardRun::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Batch create TensorboardTimeSeries that belong to a TensorboardExperiment.
    pub fn batch_create_tensorboard_time_series(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::BatchCreateTensorboardTimeSeries {
        crate::builders::tensorboard_service::BatchCreateTensorboardTimeSeries::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Creates a TensorboardTimeSeries.
    pub fn create_tensorboard_time_series(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::CreateTensorboardTimeSeries {
        crate::builders::tensorboard_service::CreateTensorboardTimeSeries::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a TensorboardTimeSeries.
    pub fn get_tensorboard_time_series(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::GetTensorboardTimeSeries {
        crate::builders::tensorboard_service::GetTensorboardTimeSeries::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates a TensorboardTimeSeries.
    pub fn update_tensorboard_time_series(
        &self,
        tensorboard_time_series: impl Into<crate::model::TensorboardTimeSeries>,
    ) -> crate::builders::tensorboard_service::UpdateTensorboardTimeSeries {
        crate::builders::tensorboard_service::UpdateTensorboardTimeSeries::new(self.inner.clone())
            .set_tensorboard_time_series(tensorboard_time_series.into())
    }

    /// Lists TensorboardTimeSeries in a Location.
    pub fn list_tensorboard_time_series(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::ListTensorboardTimeSeries {
        crate::builders::tensorboard_service::ListTensorboardTimeSeries::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a TensorboardTimeSeries.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_tensorboard_time_series(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::DeleteTensorboardTimeSeries {
        crate::builders::tensorboard_service::DeleteTensorboardTimeSeries::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Reads multiple TensorboardTimeSeries' data. The data point number limit is
    /// 1000 for scalars, 100 for tensors and blob references. If the number of
    /// data points stored is less than the limit, all data is returned.
    /// Otherwise, the number limit of data points is randomly selected from
    /// this time series and returned.
    pub fn batch_read_tensorboard_time_series_data(
        &self,
        tensorboard: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::BatchReadTensorboardTimeSeriesData {
        crate::builders::tensorboard_service::BatchReadTensorboardTimeSeriesData::new(
            self.inner.clone(),
        )
        .set_tensorboard(tensorboard.into())
    }

    /// Reads a TensorboardTimeSeries' data. By default, if the number of data
    /// points stored is less than 1000, all data is returned. Otherwise, 1000
    /// data points is randomly selected from this time series and returned.
    /// This value can be changed by changing max_data_points, which can't be
    /// greater than 10k.
    pub fn read_tensorboard_time_series_data(
        &self,
        tensorboard_time_series: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::ReadTensorboardTimeSeriesData {
        crate::builders::tensorboard_service::ReadTensorboardTimeSeriesData::new(self.inner.clone())
            .set_tensorboard_time_series(tensorboard_time_series.into())
    }

    /// Write time series data points of multiple TensorboardTimeSeries in multiple
    /// TensorboardRun's. If any data fail to be ingested, an error is returned.
    pub fn write_tensorboard_experiment_data(
        &self,
        tensorboard_experiment: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::WriteTensorboardExperimentData {
        crate::builders::tensorboard_service::WriteTensorboardExperimentData::new(
            self.inner.clone(),
        )
        .set_tensorboard_experiment(tensorboard_experiment.into())
    }

    /// Write time series data points into multiple TensorboardTimeSeries under
    /// a TensorboardRun. If any data fail to be ingested, an error is returned.
    pub fn write_tensorboard_run_data(
        &self,
        tensorboard_run: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::WriteTensorboardRunData {
        crate::builders::tensorboard_service::WriteTensorboardRunData::new(self.inner.clone())
            .set_tensorboard_run(tensorboard_run.into())
    }

    /// Exports a TensorboardTimeSeries' data. Data is returned in paginated
    /// responses.
    pub fn export_tensorboard_time_series_data(
        &self,
        tensorboard_time_series: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::ExportTensorboardTimeSeriesData {
        crate::builders::tensorboard_service::ExportTensorboardTimeSeriesData::new(
            self.inner.clone(),
        )
        .set_tensorboard_time_series(tensorboard_time_series.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::ListLocations {
        crate::builders::tensorboard_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::GetLocation {
        crate::builders::tensorboard_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::SetIamPolicy {
        crate::builders::tensorboard_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::GetIamPolicy {
        crate::builders::tensorboard_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::TestIamPermissions {
        crate::builders::tensorboard_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::ListOperations {
        crate::builders::tensorboard_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::GetOperation {
        crate::builders::tensorboard_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::DeleteOperation {
        crate::builders::tensorboard_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::CancelOperation {
        crate::builders::tensorboard_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::tensorboard_service::WaitOperation {
        crate::builders::tensorboard_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// A service for managing user data for RAG.
///
/// # Configuration
///
/// `VertexRagDataService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `VertexRagDataService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `VertexRagDataService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct VertexRagDataService {
    inner: Arc<dyn crate::stubs::dynamic::VertexRagDataService>,
}

impl VertexRagDataService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::VertexRagDataService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::VertexRagDataService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::VertexRagDataService> {
        crate::transport::VertexRagDataService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::VertexRagDataService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::VertexRagDataService::new)
    }

    /// Creates a RagCorpus.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_rag_corpus(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_data_service::CreateRagCorpus {
        crate::builders::vertex_rag_data_service::CreateRagCorpus::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a RagCorpus.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_rag_corpus(
        &self,
        rag_corpus: impl Into<crate::model::RagCorpus>,
    ) -> crate::builders::vertex_rag_data_service::UpdateRagCorpus {
        crate::builders::vertex_rag_data_service::UpdateRagCorpus::new(self.inner.clone())
            .set_rag_corpus(rag_corpus.into())
    }

    /// Gets a RagCorpus.
    pub fn get_rag_corpus(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_data_service::GetRagCorpus {
        crate::builders::vertex_rag_data_service::GetRagCorpus::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists RagCorpora in a Location.
    pub fn list_rag_corpora(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_data_service::ListRagCorpora {
        crate::builders::vertex_rag_data_service::ListRagCorpora::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a RagCorpus.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_rag_corpus(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_data_service::DeleteRagCorpus {
        crate::builders::vertex_rag_data_service::DeleteRagCorpus::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Upload a file into a RagCorpus.
    pub fn upload_rag_file(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_data_service::UploadRagFile {
        crate::builders::vertex_rag_data_service::UploadRagFile::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Import files from Google Cloud Storage or Google Drive into a RagCorpus.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn import_rag_files(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_data_service::ImportRagFiles {
        crate::builders::vertex_rag_data_service::ImportRagFiles::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a RagFile.
    pub fn get_rag_file(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_data_service::GetRagFile {
        crate::builders::vertex_rag_data_service::GetRagFile::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists RagFiles in a RagCorpus.
    pub fn list_rag_files(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_data_service::ListRagFiles {
        crate::builders::vertex_rag_data_service::ListRagFiles::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a RagFile.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_rag_file(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_data_service::DeleteRagFile {
        crate::builders::vertex_rag_data_service::DeleteRagFile::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_data_service::ListLocations {
        crate::builders::vertex_rag_data_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_data_service::GetLocation {
        crate::builders::vertex_rag_data_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_data_service::SetIamPolicy {
        crate::builders::vertex_rag_data_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_data_service::GetIamPolicy {
        crate::builders::vertex_rag_data_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_data_service::TestIamPermissions {
        crate::builders::vertex_rag_data_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_data_service::ListOperations {
        crate::builders::vertex_rag_data_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_data_service::GetOperation {
        crate::builders::vertex_rag_data_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_data_service::DeleteOperation {
        crate::builders::vertex_rag_data_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_data_service::CancelOperation {
        crate::builders::vertex_rag_data_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_data_service::WaitOperation {
        crate::builders::vertex_rag_data_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// A service for retrieving relevant contexts.
///
/// # Configuration
///
/// `VertexRagService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `VertexRagService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `VertexRagService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct VertexRagService {
    inner: Arc<dyn crate::stubs::dynamic::VertexRagService>,
}

impl VertexRagService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::VertexRagService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::VertexRagService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::VertexRagService> {
        crate::transport::VertexRagService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::VertexRagService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::VertexRagService::new)
    }

    /// Retrieves relevant contexts for a query.
    pub fn retrieve_contexts(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_service::RetrieveContexts {
        crate::builders::vertex_rag_service::RetrieveContexts::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Given an input prompt, it returns augmented prompt from vertex rag store
    /// to guide LLM towards generating grounded responses.
    pub fn augment_prompt(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_service::AugmentPrompt {
        crate::builders::vertex_rag_service::AugmentPrompt::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Given an input text, it returns a score that evaluates the factuality of
    /// the text. It also extracts and returns claims from the text and provides
    /// supporting facts.
    pub fn corroborate_content(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_service::CorroborateContent {
        crate::builders::vertex_rag_service::CorroborateContent::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_service::ListLocations {
        crate::builders::vertex_rag_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_service::GetLocation {
        crate::builders::vertex_rag_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_service::SetIamPolicy {
        crate::builders::vertex_rag_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_service::GetIamPolicy {
        crate::builders::vertex_rag_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_service::TestIamPermissions {
        crate::builders::vertex_rag_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_service::ListOperations {
        crate::builders::vertex_rag_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_service::GetOperation {
        crate::builders::vertex_rag_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_service::DeleteOperation {
        crate::builders::vertex_rag_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_service::CancelOperation {
        crate::builders::vertex_rag_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vertex_rag_service::WaitOperation {
        crate::builders::vertex_rag_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Vertex AI API.
///
/// # Service Description
///
/// Vertex AI Vizier API.
///
/// Vertex AI Vizier is a service to solve blackbox optimization problems,
/// such as tuning machine learning hyperparameters and searching over deep
/// learning architectures.
///
/// # Configuration
///
/// `VizierService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `VizierService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `VizierService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct VizierService {
    inner: Arc<dyn crate::stubs::dynamic::VizierService>,
}

impl VizierService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::VizierService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::VizierService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::VizierService> {
        crate::transport::VizierService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::VizierService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::VizierService::new)
    }

    /// Creates a Study. A resource name will be generated after creation of the
    /// Study.
    pub fn create_study(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::CreateStudy {
        crate::builders::vizier_service::CreateStudy::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a Study by name.
    pub fn get_study(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::GetStudy {
        crate::builders::vizier_service::GetStudy::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists all the studies in a region for an associated project.
    pub fn list_studies(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::ListStudies {
        crate::builders::vizier_service::ListStudies::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a Study.
    pub fn delete_study(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::DeleteStudy {
        crate::builders::vizier_service::DeleteStudy::new(self.inner.clone()).set_name(name.into())
    }

    /// Looks a study up using the user-defined display_name field instead of the
    /// fully qualified resource name.
    pub fn lookup_study(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::LookupStudy {
        crate::builders::vizier_service::LookupStudy::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Adds one or more Trials to a Study, with parameter values
    /// suggested by Vertex AI Vizier. Returns a long-running
    /// operation associated with the generation of Trial suggestions.
    /// When this long-running operation succeeds, it will contain
    /// a
    /// [SuggestTrialsResponse][google.cloud.aiplatform.v1.SuggestTrialsResponse].
    ///
    /// [google.cloud.aiplatform.v1.SuggestTrialsResponse]: crate::model::SuggestTrialsResponse
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn suggest_trials(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::SuggestTrials {
        crate::builders::vizier_service::SuggestTrials::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Adds a user provided Trial to a Study.
    pub fn create_trial(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::CreateTrial {
        crate::builders::vizier_service::CreateTrial::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a Trial.
    pub fn get_trial(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::GetTrial {
        crate::builders::vizier_service::GetTrial::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists the Trials associated with a Study.
    pub fn list_trials(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::ListTrials {
        crate::builders::vizier_service::ListTrials::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Adds a measurement of the objective metrics to a Trial. This measurement
    /// is assumed to have been taken before the Trial is complete.
    pub fn add_trial_measurement(
        &self,
        trial_name: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::AddTrialMeasurement {
        crate::builders::vizier_service::AddTrialMeasurement::new(self.inner.clone())
            .set_trial_name(trial_name.into())
    }

    /// Marks a Trial as complete.
    pub fn complete_trial(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::CompleteTrial {
        crate::builders::vizier_service::CompleteTrial::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deletes a Trial.
    pub fn delete_trial(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::DeleteTrial {
        crate::builders::vizier_service::DeleteTrial::new(self.inner.clone()).set_name(name.into())
    }

    /// Checks  whether a Trial should stop or not. Returns a
    /// long-running operation. When the operation is successful,
    /// it will contain a
    /// [CheckTrialEarlyStoppingStateResponse][google.cloud.aiplatform.v1.CheckTrialEarlyStoppingStateResponse].
    ///
    /// [google.cloud.aiplatform.v1.CheckTrialEarlyStoppingStateResponse]: crate::model::CheckTrialEarlyStoppingStateResponse
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn check_trial_early_stopping_state(
        &self,
        trial_name: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::CheckTrialEarlyStoppingState {
        crate::builders::vizier_service::CheckTrialEarlyStoppingState::new(self.inner.clone())
            .set_trial_name(trial_name.into())
    }

    /// Stops a Trial.
    pub fn stop_trial(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::StopTrial {
        crate::builders::vizier_service::StopTrial::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists the pareto-optimal Trials for multi-objective Study or the
    /// optimal Trials for single-objective Study. The definition of
    /// pareto-optimal can be checked in wiki page.
    /// <https://en.wikipedia.org/wiki/Pareto_efficiency>
    pub fn list_optimal_trials(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::ListOptimalTrials {
        crate::builders::vizier_service::ListOptimalTrials::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::ListLocations {
        crate::builders::vizier_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::GetLocation {
        crate::builders::vizier_service::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::SetIamPolicy {
        crate::builders::vizier_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::GetIamPolicy {
        crate::builders::vizier_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::TestIamPermissions {
        crate::builders::vizier_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::ListOperations {
        crate::builders::vizier_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::GetOperation {
        crate::builders::vizier_service::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::DeleteOperation {
        crate::builders::vizier_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::CancelOperation {
        crate::builders::vizier_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vizier_service::WaitOperation {
        crate::builders::vizier_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
