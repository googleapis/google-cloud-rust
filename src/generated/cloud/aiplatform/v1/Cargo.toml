# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Code generated by sidekick. DO NOT EDIT.

[package]
name                   = "google-cloud-aiplatform-v1"
version                = "0.3.0"
description            = "Google Cloud Client Libraries for Rust - Vertex AI API"
edition.workspace      = true
authors.workspace      = true
license.workspace      = true
repository.workspace   = true
keywords.workspace     = true
categories.workspace   = true
rust-version.workspace = true

[features]
default = [
    "dataset-service",
    "deployment-resource-pool-service",
    "endpoint-service",
    "evaluation-service",
    "feature-online-store-admin-service",
    "feature-online-store-service",
    "feature-registry-service",
    "featurestore-online-serving-service",
    "featurestore-service",
    "gen-ai-cache-service",
    "gen-ai-tuning-service",
    "index-endpoint-service",
    "index-service",
    "job-service",
    "llm-utility-service",
    "match-service",
    "metadata-service",
    "migration-service",
    "model-garden-service",
    "model-service",
    "notebook-service",
    "persistent-resource-service",
    "pipeline-service",
    "prediction-service",
    "reasoning-engine-execution-service",
    "reasoning-engine-service",
    "schedule-service",
    "specialist-pool-service",
    "tensorboard-service",
    "vertex-rag-data-service",
    "vertex-rag-service",
    "vizier-service",
]
# Enables `client::DatasetService` and all the types it depends on.
dataset-service = []
# Enables `client::DeploymentResourcePoolService` and all the types it depends on.
deployment-resource-pool-service = []
# Enables `client::EndpointService` and all the types it depends on.
endpoint-service = []
# Enables `client::EvaluationService` and all the types it depends on.
evaluation-service = []
# Enables `client::FeatureOnlineStoreAdminService` and all the types it depends on.
feature-online-store-admin-service = []
# Enables `client::FeatureOnlineStoreService` and all the types it depends on.
feature-online-store-service = []
# Enables `client::FeatureRegistryService` and all the types it depends on.
feature-registry-service = []
# Enables `client::FeaturestoreOnlineServingService` and all the types it depends on.
featurestore-online-serving-service = []
# Enables `client::FeaturestoreService` and all the types it depends on.
featurestore-service = []
# Enables `client::GenAiCacheService` and all the types it depends on.
gen-ai-cache-service = []
# Enables `client::GenAiTuningService` and all the types it depends on.
gen-ai-tuning-service = []
# Enables `client::IndexEndpointService` and all the types it depends on.
index-endpoint-service = []
# Enables `client::IndexService` and all the types it depends on.
index-service = []
# Enables `client::JobService` and all the types it depends on.
job-service = []
# Enables `client::LlmUtilityService` and all the types it depends on.
llm-utility-service = []
# Enables `client::MatchService` and all the types it depends on.
match-service = []
# Enables `client::MetadataService` and all the types it depends on.
metadata-service = []
# Enables `client::MigrationService` and all the types it depends on.
migration-service = []
# Enables `client::ModelGardenService` and all the types it depends on.
model-garden-service = []
# Enables `client::ModelService` and all the types it depends on.
model-service = []
# Enables `client::NotebookService` and all the types it depends on.
notebook-service = []
# Enables `client::PersistentResourceService` and all the types it depends on.
persistent-resource-service = []
# Enables `client::PipelineService` and all the types it depends on.
pipeline-service = []
# Enables `client::PredictionService` and all the types it depends on.
prediction-service = []
# Enables `client::ReasoningEngineExecutionService` and all the types it depends on.
reasoning-engine-execution-service = []
# Enables `client::ReasoningEngineService` and all the types it depends on.
reasoning-engine-service = []
# Enables `client::ScheduleService` and all the types it depends on.
schedule-service = []
# Enables `client::SpecialistPoolService` and all the types it depends on.
specialist-pool-service = []
# Enables `client::TensorboardService` and all the types it depends on.
tensorboard-service = []
# Enables `client::VertexRagDataService` and all the types it depends on.
vertex-rag-data-service = []
# Enables `client::VertexRagService` and all the types it depends on.
vertex-rag-service = []
# Enables `client::VizierService` and all the types it depends on.
vizier-service = []

[dependencies]
api.workspace        = true
async-trait.workspace = true
bytes.workspace      = true
gax                  = { workspace = true, features = ["unstable-sdk-client"] }
gaxi                 = { workspace = true, features = ["_internal_http_client"] }
gtype.workspace      = true
iam_v1.workspace     = true
lazy_static.workspace = true
location.workspace   = true
longrunning.workspace = true
lro.workspace        = true
reqwest.workspace    = true
rpc.workspace        = true
serde.workspace      = true
serde_json.workspace = true
serde_with.workspace = true
tracing.workspace    = true
wkt.workspace        = true

[dev-dependencies]
tokio-test.workspace = true
