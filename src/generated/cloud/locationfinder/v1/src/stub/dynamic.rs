// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

/// A dyn-compatible, crate-private version of [super::CloudLocationFinder].
#[async_trait::async_trait]
pub trait CloudLocationFinder: std::fmt::Debug + Send + Sync {
    async fn list_cloud_locations(
        &self,
        req: crate::model::ListCloudLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListCloudLocationsResponse>>;

    async fn get_cloud_location(
        &self,
        req: crate::model::GetCloudLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::CloudLocation>>;

    async fn search_cloud_locations(
        &self,
        req: crate::model::SearchCloudLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::SearchCloudLocationsResponse>>;

    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<location::model::ListLocationsResponse>>;

    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<location::model::Location>>;
}

/// All implementations of [super::CloudLocationFinder] also implement [CloudLocationFinder].
#[async_trait::async_trait]
impl<T: super::CloudLocationFinder> CloudLocationFinder for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn list_cloud_locations(
        &self,
        req: crate::model::ListCloudLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListCloudLocationsResponse>> {
        T::list_cloud_locations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_cloud_location(
        &self,
        req: crate::model::GetCloudLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::CloudLocation>> {
        T::get_cloud_location(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn search_cloud_locations(
        &self,
        req: crate::model::SearchCloudLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::SearchCloudLocationsResponse>> {
        T::search_cloud_locations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<location::model::ListLocationsResponse>> {
        T::list_locations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<location::model::Location>> {
        T::get_location(self, req, options).await
    }
}
