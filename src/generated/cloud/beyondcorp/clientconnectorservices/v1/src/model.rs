// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gaxi;
extern crate iam_v1;
extern crate lazy_static;
extern crate location;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// Message describing ClientConnectorService object.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ClientConnectorService {
    /// Required. Name of resource. The name is ignored during creation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. [Output only] Create time stamp.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. [Output only] Update time stamp.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional. User-provided name.
    /// The display name should follow certain format.
    ///
    /// * Must be 6 to 30 characters in length.
    /// * Can only contain lowercase letters, numbers, and hyphens.
    /// * Must start with a letter.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Required. The details of the ingress settings.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub ingress: std::option::Option<crate::model::client_connector_service::Ingress>,

    /// Required. The details of the egress settings.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub egress: std::option::Option<crate::model::client_connector_service::Egress>,

    /// Output only. The operational state of the ClientConnectorService.
    pub state: crate::model::client_connector_service::State,
}

impl ClientConnectorService {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ClientConnectorService::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::ClientConnectorService::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::ClientConnectorService::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::ClientConnectorService::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [ingress][crate::model::ClientConnectorService::ingress].
    pub fn set_ingress<
        T: std::convert::Into<std::option::Option<crate::model::client_connector_service::Ingress>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.ingress = v.into();
        self
    }

    /// Sets the value of [egress][crate::model::ClientConnectorService::egress].
    pub fn set_egress<
        T: std::convert::Into<std::option::Option<crate::model::client_connector_service::Egress>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.egress = v.into();
        self
    }

    /// Sets the value of [state][crate::model::ClientConnectorService::state].
    pub fn set_state<T: std::convert::Into<crate::model::client_connector_service::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }
}

impl wkt::message::Message for ClientConnectorService {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.beyondcorp.clientconnectorservices.v1.ClientConnectorService"
    }
}

/// Defines additional types related to ClientConnectorService
pub mod client_connector_service {
    #[allow(unused_imports)]
    use super::*;

    /// Settings of how to connect to the ClientGateway.
    /// One of the following options should be set.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Ingress {
        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub ingress_config:
            std::option::Option<crate::model::client_connector_service::ingress::IngressConfig>,
    }

    impl Ingress {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of `ingress_config`.
        pub fn set_ingress_config<
            T: std::convert::Into<
                std::option::Option<crate::model::client_connector_service::ingress::IngressConfig>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.ingress_config = v.into();
            self
        }

        /// The value of [ingress_config][crate::model::client_connector_service::Ingress::ingress_config]
        /// if it holds a `Config`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_config(
            &self,
        ) -> std::option::Option<
            &std::boxed::Box<crate::model::client_connector_service::ingress::Config>,
        > {
            #[allow(unreachable_patterns)]
            self.ingress_config.as_ref().and_then(|v| match v {
                crate::model::client_connector_service::ingress::IngressConfig::Config(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [ingress_config][crate::model::client_connector_service::Ingress::ingress_config]
        /// to hold a `Config`.
        ///
        /// Note that all the setters affecting `ingress_config` are
        /// mutually exclusive.
        pub fn set_config<
            T: std::convert::Into<
                std::boxed::Box<crate::model::client_connector_service::ingress::Config>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.ingress_config = std::option::Option::Some(
                crate::model::client_connector_service::ingress::IngressConfig::Config(v.into()),
            );
            self
        }
    }

    impl wkt::message::Message for Ingress {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.beyondcorp.clientconnectorservices.v1.ClientConnectorService.Ingress"
        }
    }

    /// Defines additional types related to Ingress
    pub mod ingress {
        #[allow(unused_imports)]
        use super::*;

        /// The basic ingress config for ClientGateways.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct Config {
            /// Required. Immutable. The transport protocol used between the client and
            /// the server.
            pub transport_protocol:
                crate::model::client_connector_service::ingress::config::TransportProtocol,

            /// Required. The settings used to configure basic ClientGateways.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub destination_routes: std::vec::Vec<
                crate::model::client_connector_service::ingress::config::DestinationRoute,
            >,
        }

        impl Config {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [transport_protocol][crate::model::client_connector_service::ingress::Config::transport_protocol].
            pub fn set_transport_protocol<
                T: std::convert::Into<
                    crate::model::client_connector_service::ingress::config::TransportProtocol,
                >,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.transport_protocol = v.into();
                self
            }

            /// Sets the value of [destination_routes][crate::model::client_connector_service::ingress::Config::destination_routes].
            pub fn set_destination_routes<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<
                    crate::model::client_connector_service::ingress::config::DestinationRoute,
                >,
            {
                use std::iter::Iterator;
                self.destination_routes = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for Config {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.beyondcorp.clientconnectorservices.v1.ClientConnectorService.Ingress.Config"
            }
        }

        /// Defines additional types related to Config
        pub mod config {
            #[allow(unused_imports)]
            use super::*;

            /// The setting used to configure ClientGateways.
            /// It is adding routes to the client's routing table
            /// after the connection is established.
            #[serde_with::serde_as]
            #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
            #[serde(default, rename_all = "camelCase")]
            #[non_exhaustive]
            pub struct DestinationRoute {
                /// Required. The network address of the subnet
                /// for which the packet is routed to the ClientGateway.
                #[serde(skip_serializing_if = "std::string::String::is_empty")]
                pub address: std::string::String,

                /// Required. The network mask of the subnet
                /// for which the packet is routed to the ClientGateway.
                #[serde(skip_serializing_if = "std::string::String::is_empty")]
                pub netmask: std::string::String,
            }

            impl DestinationRoute {
                pub fn new() -> Self {
                    std::default::Default::default()
                }

                /// Sets the value of [address][crate::model::client_connector_service::ingress::config::DestinationRoute::address].
                pub fn set_address<T: std::convert::Into<std::string::String>>(
                    mut self,
                    v: T,
                ) -> Self {
                    self.address = v.into();
                    self
                }

                /// Sets the value of [netmask][crate::model::client_connector_service::ingress::config::DestinationRoute::netmask].
                pub fn set_netmask<T: std::convert::Into<std::string::String>>(
                    mut self,
                    v: T,
                ) -> Self {
                    self.netmask = v.into();
                    self
                }
            }

            impl wkt::message::Message for DestinationRoute {
                fn typename() -> &'static str {
                    "type.googleapis.com/google.cloud.beyondcorp.clientconnectorservices.v1.ClientConnectorService.Ingress.Config.DestinationRoute"
                }
            }

            /// The protocol used to connect to the server.
            #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct TransportProtocol(i32);

            impl TransportProtocol {
                /// Default value. This value is unused.
                pub const TRANSPORT_PROTOCOL_UNSPECIFIED: TransportProtocol =
                    TransportProtocol::new(0);

                /// TCP protocol.
                pub const TCP: TransportProtocol = TransportProtocol::new(1);

                /// Creates a new TransportProtocol instance.
                pub(crate) const fn new(value: i32) -> Self {
                    Self(value)
                }

                /// Gets the enum value.
                pub fn value(&self) -> i32 {
                    self.0
                }

                /// Gets the enum value as a string.
                pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
                    match self.0 {
                        0 => std::borrow::Cow::Borrowed("TRANSPORT_PROTOCOL_UNSPECIFIED"),
                        1 => std::borrow::Cow::Borrowed("TCP"),
                        _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
                    }
                }

                /// Creates an enum value from the value name.
                pub fn from_str_name(name: &str) -> std::option::Option<Self> {
                    match name {
                        "TRANSPORT_PROTOCOL_UNSPECIFIED" => {
                            std::option::Option::Some(Self::TRANSPORT_PROTOCOL_UNSPECIFIED)
                        }
                        "TCP" => std::option::Option::Some(Self::TCP),
                        _ => std::option::Option::None,
                    }
                }
            }

            impl std::convert::From<i32> for TransportProtocol {
                fn from(value: i32) -> Self {
                    Self::new(value)
                }
            }

            impl std::default::Default for TransportProtocol {
                fn default() -> Self {
                    Self::new(0)
                }
            }
        }

        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum IngressConfig {
            /// The basic ingress config for ClientGateways.
            Config(std::boxed::Box<crate::model::client_connector_service::ingress::Config>),
        }
    }

    /// The details of the egress info. One of the following options should be set.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Egress {
        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub destination_type:
            std::option::Option<crate::model::client_connector_service::egress::DestinationType>,
    }

    impl Egress {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of `destination_type`.
        pub fn set_destination_type<
            T: std::convert::Into<
                std::option::Option<
                    crate::model::client_connector_service::egress::DestinationType,
                >,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.destination_type = v.into();
            self
        }

        /// The value of [destination_type][crate::model::client_connector_service::Egress::destination_type]
        /// if it holds a `PeeredVpc`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_peered_vpc(
            &self,
        ) -> std::option::Option<
            &std::boxed::Box<crate::model::client_connector_service::egress::PeeredVpc>,
        > {
            #[allow(unreachable_patterns)]
            self.destination_type.as_ref().and_then(|v| match v {
                crate::model::client_connector_service::egress::DestinationType::PeeredVpc(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [destination_type][crate::model::client_connector_service::Egress::destination_type]
        /// to hold a `PeeredVpc`.
        ///
        /// Note that all the setters affecting `destination_type` are
        /// mutually exclusive.
        pub fn set_peered_vpc<
            T: std::convert::Into<
                std::boxed::Box<crate::model::client_connector_service::egress::PeeredVpc>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.destination_type = std::option::Option::Some(
                crate::model::client_connector_service::egress::DestinationType::PeeredVpc(
                    v.into(),
                ),
            );
            self
        }
    }

    impl wkt::message::Message for Egress {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.beyondcorp.clientconnectorservices.v1.ClientConnectorService.Egress"
        }
    }

    /// Defines additional types related to Egress
    pub mod egress {
        #[allow(unused_imports)]
        use super::*;

        /// The peered VPC owned by the consumer project.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct PeeredVpc {
            /// Required. The name of the peered VPC owned by the consumer project.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub network_vpc: std::string::String,
        }

        impl PeeredVpc {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [network_vpc][crate::model::client_connector_service::egress::PeeredVpc::network_vpc].
            pub fn set_network_vpc<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.network_vpc = v.into();
                self
            }
        }

        impl wkt::message::Message for PeeredVpc {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.beyondcorp.clientconnectorservices.v1.ClientConnectorService.Egress.PeeredVpc"
            }
        }

        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum DestinationType {
            /// A VPC from the consumer project.
            PeeredVpc(std::boxed::Box<crate::model::client_connector_service::egress::PeeredVpc>),
        }
    }

    /// Represents the different states of a ClientConnectorService.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// Default value. This value is unused.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// ClientConnectorService is being created.
        pub const CREATING: State = State::new(1);

        /// ClientConnectorService is being updated.
        pub const UPDATING: State = State::new(2);

        /// ClientConnectorService is being deleted.
        pub const DELETING: State = State::new(3);

        /// ClientConnectorService is running.
        pub const RUNNING: State = State::new(4);

        /// ClientConnectorService is down and may be restored in the future.
        /// This happens when CCFE sends ProjectState = OFF.
        pub const DOWN: State = State::new(5);

        /// ClientConnectorService encountered an error and is in an indeterministic
        /// state.
        pub const ERROR: State = State::new(6);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CREATING"),
                2 => std::borrow::Cow::Borrowed("UPDATING"),
                3 => std::borrow::Cow::Borrowed("DELETING"),
                4 => std::borrow::Cow::Borrowed("RUNNING"),
                5 => std::borrow::Cow::Borrowed("DOWN"),
                6 => std::borrow::Cow::Borrowed("ERROR"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "CREATING" => std::option::Option::Some(Self::CREATING),
                "UPDATING" => std::option::Option::Some(Self::UPDATING),
                "DELETING" => std::option::Option::Some(Self::DELETING),
                "RUNNING" => std::option::Option::Some(Self::RUNNING),
                "DOWN" => std::option::Option::Some(Self::DOWN),
                "ERROR" => std::option::Option::Some(Self::ERROR),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Message for requesting list of ClientConnectorServices.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListClientConnectorServicesRequest {
    /// Required. Parent value for ListClientConnectorServicesRequest.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, server will pick an appropriate default.
    pub page_size: i32,

    /// Optional. A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. Filtering results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. Hint for how to order the results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListClientConnectorServicesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListClientConnectorServicesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListClientConnectorServicesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListClientConnectorServicesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListClientConnectorServicesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListClientConnectorServicesRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListClientConnectorServicesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.beyondcorp.clientconnectorservices.v1.ListClientConnectorServicesRequest"
    }
}

/// Message for response to listing ClientConnectorServices.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListClientConnectorServicesResponse {
    /// The list of ClientConnectorService.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub client_connector_services: std::vec::Vec<crate::model::ClientConnectorService>,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListClientConnectorServicesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListClientConnectorServicesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [client_connector_services][crate::model::ListClientConnectorServicesResponse::client_connector_services].
    pub fn set_client_connector_services<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ClientConnectorService>,
    {
        use std::iter::Iterator;
        self.client_connector_services = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListClientConnectorServicesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListClientConnectorServicesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.beyondcorp.clientconnectorservices.v1.ListClientConnectorServicesResponse"
    }
}

impl gax::paginator::PageableResponse for ListClientConnectorServicesResponse {
    type PageItem = crate::model::ClientConnectorService;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.client_connector_services
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Message for getting a ClientConnectorService.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetClientConnectorServiceRequest {
    /// Required. Name of the resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetClientConnectorServiceRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetClientConnectorServiceRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetClientConnectorServiceRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.beyondcorp.clientconnectorservices.v1.GetClientConnectorServiceRequest"
    }
}

/// Message for creating a ClientConnectorService.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateClientConnectorServiceRequest {
    /// Required. Value for parent.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. User-settable client connector service resource ID.
    ///
    /// * Must start with a letter.
    /// * Must contain between 4-63 characters from `/[a-z][0-9]-/`.
    /// * Must end with a number or a letter.
    ///
    /// A random system generated name will be assigned
    /// if not specified by the user.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub client_connector_service_id: std::string::String,

    /// Required. The resource being created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub client_connector_service: std::option::Option<crate::model::ClientConnectorService>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and t
    /// he request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set, validates request by executing a dry-run which would not
    /// alter the resource in any way.
    pub validate_only: bool,
}

impl CreateClientConnectorServiceRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateClientConnectorServiceRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [client_connector_service_id][crate::model::CreateClientConnectorServiceRequest::client_connector_service_id].
    pub fn set_client_connector_service_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.client_connector_service_id = v.into();
        self
    }

    /// Sets the value of [client_connector_service][crate::model::CreateClientConnectorServiceRequest::client_connector_service].
    pub fn set_client_connector_service<
        T: std::convert::Into<std::option::Option<crate::model::ClientConnectorService>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.client_connector_service = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateClientConnectorServiceRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::CreateClientConnectorServiceRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }
}

impl wkt::message::Message for CreateClientConnectorServiceRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.beyondcorp.clientconnectorservices.v1.CreateClientConnectorServiceRequest"
    }
}

/// Message for updating a ClientConnectorService
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateClientConnectorServiceRequest {
    /// Required. Field mask is used to specify the fields to be overwritten in the
    /// ClientConnectorService resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    ///
    /// Mutable fields: display_name.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The resource being updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub client_connector_service: std::option::Option<crate::model::ClientConnectorService>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and t
    /// he request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set, validates request by executing a dry-run which would not
    /// alter the resource in any way.
    pub validate_only: bool,

    /// Optional. If set as true, will create the resource if it is not found.
    pub allow_missing: bool,
}

impl UpdateClientConnectorServiceRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateClientConnectorServiceRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [client_connector_service][crate::model::UpdateClientConnectorServiceRequest::client_connector_service].
    pub fn set_client_connector_service<
        T: std::convert::Into<std::option::Option<crate::model::ClientConnectorService>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.client_connector_service = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateClientConnectorServiceRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::UpdateClientConnectorServiceRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }

    /// Sets the value of [allow_missing][crate::model::UpdateClientConnectorServiceRequest::allow_missing].
    pub fn set_allow_missing<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.allow_missing = v.into();
        self
    }
}

impl wkt::message::Message for UpdateClientConnectorServiceRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.beyondcorp.clientconnectorservices.v1.UpdateClientConnectorServiceRequest"
    }
}

/// Message for deleting a ClientConnectorService.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteClientConnectorServiceRequest {
    /// Required. Name of the resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and t
    /// he request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set, validates request by executing a dry-run which would not
    /// alter the resource in any way.
    pub validate_only: bool,
}

impl DeleteClientConnectorServiceRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteClientConnectorServiceRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteClientConnectorServiceRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::DeleteClientConnectorServiceRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }
}

impl wkt::message::Message for DeleteClientConnectorServiceRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.beyondcorp.clientconnectorservices.v1.DeleteClientConnectorServiceRequest"
    }
}

/// Represents the metadata of the long-running operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ClientConnectorServiceOperationMetadata {
    /// Output only. The time the operation was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the operation finished running.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Server-defined resource path for the target of the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target: std::string::String,

    /// Output only. Name of the verb executed by the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub verb: std::string::String,

    /// Output only. Human-readable status of the operation, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub status_message: std::string::String,

    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have successfully been cancelled
    /// have [Operation.error][] value with a
    /// [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
    /// `Code.CANCELLED`.
    ///
    /// [google.rpc.Status.code]: rpc::model::Status::code
    pub requested_cancellation: bool,

    /// Output only. API version used to start the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub api_version: std::string::String,
}

impl ClientConnectorServiceOperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [create_time][crate::model::ClientConnectorServiceOperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::ClientConnectorServiceOperationMetadata::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [target][crate::model::ClientConnectorServiceOperationMetadata::target].
    pub fn set_target<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [verb][crate::model::ClientConnectorServiceOperationMetadata::verb].
    pub fn set_verb<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.verb = v.into();
        self
    }

    /// Sets the value of [status_message][crate::model::ClientConnectorServiceOperationMetadata::status_message].
    pub fn set_status_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.status_message = v.into();
        self
    }

    /// Sets the value of [requested_cancellation][crate::model::ClientConnectorServiceOperationMetadata::requested_cancellation].
    pub fn set_requested_cancellation<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.requested_cancellation = v.into();
        self
    }

    /// Sets the value of [api_version][crate::model::ClientConnectorServiceOperationMetadata::api_version].
    pub fn set_api_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.api_version = v.into();
        self
    }
}

impl wkt::message::Message for ClientConnectorServiceOperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.beyondcorp.clientconnectorservices.v1.ClientConnectorServiceOperationMetadata"
    }
}
