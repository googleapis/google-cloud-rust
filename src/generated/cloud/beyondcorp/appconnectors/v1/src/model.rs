// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gclient;
extern crate iam_v1;
extern crate lazy_static;
extern crate location;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// AppConnectorInstanceConfig defines the instance config of a AppConnector.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AppConnectorInstanceConfig {
    /// Required. A monotonically increasing number generated and maintained
    /// by the API provider. Every time a config changes in the backend, the
    /// sequenceNumber should be bumped up to reflect the change.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub sequence_number: i64,

    /// The SLM instance agent configuration.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub instance_config: std::option::Option<wkt::Any>,

    /// NotificationConfig defines the notification mechanism that the remote
    /// instance should subscribe to in order to receive notification.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub notification_config: std::option::Option<crate::model::NotificationConfig>,

    /// ImageConfig defines the GCR images to run for the remote agent's control
    /// plane.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub image_config: std::option::Option<crate::model::ImageConfig>,
}

impl AppConnectorInstanceConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [sequence_number][crate::model::AppConnectorInstanceConfig::sequence_number].
    pub fn set_sequence_number<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.sequence_number = v.into();
        self
    }

    /// Sets the value of [instance_config][crate::model::AppConnectorInstanceConfig::instance_config].
    pub fn set_instance_config<T: std::convert::Into<std::option::Option<wkt::Any>>>(
        mut self,
        v: T,
    ) -> Self {
        self.instance_config = v.into();
        self
    }

    /// Sets the value of [notification_config][crate::model::AppConnectorInstanceConfig::notification_config].
    pub fn set_notification_config<
        T: std::convert::Into<std::option::Option<crate::model::NotificationConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.notification_config = v.into();
        self
    }

    /// Sets the value of [image_config][crate::model::AppConnectorInstanceConfig::image_config].
    pub fn set_image_config<
        T: std::convert::Into<std::option::Option<crate::model::ImageConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.image_config = v.into();
        self
    }
}

impl wkt::message::Message for AppConnectorInstanceConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.beyondcorp.appconnectors.v1.AppConnectorInstanceConfig"
    }
}

/// NotificationConfig defines the mechanisms to notify instance agent.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct NotificationConfig {
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub config: std::option::Option<crate::model::notification_config::Config>,
}

impl NotificationConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of `config`.
    pub fn set_config<
        T: std::convert::Into<std::option::Option<crate::model::notification_config::Config>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.config = v.into();
        self
    }

    /// The value of [config][crate::model::NotificationConfig::config]
    /// if it holds a `PubsubNotification`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_pubsub_notification(
        &self,
    ) -> std::option::Option<
        &std::boxed::Box<crate::model::notification_config::CloudPubSubNotificationConfig>,
    > {
        #[allow(unreachable_patterns)]
        self.config.as_ref().and_then(|v| match v {
            crate::model::notification_config::Config::PubsubNotification(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [config][crate::model::NotificationConfig::config]
    /// to hold a `PubsubNotification`.
    ///
    /// Note that all the setters affecting `config` are
    /// mutually exclusive.
    pub fn set_pubsub_notification<
        T: std::convert::Into<
            std::boxed::Box<crate::model::notification_config::CloudPubSubNotificationConfig>,
        >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.config = std::option::Option::Some(
            crate::model::notification_config::Config::PubsubNotification(v.into()),
        );
        self
    }
}

impl wkt::message::Message for NotificationConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.beyondcorp.appconnectors.v1.NotificationConfig"
    }
}

/// Defines additional types related to NotificationConfig
pub mod notification_config {
    #[allow(unused_imports)]
    use super::*;

    /// The configuration for Pub/Sub messaging for the AppConnector.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct CloudPubSubNotificationConfig {
        /// The Pub/Sub subscription the AppConnector uses to receive notifications.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub pubsub_subscription: std::string::String,
    }

    impl CloudPubSubNotificationConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [pubsub_subscription][crate::model::notification_config::CloudPubSubNotificationConfig::pubsub_subscription].
        pub fn set_pubsub_subscription<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.pubsub_subscription = v.into();
            self
        }
    }

    impl wkt::message::Message for CloudPubSubNotificationConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.beyondcorp.appconnectors.v1.NotificationConfig.CloudPubSubNotificationConfig"
        }
    }

    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Config {
        /// Cloud Pub/Sub Configuration to receive notifications.
        PubsubNotification(
            std::boxed::Box<crate::model::notification_config::CloudPubSubNotificationConfig>,
        ),
    }
}

/// ImageConfig defines the control plane images to run.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ImageConfig {
    /// The initial image the remote agent will attempt to run for the control
    /// plane.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target_image: std::string::String,

    /// The stable image that the remote agent will fallback to if the target image
    /// fails.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub stable_image: std::string::String,
}

impl ImageConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [target_image][crate::model::ImageConfig::target_image].
    pub fn set_target_image<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target_image = v.into();
        self
    }

    /// Sets the value of [stable_image][crate::model::ImageConfig::stable_image].
    pub fn set_stable_image<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.stable_image = v.into();
        self
    }
}

impl wkt::message::Message for ImageConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.beyondcorp.appconnectors.v1.ImageConfig"
    }
}

/// Request message for BeyondCorp.ListAppConnectors.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListAppConnectorsRequest {
    /// Required. The resource name of the AppConnector location using the form:
    /// `projects/{project_id}/locations/{location_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of items to return.
    /// If not specified, a default value of 50 will be used by the service.
    /// Regardless of the page_size value, the response may include a partial list
    /// and a caller should only rely on response's
    /// [next_page_token][BeyondCorp.ListAppConnectorsResponse.next_page_token] to
    /// determine if there are more instances left to be queried.
    pub page_size: i32,

    /// Optional. The next_page_token value returned from a previous
    /// ListAppConnectorsRequest, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. A filter specifying constraints of a list operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. Specifies the ordering of results. See
    /// [Sorting
    /// order](https://cloud.google.com/apis/design/design_patterns#sorting_order)
    /// for more information.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListAppConnectorsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListAppConnectorsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListAppConnectorsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListAppConnectorsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListAppConnectorsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListAppConnectorsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListAppConnectorsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.beyondcorp.appconnectors.v1.ListAppConnectorsRequest"
    }
}

/// Response message for BeyondCorp.ListAppConnectors.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListAppConnectorsResponse {
    /// A list of BeyondCorp AppConnectors in the project.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub app_connectors: std::vec::Vec<crate::model::AppConnector>,

    /// A token to retrieve the next page of results, or empty if there are no more
    /// results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// A list of locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListAppConnectorsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListAppConnectorsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [app_connectors][crate::model::ListAppConnectorsResponse::app_connectors].
    pub fn set_app_connectors<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::AppConnector>,
    {
        use std::iter::Iterator;
        self.app_connectors = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListAppConnectorsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListAppConnectorsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.beyondcorp.appconnectors.v1.ListAppConnectorsResponse"
    }
}

impl gax::paginator::PageableResponse for ListAppConnectorsResponse {
    type PageItem = crate::model::AppConnector;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.app_connectors
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Request message for BeyondCorp.GetAppConnector.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetAppConnectorRequest {
    /// Required. BeyondCorp AppConnector name using the form:
    /// `projects/{project_id}/locations/{location_id}/appConnectors/{app_connector_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetAppConnectorRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetAppConnectorRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetAppConnectorRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.beyondcorp.appconnectors.v1.GetAppConnectorRequest"
    }
}

/// Request message for BeyondCorp.CreateAppConnector.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateAppConnectorRequest {
    /// Required. The resource project name of the AppConnector location using the
    /// form: `projects/{project_id}/locations/{location_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. User-settable AppConnector resource ID.
    ///
    /// * Must start with a letter.
    /// * Must contain between 4-63 characters from `/[a-z][0-9]-/`.
    /// * Must end with a number or a letter.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub app_connector_id: std::string::String,

    /// Required. A BeyondCorp AppConnector resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub app_connector: std::option::Option<crate::model::AppConnector>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and t
    /// he request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set, validates request by executing a dry-run which would not
    /// alter the resource in any way.
    pub validate_only: bool,
}

impl CreateAppConnectorRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateAppConnectorRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [app_connector_id][crate::model::CreateAppConnectorRequest::app_connector_id].
    pub fn set_app_connector_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.app_connector_id = v.into();
        self
    }

    /// Sets the value of [app_connector][crate::model::CreateAppConnectorRequest::app_connector].
    pub fn set_app_connector<
        T: std::convert::Into<std::option::Option<crate::model::AppConnector>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.app_connector = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateAppConnectorRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::CreateAppConnectorRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }
}

impl wkt::message::Message for CreateAppConnectorRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.beyondcorp.appconnectors.v1.CreateAppConnectorRequest"
    }
}

/// Request message for BeyondCorp.UpdateAppConnector.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateAppConnectorRequest {
    /// Required. Mask of fields to update. At least one path must be supplied in
    /// this field. The elements of the repeated paths field may only include these
    /// fields from [BeyondCorp.AppConnector]:
    ///
    /// * `labels`
    /// * `display_name`
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. AppConnector message with updated fields. Only supported fields
    /// specified in update_mask are updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub app_connector: std::option::Option<crate::model::AppConnector>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and t
    /// he request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set, validates request by executing a dry-run which would not
    /// alter the resource in any way.
    pub validate_only: bool,
}

impl UpdateAppConnectorRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateAppConnectorRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [app_connector][crate::model::UpdateAppConnectorRequest::app_connector].
    pub fn set_app_connector<
        T: std::convert::Into<std::option::Option<crate::model::AppConnector>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.app_connector = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateAppConnectorRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::UpdateAppConnectorRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }
}

impl wkt::message::Message for UpdateAppConnectorRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.beyondcorp.appconnectors.v1.UpdateAppConnectorRequest"
    }
}

/// Request message for BeyondCorp.DeleteAppConnector.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteAppConnectorRequest {
    /// Required. BeyondCorp AppConnector name using the form:
    /// `projects/{project_id}/locations/{location_id}/appConnectors/{app_connector_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and t
    /// he request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set, validates request by executing a dry-run which would not
    /// alter the resource in any way.
    pub validate_only: bool,
}

impl DeleteAppConnectorRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteAppConnectorRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteAppConnectorRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::DeleteAppConnectorRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }
}

impl wkt::message::Message for DeleteAppConnectorRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.beyondcorp.appconnectors.v1.DeleteAppConnectorRequest"
    }
}

/// Request report the connector status.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ReportStatusRequest {
    /// Required. BeyondCorp Connector name using the form:
    /// `projects/{project_id}/locations/{location_id}/connectors/{connector}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub app_connector: std::string::String,

    /// Required. Resource info of the connector.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub resource_info: std::option::Option<crate::model::ResourceInfo>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and t
    /// he request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set, validates request by executing a dry-run which would not
    /// alter the resource in any way.
    pub validate_only: bool,
}

impl ReportStatusRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [app_connector][crate::model::ReportStatusRequest::app_connector].
    pub fn set_app_connector<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.app_connector = v.into();
        self
    }

    /// Sets the value of [resource_info][crate::model::ReportStatusRequest::resource_info].
    pub fn set_resource_info<
        T: std::convert::Into<std::option::Option<crate::model::ResourceInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.resource_info = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::ReportStatusRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::ReportStatusRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }
}

impl wkt::message::Message for ReportStatusRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.beyondcorp.appconnectors.v1.ReportStatusRequest"
    }
}

/// A BeyondCorp connector resource that represents an application facing
/// component deployed proximal to and with direct access to the application
/// instances. It is used to establish connectivity between the remote enterprise
/// environment and GCP. It initiates connections to the applications and can
/// proxy the data from users over the connection.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AppConnector {
    /// Required. Unique resource name of the AppConnector.
    /// The name is ignored when creating a AppConnector.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Timestamp when the resource was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Timestamp when the resource was last modified.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional. Resource labels to represent user provided metadata.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Optional. An arbitrary user-provided name for the AppConnector. Cannot
    /// exceed 64 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Output only. A unique identifier for the instance generated by the
    /// system.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uid: std::string::String,

    /// Output only. The current state of the AppConnector.
    pub state: crate::model::app_connector::State,

    /// Required. Principal information about the Identity of the AppConnector.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub principal_info: std::option::Option<crate::model::app_connector::PrincipalInfo>,

    /// Optional. Resource info of the connector.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub resource_info: std::option::Option<crate::model::ResourceInfo>,
}

impl AppConnector {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::AppConnector::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::AppConnector::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::AppConnector::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::AppConnector::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [uid][crate::model::AppConnector::uid].
    pub fn set_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uid = v.into();
        self
    }

    /// Sets the value of [state][crate::model::AppConnector::state].
    pub fn set_state<T: std::convert::Into<crate::model::app_connector::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [principal_info][crate::model::AppConnector::principal_info].
    pub fn set_principal_info<
        T: std::convert::Into<std::option::Option<crate::model::app_connector::PrincipalInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.principal_info = v.into();
        self
    }

    /// Sets the value of [resource_info][crate::model::AppConnector::resource_info].
    pub fn set_resource_info<
        T: std::convert::Into<std::option::Option<crate::model::ResourceInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.resource_info = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::AppConnector::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for AppConnector {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.beyondcorp.appconnectors.v1.AppConnector"
    }
}

/// Defines additional types related to AppConnector
pub mod app_connector {
    #[allow(unused_imports)]
    use super::*;

    /// PrincipalInfo represents an Identity oneof.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct PrincipalInfo {
        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub r#type: std::option::Option<crate::model::app_connector::principal_info::Type>,
    }

    impl PrincipalInfo {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of `r#type`.
        pub fn set_type<
            T: std::convert::Into<
                std::option::Option<crate::model::app_connector::principal_info::Type>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.r#type = v.into();
            self
        }

        /// The value of [r#type][crate::model::app_connector::PrincipalInfo::r#type]
        /// if it holds a `ServiceAccount`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_service_account(
            &self,
        ) -> std::option::Option<
            &std::boxed::Box<crate::model::app_connector::principal_info::ServiceAccount>,
        > {
            #[allow(unreachable_patterns)]
            self.r#type.as_ref().and_then(|v| match v {
                crate::model::app_connector::principal_info::Type::ServiceAccount(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [r#type][crate::model::app_connector::PrincipalInfo::r#type]
        /// to hold a `ServiceAccount`.
        ///
        /// Note that all the setters affecting `r#type` are
        /// mutually exclusive.
        pub fn set_service_account<
            T: std::convert::Into<
                std::boxed::Box<crate::model::app_connector::principal_info::ServiceAccount>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.r#type = std::option::Option::Some(
                crate::model::app_connector::principal_info::Type::ServiceAccount(v.into()),
            );
            self
        }
    }

    impl wkt::message::Message for PrincipalInfo {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.beyondcorp.appconnectors.v1.AppConnector.PrincipalInfo"
        }
    }

    /// Defines additional types related to PrincipalInfo
    pub mod principal_info {
        #[allow(unused_imports)]
        use super::*;

        /// ServiceAccount represents a GCP service account.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct ServiceAccount {
            /// Email address of the service account.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub email: std::string::String,
        }

        impl ServiceAccount {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [email][crate::model::app_connector::principal_info::ServiceAccount::email].
            pub fn set_email<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.email = v.into();
                self
            }
        }

        impl wkt::message::Message for ServiceAccount {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.beyondcorp.appconnectors.v1.AppConnector.PrincipalInfo.ServiceAccount"
            }
        }

        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum Type {
            /// A GCP service account.
            ServiceAccount(
                std::boxed::Box<crate::model::app_connector::principal_info::ServiceAccount>,
            ),
        }
    }

    /// Represents the different states of a AppConnector.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// Default value. This value is unused.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// AppConnector is being created.
        pub const CREATING: State = State::new(1);

        /// AppConnector has been created.
        pub const CREATED: State = State::new(2);

        /// AppConnector's configuration is being updated.
        pub const UPDATING: State = State::new(3);

        /// AppConnector is being deleted.
        pub const DELETING: State = State::new(4);

        /// AppConnector is down and may be restored in the future.
        /// This happens when CCFE sends ProjectState = OFF.
        pub const DOWN: State = State::new(5);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CREATING"),
                2 => std::borrow::Cow::Borrowed("CREATED"),
                3 => std::borrow::Cow::Borrowed("UPDATING"),
                4 => std::borrow::Cow::Borrowed("DELETING"),
                5 => std::borrow::Cow::Borrowed("DOWN"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "CREATING" => std::option::Option::Some(Self::CREATING),
                "CREATED" => std::option::Option::Some(Self::CREATED),
                "UPDATING" => std::option::Option::Some(Self::UPDATING),
                "DELETING" => std::option::Option::Some(Self::DELETING),
                "DOWN" => std::option::Option::Some(Self::DOWN),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Represents the metadata of the long-running operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AppConnectorOperationMetadata {
    /// Output only. The time the operation was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the operation finished running.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Server-defined resource path for the target of the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target: std::string::String,

    /// Output only. Name of the verb executed by the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub verb: std::string::String,

    /// Output only. Human-readable status of the operation, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub status_message: std::string::String,

    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have successfully been cancelled
    /// have [Operation.error][] value with a
    /// [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
    /// `Code.CANCELLED`.
    ///
    /// [google.rpc.Status.code]: rpc::model::Status::code
    pub requested_cancellation: bool,

    /// Output only. API version used to start the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub api_version: std::string::String,
}

impl AppConnectorOperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [create_time][crate::model::AppConnectorOperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::AppConnectorOperationMetadata::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [target][crate::model::AppConnectorOperationMetadata::target].
    pub fn set_target<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [verb][crate::model::AppConnectorOperationMetadata::verb].
    pub fn set_verb<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.verb = v.into();
        self
    }

    /// Sets the value of [status_message][crate::model::AppConnectorOperationMetadata::status_message].
    pub fn set_status_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.status_message = v.into();
        self
    }

    /// Sets the value of [requested_cancellation][crate::model::AppConnectorOperationMetadata::requested_cancellation].
    pub fn set_requested_cancellation<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.requested_cancellation = v.into();
        self
    }

    /// Sets the value of [api_version][crate::model::AppConnectorOperationMetadata::api_version].
    pub fn set_api_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.api_version = v.into();
        self
    }
}

impl wkt::message::Message for AppConnectorOperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.beyondcorp.appconnectors.v1.AppConnectorOperationMetadata"
    }
}

/// ResourceInfo represents the information/status of an app connector resource.
/// Such as:
///
/// - remote_agent
///   - container
///     - runtime
///     - appgateway
///       - appconnector
///         - appconnection
///           - tunnel
///       - logagent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ResourceInfo {
    /// Required. Unique Id for the resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub id: std::string::String,

    /// Overall health status. Overall status is derived based on the status of
    /// each sub level resources.
    pub status: crate::model::HealthStatus,

    /// Specific details for the resource. This is for internal use only.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub resource: std::option::Option<wkt::Any>,

    /// The timestamp to collect the info. It is suggested to be set by
    /// the topmost level resource only.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub time: std::option::Option<wkt::Timestamp>,

    /// List of Info for the sub level resources.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub sub: std::vec::Vec<crate::model::ResourceInfo>,
}

impl ResourceInfo {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [id][crate::model::ResourceInfo::id].
    pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id = v.into();
        self
    }

    /// Sets the value of [status][crate::model::ResourceInfo::status].
    pub fn set_status<T: std::convert::Into<crate::model::HealthStatus>>(mut self, v: T) -> Self {
        self.status = v.into();
        self
    }

    /// Sets the value of [resource][crate::model::ResourceInfo::resource].
    pub fn set_resource<T: std::convert::Into<std::option::Option<wkt::Any>>>(
        mut self,
        v: T,
    ) -> Self {
        self.resource = v.into();
        self
    }

    /// Sets the value of [time][crate::model::ResourceInfo::time].
    pub fn set_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.time = v.into();
        self
    }

    /// Sets the value of [sub][crate::model::ResourceInfo::sub].
    pub fn set_sub<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ResourceInfo>,
    {
        use std::iter::Iterator;
        self.sub = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ResourceInfo {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.beyondcorp.appconnectors.v1.ResourceInfo"
    }
}

/// HealthStatus represents the health status.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct HealthStatus(i32);

impl HealthStatus {
    /// Health status is unknown: not initialized or failed to retrieve.
    pub const HEALTH_STATUS_UNSPECIFIED: HealthStatus = HealthStatus::new(0);

    /// The resource is healthy.
    pub const HEALTHY: HealthStatus = HealthStatus::new(1);

    /// The resource is unhealthy.
    pub const UNHEALTHY: HealthStatus = HealthStatus::new(2);

    /// The resource is unresponsive.
    pub const UNRESPONSIVE: HealthStatus = HealthStatus::new(3);

    /// Some sub-resources are UNHEALTHY.
    pub const DEGRADED: HealthStatus = HealthStatus::new(4);

    /// Creates a new HealthStatus instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("HEALTH_STATUS_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("HEALTHY"),
            2 => std::borrow::Cow::Borrowed("UNHEALTHY"),
            3 => std::borrow::Cow::Borrowed("UNRESPONSIVE"),
            4 => std::borrow::Cow::Borrowed("DEGRADED"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "HEALTH_STATUS_UNSPECIFIED" => {
                std::option::Option::Some(Self::HEALTH_STATUS_UNSPECIFIED)
            }
            "HEALTHY" => std::option::Option::Some(Self::HEALTHY),
            "UNHEALTHY" => std::option::Option::Some(Self::UNHEALTHY),
            "UNRESPONSIVE" => std::option::Option::Some(Self::UNRESPONSIVE),
            "DEGRADED" => std::option::Option::Some(Self::DEGRADED),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for HealthStatus {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for HealthStatus {
    fn default() -> Self {
        Self::new(0)
    }
}
