// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;
use std::sync::Arc;

pub(crate) mod dynamic;

/// Defines the trait used to implement [crate::client::ApiHub].
///
/// Application developers may need to implement this trait to mock
/// `client::ApiHub`.  In other use-cases, application developers only
/// use `client::ApiHub` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait ApiHub: std::fmt::Debug + Send + Sync {
    /// Implements [crate::client::ApiHub::create_api].
    fn create_api(
        &self,
        _req: crate::model::CreateApiRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Api>> + Send {
        std::future::ready::<crate::Result<crate::model::Api>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ApiHub::get_api].
    fn get_api(
        &self,
        _req: crate::model::GetApiRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Api>> + Send {
        std::future::ready::<crate::Result<crate::model::Api>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ApiHub::list_apis].
    fn list_apis(
        &self,
        _req: crate::model::ListApisRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListApisResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListApisResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHub::update_api].
    fn update_api(
        &self,
        _req: crate::model::UpdateApiRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Api>> + Send {
        std::future::ready::<crate::Result<crate::model::Api>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ApiHub::delete_api].
    fn delete_api(
        &self,
        _req: crate::model::DeleteApiRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ApiHub::create_version].
    fn create_version(
        &self,
        _req: crate::model::CreateVersionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Version>> + Send {
        std::future::ready::<crate::Result<crate::model::Version>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHub::get_version].
    fn get_version(
        &self,
        _req: crate::model::GetVersionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Version>> + Send {
        std::future::ready::<crate::Result<crate::model::Version>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHub::list_versions].
    fn list_versions(
        &self,
        _req: crate::model::ListVersionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListVersionsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListVersionsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHub::update_version].
    fn update_version(
        &self,
        _req: crate::model::UpdateVersionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Version>> + Send {
        std::future::ready::<crate::Result<crate::model::Version>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHub::delete_version].
    fn delete_version(
        &self,
        _req: crate::model::DeleteVersionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ApiHub::create_spec].
    fn create_spec(
        &self,
        _req: crate::model::CreateSpecRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Spec>> + Send {
        std::future::ready::<crate::Result<crate::model::Spec>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ApiHub::get_spec].
    fn get_spec(
        &self,
        _req: crate::model::GetSpecRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Spec>> + Send {
        std::future::ready::<crate::Result<crate::model::Spec>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ApiHub::get_spec_contents].
    fn get_spec_contents(
        &self,
        _req: crate::model::GetSpecContentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SpecContents>> + Send {
        std::future::ready::<crate::Result<crate::model::SpecContents>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHub::list_specs].
    fn list_specs(
        &self,
        _req: crate::model::ListSpecsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListSpecsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListSpecsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHub::update_spec].
    fn update_spec(
        &self,
        _req: crate::model::UpdateSpecRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Spec>> + Send {
        std::future::ready::<crate::Result<crate::model::Spec>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ApiHub::delete_spec].
    fn delete_spec(
        &self,
        _req: crate::model::DeleteSpecRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ApiHub::get_api_operation].
    fn get_api_operation(
        &self,
        _req: crate::model::GetApiOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ApiOperation>> + Send {
        std::future::ready::<crate::Result<crate::model::ApiOperation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHub::list_api_operations].
    fn list_api_operations(
        &self,
        _req: crate::model::ListApiOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListApiOperationsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListApiOperationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::ApiHub::get_definition].
    fn get_definition(
        &self,
        _req: crate::model::GetDefinitionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Definition>> + Send {
        std::future::ready::<crate::Result<crate::model::Definition>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHub::create_deployment].
    fn create_deployment(
        &self,
        _req: crate::model::CreateDeploymentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Deployment>> + Send {
        std::future::ready::<crate::Result<crate::model::Deployment>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHub::get_deployment].
    fn get_deployment(
        &self,
        _req: crate::model::GetDeploymentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Deployment>> + Send {
        std::future::ready::<crate::Result<crate::model::Deployment>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHub::list_deployments].
    fn list_deployments(
        &self,
        _req: crate::model::ListDeploymentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListDeploymentsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListDeploymentsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::ApiHub::update_deployment].
    fn update_deployment(
        &self,
        _req: crate::model::UpdateDeploymentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Deployment>> + Send {
        std::future::ready::<crate::Result<crate::model::Deployment>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHub::delete_deployment].
    fn delete_deployment(
        &self,
        _req: crate::model::DeleteDeploymentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ApiHub::create_attribute].
    fn create_attribute(
        &self,
        _req: crate::model::CreateAttributeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Attribute>> + Send {
        std::future::ready::<crate::Result<crate::model::Attribute>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHub::get_attribute].
    fn get_attribute(
        &self,
        _req: crate::model::GetAttributeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Attribute>> + Send {
        std::future::ready::<crate::Result<crate::model::Attribute>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHub::update_attribute].
    fn update_attribute(
        &self,
        _req: crate::model::UpdateAttributeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Attribute>> + Send {
        std::future::ready::<crate::Result<crate::model::Attribute>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHub::delete_attribute].
    fn delete_attribute(
        &self,
        _req: crate::model::DeleteAttributeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ApiHub::list_attributes].
    fn list_attributes(
        &self,
        _req: crate::model::ListAttributesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListAttributesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListAttributesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::ApiHub::search_resources].
    fn search_resources(
        &self,
        _req: crate::model::SearchResourcesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SearchResourcesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::SearchResourcesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::ApiHub::create_external_api].
    fn create_external_api(
        &self,
        _req: crate::model::CreateExternalApiRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ExternalApi>> + Send {
        std::future::ready::<crate::Result<crate::model::ExternalApi>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHub::get_external_api].
    fn get_external_api(
        &self,
        _req: crate::model::GetExternalApiRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ExternalApi>> + Send {
        std::future::ready::<crate::Result<crate::model::ExternalApi>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHub::update_external_api].
    fn update_external_api(
        &self,
        _req: crate::model::UpdateExternalApiRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ExternalApi>> + Send {
        std::future::ready::<crate::Result<crate::model::ExternalApi>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHub::delete_external_api].
    fn delete_external_api(
        &self,
        _req: crate::model::DeleteExternalApiRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ApiHub::list_external_apis].
    fn list_external_apis(
        &self,
        _req: crate::model::ListExternalApisRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListExternalApisResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListExternalApisResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::ApiHub::list_locations].
    fn list_locations(
        &self,
        _req: location::model::ListLocationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::ListLocationsResponse>> + Send
    {
        std::future::ready::<crate::Result<location::model::ListLocationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::ApiHub::get_location].
    fn get_location(
        &self,
        _req: location::model::GetLocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::Location>> + Send {
        std::future::ready::<crate::Result<location::model::Location>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHub::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::ListOperationsResponse>>
           + Send {
        std::future::ready::<crate::Result<longrunning::model::ListOperationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::ApiHub::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHub::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ApiHub::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }
}

/// Defines the trait used to implement [crate::client::ApiHubDependencies].
///
/// Application developers may need to implement this trait to mock
/// `client::ApiHubDependencies`.  In other use-cases, application developers only
/// use `client::ApiHubDependencies` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait ApiHubDependencies: std::fmt::Debug + Send + Sync {
    /// Implements [crate::client::ApiHubDependencies::create_dependency].
    fn create_dependency(
        &self,
        _req: crate::model::CreateDependencyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Dependency>> + Send {
        std::future::ready::<crate::Result<crate::model::Dependency>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHubDependencies::get_dependency].
    fn get_dependency(
        &self,
        _req: crate::model::GetDependencyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Dependency>> + Send {
        std::future::ready::<crate::Result<crate::model::Dependency>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHubDependencies::update_dependency].
    fn update_dependency(
        &self,
        _req: crate::model::UpdateDependencyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Dependency>> + Send {
        std::future::ready::<crate::Result<crate::model::Dependency>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHubDependencies::delete_dependency].
    fn delete_dependency(
        &self,
        _req: crate::model::DeleteDependencyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ApiHubDependencies::list_dependencies].
    fn list_dependencies(
        &self,
        _req: crate::model::ListDependenciesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListDependenciesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListDependenciesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::ApiHubDependencies::list_locations].
    fn list_locations(
        &self,
        _req: location::model::ListLocationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::ListLocationsResponse>> + Send
    {
        std::future::ready::<crate::Result<location::model::ListLocationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::ApiHubDependencies::get_location].
    fn get_location(
        &self,
        _req: location::model::GetLocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::Location>> + Send {
        std::future::ready::<crate::Result<location::model::Location>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHubDependencies::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::ListOperationsResponse>>
           + Send {
        std::future::ready::<crate::Result<longrunning::model::ListOperationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::ApiHubDependencies::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHubDependencies::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ApiHubDependencies::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }
}

/// Defines the trait used to implement [crate::client::HostProjectRegistrationService].
///
/// Application developers may need to implement this trait to mock
/// `client::HostProjectRegistrationService`.  In other use-cases, application developers only
/// use `client::HostProjectRegistrationService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait HostProjectRegistrationService: std::fmt::Debug + Send + Sync {
    /// Implements [crate::client::HostProjectRegistrationService::create_host_project_registration].
    fn create_host_project_registration(
        &self,
        _req: crate::model::CreateHostProjectRegistrationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::HostProjectRegistration>> + Send
    {
        std::future::ready::<crate::Result<crate::model::HostProjectRegistration>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::HostProjectRegistrationService::get_host_project_registration].
    fn get_host_project_registration(
        &self,
        _req: crate::model::GetHostProjectRegistrationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::HostProjectRegistration>> + Send
    {
        std::future::ready::<crate::Result<crate::model::HostProjectRegistration>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::HostProjectRegistrationService::list_host_project_registrations].
    fn list_host_project_registrations(
        &self,
        _req: crate::model::ListHostProjectRegistrationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::ListHostProjectRegistrationsResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::ListHostProjectRegistrationsResponse>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [crate::client::HostProjectRegistrationService::list_locations].
    fn list_locations(
        &self,
        _req: location::model::ListLocationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::ListLocationsResponse>> + Send
    {
        std::future::ready::<crate::Result<location::model::ListLocationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::HostProjectRegistrationService::get_location].
    fn get_location(
        &self,
        _req: location::model::GetLocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::Location>> + Send {
        std::future::ready::<crate::Result<location::model::Location>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::HostProjectRegistrationService::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::ListOperationsResponse>>
           + Send {
        std::future::ready::<crate::Result<longrunning::model::ListOperationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::HostProjectRegistrationService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::HostProjectRegistrationService::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::HostProjectRegistrationService::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }
}

/// Defines the trait used to implement [crate::client::LintingService].
///
/// Application developers may need to implement this trait to mock
/// `client::LintingService`.  In other use-cases, application developers only
/// use `client::LintingService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait LintingService: std::fmt::Debug + Send + Sync {
    /// Implements [crate::client::LintingService::get_style_guide].
    fn get_style_guide(
        &self,
        _req: crate::model::GetStyleGuideRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::StyleGuide>> + Send {
        std::future::ready::<crate::Result<crate::model::StyleGuide>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::LintingService::update_style_guide].
    fn update_style_guide(
        &self,
        _req: crate::model::UpdateStyleGuideRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::StyleGuide>> + Send {
        std::future::ready::<crate::Result<crate::model::StyleGuide>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::LintingService::get_style_guide_contents].
    fn get_style_guide_contents(
        &self,
        _req: crate::model::GetStyleGuideContentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::StyleGuideContents>> + Send
    {
        std::future::ready::<crate::Result<crate::model::StyleGuideContents>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::LintingService::lint_spec].
    fn lint_spec(
        &self,
        _req: crate::model::LintSpecRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::LintingService::list_locations].
    fn list_locations(
        &self,
        _req: location::model::ListLocationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::ListLocationsResponse>> + Send
    {
        std::future::ready::<crate::Result<location::model::ListLocationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::LintingService::get_location].
    fn get_location(
        &self,
        _req: location::model::GetLocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::Location>> + Send {
        std::future::ready::<crate::Result<location::model::Location>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::LintingService::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::ListOperationsResponse>>
           + Send {
        std::future::ready::<crate::Result<longrunning::model::ListOperationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::LintingService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::LintingService::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::LintingService::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }
}

/// Defines the trait used to implement [crate::client::ApiHubPlugin].
///
/// Application developers may need to implement this trait to mock
/// `client::ApiHubPlugin`.  In other use-cases, application developers only
/// use `client::ApiHubPlugin` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait ApiHubPlugin: std::fmt::Debug + Send + Sync {
    /// Implements [crate::client::ApiHubPlugin::get_plugin].
    fn get_plugin(
        &self,
        _req: crate::model::GetPluginRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Plugin>> + Send {
        std::future::ready::<crate::Result<crate::model::Plugin>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHubPlugin::enable_plugin].
    fn enable_plugin(
        &self,
        _req: crate::model::EnablePluginRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Plugin>> + Send {
        std::future::ready::<crate::Result<crate::model::Plugin>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHubPlugin::disable_plugin].
    fn disable_plugin(
        &self,
        _req: crate::model::DisablePluginRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Plugin>> + Send {
        std::future::ready::<crate::Result<crate::model::Plugin>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHubPlugin::list_locations].
    fn list_locations(
        &self,
        _req: location::model::ListLocationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::ListLocationsResponse>> + Send
    {
        std::future::ready::<crate::Result<location::model::ListLocationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::ApiHubPlugin::get_location].
    fn get_location(
        &self,
        _req: location::model::GetLocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::Location>> + Send {
        std::future::ready::<crate::Result<location::model::Location>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHubPlugin::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::ListOperationsResponse>>
           + Send {
        std::future::ready::<crate::Result<longrunning::model::ListOperationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::ApiHubPlugin::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ApiHubPlugin::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ApiHubPlugin::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }
}

/// Defines the trait used to implement [crate::client::Provisioning].
///
/// Application developers may need to implement this trait to mock
/// `client::Provisioning`.  In other use-cases, application developers only
/// use `client::Provisioning` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait Provisioning: std::fmt::Debug + Send + Sync {
    /// Implements [crate::client::Provisioning::create_api_hub_instance].
    fn create_api_hub_instance(
        &self,
        _req: crate::model::CreateApiHubInstanceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::Provisioning::get_api_hub_instance].
    fn get_api_hub_instance(
        &self,
        _req: crate::model::GetApiHubInstanceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ApiHubInstance>> + Send {
        std::future::ready::<crate::Result<crate::model::ApiHubInstance>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::Provisioning::lookup_api_hub_instance].
    fn lookup_api_hub_instance(
        &self,
        _req: crate::model::LookupApiHubInstanceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::LookupApiHubInstanceResponse>>
           + Send {
        std::future::ready::<crate::Result<crate::model::LookupApiHubInstanceResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::Provisioning::list_locations].
    fn list_locations(
        &self,
        _req: location::model::ListLocationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::ListLocationsResponse>> + Send
    {
        std::future::ready::<crate::Result<location::model::ListLocationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::Provisioning::get_location].
    fn get_location(
        &self,
        _req: location::model::GetLocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::Location>> + Send {
        std::future::ready::<crate::Result<location::model::Location>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::Provisioning::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::ListOperationsResponse>>
           + Send {
        std::future::ready::<crate::Result<longrunning::model::ListOperationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::Provisioning::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::Provisioning::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::Provisioning::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Returns the polling policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        Arc::new(gax::polling_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}

/// Defines the trait used to implement [crate::client::RuntimeProjectAttachmentService].
///
/// Application developers may need to implement this trait to mock
/// `client::RuntimeProjectAttachmentService`.  In other use-cases, application developers only
/// use `client::RuntimeProjectAttachmentService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait RuntimeProjectAttachmentService: std::fmt::Debug + Send + Sync {
    /// Implements [crate::client::RuntimeProjectAttachmentService::create_runtime_project_attachment].
    fn create_runtime_project_attachment(
        &self,
        _req: crate::model::CreateRuntimeProjectAttachmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::RuntimeProjectAttachment>> + Send
    {
        std::future::ready::<crate::Result<crate::model::RuntimeProjectAttachment>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::RuntimeProjectAttachmentService::get_runtime_project_attachment].
    fn get_runtime_project_attachment(
        &self,
        _req: crate::model::GetRuntimeProjectAttachmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::RuntimeProjectAttachment>> + Send
    {
        std::future::ready::<crate::Result<crate::model::RuntimeProjectAttachment>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::RuntimeProjectAttachmentService::list_runtime_project_attachments].
    fn list_runtime_project_attachments(
        &self,
        _req: crate::model::ListRuntimeProjectAttachmentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::ListRuntimeProjectAttachmentsResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::ListRuntimeProjectAttachmentsResponse>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [crate::client::RuntimeProjectAttachmentService::delete_runtime_project_attachment].
    fn delete_runtime_project_attachment(
        &self,
        _req: crate::model::DeleteRuntimeProjectAttachmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::RuntimeProjectAttachmentService::lookup_runtime_project_attachment].
    fn lookup_runtime_project_attachment(
        &self,
        _req: crate::model::LookupRuntimeProjectAttachmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::LookupRuntimeProjectAttachmentResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::LookupRuntimeProjectAttachmentResponse>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [crate::client::RuntimeProjectAttachmentService::list_locations].
    fn list_locations(
        &self,
        _req: location::model::ListLocationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::ListLocationsResponse>> + Send
    {
        std::future::ready::<crate::Result<location::model::ListLocationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::RuntimeProjectAttachmentService::get_location].
    fn get_location(
        &self,
        _req: location::model::GetLocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::Location>> + Send {
        std::future::ready::<crate::Result<location::model::Location>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::RuntimeProjectAttachmentService::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::ListOperationsResponse>>
           + Send {
        std::future::ready::<crate::Result<longrunning::model::ListOperationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::RuntimeProjectAttachmentService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::RuntimeProjectAttachmentService::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::RuntimeProjectAttachmentService::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }
}
