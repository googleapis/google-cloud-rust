// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the API hub API.
///
/// # Service Description
///
/// This service provides all methods related to the API hub.
///
/// # Configuration
///
/// `ApiHub` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `ApiHub` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ApiHub` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct ApiHub {
    inner: Arc<dyn crate::stubs::dynamic::ApiHub>,
}

impl ApiHub {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::ApiHub + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::ApiHub>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ApiHub> {
        crate::transport::ApiHub::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ApiHub> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::ApiHub::new)
    }

    /// Create an API resource in the API hub.
    /// Once an API resource is created, versions can be added to it.
    pub fn create_api(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::CreateApi {
        crate::builders::api_hub::CreateApi::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Get API resource details including the API versions contained in it.
    pub fn get_api(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::GetApi {
        crate::builders::api_hub::GetApi::new(self.inner.clone()).set_name(name.into())
    }

    /// List API resources in the API hub.
    pub fn list_apis(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::ListApis {
        crate::builders::api_hub::ListApis::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Update an API resource in the API hub. The following fields in the
    /// [API][] can be updated:
    ///
    /// * [display_name][google.cloud.apihub.v1.Api.display_name]
    /// * [description][google.cloud.apihub.v1.Api.description]
    /// * [owner][google.cloud.apihub.v1.Api.owner]
    /// * [documentation][google.cloud.apihub.v1.Api.documentation]
    /// * [target_user][google.cloud.apihub.v1.Api.target_user]
    /// * [team][google.cloud.apihub.v1.Api.team]
    /// * [business_unit][google.cloud.apihub.v1.Api.business_unit]
    /// * [maturity_level][google.cloud.apihub.v1.Api.maturity_level]
    /// * [attributes][google.cloud.apihub.v1.Api.attributes]
    ///
    /// The
    /// [update_mask][google.cloud.apihub.v1.UpdateApiRequest.update_mask]
    /// should be used to specify the fields being updated.
    ///
    /// Updating the owner field requires complete owner message
    /// and updates both owner and email fields.
    ///
    /// [google.cloud.apihub.v1.Api.attributes]: crate::model::Api::attributes
    /// [google.cloud.apihub.v1.Api.business_unit]: crate::model::Api::business_unit
    /// [google.cloud.apihub.v1.Api.description]: crate::model::Api::description
    /// [google.cloud.apihub.v1.Api.display_name]: crate::model::Api::display_name
    /// [google.cloud.apihub.v1.Api.documentation]: crate::model::Api::documentation
    /// [google.cloud.apihub.v1.Api.maturity_level]: crate::model::Api::maturity_level
    /// [google.cloud.apihub.v1.Api.owner]: crate::model::Api::owner
    /// [google.cloud.apihub.v1.Api.target_user]: crate::model::Api::target_user
    /// [google.cloud.apihub.v1.Api.team]: crate::model::Api::team
    /// [google.cloud.apihub.v1.UpdateApiRequest.update_mask]: crate::model::UpdateApiRequest::update_mask
    pub fn update_api(
        &self,
        api: impl Into<crate::model::Api>,
    ) -> crate::builders::api_hub::UpdateApi {
        crate::builders::api_hub::UpdateApi::new(self.inner.clone()).set_api(api.into())
    }

    /// Delete an API resource in the API hub. API can only be deleted if all
    /// underlying versions are deleted.
    pub fn delete_api(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::DeleteApi {
        crate::builders::api_hub::DeleteApi::new(self.inner.clone()).set_name(name.into())
    }

    /// Create an API version for an API resource in the API hub.
    pub fn create_version(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::CreateVersion {
        crate::builders::api_hub::CreateVersion::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Get details about the API version of an API resource. This will include
    /// information about the specs and operations present in the API
    /// version as well as the deployments linked to it.
    pub fn get_version(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::GetVersion {
        crate::builders::api_hub::GetVersion::new(self.inner.clone()).set_name(name.into())
    }

    /// List API versions of an API resource in the API hub.
    pub fn list_versions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::ListVersions {
        crate::builders::api_hub::ListVersions::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Update API version. The following fields in the
    /// [version][google.cloud.apihub.v1.Version] can be updated currently:
    ///
    /// * [display_name][google.cloud.apihub.v1.Version.display_name]
    /// * [description][google.cloud.apihub.v1.Version.description]
    /// * [documentation][google.cloud.apihub.v1.Version.documentation]
    /// * [deployments][google.cloud.apihub.v1.Version.deployments]
    /// * [lifecycle][google.cloud.apihub.v1.Version.lifecycle]
    /// * [compliance][google.cloud.apihub.v1.Version.compliance]
    /// * [accreditation][google.cloud.apihub.v1.Version.accreditation]
    /// * [attributes][google.cloud.apihub.v1.Version.attributes]
    ///
    /// The
    /// [update_mask][google.cloud.apihub.v1.UpdateVersionRequest.update_mask]
    /// should be used to specify the fields being updated.
    ///
    /// [google.cloud.apihub.v1.UpdateVersionRequest.update_mask]: crate::model::UpdateVersionRequest::update_mask
    /// [google.cloud.apihub.v1.Version]: crate::model::Version
    /// [google.cloud.apihub.v1.Version.accreditation]: crate::model::Version::accreditation
    /// [google.cloud.apihub.v1.Version.attributes]: crate::model::Version::attributes
    /// [google.cloud.apihub.v1.Version.compliance]: crate::model::Version::compliance
    /// [google.cloud.apihub.v1.Version.deployments]: crate::model::Version::deployments
    /// [google.cloud.apihub.v1.Version.description]: crate::model::Version::description
    /// [google.cloud.apihub.v1.Version.display_name]: crate::model::Version::display_name
    /// [google.cloud.apihub.v1.Version.documentation]: crate::model::Version::documentation
    /// [google.cloud.apihub.v1.Version.lifecycle]: crate::model::Version::lifecycle
    pub fn update_version(
        &self,
        version: impl Into<crate::model::Version>,
    ) -> crate::builders::api_hub::UpdateVersion {
        crate::builders::api_hub::UpdateVersion::new(self.inner.clone()).set_version(version.into())
    }

    /// Delete an API version. Version can only be deleted if all underlying specs,
    /// operations, definitions and linked deployments are deleted.
    pub fn delete_version(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::DeleteVersion {
        crate::builders::api_hub::DeleteVersion::new(self.inner.clone()).set_name(name.into())
    }

    /// Add a spec to an API version in the API hub.
    /// Multiple specs can be added to an API version.
    /// Note, while adding a spec, at least one of `contents` or `source_uri` must
    /// be provided. If `contents` is provided, then `spec_type` must also be
    /// provided.
    ///
    /// On adding a spec with contents to the version, the operations present in it
    /// will be added to the version.Note that the file contents in the spec should
    /// be of the same type as defined in the
    /// `projects/{project}/locations/{location}/attributes/system-spec-type`
    /// attribute associated with spec resource. Note that specs of various types
    /// can be uploaded, however parsing of details is supported for OpenAPI spec
    /// currently.
    ///
    /// In order to access the information parsed from the spec, use the
    /// [GetSpec][google.cloud.apihub.v1.ApiHub.GetSpec] method.
    /// In order to access the raw contents for a particular spec, use the
    /// [GetSpecContents][google.cloud.apihub.v1.ApiHub.GetSpecContents] method.
    /// In order to access the operations parsed from the spec, use the
    /// [ListAPIOperations][google.cloud.apihub.v1.ApiHub.ListApiOperations]
    /// method.
    ///
    /// [google.cloud.apihub.v1.ApiHub.GetSpec]: crate::client::ApiHub::get_spec
    /// [google.cloud.apihub.v1.ApiHub.GetSpecContents]: crate::client::ApiHub::get_spec_contents
    /// [google.cloud.apihub.v1.ApiHub.ListApiOperations]: crate::client::ApiHub::list_api_operations
    pub fn create_spec(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::CreateSpec {
        crate::builders::api_hub::CreateSpec::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Get details about the information parsed from a spec.
    /// Note that this method does not return the raw spec contents.
    /// Use [GetSpecContents][google.cloud.apihub.v1.ApiHub.GetSpecContents] method
    /// to retrieve the same.
    ///
    /// [google.cloud.apihub.v1.ApiHub.GetSpecContents]: crate::client::ApiHub::get_spec_contents
    pub fn get_spec(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::GetSpec {
        crate::builders::api_hub::GetSpec::new(self.inner.clone()).set_name(name.into())
    }

    /// Get spec contents.
    pub fn get_spec_contents(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::GetSpecContents {
        crate::builders::api_hub::GetSpecContents::new(self.inner.clone()).set_name(name.into())
    }

    /// List specs corresponding to a particular API resource.
    pub fn list_specs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::ListSpecs {
        crate::builders::api_hub::ListSpecs::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Update spec. The following fields in the
    /// [spec][google.cloud.apihub.v1.Spec] can be updated:
    ///
    /// * [display_name][google.cloud.apihub.v1.Spec.display_name]
    /// * [source_uri][google.cloud.apihub.v1.Spec.source_uri]
    /// * [lint_response][google.cloud.apihub.v1.Spec.lint_response]
    /// * [attributes][google.cloud.apihub.v1.Spec.attributes]
    /// * [contents][google.cloud.apihub.v1.Spec.contents]
    /// * [spec_type][google.cloud.apihub.v1.Spec.spec_type]
    ///
    /// In case of an OAS spec, updating spec contents can lead to:
    ///
    /// . Creation, deletion and update of operations.
    /// . Creation, deletion and update of definitions.
    /// . Update of other info parsed out from the new spec.
    ///
    /// In case of contents or source_uri being present in update mask, spec_type
    /// must also be present. Also, spec_type can not be present in update mask if
    /// contents or source_uri is not present.
    ///
    /// The
    /// [update_mask][google.cloud.apihub.v1.UpdateSpecRequest.update_mask]
    /// should be used to specify the fields being updated.
    ///
    /// [google.cloud.apihub.v1.Spec]: crate::model::Spec
    /// [google.cloud.apihub.v1.Spec.attributes]: crate::model::Spec::attributes
    /// [google.cloud.apihub.v1.Spec.contents]: crate::model::Spec::contents
    /// [google.cloud.apihub.v1.Spec.display_name]: crate::model::Spec::display_name
    /// [google.cloud.apihub.v1.Spec.lint_response]: crate::model::Spec::lint_response
    /// [google.cloud.apihub.v1.Spec.source_uri]: crate::model::Spec::source_uri
    /// [google.cloud.apihub.v1.Spec.spec_type]: crate::model::Spec::spec_type
    /// [google.cloud.apihub.v1.UpdateSpecRequest.update_mask]: crate::model::UpdateSpecRequest::update_mask
    pub fn update_spec(
        &self,
        spec: impl Into<crate::model::Spec>,
    ) -> crate::builders::api_hub::UpdateSpec {
        crate::builders::api_hub::UpdateSpec::new(self.inner.clone()).set_spec(spec.into())
    }

    /// Delete a spec.
    /// Deleting a spec will also delete the associated operations from the
    /// version.
    pub fn delete_spec(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::DeleteSpec {
        crate::builders::api_hub::DeleteSpec::new(self.inner.clone()).set_name(name.into())
    }

    /// Get details about a particular operation in API version.
    pub fn get_api_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::GetApiOperation {
        crate::builders::api_hub::GetApiOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// List operations in an API version.
    pub fn list_api_operations(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::ListApiOperations {
        crate::builders::api_hub::ListApiOperations::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Get details about a definition in an API version.
    pub fn get_definition(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::GetDefinition {
        crate::builders::api_hub::GetDefinition::new(self.inner.clone()).set_name(name.into())
    }

    /// Create a deployment resource in the API hub.
    /// Once a deployment resource is created, it can be associated with API
    /// versions.
    pub fn create_deployment(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::CreateDeployment {
        crate::builders::api_hub::CreateDeployment::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Get details about a deployment and the API versions linked to it.
    pub fn get_deployment(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::GetDeployment {
        crate::builders::api_hub::GetDeployment::new(self.inner.clone()).set_name(name.into())
    }

    /// List deployment resources in the API hub.
    pub fn list_deployments(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::ListDeployments {
        crate::builders::api_hub::ListDeployments::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Update a deployment resource in the API hub. The following fields in the
    /// [deployment resource][google.cloud.apihub.v1.Deployment] can be
    /// updated:
    ///
    /// * [display_name][google.cloud.apihub.v1.Deployment.display_name]
    /// * [description][google.cloud.apihub.v1.Deployment.description]
    /// * [documentation][google.cloud.apihub.v1.Deployment.documentation]
    /// * [deployment_type][google.cloud.apihub.v1.Deployment.deployment_type]
    /// * [resource_uri][google.cloud.apihub.v1.Deployment.resource_uri]
    /// * [endpoints][google.cloud.apihub.v1.Deployment.endpoints]
    /// * [slo][google.cloud.apihub.v1.Deployment.slo]
    /// * [environment][google.cloud.apihub.v1.Deployment.environment]
    /// * [attributes][google.cloud.apihub.v1.Deployment.attributes]
    ///
    /// The
    /// [update_mask][google.cloud.apihub.v1.UpdateDeploymentRequest.update_mask]
    /// should be used to specify the fields being updated.
    ///
    /// [google.cloud.apihub.v1.Deployment]: crate::model::Deployment
    /// [google.cloud.apihub.v1.Deployment.attributes]: crate::model::Deployment::attributes
    /// [google.cloud.apihub.v1.Deployment.deployment_type]: crate::model::Deployment::deployment_type
    /// [google.cloud.apihub.v1.Deployment.description]: crate::model::Deployment::description
    /// [google.cloud.apihub.v1.Deployment.display_name]: crate::model::Deployment::display_name
    /// [google.cloud.apihub.v1.Deployment.documentation]: crate::model::Deployment::documentation
    /// [google.cloud.apihub.v1.Deployment.endpoints]: crate::model::Deployment::endpoints
    /// [google.cloud.apihub.v1.Deployment.environment]: crate::model::Deployment::environment
    /// [google.cloud.apihub.v1.Deployment.resource_uri]: crate::model::Deployment::resource_uri
    /// [google.cloud.apihub.v1.Deployment.slo]: crate::model::Deployment::slo
    /// [google.cloud.apihub.v1.UpdateDeploymentRequest.update_mask]: crate::model::UpdateDeploymentRequest::update_mask
    pub fn update_deployment(
        &self,
        deployment: impl Into<crate::model::Deployment>,
    ) -> crate::builders::api_hub::UpdateDeployment {
        crate::builders::api_hub::UpdateDeployment::new(self.inner.clone())
            .set_deployment(deployment.into())
    }

    /// Delete a deployment resource in the API hub.
    pub fn delete_deployment(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::DeleteDeployment {
        crate::builders::api_hub::DeleteDeployment::new(self.inner.clone()).set_name(name.into())
    }

    /// Create a user defined attribute.
    ///
    /// Certain pre defined attributes are already created by the API hub. These
    /// attributes will have type as `SYSTEM_DEFINED` and can be listed via
    /// [ListAttributes][google.cloud.apihub.v1.ApiHub.ListAttributes] method.
    /// Allowed values for the same can be updated via
    /// [UpdateAttribute][google.cloud.apihub.v1.ApiHub.UpdateAttribute] method.
    ///
    /// [google.cloud.apihub.v1.ApiHub.ListAttributes]: crate::client::ApiHub::list_attributes
    /// [google.cloud.apihub.v1.ApiHub.UpdateAttribute]: crate::client::ApiHub::update_attribute
    pub fn create_attribute(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::CreateAttribute {
        crate::builders::api_hub::CreateAttribute::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Get details about the attribute.
    pub fn get_attribute(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::GetAttribute {
        crate::builders::api_hub::GetAttribute::new(self.inner.clone()).set_name(name.into())
    }

    /// Update the attribute.  The following fields in the
    /// [Attribute resource][google.cloud.apihub.v1.Attribute] can be updated:
    ///
    /// * [display_name][google.cloud.apihub.v1.Attribute.display_name]
    ///   The display name can be updated for user defined attributes only.
    /// * [description][google.cloud.apihub.v1.Attribute.description]
    ///   The description can be updated for user defined attributes only.
    /// * [allowed_values][google.cloud.apihub.v1.Attribute.allowed_values]
    ///   To update the list of allowed values, clients need to use the fetched list
    ///   of allowed values and add or remove values to or from the same list.
    ///   The mutable allowed values can be updated for both user defined and System
    ///   defined attributes. The immutable allowed values cannot be updated or
    ///   deleted. The updated list of allowed values cannot be empty. If an allowed
    ///   value that is already used by some resource's attribute is deleted, then
    ///   the association between the resource and the attribute value will also be
    ///   deleted.
    /// * [cardinality][google.cloud.apihub.v1.Attribute.cardinality]
    ///   The cardinality can be updated for user defined attributes only.
    ///   Cardinality can only be increased during an update.
    ///
    /// The
    /// [update_mask][google.cloud.apihub.v1.UpdateAttributeRequest.update_mask]
    /// should be used to specify the fields being updated.
    ///
    /// [google.cloud.apihub.v1.Attribute]: crate::model::Attribute
    /// [google.cloud.apihub.v1.Attribute.allowed_values]: crate::model::Attribute::allowed_values
    /// [google.cloud.apihub.v1.Attribute.cardinality]: crate::model::Attribute::cardinality
    /// [google.cloud.apihub.v1.Attribute.description]: crate::model::Attribute::description
    /// [google.cloud.apihub.v1.Attribute.display_name]: crate::model::Attribute::display_name
    /// [google.cloud.apihub.v1.UpdateAttributeRequest.update_mask]: crate::model::UpdateAttributeRequest::update_mask
    pub fn update_attribute(
        &self,
        attribute: impl Into<crate::model::Attribute>,
    ) -> crate::builders::api_hub::UpdateAttribute {
        crate::builders::api_hub::UpdateAttribute::new(self.inner.clone())
            .set_attribute(attribute.into())
    }

    /// Delete an attribute.
    ///
    /// Note: System defined attributes cannot be deleted. All
    /// associations of the attribute being deleted with any API hub resource will
    /// also get deleted.
    pub fn delete_attribute(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::DeleteAttribute {
        crate::builders::api_hub::DeleteAttribute::new(self.inner.clone()).set_name(name.into())
    }

    /// List all attributes.
    pub fn list_attributes(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::ListAttributes {
        crate::builders::api_hub::ListAttributes::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Search across API-Hub resources.
    pub fn search_resources(
        &self,
        location: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::SearchResources {
        crate::builders::api_hub::SearchResources::new(self.inner.clone())
            .set_location(location.into())
    }

    /// Create an External API resource in the API hub.
    pub fn create_external_api(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::CreateExternalApi {
        crate::builders::api_hub::CreateExternalApi::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Get details about an External API resource in the API hub.
    pub fn get_external_api(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::GetExternalApi {
        crate::builders::api_hub::GetExternalApi::new(self.inner.clone()).set_name(name.into())
    }

    /// Update an External API resource in the API hub. The following fields can be
    /// updated:
    ///
    /// * [display_name][google.cloud.apihub.v1.ExternalApi.display_name]
    /// * [description][google.cloud.apihub.v1.ExternalApi.description]
    /// * [documentation][google.cloud.apihub.v1.ExternalApi.documentation]
    /// * [endpoints][google.cloud.apihub.v1.ExternalApi.endpoints]
    /// * [paths][google.cloud.apihub.v1.ExternalApi.paths]
    ///
    /// The
    /// [update_mask][google.cloud.apihub.v1.UpdateExternalApiRequest.update_mask]
    /// should be used to specify the fields being updated.
    ///
    /// [google.cloud.apihub.v1.ExternalApi.description]: crate::model::ExternalApi::description
    /// [google.cloud.apihub.v1.ExternalApi.display_name]: crate::model::ExternalApi::display_name
    /// [google.cloud.apihub.v1.ExternalApi.documentation]: crate::model::ExternalApi::documentation
    /// [google.cloud.apihub.v1.ExternalApi.endpoints]: crate::model::ExternalApi::endpoints
    /// [google.cloud.apihub.v1.ExternalApi.paths]: crate::model::ExternalApi::paths
    /// [google.cloud.apihub.v1.UpdateExternalApiRequest.update_mask]: crate::model::UpdateExternalApiRequest::update_mask
    pub fn update_external_api(
        &self,
        external_api: impl Into<crate::model::ExternalApi>,
    ) -> crate::builders::api_hub::UpdateExternalApi {
        crate::builders::api_hub::UpdateExternalApi::new(self.inner.clone())
            .set_external_api(external_api.into())
    }

    /// Delete an External API resource in the API hub.
    pub fn delete_external_api(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::DeleteExternalApi {
        crate::builders::api_hub::DeleteExternalApi::new(self.inner.clone()).set_name(name.into())
    }

    /// List External API resources in the API hub.
    pub fn list_external_apis(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::ListExternalApis {
        crate::builders::api_hub::ListExternalApis::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::ListLocations {
        crate::builders::api_hub::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::GetLocation {
        crate::builders::api_hub::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::ListOperations {
        crate::builders::api_hub::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::GetOperation {
        crate::builders::api_hub::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::DeleteOperation {
        crate::builders::api_hub::DeleteOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub::CancelOperation {
        crate::builders::api_hub::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the API hub API.
///
/// # Service Description
///
/// This service provides methods for various operations related to a
/// [Dependency][google.cloud.apihub.v1.Dependency] in the API hub.
///
/// [google.cloud.apihub.v1.Dependency]: crate::model::Dependency
///
/// # Configuration
///
/// `ApiHubDependencies` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `ApiHubDependencies` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ApiHubDependencies` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct ApiHubDependencies {
    inner: Arc<dyn crate::stubs::dynamic::ApiHubDependencies>,
}

impl ApiHubDependencies {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::ApiHubDependencies + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::ApiHubDependencies>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ApiHubDependencies> {
        crate::transport::ApiHubDependencies::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ApiHubDependencies> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::ApiHubDependencies::new)
    }

    /// Create a dependency between two entities in the API hub.
    pub fn create_dependency(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::api_hub_dependencies::CreateDependency {
        crate::builders::api_hub_dependencies::CreateDependency::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Get details about a dependency resource in the API hub.
    pub fn get_dependency(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub_dependencies::GetDependency {
        crate::builders::api_hub_dependencies::GetDependency::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Update a dependency based on the
    /// [update_mask][google.cloud.apihub.v1.UpdateDependencyRequest.update_mask]
    /// provided in the request.
    ///
    /// The following fields in the [dependency][google.cloud.apihub.v1.Dependency]
    /// can be updated:
    ///
    /// * [description][google.cloud.apihub.v1.Dependency.description]
    ///
    /// [google.cloud.apihub.v1.Dependency]: crate::model::Dependency
    /// [google.cloud.apihub.v1.Dependency.description]: crate::model::Dependency::description
    /// [google.cloud.apihub.v1.UpdateDependencyRequest.update_mask]: crate::model::UpdateDependencyRequest::update_mask
    pub fn update_dependency(
        &self,
        dependency: impl Into<crate::model::Dependency>,
    ) -> crate::builders::api_hub_dependencies::UpdateDependency {
        crate::builders::api_hub_dependencies::UpdateDependency::new(self.inner.clone())
            .set_dependency(dependency.into())
    }

    /// Delete the dependency resource.
    pub fn delete_dependency(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub_dependencies::DeleteDependency {
        crate::builders::api_hub_dependencies::DeleteDependency::new(self.inner.clone())
            .set_name(name.into())
    }

    /// List dependencies based on the provided filter and pagination parameters.
    pub fn list_dependencies(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::api_hub_dependencies::ListDependencies {
        crate::builders::api_hub_dependencies::ListDependencies::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub_dependencies::ListLocations {
        crate::builders::api_hub_dependencies::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub_dependencies::GetLocation {
        crate::builders::api_hub_dependencies::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub_dependencies::ListOperations {
        crate::builders::api_hub_dependencies::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub_dependencies::GetOperation {
        crate::builders::api_hub_dependencies::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub_dependencies::DeleteOperation {
        crate::builders::api_hub_dependencies::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub_dependencies::CancelOperation {
        crate::builders::api_hub_dependencies::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the API hub API.
///
/// # Service Description
///
/// This service is used for managing the host project registrations.
///
/// # Configuration
///
/// `HostProjectRegistrationService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `HostProjectRegistrationService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `HostProjectRegistrationService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct HostProjectRegistrationService {
    inner: Arc<dyn crate::stubs::dynamic::HostProjectRegistrationService>,
}

impl HostProjectRegistrationService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::HostProjectRegistrationService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::HostProjectRegistrationService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::HostProjectRegistrationService> {
        crate::transport::HostProjectRegistrationService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::HostProjectRegistrationService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::HostProjectRegistrationService::new)
    }

    /// Create a host project registration.
    /// A Google cloud project can be registered as a host project if it is not
    /// attached as a runtime project to another host project.
    /// A project can be registered as a host project only once. Subsequent
    /// register calls for the same project will fail.
    pub fn create_host_project_registration(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::host_project_registration_service::CreateHostProjectRegistration {
        crate::builders::host_project_registration_service::CreateHostProjectRegistration::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Get a host project registration.
    pub fn get_host_project_registration(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::host_project_registration_service::GetHostProjectRegistration {
        crate::builders::host_project_registration_service::GetHostProjectRegistration::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Lists host project registrations.
    pub fn list_host_project_registrations(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::host_project_registration_service::ListHostProjectRegistrations {
        crate::builders::host_project_registration_service::ListHostProjectRegistrations::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::host_project_registration_service::ListLocations {
        crate::builders::host_project_registration_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::host_project_registration_service::GetLocation {
        crate::builders::host_project_registration_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::host_project_registration_service::ListOperations {
        crate::builders::host_project_registration_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::host_project_registration_service::GetOperation {
        crate::builders::host_project_registration_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::host_project_registration_service::DeleteOperation {
        crate::builders::host_project_registration_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::host_project_registration_service::CancelOperation {
        crate::builders::host_project_registration_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the API hub API.
///
/// # Service Description
///
/// This service provides all methods related to the 1p Linter.
///
/// # Configuration
///
/// `LintingService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `LintingService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `LintingService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct LintingService {
    inner: Arc<dyn crate::stubs::dynamic::LintingService>,
}

impl LintingService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::LintingService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::LintingService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::LintingService> {
        crate::transport::LintingService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::LintingService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::LintingService::new)
    }

    /// Get the style guide being used for linting.
    pub fn get_style_guide(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::linting_service::GetStyleGuide {
        crate::builders::linting_service::GetStyleGuide::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Update the styleGuide to be used for liniting in by API hub.
    pub fn update_style_guide(
        &self,
        style_guide: impl Into<crate::model::StyleGuide>,
    ) -> crate::builders::linting_service::UpdateStyleGuide {
        crate::builders::linting_service::UpdateStyleGuide::new(self.inner.clone())
            .set_style_guide(style_guide.into())
    }

    /// Get the contents of the style guide.
    pub fn get_style_guide_contents(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::linting_service::GetStyleGuideContents {
        crate::builders::linting_service::GetStyleGuideContents::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lints the requested spec and updates the corresponding API Spec with the
    /// lint response. This lint response will be available in all subsequent
    /// Get and List Spec calls to Core service.
    pub fn lint_spec(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::linting_service::LintSpec {
        crate::builders::linting_service::LintSpec::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::linting_service::ListLocations {
        crate::builders::linting_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::linting_service::GetLocation {
        crate::builders::linting_service::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::linting_service::ListOperations {
        crate::builders::linting_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::linting_service::GetOperation {
        crate::builders::linting_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::linting_service::DeleteOperation {
        crate::builders::linting_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::linting_service::CancelOperation {
        crate::builders::linting_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the API hub API.
///
/// # Service Description
///
/// This service is used for managing plugins inside the API Hub.
///
/// # Configuration
///
/// `ApiHubPlugin` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `ApiHubPlugin` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ApiHubPlugin` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct ApiHubPlugin {
    inner: Arc<dyn crate::stubs::dynamic::ApiHubPlugin>,
}

impl ApiHubPlugin {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::ApiHubPlugin + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::ApiHubPlugin>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ApiHubPlugin> {
        crate::transport::ApiHubPlugin::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ApiHubPlugin> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::ApiHubPlugin::new)
    }

    /// Get details about an API Hub plugin.
    pub fn get_plugin(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub_plugin::GetPlugin {
        crate::builders::api_hub_plugin::GetPlugin::new(self.inner.clone()).set_name(name.into())
    }

    /// Enables a plugin.
    /// The `state` of the plugin after enabling is `ENABLED`
    pub fn enable_plugin(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub_plugin::EnablePlugin {
        crate::builders::api_hub_plugin::EnablePlugin::new(self.inner.clone()).set_name(name.into())
    }

    /// Disables a plugin.
    /// The `state` of the plugin after disabling is `DISABLED`
    pub fn disable_plugin(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub_plugin::DisablePlugin {
        crate::builders::api_hub_plugin::DisablePlugin::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub_plugin::ListLocations {
        crate::builders::api_hub_plugin::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub_plugin::GetLocation {
        crate::builders::api_hub_plugin::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub_plugin::ListOperations {
        crate::builders::api_hub_plugin::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub_plugin::GetOperation {
        crate::builders::api_hub_plugin::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub_plugin::DeleteOperation {
        crate::builders::api_hub_plugin::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::api_hub_plugin::CancelOperation {
        crate::builders::api_hub_plugin::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the API hub API.
///
/// # Service Description
///
/// This service is used for managing the data plane provisioning of the API hub.
///
/// # Configuration
///
/// `Provisioning` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Provisioning` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Provisioning` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Provisioning {
    inner: Arc<dyn crate::stubs::dynamic::Provisioning>,
}

impl Provisioning {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::Provisioning + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::Provisioning>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Provisioning> {
        crate::transport::Provisioning::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Provisioning> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::Provisioning::new)
    }

    /// Provisions instance resources for the API Hub.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_api_hub_instance(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::provisioning::CreateApiHubInstance {
        crate::builders::provisioning::CreateApiHubInstance::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single API Hub instance.
    pub fn get_api_hub_instance(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::provisioning::GetApiHubInstance {
        crate::builders::provisioning::GetApiHubInstance::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Looks up an Api Hub instance in a given GCP project. There will always be
    /// only one Api Hub instance for a GCP project across all locations.
    pub fn lookup_api_hub_instance(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::provisioning::LookupApiHubInstance {
        crate::builders::provisioning::LookupApiHubInstance::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::provisioning::ListLocations {
        crate::builders::provisioning::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::provisioning::GetLocation {
        crate::builders::provisioning::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::provisioning::ListOperations {
        crate::builders::provisioning::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::provisioning::GetOperation {
        crate::builders::provisioning::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::provisioning::DeleteOperation {
        crate::builders::provisioning::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::provisioning::CancelOperation {
        crate::builders::provisioning::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the API hub API.
///
/// # Service Description
///
/// This service is used for managing the runtime project attachments.
///
/// # Configuration
///
/// `RuntimeProjectAttachmentService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `RuntimeProjectAttachmentService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `RuntimeProjectAttachmentService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct RuntimeProjectAttachmentService {
    inner: Arc<dyn crate::stubs::dynamic::RuntimeProjectAttachmentService>,
}

impl RuntimeProjectAttachmentService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::RuntimeProjectAttachmentService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::RuntimeProjectAttachmentService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::RuntimeProjectAttachmentService> {
        crate::transport::RuntimeProjectAttachmentService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::RuntimeProjectAttachmentService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::RuntimeProjectAttachmentService::new)
    }

    /// Attaches a runtime project to the host project.
    pub fn create_runtime_project_attachment(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::runtime_project_attachment_service::CreateRuntimeProjectAttachment {
        crate::builders::runtime_project_attachment_service::CreateRuntimeProjectAttachment::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Gets a runtime project attachment.
    pub fn get_runtime_project_attachment(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::runtime_project_attachment_service::GetRuntimeProjectAttachment {
        crate::builders::runtime_project_attachment_service::GetRuntimeProjectAttachment::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// List runtime projects attached to the host project.
    pub fn list_runtime_project_attachments(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::runtime_project_attachment_service::ListRuntimeProjectAttachments {
        crate::builders::runtime_project_attachment_service::ListRuntimeProjectAttachments::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Delete a runtime project attachment in the API Hub. This call will detach
    /// the runtime project from the host project.
    pub fn delete_runtime_project_attachment(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::runtime_project_attachment_service::DeleteRuntimeProjectAttachment {
        crate::builders::runtime_project_attachment_service::DeleteRuntimeProjectAttachment::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Look up a runtime project attachment. This API can be called in the context
    /// of any project.
    pub fn lookup_runtime_project_attachment(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::runtime_project_attachment_service::LookupRuntimeProjectAttachment {
        crate::builders::runtime_project_attachment_service::LookupRuntimeProjectAttachment::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::runtime_project_attachment_service::ListLocations {
        crate::builders::runtime_project_attachment_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::runtime_project_attachment_service::GetLocation {
        crate::builders::runtime_project_attachment_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::runtime_project_attachment_service::ListOperations {
        crate::builders::runtime_project_attachment_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::runtime_project_attachment_service::GetOperation {
        crate::builders::runtime_project_attachment_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::runtime_project_attachment_service::DeleteOperation {
        crate::builders::runtime_project_attachment_service::DeleteOperation::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::runtime_project_attachment_service::CancelOperation {
        crate::builders::runtime_project_attachment_service::CancelOperation::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }
}
