// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use std::sync::Arc;

/// A dyn-compatible, crate-private version of [super::CloudDeploy].
#[async_trait::async_trait]
pub trait CloudDeploy: std::fmt::Debug + Send + Sync {
    async fn list_delivery_pipelines(
        &self,
        req: crate::model::ListDeliveryPipelinesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListDeliveryPipelinesResponse>;

    async fn get_delivery_pipeline(
        &self,
        req: crate::model::GetDeliveryPipelineRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::DeliveryPipeline>;

    async fn create_delivery_pipeline(
        &self,
        req: crate::model::CreateDeliveryPipelineRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_delivery_pipeline(
        &self,
        req: crate::model::UpdateDeliveryPipelineRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_delivery_pipeline(
        &self,
        req: crate::model::DeleteDeliveryPipelineRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_targets(
        &self,
        req: crate::model::ListTargetsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListTargetsResponse>;

    async fn rollback_target(
        &self,
        req: crate::model::RollbackTargetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::RollbackTargetResponse>;

    async fn get_target(
        &self,
        req: crate::model::GetTargetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Target>;

    async fn create_target(
        &self,
        req: crate::model::CreateTargetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_target(
        &self,
        req: crate::model::UpdateTargetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_target(
        &self,
        req: crate::model::DeleteTargetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_custom_target_types(
        &self,
        req: crate::model::ListCustomTargetTypesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCustomTargetTypesResponse>;

    async fn get_custom_target_type(
        &self,
        req: crate::model::GetCustomTargetTypeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CustomTargetType>;

    async fn create_custom_target_type(
        &self,
        req: crate::model::CreateCustomTargetTypeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_custom_target_type(
        &self,
        req: crate::model::UpdateCustomTargetTypeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_custom_target_type(
        &self,
        req: crate::model::DeleteCustomTargetTypeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_releases(
        &self,
        req: crate::model::ListReleasesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListReleasesResponse>;

    async fn get_release(
        &self,
        req: crate::model::GetReleaseRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Release>;

    async fn create_release(
        &self,
        req: crate::model::CreateReleaseRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn abandon_release(
        &self,
        req: crate::model::AbandonReleaseRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AbandonReleaseResponse>;

    async fn create_deploy_policy(
        &self,
        req: crate::model::CreateDeployPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_deploy_policy(
        &self,
        req: crate::model::UpdateDeployPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_deploy_policy(
        &self,
        req: crate::model::DeleteDeployPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_deploy_policies(
        &self,
        req: crate::model::ListDeployPoliciesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListDeployPoliciesResponse>;

    async fn get_deploy_policy(
        &self,
        req: crate::model::GetDeployPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::DeployPolicy>;

    async fn approve_rollout(
        &self,
        req: crate::model::ApproveRolloutRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ApproveRolloutResponse>;

    async fn advance_rollout(
        &self,
        req: crate::model::AdvanceRolloutRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AdvanceRolloutResponse>;

    async fn cancel_rollout(
        &self,
        req: crate::model::CancelRolloutRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CancelRolloutResponse>;

    async fn list_rollouts(
        &self,
        req: crate::model::ListRolloutsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListRolloutsResponse>;

    async fn get_rollout(
        &self,
        req: crate::model::GetRolloutRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Rollout>;

    async fn create_rollout(
        &self,
        req: crate::model::CreateRolloutRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn ignore_job(
        &self,
        req: crate::model::IgnoreJobRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::IgnoreJobResponse>;

    async fn retry_job(
        &self,
        req: crate::model::RetryJobRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::RetryJobResponse>;

    async fn list_job_runs(
        &self,
        req: crate::model::ListJobRunsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListJobRunsResponse>;

    async fn get_job_run(
        &self,
        req: crate::model::GetJobRunRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::JobRun>;

    async fn terminate_job_run(
        &self,
        req: crate::model::TerminateJobRunRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::TerminateJobRunResponse>;

    async fn get_config(
        &self,
        req: crate::model::GetConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Config>;

    async fn create_automation(
        &self,
        req: crate::model::CreateAutomationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_automation(
        &self,
        req: crate::model::UpdateAutomationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_automation(
        &self,
        req: crate::model::DeleteAutomationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_automation(
        &self,
        req: crate::model::GetAutomationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Automation>;

    async fn list_automations(
        &self,
        req: crate::model::ListAutomationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAutomationsResponse>;

    async fn get_automation_run(
        &self,
        req: crate::model::GetAutomationRunRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AutomationRun>;

    async fn list_automation_runs(
        &self,
        req: crate::model::ListAutomationRunsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAutomationRunsResponse>;

    async fn cancel_automation_run(
        &self,
        req: crate::model::CancelAutomationRunRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CancelAutomationRunResponse>;

    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::ListLocationsResponse>;

    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::Location>;

    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy>;

    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy>;

    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::TestIamPermissionsResponse>;

    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_error_policy::PollingErrorPolicy>;

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}

/// All implementations of [super::CloudDeploy] also implement [CloudDeploy].
#[async_trait::async_trait]
impl<T: super::CloudDeploy> CloudDeploy for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn list_delivery_pipelines(
        &self,
        req: crate::model::ListDeliveryPipelinesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListDeliveryPipelinesResponse> {
        T::list_delivery_pipelines(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_delivery_pipeline(
        &self,
        req: crate::model::GetDeliveryPipelineRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::DeliveryPipeline> {
        T::get_delivery_pipeline(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_delivery_pipeline(
        &self,
        req: crate::model::CreateDeliveryPipelineRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_delivery_pipeline(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_delivery_pipeline(
        &self,
        req: crate::model::UpdateDeliveryPipelineRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_delivery_pipeline(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_delivery_pipeline(
        &self,
        req: crate::model::DeleteDeliveryPipelineRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_delivery_pipeline(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_targets(
        &self,
        req: crate::model::ListTargetsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListTargetsResponse> {
        T::list_targets(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn rollback_target(
        &self,
        req: crate::model::RollbackTargetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::RollbackTargetResponse> {
        T::rollback_target(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_target(
        &self,
        req: crate::model::GetTargetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Target> {
        T::get_target(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_target(
        &self,
        req: crate::model::CreateTargetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_target(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_target(
        &self,
        req: crate::model::UpdateTargetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_target(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_target(
        &self,
        req: crate::model::DeleteTargetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_target(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_custom_target_types(
        &self,
        req: crate::model::ListCustomTargetTypesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCustomTargetTypesResponse> {
        T::list_custom_target_types(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_custom_target_type(
        &self,
        req: crate::model::GetCustomTargetTypeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CustomTargetType> {
        T::get_custom_target_type(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_custom_target_type(
        &self,
        req: crate::model::CreateCustomTargetTypeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_custom_target_type(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_custom_target_type(
        &self,
        req: crate::model::UpdateCustomTargetTypeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_custom_target_type(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_custom_target_type(
        &self,
        req: crate::model::DeleteCustomTargetTypeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_custom_target_type(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_releases(
        &self,
        req: crate::model::ListReleasesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListReleasesResponse> {
        T::list_releases(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_release(
        &self,
        req: crate::model::GetReleaseRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Release> {
        T::get_release(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_release(
        &self,
        req: crate::model::CreateReleaseRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_release(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn abandon_release(
        &self,
        req: crate::model::AbandonReleaseRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AbandonReleaseResponse> {
        T::abandon_release(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_deploy_policy(
        &self,
        req: crate::model::CreateDeployPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_deploy_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_deploy_policy(
        &self,
        req: crate::model::UpdateDeployPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_deploy_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_deploy_policy(
        &self,
        req: crate::model::DeleteDeployPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_deploy_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_deploy_policies(
        &self,
        req: crate::model::ListDeployPoliciesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListDeployPoliciesResponse> {
        T::list_deploy_policies(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_deploy_policy(
        &self,
        req: crate::model::GetDeployPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::DeployPolicy> {
        T::get_deploy_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn approve_rollout(
        &self,
        req: crate::model::ApproveRolloutRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ApproveRolloutResponse> {
        T::approve_rollout(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn advance_rollout(
        &self,
        req: crate::model::AdvanceRolloutRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AdvanceRolloutResponse> {
        T::advance_rollout(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn cancel_rollout(
        &self,
        req: crate::model::CancelRolloutRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CancelRolloutResponse> {
        T::cancel_rollout(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_rollouts(
        &self,
        req: crate::model::ListRolloutsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListRolloutsResponse> {
        T::list_rollouts(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_rollout(
        &self,
        req: crate::model::GetRolloutRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Rollout> {
        T::get_rollout(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_rollout(
        &self,
        req: crate::model::CreateRolloutRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_rollout(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn ignore_job(
        &self,
        req: crate::model::IgnoreJobRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::IgnoreJobResponse> {
        T::ignore_job(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn retry_job(
        &self,
        req: crate::model::RetryJobRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::RetryJobResponse> {
        T::retry_job(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_job_runs(
        &self,
        req: crate::model::ListJobRunsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListJobRunsResponse> {
        T::list_job_runs(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_job_run(
        &self,
        req: crate::model::GetJobRunRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::JobRun> {
        T::get_job_run(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn terminate_job_run(
        &self,
        req: crate::model::TerminateJobRunRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::TerminateJobRunResponse> {
        T::terminate_job_run(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_config(
        &self,
        req: crate::model::GetConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Config> {
        T::get_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_automation(
        &self,
        req: crate::model::CreateAutomationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_automation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_automation(
        &self,
        req: crate::model::UpdateAutomationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_automation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_automation(
        &self,
        req: crate::model::DeleteAutomationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_automation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_automation(
        &self,
        req: crate::model::GetAutomationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Automation> {
        T::get_automation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_automations(
        &self,
        req: crate::model::ListAutomationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAutomationsResponse> {
        T::list_automations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_automation_run(
        &self,
        req: crate::model::GetAutomationRunRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AutomationRun> {
        T::get_automation_run(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_automation_runs(
        &self,
        req: crate::model::ListAutomationRunsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAutomationRunsResponse> {
        T::list_automation_runs(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn cancel_automation_run(
        &self,
        req: crate::model::CancelAutomationRunRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CancelAutomationRunResponse> {
        T::cancel_automation_run(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::ListLocationsResponse> {
        T::list_locations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::Location> {
        T::get_location(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy> {
        T::set_iam_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy> {
        T::get_iam_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::TestIamPermissionsResponse> {
        T::test_iam_permissions(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse> {
        T::list_operations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::get_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::delete_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::cancel_operation(self, req, options).await
    }

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        T::get_polling_error_policy(self, options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        T::get_polling_backoff_policy(self, options)
    }
}
