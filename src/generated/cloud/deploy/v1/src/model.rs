// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gtype;
extern crate iam_v1;
extern crate lazy_static;
extern crate location;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// Payload proto for "clouddeploy.googleapis.com/automation"
/// Platform Log event that describes the Automation related events.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AutomationEvent {
    /// Debug message for when there is an update on the AutomationRun.
    /// Provides further details about the resource creation or state change.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub message: std::string::String,

    /// The name of the `AutomationRun`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub automation: std::string::String,

    /// Unique identifier of the `DeliveryPipeline`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub pipeline_uid: std::string::String,

    /// Type of this notification, e.g. for a Pub/Sub failure.
    #[serde(rename = "type")]
    pub r#type: crate::model::Type,
}

impl AutomationEvent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [message][crate::model::AutomationEvent::message].
    pub fn set_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.message = v.into();
        self
    }

    /// Sets the value of [automation][crate::model::AutomationEvent::automation].
    pub fn set_automation<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.automation = v.into();
        self
    }

    /// Sets the value of [pipeline_uid][crate::model::AutomationEvent::pipeline_uid].
    pub fn set_pipeline_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.pipeline_uid = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::AutomationEvent::type].
    pub fn set_type<T: std::convert::Into<crate::model::Type>>(mut self, v: T) -> Self {
        self.r#type = v.into();
        self
    }
}

impl wkt::message::Message for AutomationEvent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.AutomationEvent"
    }
}

/// Payload proto for "clouddeploy.googleapis.com/automation_run"
/// Platform Log event that describes the AutomationRun related events.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AutomationRunEvent {
    /// Debug message for when there is an update on the AutomationRun.
    /// Provides further details about the resource creation or state change.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub message: std::string::String,

    /// The name of the `AutomationRun`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub automation_run: std::string::String,

    /// Unique identifier of the `DeliveryPipeline`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub pipeline_uid: std::string::String,

    /// Identifier of the `Automation`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub automation_id: std::string::String,

    /// Identifier of the `Automation` rule.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rule_id: std::string::String,

    /// ID of the `Target` to which the `AutomationRun` is created.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub destination_target_id: std::string::String,

    /// Type of this notification, e.g. for a Pub/Sub failure.
    #[serde(rename = "type")]
    pub r#type: crate::model::Type,
}

impl AutomationRunEvent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [message][crate::model::AutomationRunEvent::message].
    pub fn set_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.message = v.into();
        self
    }

    /// Sets the value of [automation_run][crate::model::AutomationRunEvent::automation_run].
    pub fn set_automation_run<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.automation_run = v.into();
        self
    }

    /// Sets the value of [pipeline_uid][crate::model::AutomationRunEvent::pipeline_uid].
    pub fn set_pipeline_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.pipeline_uid = v.into();
        self
    }

    /// Sets the value of [automation_id][crate::model::AutomationRunEvent::automation_id].
    pub fn set_automation_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.automation_id = v.into();
        self
    }

    /// Sets the value of [rule_id][crate::model::AutomationRunEvent::rule_id].
    pub fn set_rule_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.rule_id = v.into();
        self
    }

    /// Sets the value of [destination_target_id][crate::model::AutomationRunEvent::destination_target_id].
    pub fn set_destination_target_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.destination_target_id = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::AutomationRunEvent::type].
    pub fn set_type<T: std::convert::Into<crate::model::Type>>(mut self, v: T) -> Self {
        self.r#type = v.into();
        self
    }
}

impl wkt::message::Message for AutomationRunEvent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.AutomationRunEvent"
    }
}

/// A `DeliveryPipeline` resource in the Cloud Deploy API.
///
/// A `DeliveryPipeline` defines a pipeline through which a Skaffold
/// configuration can progress.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeliveryPipeline {
    /// Identifier. Name of the `DeliveryPipeline`. Format is
    /// `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}`.
    /// The `deliveryPipeline` component must match
    /// `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Unique identifier of the `DeliveryPipeline`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uid: std::string::String,

    /// Optional. Description of the `DeliveryPipeline`. Max length is 255
    /// characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. User annotations. These attributes can only be set and used by
    /// the user, and not by Cloud Deploy.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub annotations: std::collections::HashMap<std::string::String, std::string::String>,

    /// Labels are attributes that can be set and used by both the
    /// user and by Cloud Deploy. Labels must meet the following constraints:
    ///
    /// * Keys and values can contain only lowercase letters, numeric characters,
    ///   underscores, and dashes.
    /// * All characters must use UTF-8 encoding, and international characters are
    ///   allowed.
    /// * Keys must start with a lowercase letter or international character.
    /// * Each resource is limited to a maximum of 64 labels.
    ///
    /// Both keys and values are additionally constrained to be <= 128 bytes.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Output only. Time at which the pipeline was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Most recent time at which the pipeline was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Information around the state of the Delivery Pipeline.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub condition: std::option::Option<crate::model::PipelineCondition>,

    /// This checksum is computed by the server based on the value of other
    /// fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub etag: std::string::String,

    /// Optional. When suspended, no new releases or rollouts can be created,
    /// but in-progress ones will complete.
    pub suspended: bool,

    /// The ordering configuration of the `DeliveryPipeline`.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub pipeline: std::option::Option<crate::model::delivery_pipeline::Pipeline>,
}

impl DeliveryPipeline {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeliveryPipeline::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [uid][crate::model::DeliveryPipeline::uid].
    pub fn set_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uid = v.into();
        self
    }

    /// Sets the value of [description][crate::model::DeliveryPipeline::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::DeliveryPipeline::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::DeliveryPipeline::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [condition][crate::model::DeliveryPipeline::condition].
    pub fn set_condition<
        T: std::convert::Into<std::option::Option<crate::model::PipelineCondition>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.condition = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::DeliveryPipeline::etag].
    pub fn set_etag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.etag = v.into();
        self
    }

    /// Sets the value of [suspended][crate::model::DeliveryPipeline::suspended].
    pub fn set_suspended<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.suspended = v.into();
        self
    }

    /// Sets the value of [annotations][crate::model::DeliveryPipeline::annotations].
    pub fn set_annotations<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.annotations = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [labels][crate::model::DeliveryPipeline::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of `pipeline`.
    pub fn set_pipeline<
        T: std::convert::Into<std::option::Option<crate::model::delivery_pipeline::Pipeline>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.pipeline = v.into();
        self
    }

    /// The value of [pipeline][crate::model::DeliveryPipeline::pipeline]
    /// if it holds a `SerialPipeline`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_serial_pipeline(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::SerialPipeline>> {
        #[allow(unreachable_patterns)]
        self.pipeline.as_ref().and_then(|v| match v {
            crate::model::delivery_pipeline::Pipeline::SerialPipeline(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [pipeline][crate::model::DeliveryPipeline::pipeline]
    /// to hold a `SerialPipeline`.
    ///
    /// Note that all the setters affecting `pipeline` are
    /// mutually exclusive.
    pub fn set_serial_pipeline<
        T: std::convert::Into<std::boxed::Box<crate::model::SerialPipeline>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.pipeline = std::option::Option::Some(
            crate::model::delivery_pipeline::Pipeline::SerialPipeline(v.into()),
        );
        self
    }
}

impl wkt::message::Message for DeliveryPipeline {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.DeliveryPipeline"
    }
}

/// Defines additional types related to DeliveryPipeline
pub mod delivery_pipeline {
    #[allow(unused_imports)]
    use super::*;

    /// The ordering configuration of the `DeliveryPipeline`.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Pipeline {
        /// Optional. SerialPipeline defines a sequential set of stages for a
        /// `DeliveryPipeline`.
        SerialPipeline(std::boxed::Box<crate::model::SerialPipeline>),
    }
}

/// SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SerialPipeline {
    /// Optional. Each stage specifies configuration for a `Target`. The ordering
    /// of this list defines the promotion flow.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub stages: std::vec::Vec<crate::model::Stage>,
}

impl SerialPipeline {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [stages][crate::model::SerialPipeline::stages].
    pub fn set_stages<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Stage>,
    {
        use std::iter::Iterator;
        self.stages = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SerialPipeline {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.SerialPipeline"
    }
}

/// Stage specifies a location to which to deploy.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Stage {
    /// Optional. The target_id to which this stage points. This field refers
    /// exclusively to the last segment of a target name. For example, this field
    /// would just be `my-target` (rather than
    /// `projects/project/locations/location/targets/my-target`). The location of
    /// the `Target` is inferred to be the same as the location of the
    /// `DeliveryPipeline` that contains this `Stage`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target_id: std::string::String,

    /// Optional. Skaffold profiles to use when rendering the manifest for this
    /// stage's `Target`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub profiles: std::vec::Vec<std::string::String>,

    /// Optional. The strategy to use for a `Rollout` to this stage.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub strategy: std::option::Option<crate::model::Strategy>,

    /// Optional. The deploy parameters to use for the target in this stage.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub deploy_parameters: std::vec::Vec<crate::model::DeployParameters>,
}

impl Stage {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [target_id][crate::model::Stage::target_id].
    pub fn set_target_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target_id = v.into();
        self
    }

    /// Sets the value of [strategy][crate::model::Stage::strategy].
    pub fn set_strategy<T: std::convert::Into<std::option::Option<crate::model::Strategy>>>(
        mut self,
        v: T,
    ) -> Self {
        self.strategy = v.into();
        self
    }

    /// Sets the value of [profiles][crate::model::Stage::profiles].
    pub fn set_profiles<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.profiles = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [deploy_parameters][crate::model::Stage::deploy_parameters].
    pub fn set_deploy_parameters<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::DeployParameters>,
    {
        use std::iter::Iterator;
        self.deploy_parameters = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Stage {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.Stage"
    }
}

/// DeployParameters contains deploy parameters information.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeployParameters {
    /// Required. Values are deploy parameters in key-value pairs.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub values: std::collections::HashMap<std::string::String, std::string::String>,

    /// Optional. Deploy parameters are applied to targets with match labels.
    /// If unspecified, deploy parameters are applied to all targets (including
    /// child targets of a multi-target).
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub match_target_labels: std::collections::HashMap<std::string::String, std::string::String>,
}

impl DeployParameters {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [values][crate::model::DeployParameters::values].
    pub fn set_values<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.values = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [match_target_labels][crate::model::DeployParameters::match_target_labels].
    pub fn set_match_target_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.match_target_labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for DeployParameters {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.DeployParameters"
    }
}

/// Strategy contains deployment strategy information.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Strategy {
    /// Deployment strategy details.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub deployment_strategy: std::option::Option<crate::model::strategy::DeploymentStrategy>,
}

impl Strategy {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of `deployment_strategy`.
    pub fn set_deployment_strategy<
        T: std::convert::Into<std::option::Option<crate::model::strategy::DeploymentStrategy>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.deployment_strategy = v.into();
        self
    }

    /// The value of [deployment_strategy][crate::model::Strategy::deployment_strategy]
    /// if it holds a `Standard`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_standard(&self) -> std::option::Option<&std::boxed::Box<crate::model::Standard>> {
        #[allow(unreachable_patterns)]
        self.deployment_strategy.as_ref().and_then(|v| match v {
            crate::model::strategy::DeploymentStrategy::Standard(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [deployment_strategy][crate::model::Strategy::deployment_strategy]
    /// if it holds a `Canary`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_canary(&self) -> std::option::Option<&std::boxed::Box<crate::model::Canary>> {
        #[allow(unreachable_patterns)]
        self.deployment_strategy.as_ref().and_then(|v| match v {
            crate::model::strategy::DeploymentStrategy::Canary(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [deployment_strategy][crate::model::Strategy::deployment_strategy]
    /// to hold a `Standard`.
    ///
    /// Note that all the setters affecting `deployment_strategy` are
    /// mutually exclusive.
    pub fn set_standard<T: std::convert::Into<std::boxed::Box<crate::model::Standard>>>(
        mut self,
        v: T,
    ) -> Self {
        self.deployment_strategy = std::option::Option::Some(
            crate::model::strategy::DeploymentStrategy::Standard(v.into()),
        );
        self
    }

    /// Sets the value of [deployment_strategy][crate::model::Strategy::deployment_strategy]
    /// to hold a `Canary`.
    ///
    /// Note that all the setters affecting `deployment_strategy` are
    /// mutually exclusive.
    pub fn set_canary<T: std::convert::Into<std::boxed::Box<crate::model::Canary>>>(
        mut self,
        v: T,
    ) -> Self {
        self.deployment_strategy =
            std::option::Option::Some(crate::model::strategy::DeploymentStrategy::Canary(v.into()));
        self
    }
}

impl wkt::message::Message for Strategy {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.Strategy"
    }
}

/// Defines additional types related to Strategy
pub mod strategy {
    #[allow(unused_imports)]
    use super::*;

    /// Deployment strategy details.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum DeploymentStrategy {
        /// Optional. Standard deployment strategy executes a single deploy and
        /// allows verifying the deployment.
        Standard(std::boxed::Box<crate::model::Standard>),
        /// Optional. Canary deployment strategy provides progressive percentage
        /// based deployments to a Target.
        Canary(std::boxed::Box<crate::model::Canary>),
    }
}

/// Predeploy contains the predeploy job configuration information.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Predeploy {
    /// Optional. A sequence of Skaffold custom actions to invoke during execution
    /// of the predeploy job.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub actions: std::vec::Vec<std::string::String>,
}

impl Predeploy {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [actions][crate::model::Predeploy::actions].
    pub fn set_actions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.actions = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Predeploy {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.Predeploy"
    }
}

/// Postdeploy contains the postdeploy job configuration information.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Postdeploy {
    /// Optional. A sequence of Skaffold custom actions to invoke during execution
    /// of the postdeploy job.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub actions: std::vec::Vec<std::string::String>,
}

impl Postdeploy {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [actions][crate::model::Postdeploy::actions].
    pub fn set_actions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.actions = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Postdeploy {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.Postdeploy"
    }
}

/// Standard represents the standard deployment strategy.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Standard {
    /// Optional. Whether to verify a deployment.
    pub verify: bool,

    /// Optional. Configuration for the predeploy job. If this is not configured,
    /// predeploy job will not be present.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub predeploy: std::option::Option<crate::model::Predeploy>,

    /// Optional. Configuration for the postdeploy job. If this is not configured,
    /// postdeploy job will not be present.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub postdeploy: std::option::Option<crate::model::Postdeploy>,
}

impl Standard {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [verify][crate::model::Standard::verify].
    pub fn set_verify<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.verify = v.into();
        self
    }

    /// Sets the value of [predeploy][crate::model::Standard::predeploy].
    pub fn set_predeploy<T: std::convert::Into<std::option::Option<crate::model::Predeploy>>>(
        mut self,
        v: T,
    ) -> Self {
        self.predeploy = v.into();
        self
    }

    /// Sets the value of [postdeploy][crate::model::Standard::postdeploy].
    pub fn set_postdeploy<T: std::convert::Into<std::option::Option<crate::model::Postdeploy>>>(
        mut self,
        v: T,
    ) -> Self {
        self.postdeploy = v.into();
        self
    }
}

impl wkt::message::Message for Standard {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.Standard"
    }
}

/// Canary represents the canary deployment strategy.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Canary {
    /// Optional. Runtime specific configurations for the deployment strategy. The
    /// runtime configuration is used to determine how Cloud Deploy will split
    /// traffic to enable a progressive deployment.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub runtime_config: std::option::Option<crate::model::RuntimeConfig>,

    /// The mode to use for the canary deployment strategy.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub mode: std::option::Option<crate::model::canary::Mode>,
}

impl Canary {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [runtime_config][crate::model::Canary::runtime_config].
    pub fn set_runtime_config<
        T: std::convert::Into<std::option::Option<crate::model::RuntimeConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.runtime_config = v.into();
        self
    }

    /// Sets the value of `mode`.
    pub fn set_mode<T: std::convert::Into<std::option::Option<crate::model::canary::Mode>>>(
        mut self,
        v: T,
    ) -> Self {
        self.mode = v.into();
        self
    }

    /// The value of [mode][crate::model::Canary::mode]
    /// if it holds a `CanaryDeployment`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_canary_deployment(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::CanaryDeployment>> {
        #[allow(unreachable_patterns)]
        self.mode.as_ref().and_then(|v| match v {
            crate::model::canary::Mode::CanaryDeployment(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [mode][crate::model::Canary::mode]
    /// if it holds a `CustomCanaryDeployment`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_custom_canary_deployment(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::CustomCanaryDeployment>> {
        #[allow(unreachable_patterns)]
        self.mode.as_ref().and_then(|v| match v {
            crate::model::canary::Mode::CustomCanaryDeployment(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [mode][crate::model::Canary::mode]
    /// to hold a `CanaryDeployment`.
    ///
    /// Note that all the setters affecting `mode` are
    /// mutually exclusive.
    pub fn set_canary_deployment<
        T: std::convert::Into<std::boxed::Box<crate::model::CanaryDeployment>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.mode =
            std::option::Option::Some(crate::model::canary::Mode::CanaryDeployment(v.into()));
        self
    }

    /// Sets the value of [mode][crate::model::Canary::mode]
    /// to hold a `CustomCanaryDeployment`.
    ///
    /// Note that all the setters affecting `mode` are
    /// mutually exclusive.
    pub fn set_custom_canary_deployment<
        T: std::convert::Into<std::boxed::Box<crate::model::CustomCanaryDeployment>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.mode =
            std::option::Option::Some(crate::model::canary::Mode::CustomCanaryDeployment(v.into()));
        self
    }
}

impl wkt::message::Message for Canary {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.Canary"
    }
}

/// Defines additional types related to Canary
pub mod canary {
    #[allow(unused_imports)]
    use super::*;

    /// The mode to use for the canary deployment strategy.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Mode {
        /// Optional. Configures the progressive based deployment for a Target.
        CanaryDeployment(std::boxed::Box<crate::model::CanaryDeployment>),
        /// Optional. Configures the progressive based deployment for a Target, but
        /// allows customizing at the phase level where a phase represents each of
        /// the percentage deployments.
        CustomCanaryDeployment(std::boxed::Box<crate::model::CustomCanaryDeployment>),
    }
}

/// CanaryDeployment represents the canary deployment configuration
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CanaryDeployment {
    /// Required. The percentage based deployments that will occur as a part of a
    /// `Rollout`. List is expected in ascending order and each integer n is
    /// 0 <= n < 100.
    /// If the GatewayServiceMesh is configured for Kubernetes, then the range for
    /// n is 0 <= n <= 100.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub percentages: std::vec::Vec<i32>,

    /// Optional. Whether to run verify tests after each percentage deployment.
    pub verify: bool,

    /// Optional. Configuration for the predeploy job of the first phase. If this
    /// is not configured, there will be no predeploy job for this phase.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub predeploy: std::option::Option<crate::model::Predeploy>,

    /// Optional. Configuration for the postdeploy job of the last phase. If this
    /// is not configured, there will be no postdeploy job for this phase.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub postdeploy: std::option::Option<crate::model::Postdeploy>,
}

impl CanaryDeployment {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [verify][crate::model::CanaryDeployment::verify].
    pub fn set_verify<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.verify = v.into();
        self
    }

    /// Sets the value of [predeploy][crate::model::CanaryDeployment::predeploy].
    pub fn set_predeploy<T: std::convert::Into<std::option::Option<crate::model::Predeploy>>>(
        mut self,
        v: T,
    ) -> Self {
        self.predeploy = v.into();
        self
    }

    /// Sets the value of [postdeploy][crate::model::CanaryDeployment::postdeploy].
    pub fn set_postdeploy<T: std::convert::Into<std::option::Option<crate::model::Postdeploy>>>(
        mut self,
        v: T,
    ) -> Self {
        self.postdeploy = v.into();
        self
    }

    /// Sets the value of [percentages][crate::model::CanaryDeployment::percentages].
    pub fn set_percentages<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<i32>,
    {
        use std::iter::Iterator;
        self.percentages = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for CanaryDeployment {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CanaryDeployment"
    }
}

/// CustomCanaryDeployment represents the custom canary deployment
/// configuration.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CustomCanaryDeployment {
    /// Required. Configuration for each phase in the canary deployment in the
    /// order executed.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub phase_configs: std::vec::Vec<crate::model::custom_canary_deployment::PhaseConfig>,
}

impl CustomCanaryDeployment {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [phase_configs][crate::model::CustomCanaryDeployment::phase_configs].
    pub fn set_phase_configs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::custom_canary_deployment::PhaseConfig>,
    {
        use std::iter::Iterator;
        self.phase_configs = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for CustomCanaryDeployment {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CustomCanaryDeployment"
    }
}

/// Defines additional types related to CustomCanaryDeployment
pub mod custom_canary_deployment {
    #[allow(unused_imports)]
    use super::*;

    /// PhaseConfig represents the configuration for a phase in the custom
    /// canary deployment.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct PhaseConfig {
        /// Required. The ID to assign to the `Rollout` phase.
        /// This value must consist of lower-case letters, numbers, and hyphens,
        /// start with a letter and end with a letter or a number, and have a max
        /// length of 63 characters. In other words, it must match the following
        /// regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub phase_id: std::string::String,

        /// Required. Percentage deployment for the phase.
        pub percentage: i32,

        /// Optional. Skaffold profiles to use when rendering the manifest for this
        /// phase. These are in addition to the profiles list specified in the
        /// `DeliveryPipeline` stage.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub profiles: std::vec::Vec<std::string::String>,

        /// Optional. Whether to run verify tests after the deployment.
        pub verify: bool,

        /// Optional. Configuration for the predeploy job of this phase. If this is
        /// not configured, there will be no predeploy job for this phase.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub predeploy: std::option::Option<crate::model::Predeploy>,

        /// Optional. Configuration for the postdeploy job of this phase. If this is
        /// not configured, there will be no postdeploy job for this phase.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub postdeploy: std::option::Option<crate::model::Postdeploy>,
    }

    impl PhaseConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [phase_id][crate::model::custom_canary_deployment::PhaseConfig::phase_id].
        pub fn set_phase_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.phase_id = v.into();
            self
        }

        /// Sets the value of [percentage][crate::model::custom_canary_deployment::PhaseConfig::percentage].
        pub fn set_percentage<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.percentage = v.into();
            self
        }

        /// Sets the value of [verify][crate::model::custom_canary_deployment::PhaseConfig::verify].
        pub fn set_verify<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.verify = v.into();
            self
        }

        /// Sets the value of [predeploy][crate::model::custom_canary_deployment::PhaseConfig::predeploy].
        pub fn set_predeploy<
            T: std::convert::Into<std::option::Option<crate::model::Predeploy>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.predeploy = v.into();
            self
        }

        /// Sets the value of [postdeploy][crate::model::custom_canary_deployment::PhaseConfig::postdeploy].
        pub fn set_postdeploy<
            T: std::convert::Into<std::option::Option<crate::model::Postdeploy>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.postdeploy = v.into();
            self
        }

        /// Sets the value of [profiles][crate::model::custom_canary_deployment::PhaseConfig::profiles].
        pub fn set_profiles<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.profiles = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for PhaseConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.deploy.v1.CustomCanaryDeployment.PhaseConfig"
        }
    }
}

/// KubernetesConfig contains the Kubernetes runtime configuration.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct KubernetesConfig {
    /// The service definition configuration.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub service_definition: std::option::Option<crate::model::kubernetes_config::ServiceDefinition>,
}

impl KubernetesConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of `service_definition`.
    pub fn set_service_definition<
        T: std::convert::Into<std::option::Option<crate::model::kubernetes_config::ServiceDefinition>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.service_definition = v.into();
        self
    }

    /// The value of [service_definition][crate::model::KubernetesConfig::service_definition]
    /// if it holds a `GatewayServiceMesh`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_gateway_service_mesh(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::kubernetes_config::GatewayServiceMesh>>
    {
        #[allow(unreachable_patterns)]
        self.service_definition.as_ref().and_then(|v| match v {
            crate::model::kubernetes_config::ServiceDefinition::GatewayServiceMesh(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [service_definition][crate::model::KubernetesConfig::service_definition]
    /// if it holds a `ServiceNetworking`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_service_networking(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::kubernetes_config::ServiceNetworking>>
    {
        #[allow(unreachable_patterns)]
        self.service_definition.as_ref().and_then(|v| match v {
            crate::model::kubernetes_config::ServiceDefinition::ServiceNetworking(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [service_definition][crate::model::KubernetesConfig::service_definition]
    /// to hold a `GatewayServiceMesh`.
    ///
    /// Note that all the setters affecting `service_definition` are
    /// mutually exclusive.
    pub fn set_gateway_service_mesh<
        T: std::convert::Into<std::boxed::Box<crate::model::kubernetes_config::GatewayServiceMesh>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.service_definition = std::option::Option::Some(
            crate::model::kubernetes_config::ServiceDefinition::GatewayServiceMesh(v.into()),
        );
        self
    }

    /// Sets the value of [service_definition][crate::model::KubernetesConfig::service_definition]
    /// to hold a `ServiceNetworking`.
    ///
    /// Note that all the setters affecting `service_definition` are
    /// mutually exclusive.
    pub fn set_service_networking<
        T: std::convert::Into<std::boxed::Box<crate::model::kubernetes_config::ServiceNetworking>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.service_definition = std::option::Option::Some(
            crate::model::kubernetes_config::ServiceDefinition::ServiceNetworking(v.into()),
        );
        self
    }
}

impl wkt::message::Message for KubernetesConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.KubernetesConfig"
    }
}

/// Defines additional types related to KubernetesConfig
pub mod kubernetes_config {
    #[allow(unused_imports)]
    use super::*;

    /// Information about the Kubernetes Gateway API service mesh configuration.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct GatewayServiceMesh {
        /// Required. Name of the Gateway API HTTPRoute.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub http_route: std::string::String,

        /// Required. Name of the Kubernetes Service.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub service: std::string::String,

        /// Required. Name of the Kubernetes Deployment whose traffic is managed by
        /// the specified HTTPRoute and Service.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub deployment: std::string::String,

        /// Optional. The time to wait for route updates to propagate. The maximum
        /// configurable time is 3 hours, in seconds format. If unspecified, there is
        /// no wait time.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub route_update_wait_time: std::option::Option<wkt::Duration>,

        /// Optional. The amount of time to migrate traffic back from the canary
        /// Service to the original Service during the stable phase deployment. If
        /// specified, must be between 15s and 3600s. If unspecified, there is no
        /// cutback time.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub stable_cutback_duration: std::option::Option<wkt::Duration>,

        /// Optional. The label to use when selecting Pods for the Deployment and
        /// Service resources. This label must already be present in both resources.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub pod_selector_label: std::string::String,

        /// Optional. Route destinations allow configuring the Gateway API HTTPRoute
        /// to be deployed to additional clusters. This option is available for
        /// multi-cluster service mesh set ups that require the route to exist in the
        /// clusters that call the service. If unspecified, the HTTPRoute will only
        /// be deployed to the Target cluster.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub route_destinations: std::option::Option<
            crate::model::kubernetes_config::gateway_service_mesh::RouteDestinations,
        >,
    }

    impl GatewayServiceMesh {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [http_route][crate::model::kubernetes_config::GatewayServiceMesh::http_route].
        pub fn set_http_route<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.http_route = v.into();
            self
        }

        /// Sets the value of [service][crate::model::kubernetes_config::GatewayServiceMesh::service].
        pub fn set_service<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.service = v.into();
            self
        }

        /// Sets the value of [deployment][crate::model::kubernetes_config::GatewayServiceMesh::deployment].
        pub fn set_deployment<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.deployment = v.into();
            self
        }

        /// Sets the value of [route_update_wait_time][crate::model::kubernetes_config::GatewayServiceMesh::route_update_wait_time].
        pub fn set_route_update_wait_time<
            T: std::convert::Into<std::option::Option<wkt::Duration>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.route_update_wait_time = v.into();
            self
        }

        /// Sets the value of [stable_cutback_duration][crate::model::kubernetes_config::GatewayServiceMesh::stable_cutback_duration].
        pub fn set_stable_cutback_duration<
            T: std::convert::Into<std::option::Option<wkt::Duration>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.stable_cutback_duration = v.into();
            self
        }

        /// Sets the value of [pod_selector_label][crate::model::kubernetes_config::GatewayServiceMesh::pod_selector_label].
        pub fn set_pod_selector_label<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.pod_selector_label = v.into();
            self
        }

        /// Sets the value of [route_destinations][crate::model::kubernetes_config::GatewayServiceMesh::route_destinations].
        pub fn set_route_destinations<
            T: std::convert::Into<
                std::option::Option<
                    crate::model::kubernetes_config::gateway_service_mesh::RouteDestinations,
                >,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.route_destinations = v.into();
            self
        }
    }

    impl wkt::message::Message for GatewayServiceMesh {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.deploy.v1.KubernetesConfig.GatewayServiceMesh"
        }
    }

    /// Defines additional types related to GatewayServiceMesh
    pub mod gateway_service_mesh {
        #[allow(unused_imports)]
        use super::*;

        /// Information about route destinations for the Gateway API service mesh.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct RouteDestinations {
            /// Required. The clusters where the Gateway API HTTPRoute resource will be
            /// deployed to. Valid entries include the associated entities IDs
            /// configured in the Target resource and "@self" to include the Target
            /// cluster.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub destination_ids: std::vec::Vec<std::string::String>,

            /// Optional. Whether to propagate the Kubernetes Service to the route
            /// destination clusters. The Service will always be deployed to the Target
            /// cluster even if the HTTPRoute is not. This option may be used to
            /// facilitiate successful DNS lookup in the route destination clusters.
            /// Can only be set to true if destinations are specified.
            pub propagate_service: bool,
        }

        impl RouteDestinations {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [propagate_service][crate::model::kubernetes_config::gateway_service_mesh::RouteDestinations::propagate_service].
            pub fn set_propagate_service<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
                self.propagate_service = v.into();
                self
            }

            /// Sets the value of [destination_ids][crate::model::kubernetes_config::gateway_service_mesh::RouteDestinations::destination_ids].
            pub fn set_destination_ids<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<std::string::String>,
            {
                use std::iter::Iterator;
                self.destination_ids = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for RouteDestinations {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.deploy.v1.KubernetesConfig.GatewayServiceMesh.RouteDestinations"
            }
        }
    }

    /// Information about the Kubernetes Service networking configuration.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ServiceNetworking {
        /// Required. Name of the Kubernetes Service.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub service: std::string::String,

        /// Required. Name of the Kubernetes Deployment whose traffic is managed by
        /// the specified Service.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub deployment: std::string::String,

        /// Optional. Whether to disable Pod overprovisioning. If Pod
        /// overprovisioning is disabled then Cloud Deploy will limit the number of
        /// total Pods used for the deployment strategy to the number of Pods the
        /// Deployment has on the cluster.
        pub disable_pod_overprovisioning: bool,

        /// Optional. The label to use when selecting Pods for the Deployment
        /// resource. This label must already be present in the Deployment.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub pod_selector_label: std::string::String,
    }

    impl ServiceNetworking {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [service][crate::model::kubernetes_config::ServiceNetworking::service].
        pub fn set_service<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.service = v.into();
            self
        }

        /// Sets the value of [deployment][crate::model::kubernetes_config::ServiceNetworking::deployment].
        pub fn set_deployment<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.deployment = v.into();
            self
        }

        /// Sets the value of [disable_pod_overprovisioning][crate::model::kubernetes_config::ServiceNetworking::disable_pod_overprovisioning].
        pub fn set_disable_pod_overprovisioning<T: std::convert::Into<bool>>(
            mut self,
            v: T,
        ) -> Self {
            self.disable_pod_overprovisioning = v.into();
            self
        }

        /// Sets the value of [pod_selector_label][crate::model::kubernetes_config::ServiceNetworking::pod_selector_label].
        pub fn set_pod_selector_label<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.pod_selector_label = v.into();
            self
        }
    }

    impl wkt::message::Message for ServiceNetworking {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.deploy.v1.KubernetesConfig.ServiceNetworking"
        }
    }

    /// The service definition configuration.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum ServiceDefinition {
        /// Optional. Kubernetes Gateway API service mesh configuration.
        GatewayServiceMesh(std::boxed::Box<crate::model::kubernetes_config::GatewayServiceMesh>),
        /// Optional. Kubernetes Service networking configuration.
        ServiceNetworking(std::boxed::Box<crate::model::kubernetes_config::ServiceNetworking>),
    }
}

/// CloudRunConfig contains the Cloud Run runtime configuration.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CloudRunConfig {
    /// Optional. Whether Cloud Deploy should update the traffic stanza in a Cloud
    /// Run Service on the user's behalf to facilitate traffic splitting. This is
    /// required to be true for CanaryDeployments, but optional for
    /// CustomCanaryDeployments.
    pub automatic_traffic_control: bool,

    /// Optional. A list of tags that are added to the canary revision while the
    /// canary phase is in progress.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub canary_revision_tags: std::vec::Vec<std::string::String>,

    /// Optional. A list of tags that are added to the prior revision while the
    /// canary phase is in progress.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub prior_revision_tags: std::vec::Vec<std::string::String>,

    /// Optional. A list of tags that are added to the final stable revision when
    /// the stable phase is applied.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub stable_revision_tags: std::vec::Vec<std::string::String>,
}

impl CloudRunConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [automatic_traffic_control][crate::model::CloudRunConfig::automatic_traffic_control].
    pub fn set_automatic_traffic_control<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.automatic_traffic_control = v.into();
        self
    }

    /// Sets the value of [canary_revision_tags][crate::model::CloudRunConfig::canary_revision_tags].
    pub fn set_canary_revision_tags<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.canary_revision_tags = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [prior_revision_tags][crate::model::CloudRunConfig::prior_revision_tags].
    pub fn set_prior_revision_tags<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.prior_revision_tags = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [stable_revision_tags][crate::model::CloudRunConfig::stable_revision_tags].
    pub fn set_stable_revision_tags<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.stable_revision_tags = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for CloudRunConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CloudRunConfig"
    }
}

/// RuntimeConfig contains the runtime specific configurations for a deployment
/// strategy.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RuntimeConfig {
    /// The runtime configuration details.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub runtime_config: std::option::Option<crate::model::runtime_config::RuntimeConfig>,
}

impl RuntimeConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of `runtime_config`.
    pub fn set_runtime_config<
        T: std::convert::Into<std::option::Option<crate::model::runtime_config::RuntimeConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.runtime_config = v.into();
        self
    }

    /// The value of [runtime_config][crate::model::RuntimeConfig::runtime_config]
    /// if it holds a `Kubernetes`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_kubernetes(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::KubernetesConfig>> {
        #[allow(unreachable_patterns)]
        self.runtime_config.as_ref().and_then(|v| match v {
            crate::model::runtime_config::RuntimeConfig::Kubernetes(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [runtime_config][crate::model::RuntimeConfig::runtime_config]
    /// if it holds a `CloudRun`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_cloud_run(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::CloudRunConfig>> {
        #[allow(unreachable_patterns)]
        self.runtime_config.as_ref().and_then(|v| match v {
            crate::model::runtime_config::RuntimeConfig::CloudRun(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [runtime_config][crate::model::RuntimeConfig::runtime_config]
    /// to hold a `Kubernetes`.
    ///
    /// Note that all the setters affecting `runtime_config` are
    /// mutually exclusive.
    pub fn set_kubernetes<
        T: std::convert::Into<std::boxed::Box<crate::model::KubernetesConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.runtime_config = std::option::Option::Some(
            crate::model::runtime_config::RuntimeConfig::Kubernetes(v.into()),
        );
        self
    }

    /// Sets the value of [runtime_config][crate::model::RuntimeConfig::runtime_config]
    /// to hold a `CloudRun`.
    ///
    /// Note that all the setters affecting `runtime_config` are
    /// mutually exclusive.
    pub fn set_cloud_run<T: std::convert::Into<std::boxed::Box<crate::model::CloudRunConfig>>>(
        mut self,
        v: T,
    ) -> Self {
        self.runtime_config = std::option::Option::Some(
            crate::model::runtime_config::RuntimeConfig::CloudRun(v.into()),
        );
        self
    }
}

impl wkt::message::Message for RuntimeConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.RuntimeConfig"
    }
}

/// Defines additional types related to RuntimeConfig
pub mod runtime_config {
    #[allow(unused_imports)]
    use super::*;

    /// The runtime configuration details.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum RuntimeConfig {
        /// Optional. Kubernetes runtime configuration.
        Kubernetes(std::boxed::Box<crate::model::KubernetesConfig>),
        /// Optional. Cloud Run runtime configuration.
        CloudRun(std::boxed::Box<crate::model::CloudRunConfig>),
    }
}

/// PipelineReadyCondition contains information around the status of the
/// Pipeline.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PipelineReadyCondition {
    /// True if the Pipeline is in a valid state. Otherwise at least one condition
    /// in `PipelineCondition` is in an invalid state. Iterate over those
    /// conditions and see which condition(s) has status = false to find out what
    /// is wrong with the Pipeline.
    pub status: bool,

    /// Last time the condition was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,
}

impl PipelineReadyCondition {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [status][crate::model::PipelineReadyCondition::status].
    pub fn set_status<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.status = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::PipelineReadyCondition::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }
}

impl wkt::message::Message for PipelineReadyCondition {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.PipelineReadyCondition"
    }
}

/// `TargetsPresentCondition` contains information on any Targets referenced in
/// the Delivery Pipeline that do not actually exist.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TargetsPresentCondition {
    /// True if there aren't any missing Targets.
    pub status: bool,

    /// The list of Target names that do not exist. For example,
    /// `projects/{project_id}/locations/{location_name}/targets/{target_name}`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub missing_targets: std::vec::Vec<std::string::String>,

    /// Last time the condition was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,
}

impl TargetsPresentCondition {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [status][crate::model::TargetsPresentCondition::status].
    pub fn set_status<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.status = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::TargetsPresentCondition::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [missing_targets][crate::model::TargetsPresentCondition::missing_targets].
    pub fn set_missing_targets<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.missing_targets = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for TargetsPresentCondition {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.TargetsPresentCondition"
    }
}

/// TargetsTypeCondition contains information on whether the Targets defined in
/// the Delivery Pipeline are of the same type.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TargetsTypeCondition {
    /// True if the targets are all a comparable type. For example this is true if
    /// all targets are GKE clusters. This is false if some targets are Cloud Run
    /// targets and others are GKE clusters.
    pub status: bool,

    /// Human readable error message.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub error_details: std::string::String,
}

impl TargetsTypeCondition {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [status][crate::model::TargetsTypeCondition::status].
    pub fn set_status<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.status = v.into();
        self
    }

    /// Sets the value of [error_details][crate::model::TargetsTypeCondition::error_details].
    pub fn set_error_details<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.error_details = v.into();
        self
    }
}

impl wkt::message::Message for TargetsTypeCondition {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.TargetsTypeCondition"
    }
}

/// PipelineCondition contains all conditions relevant to a Delivery Pipeline.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PipelineCondition {
    /// Details around the Pipeline's overall status.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub pipeline_ready_condition: std::option::Option<crate::model::PipelineReadyCondition>,

    /// Details around targets enumerated in the pipeline.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub targets_present_condition: std::option::Option<crate::model::TargetsPresentCondition>,

    /// Details on the whether the targets enumerated in the pipeline are of the
    /// same type.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub targets_type_condition: std::option::Option<crate::model::TargetsTypeCondition>,
}

impl PipelineCondition {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [pipeline_ready_condition][crate::model::PipelineCondition::pipeline_ready_condition].
    pub fn set_pipeline_ready_condition<
        T: std::convert::Into<std::option::Option<crate::model::PipelineReadyCondition>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.pipeline_ready_condition = v.into();
        self
    }

    /// Sets the value of [targets_present_condition][crate::model::PipelineCondition::targets_present_condition].
    pub fn set_targets_present_condition<
        T: std::convert::Into<std::option::Option<crate::model::TargetsPresentCondition>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.targets_present_condition = v.into();
        self
    }

    /// Sets the value of [targets_type_condition][crate::model::PipelineCondition::targets_type_condition].
    pub fn set_targets_type_condition<
        T: std::convert::Into<std::option::Option<crate::model::TargetsTypeCondition>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.targets_type_condition = v.into();
        self
    }
}

impl wkt::message::Message for PipelineCondition {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.PipelineCondition"
    }
}

/// The request object for `ListDeliveryPipelines`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListDeliveryPipelinesRequest {
    /// Required. The parent, which owns this collection of pipelines. Format must
    /// be `projects/{project_id}/locations/{location_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of pipelines to return. The service may return
    /// fewer than this value. If unspecified, at most 50 pipelines will
    /// be returned. The maximum value is 1000; values above 1000 will be set
    /// to 1000.
    pub page_size: i32,

    /// A page token, received from a previous `ListDeliveryPipelines` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other provided parameters match
    /// the call that provided the page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Filter pipelines to be returned. See <https://google.aip.dev/160> for more
    /// details.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Field to sort by. See <https://google.aip.dev/132#ordering> for more details.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListDeliveryPipelinesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListDeliveryPipelinesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListDeliveryPipelinesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListDeliveryPipelinesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListDeliveryPipelinesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListDeliveryPipelinesRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListDeliveryPipelinesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.ListDeliveryPipelinesRequest"
    }
}

/// The response object from `ListDeliveryPipelines`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListDeliveryPipelinesResponse {
    /// The `DeliveryPipeline` objects.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub delivery_pipelines: std::vec::Vec<crate::model::DeliveryPipeline>,

    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListDeliveryPipelinesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListDeliveryPipelinesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [delivery_pipelines][crate::model::ListDeliveryPipelinesResponse::delivery_pipelines].
    pub fn set_delivery_pipelines<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::DeliveryPipeline>,
    {
        use std::iter::Iterator;
        self.delivery_pipelines = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListDeliveryPipelinesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListDeliveryPipelinesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.ListDeliveryPipelinesResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListDeliveryPipelinesResponse {
    type PageItem = crate::model::DeliveryPipeline;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.delivery_pipelines
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// The request object for `GetDeliveryPipeline`
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetDeliveryPipelineRequest {
    /// Required. Name of the `DeliveryPipeline`. Format must be
    /// `projects/{project_id}/locations/{location_name}/deliveryPipelines/{pipeline_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetDeliveryPipelineRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetDeliveryPipelineRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetDeliveryPipelineRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.GetDeliveryPipelineRequest"
    }
}

/// The request object for `CreateDeliveryPipeline`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateDeliveryPipelineRequest {
    /// Required. The parent collection in which the `DeliveryPipeline` must be
    /// created. The format is `projects/{project_id}/locations/{location_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. ID of the `DeliveryPipeline`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub delivery_pipeline_id: std::string::String,

    /// Required. The `DeliveryPipeline` to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub delivery_pipeline: std::option::Option<crate::model::DeliveryPipeline>,

    /// Optional. A request ID to identify requests. Specify a unique request ID
    /// so that if you must retry your request, the server knows to ignore the
    /// request if it has already been completed. The server guarantees that for
    /// at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set to true, the request is validated and the user is provided
    /// with an expected result, but no actual change is made.
    pub validate_only: bool,
}

impl CreateDeliveryPipelineRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateDeliveryPipelineRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [delivery_pipeline_id][crate::model::CreateDeliveryPipelineRequest::delivery_pipeline_id].
    pub fn set_delivery_pipeline_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.delivery_pipeline_id = v.into();
        self
    }

    /// Sets the value of [delivery_pipeline][crate::model::CreateDeliveryPipelineRequest::delivery_pipeline].
    pub fn set_delivery_pipeline<
        T: std::convert::Into<std::option::Option<crate::model::DeliveryPipeline>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.delivery_pipeline = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateDeliveryPipelineRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::CreateDeliveryPipelineRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }
}

impl wkt::message::Message for CreateDeliveryPipelineRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CreateDeliveryPipelineRequest"
    }
}

/// The request object for `UpdateDeliveryPipeline`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateDeliveryPipelineRequest {
    /// Required. Field mask is used to specify the fields to be overwritten by the
    /// update in the `DeliveryPipeline` resource. The fields specified in the
    /// update_mask are relative to the resource, not the full request. A field
    /// will be overwritten if it's in the mask. If the user doesn't provide a mask
    /// then all fields are overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The `DeliveryPipeline` to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub delivery_pipeline: std::option::Option<crate::model::DeliveryPipeline>,

    /// Optional. A request ID to identify requests. Specify a unique request ID
    /// so that if you must retry your request, the server knows to ignore the
    /// request if it has already been completed. The server guarantees that for
    /// at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set to true, updating a `DeliveryPipeline` that does not exist
    /// will result in the creation of a new `DeliveryPipeline`.
    pub allow_missing: bool,

    /// Optional. If set to true, the request is validated and the user is provided
    /// with an expected result, but no actual change is made.
    pub validate_only: bool,
}

impl UpdateDeliveryPipelineRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateDeliveryPipelineRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [delivery_pipeline][crate::model::UpdateDeliveryPipelineRequest::delivery_pipeline].
    pub fn set_delivery_pipeline<
        T: std::convert::Into<std::option::Option<crate::model::DeliveryPipeline>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.delivery_pipeline = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateDeliveryPipelineRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [allow_missing][crate::model::UpdateDeliveryPipelineRequest::allow_missing].
    pub fn set_allow_missing<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.allow_missing = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::UpdateDeliveryPipelineRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }
}

impl wkt::message::Message for UpdateDeliveryPipelineRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.UpdateDeliveryPipelineRequest"
    }
}

/// The request object for `DeleteDeliveryPipeline`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteDeliveryPipelineRequest {
    /// Required. The name of the `DeliveryPipeline` to delete. The format is
    /// `projects/{project_id}/locations/{location_name}/deliveryPipelines/{pipeline_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. A request ID to identify requests. Specify a unique request ID
    /// so that if you must retry your request, the server knows to ignore the
    /// request if it has already been completed. The server guarantees that for
    /// at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set to true, then deleting an already deleted or non-existing
    /// `DeliveryPipeline` will succeed.
    pub allow_missing: bool,

    /// Optional. If set, validate the request and preview the review, but do not
    /// actually post it.
    pub validate_only: bool,

    /// Optional. If set to true, all child resources under this pipeline will also
    /// be deleted. Otherwise, the request will only work if the pipeline has no
    /// child resources.
    pub force: bool,

    /// Optional. This checksum is computed by the server based on the value of
    /// other fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub etag: std::string::String,
}

impl DeleteDeliveryPipelineRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteDeliveryPipelineRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteDeliveryPipelineRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [allow_missing][crate::model::DeleteDeliveryPipelineRequest::allow_missing].
    pub fn set_allow_missing<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.allow_missing = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::DeleteDeliveryPipelineRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }

    /// Sets the value of [force][crate::model::DeleteDeliveryPipelineRequest::force].
    pub fn set_force<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.force = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::DeleteDeliveryPipelineRequest::etag].
    pub fn set_etag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.etag = v.into();
        self
    }
}

impl wkt::message::Message for DeleteDeliveryPipelineRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.DeleteDeliveryPipelineRequest"
    }
}

/// Configs for the Rollback rollout.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RollbackTargetConfig {
    /// Optional. The rollback `Rollout` to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub rollout: std::option::Option<crate::model::Rollout>,

    /// Optional. The starting phase ID for the `Rollout`. If unspecified, the
    /// `Rollout` will start in the stable phase.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub starting_phase_id: std::string::String,
}

impl RollbackTargetConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [rollout][crate::model::RollbackTargetConfig::rollout].
    pub fn set_rollout<T: std::convert::Into<std::option::Option<crate::model::Rollout>>>(
        mut self,
        v: T,
    ) -> Self {
        self.rollout = v.into();
        self
    }

    /// Sets the value of [starting_phase_id][crate::model::RollbackTargetConfig::starting_phase_id].
    pub fn set_starting_phase_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.starting_phase_id = v.into();
        self
    }
}

impl wkt::message::Message for RollbackTargetConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.RollbackTargetConfig"
    }
}

/// The request object for `RollbackTarget`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RollbackTargetRequest {
    /// Required. The `DeliveryPipeline` for which the rollback `Rollout` must be
    /// created. The format is
    /// `projects/{project_id}/locations/{location_name}/deliveryPipelines/{pipeline_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. ID of the `Target` that is being rolled back.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target_id: std::string::String,

    /// Required. ID of the rollback `Rollout` to create.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rollout_id: std::string::String,

    /// Optional. ID of the `Release` to roll back to. If this isn't specified, the
    /// previous successful `Rollout` to the specified target will be used to
    /// determine the `Release`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub release_id: std::string::String,

    /// Optional. If provided, this must be the latest `Rollout` that is on the
    /// `Target`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rollout_to_roll_back: std::string::String,

    /// Optional. Configs for the rollback `Rollout`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub rollback_config: std::option::Option<crate::model::RollbackTargetConfig>,

    /// Optional. If set to true, the request is validated and the user is provided
    /// with a `RollbackTargetResponse`.
    pub validate_only: bool,

    /// Optional. Deploy policies to override. Format is
    /// `projects/{project}/locations/{location}/deployPolicies/{deploy_policy}`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub override_deploy_policy: std::vec::Vec<std::string::String>,
}

impl RollbackTargetRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::RollbackTargetRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [target_id][crate::model::RollbackTargetRequest::target_id].
    pub fn set_target_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target_id = v.into();
        self
    }

    /// Sets the value of [rollout_id][crate::model::RollbackTargetRequest::rollout_id].
    pub fn set_rollout_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.rollout_id = v.into();
        self
    }

    /// Sets the value of [release_id][crate::model::RollbackTargetRequest::release_id].
    pub fn set_release_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.release_id = v.into();
        self
    }

    /// Sets the value of [rollout_to_roll_back][crate::model::RollbackTargetRequest::rollout_to_roll_back].
    pub fn set_rollout_to_roll_back<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.rollout_to_roll_back = v.into();
        self
    }

    /// Sets the value of [rollback_config][crate::model::RollbackTargetRequest::rollback_config].
    pub fn set_rollback_config<
        T: std::convert::Into<std::option::Option<crate::model::RollbackTargetConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.rollback_config = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::RollbackTargetRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }

    /// Sets the value of [override_deploy_policy][crate::model::RollbackTargetRequest::override_deploy_policy].
    pub fn set_override_deploy_policy<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.override_deploy_policy = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for RollbackTargetRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.RollbackTargetRequest"
    }
}

/// The response object from `RollbackTarget`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RollbackTargetResponse {
    /// The config of the rollback `Rollout` created or will be created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub rollback_config: std::option::Option<crate::model::RollbackTargetConfig>,
}

impl RollbackTargetResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [rollback_config][crate::model::RollbackTargetResponse::rollback_config].
    pub fn set_rollback_config<
        T: std::convert::Into<std::option::Option<crate::model::RollbackTargetConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.rollback_config = v.into();
        self
    }
}

impl wkt::message::Message for RollbackTargetResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.RollbackTargetResponse"
    }
}

/// A `Target` resource in the Cloud Deploy API.
///
/// A `Target` defines a location to which a Skaffold configuration
/// can be deployed.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Target {
    /// Identifier. Name of the `Target`. Format is
    /// `projects/{project}/locations/{location}/targets/{target}`.
    /// The `target` component must match `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Resource id of the `Target`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target_id: std::string::String,

    /// Output only. Unique identifier of the `Target`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uid: std::string::String,

    /// Optional. Description of the `Target`. Max length is 255 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. User annotations. These attributes can only be set and used by
    /// the user, and not by Cloud Deploy. See
    /// <https://google.aip.dev/128#annotations> for more details such as format and
    /// size limitations.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub annotations: std::collections::HashMap<std::string::String, std::string::String>,

    /// Optional. Labels are attributes that can be set and used by both the
    /// user and by Cloud Deploy. Labels must meet the following constraints:
    ///
    /// * Keys and values can contain only lowercase letters, numeric characters,
    ///   underscores, and dashes.
    /// * All characters must use UTF-8 encoding, and international characters are
    ///   allowed.
    /// * Keys must start with a lowercase letter or international character.
    /// * Each resource is limited to a maximum of 64 labels.
    ///
    /// Both keys and values are additionally constrained to be <= 128 bytes.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Optional. Whether or not the `Target` requires approval.
    pub require_approval: bool,

    /// Output only. Time at which the `Target` was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Most recent time at which the `Target` was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional. Map of entity IDs to their associated entities. Associated
    /// entities allows specifying places other than the deployment target for
    /// specific features. For example, the Gateway API canary can be configured to
    /// deploy the HTTPRoute to a different cluster(s) than the deployment cluster
    /// using associated entities. An entity ID must consist of lower-case letters,
    /// numbers, and hyphens, start with a letter and end with a letter or a
    /// number, and have a max length of 63 characters. In other words, it must
    /// match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub associated_entities:
        std::collections::HashMap<std::string::String, crate::model::AssociatedEntities>,

    /// Optional. This checksum is computed by the server based on the value of
    /// other fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub etag: std::string::String,

    /// Optional. Configurations for all execution that relates to this `Target`.
    /// Each `ExecutionEnvironmentUsage` value may only be used in a single
    /// configuration; using the same value multiple times is an error.
    /// When one or more configurations are specified, they must include the
    /// `RENDER` and `DEPLOY` `ExecutionEnvironmentUsage` values.
    /// When no configurations are specified, execution will use the default
    /// specified in `DefaultPool`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub execution_configs: std::vec::Vec<crate::model::ExecutionConfig>,

    /// Optional. The deploy parameters to use for this target.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub deploy_parameters: std::collections::HashMap<std::string::String, std::string::String>,

    /// Destination to which the Skaffold configuration is applied during a
    /// rollout.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub deployment_target: std::option::Option<crate::model::target::DeploymentTarget>,
}

impl Target {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Target::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [target_id][crate::model::Target::target_id].
    pub fn set_target_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target_id = v.into();
        self
    }

    /// Sets the value of [uid][crate::model::Target::uid].
    pub fn set_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uid = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Target::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [require_approval][crate::model::Target::require_approval].
    pub fn set_require_approval<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.require_approval = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Target::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Target::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::Target::etag].
    pub fn set_etag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.etag = v.into();
        self
    }

    /// Sets the value of [execution_configs][crate::model::Target::execution_configs].
    pub fn set_execution_configs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ExecutionConfig>,
    {
        use std::iter::Iterator;
        self.execution_configs = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [annotations][crate::model::Target::annotations].
    pub fn set_annotations<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.annotations = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [labels][crate::model::Target::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [associated_entities][crate::model::Target::associated_entities].
    pub fn set_associated_entities<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::AssociatedEntities>,
    {
        use std::iter::Iterator;
        self.associated_entities = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [deploy_parameters][crate::model::Target::deploy_parameters].
    pub fn set_deploy_parameters<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.deploy_parameters = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of `deployment_target`.
    pub fn set_deployment_target<
        T: std::convert::Into<std::option::Option<crate::model::target::DeploymentTarget>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.deployment_target = v.into();
        self
    }

    /// The value of [deployment_target][crate::model::Target::deployment_target]
    /// if it holds a `Gke`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_gke(&self) -> std::option::Option<&std::boxed::Box<crate::model::GkeCluster>> {
        #[allow(unreachable_patterns)]
        self.deployment_target.as_ref().and_then(|v| match v {
            crate::model::target::DeploymentTarget::Gke(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [deployment_target][crate::model::Target::deployment_target]
    /// if it holds a `AnthosCluster`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_anthos_cluster(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::AnthosCluster>> {
        #[allow(unreachable_patterns)]
        self.deployment_target.as_ref().and_then(|v| match v {
            crate::model::target::DeploymentTarget::AnthosCluster(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [deployment_target][crate::model::Target::deployment_target]
    /// if it holds a `Run`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_run(&self) -> std::option::Option<&std::boxed::Box<crate::model::CloudRunLocation>> {
        #[allow(unreachable_patterns)]
        self.deployment_target.as_ref().and_then(|v| match v {
            crate::model::target::DeploymentTarget::Run(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [deployment_target][crate::model::Target::deployment_target]
    /// if it holds a `MultiTarget`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_multi_target(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::MultiTarget>> {
        #[allow(unreachable_patterns)]
        self.deployment_target.as_ref().and_then(|v| match v {
            crate::model::target::DeploymentTarget::MultiTarget(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [deployment_target][crate::model::Target::deployment_target]
    /// if it holds a `CustomTarget`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_custom_target(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::CustomTarget>> {
        #[allow(unreachable_patterns)]
        self.deployment_target.as_ref().and_then(|v| match v {
            crate::model::target::DeploymentTarget::CustomTarget(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [deployment_target][crate::model::Target::deployment_target]
    /// to hold a `Gke`.
    ///
    /// Note that all the setters affecting `deployment_target` are
    /// mutually exclusive.
    pub fn set_gke<T: std::convert::Into<std::boxed::Box<crate::model::GkeCluster>>>(
        mut self,
        v: T,
    ) -> Self {
        self.deployment_target =
            std::option::Option::Some(crate::model::target::DeploymentTarget::Gke(v.into()));
        self
    }

    /// Sets the value of [deployment_target][crate::model::Target::deployment_target]
    /// to hold a `AnthosCluster`.
    ///
    /// Note that all the setters affecting `deployment_target` are
    /// mutually exclusive.
    pub fn set_anthos_cluster<
        T: std::convert::Into<std::boxed::Box<crate::model::AnthosCluster>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.deployment_target = std::option::Option::Some(
            crate::model::target::DeploymentTarget::AnthosCluster(v.into()),
        );
        self
    }

    /// Sets the value of [deployment_target][crate::model::Target::deployment_target]
    /// to hold a `Run`.
    ///
    /// Note that all the setters affecting `deployment_target` are
    /// mutually exclusive.
    pub fn set_run<T: std::convert::Into<std::boxed::Box<crate::model::CloudRunLocation>>>(
        mut self,
        v: T,
    ) -> Self {
        self.deployment_target =
            std::option::Option::Some(crate::model::target::DeploymentTarget::Run(v.into()));
        self
    }

    /// Sets the value of [deployment_target][crate::model::Target::deployment_target]
    /// to hold a `MultiTarget`.
    ///
    /// Note that all the setters affecting `deployment_target` are
    /// mutually exclusive.
    pub fn set_multi_target<T: std::convert::Into<std::boxed::Box<crate::model::MultiTarget>>>(
        mut self,
        v: T,
    ) -> Self {
        self.deployment_target = std::option::Option::Some(
            crate::model::target::DeploymentTarget::MultiTarget(v.into()),
        );
        self
    }

    /// Sets the value of [deployment_target][crate::model::Target::deployment_target]
    /// to hold a `CustomTarget`.
    ///
    /// Note that all the setters affecting `deployment_target` are
    /// mutually exclusive.
    pub fn set_custom_target<T: std::convert::Into<std::boxed::Box<crate::model::CustomTarget>>>(
        mut self,
        v: T,
    ) -> Self {
        self.deployment_target = std::option::Option::Some(
            crate::model::target::DeploymentTarget::CustomTarget(v.into()),
        );
        self
    }
}

impl wkt::message::Message for Target {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.Target"
    }
}

/// Defines additional types related to Target
pub mod target {
    #[allow(unused_imports)]
    use super::*;

    /// Destination to which the Skaffold configuration is applied during a
    /// rollout.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum DeploymentTarget {
        /// Optional. Information specifying a GKE Cluster.
        Gke(std::boxed::Box<crate::model::GkeCluster>),
        /// Optional. Information specifying an Anthos Cluster.
        AnthosCluster(std::boxed::Box<crate::model::AnthosCluster>),
        /// Optional. Information specifying a Cloud Run deployment target.
        Run(std::boxed::Box<crate::model::CloudRunLocation>),
        /// Optional. Information specifying a multiTarget.
        MultiTarget(std::boxed::Box<crate::model::MultiTarget>),
        /// Optional. Information specifying a Custom Target.
        CustomTarget(std::boxed::Box<crate::model::CustomTarget>),
    }
}

/// Configuration of the environment to use when calling Skaffold.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExecutionConfig {
    /// Required. Usages when this configuration should be applied.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub usages: std::vec::Vec<crate::model::execution_config::ExecutionEnvironmentUsage>,

    /// Optional. The resource name of the `WorkerPool`, with the format
    /// `projects/{project}/locations/{location}/workerPools/{worker_pool}`.
    /// If this optional field is unspecified, the default Cloud Build pool will be
    /// used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub worker_pool: std::string::String,

    /// Optional. Google service account to use for execution. If unspecified,
    /// the project execution service account
    /// (<PROJECT_NUMBER>-compute@developer.gserviceaccount.com) is used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_account: std::string::String,

    /// Optional. Cloud Storage location in which to store execution outputs. This
    /// can either be a bucket ("gs://my-bucket") or a path within a bucket
    /// ("gs://my-bucket/my-dir").
    /// If unspecified, a default bucket located in the same region will be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub artifact_storage: std::string::String,

    /// Optional. Execution timeout for a Cloud Build Execution. This must be
    /// between 10m and 24h in seconds format. If unspecified, a default timeout of
    /// 1h is used.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub execution_timeout: std::option::Option<wkt::Duration>,

    /// Optional. If true, additional logging will be enabled when running builds
    /// in this execution environment.
    pub verbose: bool,

    /// Details of the environment.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub execution_environment:
        std::option::Option<crate::model::execution_config::ExecutionEnvironment>,
}

impl ExecutionConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [worker_pool][crate::model::ExecutionConfig::worker_pool].
    pub fn set_worker_pool<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.worker_pool = v.into();
        self
    }

    /// Sets the value of [service_account][crate::model::ExecutionConfig::service_account].
    pub fn set_service_account<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service_account = v.into();
        self
    }

    /// Sets the value of [artifact_storage][crate::model::ExecutionConfig::artifact_storage].
    pub fn set_artifact_storage<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.artifact_storage = v.into();
        self
    }

    /// Sets the value of [execution_timeout][crate::model::ExecutionConfig::execution_timeout].
    pub fn set_execution_timeout<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.execution_timeout = v.into();
        self
    }

    /// Sets the value of [verbose][crate::model::ExecutionConfig::verbose].
    pub fn set_verbose<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.verbose = v.into();
        self
    }

    /// Sets the value of [usages][crate::model::ExecutionConfig::usages].
    pub fn set_usages<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::execution_config::ExecutionEnvironmentUsage>,
    {
        use std::iter::Iterator;
        self.usages = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of `execution_environment`.
    pub fn set_execution_environment<
        T: std::convert::Into<
            std::option::Option<crate::model::execution_config::ExecutionEnvironment>,
        >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.execution_environment = v.into();
        self
    }

    /// The value of [execution_environment][crate::model::ExecutionConfig::execution_environment]
    /// if it holds a `DefaultPool`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_default_pool(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::DefaultPool>> {
        #[allow(unreachable_patterns)]
        self.execution_environment.as_ref().and_then(|v| match v {
            crate::model::execution_config::ExecutionEnvironment::DefaultPool(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [execution_environment][crate::model::ExecutionConfig::execution_environment]
    /// if it holds a `PrivatePool`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_private_pool(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::PrivatePool>> {
        #[allow(unreachable_patterns)]
        self.execution_environment.as_ref().and_then(|v| match v {
            crate::model::execution_config::ExecutionEnvironment::PrivatePool(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [execution_environment][crate::model::ExecutionConfig::execution_environment]
    /// to hold a `DefaultPool`.
    ///
    /// Note that all the setters affecting `execution_environment` are
    /// mutually exclusive.
    pub fn set_default_pool<T: std::convert::Into<std::boxed::Box<crate::model::DefaultPool>>>(
        mut self,
        v: T,
    ) -> Self {
        self.execution_environment = std::option::Option::Some(
            crate::model::execution_config::ExecutionEnvironment::DefaultPool(v.into()),
        );
        self
    }

    /// Sets the value of [execution_environment][crate::model::ExecutionConfig::execution_environment]
    /// to hold a `PrivatePool`.
    ///
    /// Note that all the setters affecting `execution_environment` are
    /// mutually exclusive.
    pub fn set_private_pool<T: std::convert::Into<std::boxed::Box<crate::model::PrivatePool>>>(
        mut self,
        v: T,
    ) -> Self {
        self.execution_environment = std::option::Option::Some(
            crate::model::execution_config::ExecutionEnvironment::PrivatePool(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ExecutionConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.ExecutionConfig"
    }
}

/// Defines additional types related to ExecutionConfig
pub mod execution_config {
    #[allow(unused_imports)]
    use super::*;

    /// Possible usages of this configuration.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct ExecutionEnvironmentUsage(std::borrow::Cow<'static, str>);

    impl ExecutionEnvironmentUsage {
        /// Creates a new ExecutionEnvironmentUsage instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [ExecutionEnvironmentUsage](ExecutionEnvironmentUsage)
    pub mod execution_environment_usage {
        use super::ExecutionEnvironmentUsage;

        /// Default value. This value is unused.
        pub const EXECUTION_ENVIRONMENT_USAGE_UNSPECIFIED: ExecutionEnvironmentUsage =
            ExecutionEnvironmentUsage::new("EXECUTION_ENVIRONMENT_USAGE_UNSPECIFIED");

        /// Use for rendering.
        pub const RENDER: ExecutionEnvironmentUsage = ExecutionEnvironmentUsage::new("RENDER");

        /// Use for deploying and deployment hooks.
        pub const DEPLOY: ExecutionEnvironmentUsage = ExecutionEnvironmentUsage::new("DEPLOY");

        /// Use for deployment verification.
        pub const VERIFY: ExecutionEnvironmentUsage = ExecutionEnvironmentUsage::new("VERIFY");

        /// Use for predeploy job execution.
        pub const PREDEPLOY: ExecutionEnvironmentUsage =
            ExecutionEnvironmentUsage::new("PREDEPLOY");

        /// Use for postdeploy job execution.
        pub const POSTDEPLOY: ExecutionEnvironmentUsage =
            ExecutionEnvironmentUsage::new("POSTDEPLOY");
    }

    impl std::convert::From<std::string::String> for ExecutionEnvironmentUsage {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// Details of the environment.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum ExecutionEnvironment {
        /// Optional. Use default Cloud Build pool.
        DefaultPool(std::boxed::Box<crate::model::DefaultPool>),
        /// Optional. Use private Cloud Build pool.
        PrivatePool(std::boxed::Box<crate::model::PrivatePool>),
    }
}

/// Execution using the default Cloud Build pool.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DefaultPool {
    /// Optional. Google service account to use for execution. If unspecified,
    /// the project execution service account
    /// (<PROJECT_NUMBER>-compute@developer.gserviceaccount.com) will be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_account: std::string::String,

    /// Optional. Cloud Storage location where execution outputs should be stored.
    /// This can either be a bucket ("gs://my-bucket") or a path within a bucket
    /// ("gs://my-bucket/my-dir").
    /// If unspecified, a default bucket located in the same region will be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub artifact_storage: std::string::String,
}

impl DefaultPool {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [service_account][crate::model::DefaultPool::service_account].
    pub fn set_service_account<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service_account = v.into();
        self
    }

    /// Sets the value of [artifact_storage][crate::model::DefaultPool::artifact_storage].
    pub fn set_artifact_storage<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.artifact_storage = v.into();
        self
    }
}

impl wkt::message::Message for DefaultPool {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.DefaultPool"
    }
}

/// Execution using a private Cloud Build pool.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PrivatePool {
    /// Required. Resource name of the Cloud Build worker pool to use. The format
    /// is `projects/{project}/locations/{location}/workerPools/{pool}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub worker_pool: std::string::String,

    /// Optional. Google service account to use for execution. If unspecified,
    /// the project execution service account
    /// (<PROJECT_NUMBER>-compute@developer.gserviceaccount.com) will be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_account: std::string::String,

    /// Optional. Cloud Storage location where execution outputs should be stored.
    /// This can either be a bucket ("gs://my-bucket") or a path within a bucket
    /// ("gs://my-bucket/my-dir").
    /// If unspecified, a default bucket located in the same region will be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub artifact_storage: std::string::String,
}

impl PrivatePool {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [worker_pool][crate::model::PrivatePool::worker_pool].
    pub fn set_worker_pool<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.worker_pool = v.into();
        self
    }

    /// Sets the value of [service_account][crate::model::PrivatePool::service_account].
    pub fn set_service_account<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service_account = v.into();
        self
    }

    /// Sets the value of [artifact_storage][crate::model::PrivatePool::artifact_storage].
    pub fn set_artifact_storage<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.artifact_storage = v.into();
        self
    }
}

impl wkt::message::Message for PrivatePool {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.PrivatePool"
    }
}

/// Information specifying a GKE Cluster.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GkeCluster {
    /// Optional. Information specifying a GKE Cluster. Format is
    /// `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub cluster: std::string::String,

    /// Optional. If true, `cluster` is accessed using the private IP address of
    /// the control plane endpoint. Otherwise, the default IP address of the
    /// control plane endpoint is used. The default IP address is the private IP
    /// address for clusters with private control-plane endpoints and the public IP
    /// address otherwise.
    ///
    /// Only specify this option when `cluster` is a [private GKE
    /// cluster](https://cloud.google.com/kubernetes-engine/docs/concepts/private-cluster-concept).
    /// Note that `internal_ip` and `dns_endpoint` cannot both be set to true.
    pub internal_ip: bool,

    /// Optional. If set, used to configure a
    /// [proxy](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#proxy)
    /// to the Kubernetes server.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub proxy_url: std::string::String,

    /// Optional. If set, the cluster will be accessed using the DNS endpoint. Note
    /// that both `dns_endpoint` and `internal_ip` cannot be set to true.
    pub dns_endpoint: bool,
}

impl GkeCluster {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [cluster][crate::model::GkeCluster::cluster].
    pub fn set_cluster<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.cluster = v.into();
        self
    }

    /// Sets the value of [internal_ip][crate::model::GkeCluster::internal_ip].
    pub fn set_internal_ip<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.internal_ip = v.into();
        self
    }

    /// Sets the value of [proxy_url][crate::model::GkeCluster::proxy_url].
    pub fn set_proxy_url<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.proxy_url = v.into();
        self
    }

    /// Sets the value of [dns_endpoint][crate::model::GkeCluster::dns_endpoint].
    pub fn set_dns_endpoint<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.dns_endpoint = v.into();
        self
    }
}

impl wkt::message::Message for GkeCluster {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.GkeCluster"
    }
}

/// Information specifying an Anthos Cluster.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AnthosCluster {
    /// Optional. Membership of the GKE Hub-registered cluster to which to apply
    /// the Skaffold configuration. Format is
    /// `projects/{project}/locations/{location}/memberships/{membership_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub membership: std::string::String,
}

impl AnthosCluster {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [membership][crate::model::AnthosCluster::membership].
    pub fn set_membership<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.membership = v.into();
        self
    }
}

impl wkt::message::Message for AnthosCluster {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.AnthosCluster"
    }
}

/// Information specifying where to deploy a Cloud Run Service.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CloudRunLocation {
    /// Required. The location for the Cloud Run Service. Format must be
    /// `projects/{project}/locations/{location}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub location: std::string::String,
}

impl CloudRunLocation {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [location][crate::model::CloudRunLocation::location].
    pub fn set_location<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.location = v.into();
        self
    }
}

impl wkt::message::Message for CloudRunLocation {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CloudRunLocation"
    }
}

/// Information specifying a multiTarget.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MultiTarget {
    /// Required. The target_ids of this multiTarget.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub target_ids: std::vec::Vec<std::string::String>,
}

impl MultiTarget {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [target_ids][crate::model::MultiTarget::target_ids].
    pub fn set_target_ids<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.target_ids = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for MultiTarget {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.MultiTarget"
    }
}

/// Information specifying a Custom Target.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CustomTarget {
    /// Required. The name of the CustomTargetType. Format must be
    /// `projects/{project}/locations/{location}/customTargetTypes/{custom_target_type}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub custom_target_type: std::string::String,
}

impl CustomTarget {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [custom_target_type][crate::model::CustomTarget::custom_target_type].
    pub fn set_custom_target_type<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.custom_target_type = v.into();
        self
    }
}

impl wkt::message::Message for CustomTarget {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CustomTarget"
    }
}

/// Information about entities associated with a `Target`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AssociatedEntities {
    /// Optional. Information specifying GKE clusters as associated entities.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub gke_clusters: std::vec::Vec<crate::model::GkeCluster>,

    /// Optional. Information specifying Anthos clusters as associated entities.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub anthos_clusters: std::vec::Vec<crate::model::AnthosCluster>,
}

impl AssociatedEntities {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [gke_clusters][crate::model::AssociatedEntities::gke_clusters].
    pub fn set_gke_clusters<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::GkeCluster>,
    {
        use std::iter::Iterator;
        self.gke_clusters = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [anthos_clusters][crate::model::AssociatedEntities::anthos_clusters].
    pub fn set_anthos_clusters<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::AnthosCluster>,
    {
        use std::iter::Iterator;
        self.anthos_clusters = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for AssociatedEntities {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.AssociatedEntities"
    }
}

/// The request object for `ListTargets`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListTargetsRequest {
    /// Required. The parent, which owns this collection of targets. Format must be
    /// `projects/{project_id}/locations/{location_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of `Target` objects to return. The service may
    /// return fewer than this value. If unspecified, at most 50 `Target` objects
    /// will be returned. The maximum value is 1000; values above 1000 will be set
    /// to 1000.
    pub page_size: i32,

    /// Optional. A page token, received from a previous `ListTargets` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other provided parameters match
    /// the call that provided the page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. Filter targets to be returned. See <https://google.aip.dev/160> for
    /// more details.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. Field to sort by. See <https://google.aip.dev/132#ordering> for
    /// more details.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListTargetsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListTargetsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListTargetsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListTargetsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListTargetsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListTargetsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListTargetsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.ListTargetsRequest"
    }
}

/// The response object from `ListTargets`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListTargetsResponse {
    /// The `Target` objects.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub targets: std::vec::Vec<crate::model::Target>,

    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListTargetsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListTargetsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [targets][crate::model::ListTargetsResponse::targets].
    pub fn set_targets<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Target>,
    {
        use std::iter::Iterator;
        self.targets = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListTargetsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListTargetsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.ListTargetsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListTargetsResponse {
    type PageItem = crate::model::Target;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.targets
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// The request object for `GetTarget`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetTargetRequest {
    /// Required. Name of the `Target`. Format must be
    /// `projects/{project_id}/locations/{location_name}/targets/{target_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetTargetRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetTargetRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetTargetRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.GetTargetRequest"
    }
}

/// The request object for `CreateTarget`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateTargetRequest {
    /// Required. The parent collection in which the `Target` must be created.
    /// The format is
    /// `projects/{project_id}/locations/{location_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. ID of the `Target`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target_id: std::string::String,

    /// Required. The `Target` to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub target: std::option::Option<crate::model::Target>,

    /// Optional. A request ID to identify requests. Specify a unique request ID
    /// so that if you must retry your request, the server knows to ignore the
    /// request if it has already been completed. The server guarantees that for
    /// at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set to true, the request is validated and the user is provided
    /// with an expected result, but no actual change is made.
    pub validate_only: bool,
}

impl CreateTargetRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateTargetRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [target_id][crate::model::CreateTargetRequest::target_id].
    pub fn set_target_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target_id = v.into();
        self
    }

    /// Sets the value of [target][crate::model::CreateTargetRequest::target].
    pub fn set_target<T: std::convert::Into<std::option::Option<crate::model::Target>>>(
        mut self,
        v: T,
    ) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateTargetRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::CreateTargetRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }
}

impl wkt::message::Message for CreateTargetRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CreateTargetRequest"
    }
}

/// The request object for `UpdateTarget`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateTargetRequest {
    /// Required. Field mask is used to specify the fields to be overwritten by the
    /// update in the `Target` resource. The fields specified in the update_mask
    /// are relative to the resource, not the full request. A field will be
    /// overwritten if it's in the mask. If the user doesn't provide a mask then
    /// all fields are overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The `Target` to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub target: std::option::Option<crate::model::Target>,

    /// Optional. A request ID to identify requests. Specify a unique request ID
    /// so that if you must retry your request, the server knows to ignore the
    /// request if it has already been completed. The server guarantees that for
    /// at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set to true, updating a `Target` that does not exist will
    /// result in the creation of a new `Target`.
    pub allow_missing: bool,

    /// Optional. If set to true, the request is validated and the user is provided
    /// with an expected result, but no actual change is made.
    pub validate_only: bool,
}

impl UpdateTargetRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateTargetRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [target][crate::model::UpdateTargetRequest::target].
    pub fn set_target<T: std::convert::Into<std::option::Option<crate::model::Target>>>(
        mut self,
        v: T,
    ) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateTargetRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [allow_missing][crate::model::UpdateTargetRequest::allow_missing].
    pub fn set_allow_missing<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.allow_missing = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::UpdateTargetRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }
}

impl wkt::message::Message for UpdateTargetRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.UpdateTargetRequest"
    }
}

/// The request object for `DeleteTarget`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteTargetRequest {
    /// Required. The name of the `Target` to delete. The format is
    /// `projects/{project_id}/locations/{location_name}/targets/{target_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. A request ID to identify requests. Specify a unique request ID
    /// so that if you must retry your request, the server knows to ignore the
    /// request if it has already been completed. The server guarantees that for
    /// at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set to true, then deleting an already deleted or non-existing
    /// `Target` will succeed.
    pub allow_missing: bool,

    /// Optional. If set, validate the request and preview the review, but do not
    /// actually post it.
    pub validate_only: bool,

    /// Optional. This checksum is computed by the server based on the value of
    /// other fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub etag: std::string::String,
}

impl DeleteTargetRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteTargetRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteTargetRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [allow_missing][crate::model::DeleteTargetRequest::allow_missing].
    pub fn set_allow_missing<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.allow_missing = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::DeleteTargetRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::DeleteTargetRequest::etag].
    pub fn set_etag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.etag = v.into();
        self
    }
}

impl wkt::message::Message for DeleteTargetRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.DeleteTargetRequest"
    }
}

/// A `CustomTargetType` resource in the Cloud Deploy API.
///
/// A `CustomTargetType` defines a type of custom target that can be referenced
/// in a `Target` in order to facilitate deploying to other systems besides the
/// supported runtimes.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CustomTargetType {
    /// Identifier. Name of the `CustomTargetType`. Format is
    /// `projects/{project}/locations/{location}/customTargetTypes/{customTargetType}`.
    /// The `customTargetType` component must match
    /// `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Resource id of the `CustomTargetType`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub custom_target_type_id: std::string::String,

    /// Output only. Unique identifier of the `CustomTargetType`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uid: std::string::String,

    /// Optional. Description of the `CustomTargetType`. Max length is 255
    /// characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. User annotations. These attributes can only be set and used by
    /// the user, and not by Cloud Deploy. See
    /// <https://google.aip.dev/128#annotations> for more details such as format and
    /// size limitations.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub annotations: std::collections::HashMap<std::string::String, std::string::String>,

    /// Optional. Labels are attributes that can be set and used by both the
    /// user and by Cloud Deploy. Labels must meet the following constraints:
    ///
    /// * Keys and values can contain only lowercase letters, numeric characters,
    ///   underscores, and dashes.
    /// * All characters must use UTF-8 encoding, and international characters are
    ///   allowed.
    /// * Keys must start with a lowercase letter or international character.
    /// * Each resource is limited to a maximum of 64 labels.
    ///
    /// Both keys and values are additionally constrained to be <= 128 bytes.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Output only. Time at which the `CustomTargetType` was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Most recent time at which the `CustomTargetType` was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional. This checksum is computed by the server based on the value of
    /// other fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub etag: std::string::String,

    /// Defines the `CustomTargetType` renderer and deployer.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub definition: std::option::Option<crate::model::custom_target_type::Definition>,
}

impl CustomTargetType {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::CustomTargetType::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [custom_target_type_id][crate::model::CustomTargetType::custom_target_type_id].
    pub fn set_custom_target_type_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.custom_target_type_id = v.into();
        self
    }

    /// Sets the value of [uid][crate::model::CustomTargetType::uid].
    pub fn set_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uid = v.into();
        self
    }

    /// Sets the value of [description][crate::model::CustomTargetType::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::CustomTargetType::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::CustomTargetType::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::CustomTargetType::etag].
    pub fn set_etag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.etag = v.into();
        self
    }

    /// Sets the value of [annotations][crate::model::CustomTargetType::annotations].
    pub fn set_annotations<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.annotations = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [labels][crate::model::CustomTargetType::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of `definition`.
    pub fn set_definition<
        T: std::convert::Into<std::option::Option<crate::model::custom_target_type::Definition>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.definition = v.into();
        self
    }

    /// The value of [definition][crate::model::CustomTargetType::definition]
    /// if it holds a `CustomActions`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_custom_actions(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::CustomTargetSkaffoldActions>> {
        #[allow(unreachable_patterns)]
        self.definition.as_ref().and_then(|v| match v {
            crate::model::custom_target_type::Definition::CustomActions(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [definition][crate::model::CustomTargetType::definition]
    /// to hold a `CustomActions`.
    ///
    /// Note that all the setters affecting `definition` are
    /// mutually exclusive.
    pub fn set_custom_actions<
        T: std::convert::Into<std::boxed::Box<crate::model::CustomTargetSkaffoldActions>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.definition = std::option::Option::Some(
            crate::model::custom_target_type::Definition::CustomActions(v.into()),
        );
        self
    }
}

impl wkt::message::Message for CustomTargetType {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CustomTargetType"
    }
}

/// Defines additional types related to CustomTargetType
pub mod custom_target_type {
    #[allow(unused_imports)]
    use super::*;

    /// Defines the `CustomTargetType` renderer and deployer.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Definition {
        /// Optional. Configures render and deploy for the `CustomTargetType` using
        /// Skaffold custom actions.
        CustomActions(std::boxed::Box<crate::model::CustomTargetSkaffoldActions>),
    }
}

/// CustomTargetSkaffoldActions represents the `CustomTargetType` configuration
/// using Skaffold custom actions.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CustomTargetSkaffoldActions {
    /// Optional. The Skaffold custom action responsible for render operations. If
    /// not provided then Cloud Deploy will perform the render operations via
    /// `skaffold render`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub render_action: std::string::String,

    /// Required. The Skaffold custom action responsible for deploy operations.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub deploy_action: std::string::String,

    /// Optional. List of Skaffold modules Cloud Deploy will include in the
    /// Skaffold Config as required before performing diagnose.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub include_skaffold_modules: std::vec::Vec<crate::model::SkaffoldModules>,
}

impl CustomTargetSkaffoldActions {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [render_action][crate::model::CustomTargetSkaffoldActions::render_action].
    pub fn set_render_action<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.render_action = v.into();
        self
    }

    /// Sets the value of [deploy_action][crate::model::CustomTargetSkaffoldActions::deploy_action].
    pub fn set_deploy_action<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.deploy_action = v.into();
        self
    }

    /// Sets the value of [include_skaffold_modules][crate::model::CustomTargetSkaffoldActions::include_skaffold_modules].
    pub fn set_include_skaffold_modules<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SkaffoldModules>,
    {
        use std::iter::Iterator;
        self.include_skaffold_modules = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for CustomTargetSkaffoldActions {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CustomTargetSkaffoldActions"
    }
}

/// Skaffold Config modules and their remote source.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SkaffoldModules {
    /// Optional. The Skaffold Config modules to use from the specified source.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub configs: std::vec::Vec<std::string::String>,

    /// The source that contains the Skaffold Config modules.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub source: std::option::Option<crate::model::skaffold_modules::Source>,
}

impl SkaffoldModules {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [configs][crate::model::SkaffoldModules::configs].
    pub fn set_configs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.configs = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of `source`.
    pub fn set_source<
        T: std::convert::Into<std::option::Option<crate::model::skaffold_modules::Source>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source = v.into();
        self
    }

    /// The value of [source][crate::model::SkaffoldModules::source]
    /// if it holds a `Git`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_git(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::skaffold_modules::SkaffoldGitSource>>
    {
        #[allow(unreachable_patterns)]
        self.source.as_ref().and_then(|v| match v {
            crate::model::skaffold_modules::Source::Git(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [source][crate::model::SkaffoldModules::source]
    /// if it holds a `GoogleCloudStorage`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_google_cloud_storage(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::skaffold_modules::SkaffoldGCSSource>>
    {
        #[allow(unreachable_patterns)]
        self.source.as_ref().and_then(|v| match v {
            crate::model::skaffold_modules::Source::GoogleCloudStorage(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [source][crate::model::SkaffoldModules::source]
    /// if it holds a `GoogleCloudBuildRepo`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_google_cloud_build_repo(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::skaffold_modules::SkaffoldGCBRepoSource>>
    {
        #[allow(unreachable_patterns)]
        self.source.as_ref().and_then(|v| match v {
            crate::model::skaffold_modules::Source::GoogleCloudBuildRepo(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [source][crate::model::SkaffoldModules::source]
    /// to hold a `Git`.
    ///
    /// Note that all the setters affecting `source` are
    /// mutually exclusive.
    pub fn set_git<
        T: std::convert::Into<std::boxed::Box<crate::model::skaffold_modules::SkaffoldGitSource>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source =
            std::option::Option::Some(crate::model::skaffold_modules::Source::Git(v.into()));
        self
    }

    /// Sets the value of [source][crate::model::SkaffoldModules::source]
    /// to hold a `GoogleCloudStorage`.
    ///
    /// Note that all the setters affecting `source` are
    /// mutually exclusive.
    pub fn set_google_cloud_storage<
        T: std::convert::Into<std::boxed::Box<crate::model::skaffold_modules::SkaffoldGCSSource>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source = std::option::Option::Some(
            crate::model::skaffold_modules::Source::GoogleCloudStorage(v.into()),
        );
        self
    }

    /// Sets the value of [source][crate::model::SkaffoldModules::source]
    /// to hold a `GoogleCloudBuildRepo`.
    ///
    /// Note that all the setters affecting `source` are
    /// mutually exclusive.
    pub fn set_google_cloud_build_repo<
        T: std::convert::Into<std::boxed::Box<crate::model::skaffold_modules::SkaffoldGCBRepoSource>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source = std::option::Option::Some(
            crate::model::skaffold_modules::Source::GoogleCloudBuildRepo(v.into()),
        );
        self
    }
}

impl wkt::message::Message for SkaffoldModules {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.SkaffoldModules"
    }
}

/// Defines additional types related to SkaffoldModules
pub mod skaffold_modules {
    #[allow(unused_imports)]
    use super::*;

    /// Git repository containing Skaffold Config modules.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SkaffoldGitSource {
        /// Required. Git repository the package should be cloned from.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub repo: std::string::String,

        /// Optional. Relative path from the repository root to the Skaffold file.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub path: std::string::String,

        /// Optional. Git branch or tag to use when cloning the repository.
        #[serde(rename = "ref")]
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub r#ref: std::string::String,
    }

    impl SkaffoldGitSource {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [repo][crate::model::skaffold_modules::SkaffoldGitSource::repo].
        pub fn set_repo<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.repo = v.into();
            self
        }

        /// Sets the value of [path][crate::model::skaffold_modules::SkaffoldGitSource::path].
        pub fn set_path<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.path = v.into();
            self
        }

        /// Sets the value of [r#ref][crate::model::skaffold_modules::SkaffoldGitSource::ref].
        pub fn set_ref<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.r#ref = v.into();
            self
        }
    }

    impl wkt::message::Message for SkaffoldGitSource {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.deploy.v1.SkaffoldModules.SkaffoldGitSource"
        }
    }

    /// Cloud Storage bucket containing Skaffold Config modules.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SkaffoldGCSSource {
        /// Required. Cloud Storage source paths to copy recursively. For example,
        /// providing "gs://my-bucket/dir/configs/*" will result in Skaffold copying
        /// all files within the "dir/configs" directory in the bucket "my-bucket".
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub source: std::string::String,

        /// Optional. Relative path from the source to the Skaffold file.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub path: std::string::String,
    }

    impl SkaffoldGCSSource {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [source][crate::model::skaffold_modules::SkaffoldGCSSource::source].
        pub fn set_source<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.source = v.into();
            self
        }

        /// Sets the value of [path][crate::model::skaffold_modules::SkaffoldGCSSource::path].
        pub fn set_path<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.path = v.into();
            self
        }
    }

    impl wkt::message::Message for SkaffoldGCSSource {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.deploy.v1.SkaffoldModules.SkaffoldGCSSource"
        }
    }

    /// Cloud Build V2 Repository containing Skaffold Configs.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SkaffoldGCBRepoSource {
        /// Required. Name of the Cloud Build V2 Repository.
        /// Format is
        /// projects/{project}/locations/{location}/connections/{connection}/repositories/{repository}.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub repository: std::string::String,

        /// Optional. Relative path from the repository root to the Skaffold Config
        /// file.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub path: std::string::String,

        /// Optional. Branch or tag to use when cloning the repository.
        #[serde(rename = "ref")]
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub r#ref: std::string::String,
    }

    impl SkaffoldGCBRepoSource {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [repository][crate::model::skaffold_modules::SkaffoldGCBRepoSource::repository].
        pub fn set_repository<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.repository = v.into();
            self
        }

        /// Sets the value of [path][crate::model::skaffold_modules::SkaffoldGCBRepoSource::path].
        pub fn set_path<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.path = v.into();
            self
        }

        /// Sets the value of [r#ref][crate::model::skaffold_modules::SkaffoldGCBRepoSource::ref].
        pub fn set_ref<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.r#ref = v.into();
            self
        }
    }

    impl wkt::message::Message for SkaffoldGCBRepoSource {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.deploy.v1.SkaffoldModules.SkaffoldGCBRepoSource"
        }
    }

    /// The source that contains the Skaffold Config modules.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Source {
        /// Optional. Remote git repository containing the Skaffold Config modules.
        Git(std::boxed::Box<crate::model::skaffold_modules::SkaffoldGitSource>),
        /// Optional. Cloud Storage bucket containing the Skaffold Config modules.
        GoogleCloudStorage(std::boxed::Box<crate::model::skaffold_modules::SkaffoldGCSSource>),
        /// Optional. Cloud Build V2 repository containing the Skaffold Config
        /// modules.
        GoogleCloudBuildRepo(
            std::boxed::Box<crate::model::skaffold_modules::SkaffoldGCBRepoSource>,
        ),
    }
}

/// The request object for `ListCustomTargetTypes`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListCustomTargetTypesRequest {
    /// Required. The parent that owns this collection of custom target types.
    /// Format must be `projects/{project_id}/locations/{location_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of `CustomTargetType` objects to return. The
    /// service may return fewer than this value. If unspecified, at most 50
    /// `CustomTargetType` objects will be returned. The maximum value is 1000;
    /// values above 1000 will be set to 1000.
    pub page_size: i32,

    /// Optional. A page token, received from a previous `ListCustomTargetTypes`
    /// call. Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other provided parameters match
    /// the call that provided the page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. Filter custom target types to be returned. See
    /// <https://google.aip.dev/160> for more details.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. Field to sort by. See <https://google.aip.dev/132#ordering> for
    /// more details.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListCustomTargetTypesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListCustomTargetTypesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListCustomTargetTypesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListCustomTargetTypesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListCustomTargetTypesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListCustomTargetTypesRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListCustomTargetTypesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.ListCustomTargetTypesRequest"
    }
}

/// The response object from `ListCustomTargetTypes.`
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListCustomTargetTypesResponse {
    /// The `CustomTargetType` objects.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub custom_target_types: std::vec::Vec<crate::model::CustomTargetType>,

    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListCustomTargetTypesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListCustomTargetTypesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [custom_target_types][crate::model::ListCustomTargetTypesResponse::custom_target_types].
    pub fn set_custom_target_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::CustomTargetType>,
    {
        use std::iter::Iterator;
        self.custom_target_types = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListCustomTargetTypesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListCustomTargetTypesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.ListCustomTargetTypesResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListCustomTargetTypesResponse {
    type PageItem = crate::model::CustomTargetType;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.custom_target_types
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// The request object for `GetCustomTargetType`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetCustomTargetTypeRequest {
    /// Required. Name of the `CustomTargetType`. Format must be
    /// `projects/{project_id}/locations/{location_name}/customTargetTypes/{custom_target_type}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetCustomTargetTypeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetCustomTargetTypeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetCustomTargetTypeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.GetCustomTargetTypeRequest"
    }
}

/// The request object for `CreateCustomTargetType`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateCustomTargetTypeRequest {
    /// Required. The parent collection in which the `CustomTargetType` must be
    /// created. The format is `projects/{project_id}/locations/{location_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. ID of the `CustomTargetType`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub custom_target_type_id: std::string::String,

    /// Required. The `CustomTargetType` to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub custom_target_type: std::option::Option<crate::model::CustomTargetType>,

    /// Optional. A request ID to identify requests. Specify a unique request ID
    /// so that if you must retry your request, the server knows to ignore the
    /// request if it has already been completed. The server guarantees that for
    /// at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set to true, the request is validated and the user is provided
    /// with an expected result, but no actual change is made.
    pub validate_only: bool,
}

impl CreateCustomTargetTypeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateCustomTargetTypeRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [custom_target_type_id][crate::model::CreateCustomTargetTypeRequest::custom_target_type_id].
    pub fn set_custom_target_type_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.custom_target_type_id = v.into();
        self
    }

    /// Sets the value of [custom_target_type][crate::model::CreateCustomTargetTypeRequest::custom_target_type].
    pub fn set_custom_target_type<
        T: std::convert::Into<std::option::Option<crate::model::CustomTargetType>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.custom_target_type = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateCustomTargetTypeRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::CreateCustomTargetTypeRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }
}

impl wkt::message::Message for CreateCustomTargetTypeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CreateCustomTargetTypeRequest"
    }
}

/// The request object for `UpdateCustomTargetType`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateCustomTargetTypeRequest {
    /// Required. Field mask is used to specify the fields to be overwritten by the
    /// update in the `CustomTargetType` resource. The fields specified in the
    /// update_mask are relative to the resource, not the full request. A field
    /// will be overwritten if it's in the mask. If the user doesn't provide a mask
    /// then all fields are overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The `CustomTargetType` to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub custom_target_type: std::option::Option<crate::model::CustomTargetType>,

    /// Optional. A request ID to identify requests. Specify a unique request ID
    /// so that if you must retry your request, the server knows to ignore the
    /// request if it has already been completed. The server guarantees that for
    /// at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set to true, updating a `CustomTargetType` that does not exist
    /// will result in the creation of a new `CustomTargetType`.
    pub allow_missing: bool,

    /// Optional. If set to true, the request is validated and the user is provided
    /// with an expected result, but no actual change is made.
    pub validate_only: bool,
}

impl UpdateCustomTargetTypeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateCustomTargetTypeRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [custom_target_type][crate::model::UpdateCustomTargetTypeRequest::custom_target_type].
    pub fn set_custom_target_type<
        T: std::convert::Into<std::option::Option<crate::model::CustomTargetType>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.custom_target_type = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateCustomTargetTypeRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [allow_missing][crate::model::UpdateCustomTargetTypeRequest::allow_missing].
    pub fn set_allow_missing<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.allow_missing = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::UpdateCustomTargetTypeRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }
}

impl wkt::message::Message for UpdateCustomTargetTypeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.UpdateCustomTargetTypeRequest"
    }
}

/// The request object for `DeleteCustomTargetType`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteCustomTargetTypeRequest {
    /// Required. The name of the `CustomTargetType` to delete. Format must be
    /// `projects/{project_id}/locations/{location_name}/customTargetTypes/{custom_target_type}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. A request ID to identify requests. Specify a unique request ID
    /// so that if you must retry your request, the server knows to ignore the
    /// request if it has already been completed. The server guarantees that for
    /// at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set to true, then deleting an already deleted or non-existing
    /// `CustomTargetType` will succeed.
    pub allow_missing: bool,

    /// Optional. If set to true, the request is validated but no actual change is
    /// made.
    pub validate_only: bool,

    /// Optional. This checksum is computed by the server based on the value of
    /// other fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub etag: std::string::String,
}

impl DeleteCustomTargetTypeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteCustomTargetTypeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteCustomTargetTypeRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [allow_missing][crate::model::DeleteCustomTargetTypeRequest::allow_missing].
    pub fn set_allow_missing<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.allow_missing = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::DeleteCustomTargetTypeRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::DeleteCustomTargetTypeRequest::etag].
    pub fn set_etag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.etag = v.into();
        self
    }
}

impl wkt::message::Message for DeleteCustomTargetTypeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.DeleteCustomTargetTypeRequest"
    }
}

/// A `DeployPolicy` resource in the Cloud Deploy API.
///
/// A `DeployPolicy` inhibits manual or automation-driven actions within a
/// Delivery Pipeline or Target.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeployPolicy {
    /// Output only. Name of the `DeployPolicy`. Format is
    /// `projects/{project}/locations/{location}/deployPolicies/{deployPolicy}`.
    /// The `deployPolicy` component must match `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Unique identifier of the `DeployPolicy`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uid: std::string::String,

    /// Optional. Description of the `DeployPolicy`. Max length is 255 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. User annotations. These attributes can only be set and used by
    /// the user, and not by Cloud Deploy. Annotations must meet the following
    /// constraints:
    ///
    /// * Annotations are key/value pairs.
    /// * Valid annotation keys have two segments: an optional prefix and name,
    ///   separated by a slash (`/`).
    /// * The name segment is required and must be 63 characters or less,
    ///   beginning and ending with an alphanumeric character (`[a-z0-9A-Z]`) with
    ///   dashes (`-`), underscores (`_`), dots (`.`), and alphanumerics between.
    /// * The prefix is optional. If specified, the prefix must be a DNS subdomain:
    ///   a series of DNS labels separated by dots(`.`), not longer than 253
    ///   characters in total, followed by a slash (`/`).
    ///
    /// See
    /// <https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set>
    /// for more details.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub annotations: std::collections::HashMap<std::string::String, std::string::String>,

    /// Labels are attributes that can be set and used by both the
    /// user and by Cloud Deploy. Labels must meet the following constraints:
    ///
    /// * Keys and values can contain only lowercase letters, numeric characters,
    ///   underscores, and dashes.
    /// * All characters must use UTF-8 encoding, and international characters are
    ///   allowed.
    /// * Keys must start with a lowercase letter or international character.
    /// * Each resource is limited to a maximum of 64 labels.
    ///
    /// Both keys and values are additionally constrained to be <= 128 bytes.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Output only. Time at which the deploy policy was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Most recent time at which the deploy policy was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional. When suspended, the policy will not prevent actions from
    /// occurring, even if the action violates the policy.
    pub suspended: bool,

    /// Required. Selected resources to which the policy will be applied. At least
    /// one selector is required. If one selector matches the resource the policy
    /// applies. For example, if there are two selectors and the action being
    /// attempted matches one of them, the policy will apply to that action.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub selectors: std::vec::Vec<crate::model::DeployPolicyResourceSelector>,

    /// Required. Rules to apply. At least one rule must be present.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub rules: std::vec::Vec<crate::model::PolicyRule>,

    /// The weak etag of the `Automation` resource.
    /// This checksum is computed by the server based on the value of other
    /// fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub etag: std::string::String,
}

impl DeployPolicy {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeployPolicy::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [uid][crate::model::DeployPolicy::uid].
    pub fn set_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uid = v.into();
        self
    }

    /// Sets the value of [description][crate::model::DeployPolicy::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::DeployPolicy::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::DeployPolicy::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [suspended][crate::model::DeployPolicy::suspended].
    pub fn set_suspended<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.suspended = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::DeployPolicy::etag].
    pub fn set_etag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.etag = v.into();
        self
    }

    /// Sets the value of [selectors][crate::model::DeployPolicy::selectors].
    pub fn set_selectors<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::DeployPolicyResourceSelector>,
    {
        use std::iter::Iterator;
        self.selectors = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [rules][crate::model::DeployPolicy::rules].
    pub fn set_rules<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::PolicyRule>,
    {
        use std::iter::Iterator;
        self.rules = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [annotations][crate::model::DeployPolicy::annotations].
    pub fn set_annotations<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.annotations = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [labels][crate::model::DeployPolicy::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for DeployPolicy {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.DeployPolicy"
    }
}

/// Defines additional types related to DeployPolicy
pub mod deploy_policy {
    #[allow(unused_imports)]
    use super::*;

    /// What invoked the action. Filters enforcing the policy depending on what
    /// invoked the action.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Invoker(std::borrow::Cow<'static, str>);

    impl Invoker {
        /// Creates a new Invoker instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [Invoker](Invoker)
    pub mod invoker {
        use super::Invoker;

        /// Unspecified.
        pub const INVOKER_UNSPECIFIED: Invoker = Invoker::new("INVOKER_UNSPECIFIED");

        /// The action is user-driven. For example, creating a rollout manually via a
        /// gcloud create command.
        pub const USER: Invoker = Invoker::new("USER");

        /// Automated action by Cloud Deploy.
        pub const DEPLOY_AUTOMATION: Invoker = Invoker::new("DEPLOY_AUTOMATION");
    }

    impl std::convert::From<std::string::String> for Invoker {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Contains information on the resources to select for a deploy policy.
/// Attributes provided must all match the resource in order for policy
/// restrictions to apply. For example, if delivery pipelines attributes given
/// are an id "prod" and labels "foo: bar", a delivery pipeline resource must
/// match both that id and have that label in order to be subject to the policy.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeployPolicyResourceSelector {
    /// Optional. Contains attributes about a delivery pipeline.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub delivery_pipeline: std::option::Option<crate::model::DeliveryPipelineAttribute>,

    /// Optional. Contains attributes about a target.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub target: std::option::Option<crate::model::TargetAttribute>,
}

impl DeployPolicyResourceSelector {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [delivery_pipeline][crate::model::DeployPolicyResourceSelector::delivery_pipeline].
    pub fn set_delivery_pipeline<
        T: std::convert::Into<std::option::Option<crate::model::DeliveryPipelineAttribute>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.delivery_pipeline = v.into();
        self
    }

    /// Sets the value of [target][crate::model::DeployPolicyResourceSelector::target].
    pub fn set_target<T: std::convert::Into<std::option::Option<crate::model::TargetAttribute>>>(
        mut self,
        v: T,
    ) -> Self {
        self.target = v.into();
        self
    }
}

impl wkt::message::Message for DeployPolicyResourceSelector {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.DeployPolicyResourceSelector"
    }
}

/// Contains criteria for selecting DeliveryPipelines.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeliveryPipelineAttribute {
    /// Optional. ID of the `DeliveryPipeline`. The value of this field could be
    /// one of the following:
    ///
    /// * The last segment of a pipeline name
    /// * "*", all delivery pipelines in a location
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub id: std::string::String,

    /// DeliveryPipeline labels.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,
}

impl DeliveryPipelineAttribute {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [id][crate::model::DeliveryPipelineAttribute::id].
    pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::DeliveryPipelineAttribute::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for DeliveryPipelineAttribute {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.DeliveryPipelineAttribute"
    }
}

/// Contains criteria for selecting Targets. This could be used to select targets
/// for a Deploy Policy or for an Automation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TargetAttribute {
    /// Optional. ID of the `Target`. The value of this field could be one of the
    /// following:
    ///
    /// * The last segment of a target name
    /// * "*", all targets in a location
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub id: std::string::String,

    /// Target labels.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,
}

impl TargetAttribute {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [id][crate::model::TargetAttribute::id].
    pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::TargetAttribute::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for TargetAttribute {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.TargetAttribute"
    }
}

/// Deploy Policy rule.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PolicyRule {
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub rule: std::option::Option<crate::model::policy_rule::Rule>,
}

impl PolicyRule {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of `rule`.
    pub fn set_rule<T: std::convert::Into<std::option::Option<crate::model::policy_rule::Rule>>>(
        mut self,
        v: T,
    ) -> Self {
        self.rule = v.into();
        self
    }

    /// The value of [rule][crate::model::PolicyRule::rule]
    /// if it holds a `RolloutRestriction`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_rollout_restriction(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::RolloutRestriction>> {
        #[allow(unreachable_patterns)]
        self.rule.as_ref().and_then(|v| match v {
            crate::model::policy_rule::Rule::RolloutRestriction(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [rule][crate::model::PolicyRule::rule]
    /// to hold a `RolloutRestriction`.
    ///
    /// Note that all the setters affecting `rule` are
    /// mutually exclusive.
    pub fn set_rollout_restriction<
        T: std::convert::Into<std::boxed::Box<crate::model::RolloutRestriction>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.rule = std::option::Option::Some(crate::model::policy_rule::Rule::RolloutRestriction(
            v.into(),
        ));
        self
    }
}

impl wkt::message::Message for PolicyRule {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.PolicyRule"
    }
}

/// Defines additional types related to PolicyRule
pub mod policy_rule {
    #[allow(unused_imports)]
    use super::*;

    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Rule {
        /// Optional. Rollout restrictions.
        RolloutRestriction(std::boxed::Box<crate::model::RolloutRestriction>),
    }
}

/// Rollout restrictions.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RolloutRestriction {
    /// Required. Restriction rule ID. Required and must be unique within a
    /// DeployPolicy. The format is `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub id: std::string::String,

    /// Optional. What invoked the action. If left empty, all invoker types will be
    /// restricted.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub invokers: std::vec::Vec<crate::model::deploy_policy::Invoker>,

    /// Optional. Rollout actions to be restricted as part of the policy. If left
    /// empty, all actions will be restricted.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub actions: std::vec::Vec<crate::model::rollout_restriction::RolloutActions>,

    /// Required. Time window within which actions are restricted.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub time_windows: std::option::Option<crate::model::TimeWindows>,
}

impl RolloutRestriction {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [id][crate::model::RolloutRestriction::id].
    pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id = v.into();
        self
    }

    /// Sets the value of [time_windows][crate::model::RolloutRestriction::time_windows].
    pub fn set_time_windows<
        T: std::convert::Into<std::option::Option<crate::model::TimeWindows>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.time_windows = v.into();
        self
    }

    /// Sets the value of [invokers][crate::model::RolloutRestriction::invokers].
    pub fn set_invokers<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::deploy_policy::Invoker>,
    {
        use std::iter::Iterator;
        self.invokers = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [actions][crate::model::RolloutRestriction::actions].
    pub fn set_actions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::rollout_restriction::RolloutActions>,
    {
        use std::iter::Iterator;
        self.actions = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for RolloutRestriction {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.RolloutRestriction"
    }
}

/// Defines additional types related to RolloutRestriction
pub mod rollout_restriction {
    #[allow(unused_imports)]
    use super::*;

    /// Rollout actions to be restricted as part of the policy.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct RolloutActions(std::borrow::Cow<'static, str>);

    impl RolloutActions {
        /// Creates a new RolloutActions instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [RolloutActions](RolloutActions)
    pub mod rollout_actions {
        use super::RolloutActions;

        /// Unspecified.
        pub const ROLLOUT_ACTIONS_UNSPECIFIED: RolloutActions =
            RolloutActions::new("ROLLOUT_ACTIONS_UNSPECIFIED");

        /// Advance the rollout to the next phase.
        pub const ADVANCE: RolloutActions = RolloutActions::new("ADVANCE");

        /// Approve the rollout.
        pub const APPROVE: RolloutActions = RolloutActions::new("APPROVE");

        /// Cancel the rollout.
        pub const CANCEL: RolloutActions = RolloutActions::new("CANCEL");

        /// Create a rollout.
        pub const CREATE: RolloutActions = RolloutActions::new("CREATE");

        /// Ignore a job result on the rollout.
        pub const IGNORE_JOB: RolloutActions = RolloutActions::new("IGNORE_JOB");

        /// Retry a job for a rollout.
        pub const RETRY_JOB: RolloutActions = RolloutActions::new("RETRY_JOB");

        /// Rollback a rollout.
        pub const ROLLBACK: RolloutActions = RolloutActions::new("ROLLBACK");

        /// Terminate a jobrun.
        pub const TERMINATE_JOBRUN: RolloutActions = RolloutActions::new("TERMINATE_JOBRUN");
    }

    impl std::convert::From<std::string::String> for RolloutActions {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Time windows within which actions are restricted. See the
/// [documentation](https://cloud.google.com/deploy/docs/deploy-policy#dates_times)
/// for more information on how to configure dates/times.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TimeWindows {
    /// Required. The time zone in IANA format [IANA Time Zone
    /// Database](https://www.iana.org/time-zones) (e.g. America/New_York).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub time_zone: std::string::String,

    /// Optional. One-time windows within which actions are restricted.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub one_time_windows: std::vec::Vec<crate::model::OneTimeWindow>,

    /// Optional. Recurring weekly windows within which actions are restricted.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub weekly_windows: std::vec::Vec<crate::model::WeeklyWindow>,
}

impl TimeWindows {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [time_zone][crate::model::TimeWindows::time_zone].
    pub fn set_time_zone<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.time_zone = v.into();
        self
    }

    /// Sets the value of [one_time_windows][crate::model::TimeWindows::one_time_windows].
    pub fn set_one_time_windows<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::OneTimeWindow>,
    {
        use std::iter::Iterator;
        self.one_time_windows = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [weekly_windows][crate::model::TimeWindows::weekly_windows].
    pub fn set_weekly_windows<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::WeeklyWindow>,
    {
        use std::iter::Iterator;
        self.weekly_windows = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for TimeWindows {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.TimeWindows"
    }
}

/// One-time window within which actions are restricted. For example, blocking
/// actions over New Year's Eve from December 31st at 5pm to January 1st at 9am.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OneTimeWindow {
    /// Required. Start date.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_date: std::option::Option<gtype::model::Date>,

    /// Required. Start time (inclusive). Use 00:00 for the beginning of the day.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_time: std::option::Option<gtype::model::TimeOfDay>,

    /// Required. End date.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_date: std::option::Option<gtype::model::Date>,

    /// Required. End time (exclusive). You may use 24:00 for the end of the day.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<gtype::model::TimeOfDay>,
}

impl OneTimeWindow {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [start_date][crate::model::OneTimeWindow::start_date].
    pub fn set_start_date<T: std::convert::Into<std::option::Option<gtype::model::Date>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_date = v.into();
        self
    }

    /// Sets the value of [start_time][crate::model::OneTimeWindow::start_time].
    pub fn set_start_time<T: std::convert::Into<std::option::Option<gtype::model::TimeOfDay>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_time = v.into();
        self
    }

    /// Sets the value of [end_date][crate::model::OneTimeWindow::end_date].
    pub fn set_end_date<T: std::convert::Into<std::option::Option<gtype::model::Date>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_date = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::OneTimeWindow::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<gtype::model::TimeOfDay>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }
}

impl wkt::message::Message for OneTimeWindow {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.OneTimeWindow"
    }
}

/// Weekly windows. For example, blocking actions every Saturday and Sunday.
/// Another example would be blocking actions every weekday from 5pm to midnight.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct WeeklyWindow {
    /// Optional. Days of week. If left empty, all days of the week will be
    /// included.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub days_of_week: std::vec::Vec<gtype::model::DayOfWeek>,

    /// Optional. Start time (inclusive). Use 00:00 for the beginning of the day.
    /// If you specify start_time you must also specify end_time. If left empty,
    /// this will block for the entire day for the days specified in days_of_week.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_time: std::option::Option<gtype::model::TimeOfDay>,

    /// Optional. End time (exclusive). Use 24:00 to indicate midnight. If you
    /// specify end_time you must also specify start_time. If left empty, this will
    /// block for the entire day for the days specified in days_of_week.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<gtype::model::TimeOfDay>,
}

impl WeeklyWindow {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [start_time][crate::model::WeeklyWindow::start_time].
    pub fn set_start_time<T: std::convert::Into<std::option::Option<gtype::model::TimeOfDay>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::WeeklyWindow::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<gtype::model::TimeOfDay>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [days_of_week][crate::model::WeeklyWindow::days_of_week].
    pub fn set_days_of_week<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<gtype::model::DayOfWeek>,
    {
        use std::iter::Iterator;
        self.days_of_week = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for WeeklyWindow {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.WeeklyWindow"
    }
}

/// Returned from an action if one or more policies were
/// violated, and therefore the action was prevented. Contains information about
/// what policies were violated and why.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PolicyViolation {
    /// Policy violation details.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub policy_violation_details: std::vec::Vec<crate::model::PolicyViolationDetails>,
}

impl PolicyViolation {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [policy_violation_details][crate::model::PolicyViolation::policy_violation_details].
    pub fn set_policy_violation_details<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::PolicyViolationDetails>,
    {
        use std::iter::Iterator;
        self.policy_violation_details = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for PolicyViolation {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.PolicyViolation"
    }
}

/// Policy violation details.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PolicyViolationDetails {
    /// Name of the policy that was violated.
    /// Policy resource will be in the format of
    /// `projects/{project}/locations/{location}/policies/{policy}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub policy: std::string::String,

    /// Id of the rule that triggered the policy violation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rule_id: std::string::String,

    /// User readable message about why the request violated a policy. This is not
    /// intended for machine parsing.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub failure_message: std::string::String,
}

impl PolicyViolationDetails {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [policy][crate::model::PolicyViolationDetails::policy].
    pub fn set_policy<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.policy = v.into();
        self
    }

    /// Sets the value of [rule_id][crate::model::PolicyViolationDetails::rule_id].
    pub fn set_rule_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.rule_id = v.into();
        self
    }

    /// Sets the value of [failure_message][crate::model::PolicyViolationDetails::failure_message].
    pub fn set_failure_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.failure_message = v.into();
        self
    }
}

impl wkt::message::Message for PolicyViolationDetails {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.PolicyViolationDetails"
    }
}

/// A `Release` resource in the Cloud Deploy API.
///
/// A `Release` defines a specific Skaffold configuration instance
/// that can be deployed.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Release {
    /// Identifier. Name of the `Release`. Format is
    /// `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}`.
    /// The `release` component must match `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Unique identifier of the `Release`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uid: std::string::String,

    /// Optional. Description of the `Release`. Max length is 255 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. User annotations. These attributes can only be set and used by
    /// the user, and not by Cloud Deploy. See
    /// <https://google.aip.dev/128#annotations> for more details such as format and
    /// size limitations.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub annotations: std::collections::HashMap<std::string::String, std::string::String>,

    /// Labels are attributes that can be set and used by both the
    /// user and by Cloud Deploy. Labels must meet the following constraints:
    ///
    /// * Keys and values can contain only lowercase letters, numeric characters,
    ///   underscores, and dashes.
    /// * All characters must use UTF-8 encoding, and international characters are
    ///   allowed.
    /// * Keys must start with a lowercase letter or international character.
    /// * Each resource is limited to a maximum of 64 labels.
    ///
    /// Both keys and values are additionally constrained to be <= 128 bytes.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Output only. Indicates whether this is an abandoned release.
    pub abandoned: bool,

    /// Output only. Time at which the `Release` was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Time at which the render began.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub render_start_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Time at which the render completed.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub render_end_time: std::option::Option<wkt::Timestamp>,

    /// Optional. Cloud Storage URI of tar.gz archive containing Skaffold
    /// configuration.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub skaffold_config_uri: std::string::String,

    /// Optional. Filepath of the Skaffold config inside of the config URI.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub skaffold_config_path: std::string::String,

    /// Optional. List of artifacts to pass through to Skaffold command.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub build_artifacts: std::vec::Vec<crate::model::BuildArtifact>,

    /// Output only. Snapshot of the parent pipeline taken at release creation
    /// time.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub delivery_pipeline_snapshot: std::option::Option<crate::model::DeliveryPipeline>,

    /// Output only. Snapshot of the targets taken at release creation time.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub target_snapshots: std::vec::Vec<crate::model::Target>,

    /// Output only. Snapshot of the custom target types referenced by the targets
    /// taken at release creation time.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub custom_target_type_snapshots: std::vec::Vec<crate::model::CustomTargetType>,

    /// Output only. Current state of the render operation.
    pub render_state: crate::model::release::RenderState,

    /// This checksum is computed by the server based on the value of other
    /// fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub etag: std::string::String,

    /// Optional. The Skaffold version to use when operating on this release, such
    /// as "1.20.0". Not all versions are valid; Cloud Deploy supports a specific
    /// set of versions.
    ///
    /// If unset, the most recent supported Skaffold version will be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub skaffold_version: std::string::String,

    /// Output only. Map from target ID to the target artifacts created
    /// during the render operation.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub target_artifacts:
        std::collections::HashMap<std::string::String, crate::model::TargetArtifact>,

    /// Output only. Map from target ID to details of the render operation for that
    /// target.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub target_renders:
        std::collections::HashMap<std::string::String, crate::model::release::TargetRender>,

    /// Output only. Information around the state of the Release.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub condition: std::option::Option<crate::model::release::ReleaseCondition>,

    /// Optional. The deploy parameters to use for all targets in this release.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub deploy_parameters: std::collections::HashMap<std::string::String, std::string::String>,
}

impl Release {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Release::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [uid][crate::model::Release::uid].
    pub fn set_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uid = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Release::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [abandoned][crate::model::Release::abandoned].
    pub fn set_abandoned<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.abandoned = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Release::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [render_start_time][crate::model::Release::render_start_time].
    pub fn set_render_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.render_start_time = v.into();
        self
    }

    /// Sets the value of [render_end_time][crate::model::Release::render_end_time].
    pub fn set_render_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.render_end_time = v.into();
        self
    }

    /// Sets the value of [skaffold_config_uri][crate::model::Release::skaffold_config_uri].
    pub fn set_skaffold_config_uri<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.skaffold_config_uri = v.into();
        self
    }

    /// Sets the value of [skaffold_config_path][crate::model::Release::skaffold_config_path].
    pub fn set_skaffold_config_path<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.skaffold_config_path = v.into();
        self
    }

    /// Sets the value of [delivery_pipeline_snapshot][crate::model::Release::delivery_pipeline_snapshot].
    pub fn set_delivery_pipeline_snapshot<
        T: std::convert::Into<std::option::Option<crate::model::DeliveryPipeline>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.delivery_pipeline_snapshot = v.into();
        self
    }

    /// Sets the value of [render_state][crate::model::Release::render_state].
    pub fn set_render_state<T: std::convert::Into<crate::model::release::RenderState>>(
        mut self,
        v: T,
    ) -> Self {
        self.render_state = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::Release::etag].
    pub fn set_etag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.etag = v.into();
        self
    }

    /// Sets the value of [skaffold_version][crate::model::Release::skaffold_version].
    pub fn set_skaffold_version<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.skaffold_version = v.into();
        self
    }

    /// Sets the value of [condition][crate::model::Release::condition].
    pub fn set_condition<
        T: std::convert::Into<std::option::Option<crate::model::release::ReleaseCondition>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.condition = v.into();
        self
    }

    /// Sets the value of [build_artifacts][crate::model::Release::build_artifacts].
    pub fn set_build_artifacts<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::BuildArtifact>,
    {
        use std::iter::Iterator;
        self.build_artifacts = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [target_snapshots][crate::model::Release::target_snapshots].
    pub fn set_target_snapshots<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Target>,
    {
        use std::iter::Iterator;
        self.target_snapshots = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [custom_target_type_snapshots][crate::model::Release::custom_target_type_snapshots].
    pub fn set_custom_target_type_snapshots<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::CustomTargetType>,
    {
        use std::iter::Iterator;
        self.custom_target_type_snapshots = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [annotations][crate::model::Release::annotations].
    pub fn set_annotations<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.annotations = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [labels][crate::model::Release::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [target_artifacts][crate::model::Release::target_artifacts].
    pub fn set_target_artifacts<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::TargetArtifact>,
    {
        use std::iter::Iterator;
        self.target_artifacts = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [target_renders][crate::model::Release::target_renders].
    pub fn set_target_renders<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::release::TargetRender>,
    {
        use std::iter::Iterator;
        self.target_renders = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [deploy_parameters][crate::model::Release::deploy_parameters].
    pub fn set_deploy_parameters<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.deploy_parameters = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Release {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.Release"
    }
}

/// Defines additional types related to Release
pub mod release {
    #[allow(unused_imports)]
    use super::*;

    /// Details of rendering for a single target.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct TargetRender {
        /// Output only. The resource name of the Cloud Build `Build` object that is
        /// used to render the manifest for this target. Format is
        /// `projects/{project}/locations/{location}/builds/{build}`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub rendering_build: std::string::String,

        /// Output only. Current state of the render operation for this Target.
        pub rendering_state: crate::model::release::target_render::TargetRenderState,

        /// Output only. Metadata related to the `Release` render for this Target.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub metadata: std::option::Option<crate::model::RenderMetadata>,

        /// Output only. Reason this render failed. This will always be unspecified
        /// while the render in progress.
        pub failure_cause: crate::model::release::target_render::FailureCause,

        /// Output only. Additional information about the render failure, if
        /// available.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub failure_message: std::string::String,
    }

    impl TargetRender {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [rendering_build][crate::model::release::TargetRender::rendering_build].
        pub fn set_rendering_build<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.rendering_build = v.into();
            self
        }

        /// Sets the value of [rendering_state][crate::model::release::TargetRender::rendering_state].
        pub fn set_rendering_state<
            T: std::convert::Into<crate::model::release::target_render::TargetRenderState>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.rendering_state = v.into();
            self
        }

        /// Sets the value of [metadata][crate::model::release::TargetRender::metadata].
        pub fn set_metadata<
            T: std::convert::Into<std::option::Option<crate::model::RenderMetadata>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.metadata = v.into();
            self
        }

        /// Sets the value of [failure_cause][crate::model::release::TargetRender::failure_cause].
        pub fn set_failure_cause<
            T: std::convert::Into<crate::model::release::target_render::FailureCause>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.failure_cause = v.into();
            self
        }

        /// Sets the value of [failure_message][crate::model::release::TargetRender::failure_message].
        pub fn set_failure_message<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.failure_message = v.into();
            self
        }
    }

    impl wkt::message::Message for TargetRender {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.deploy.v1.Release.TargetRender"
        }
    }

    /// Defines additional types related to TargetRender
    pub mod target_render {
        #[allow(unused_imports)]
        use super::*;

        /// Valid states of the render operation.
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct TargetRenderState(std::borrow::Cow<'static, str>);

        impl TargetRenderState {
            /// Creates a new TargetRenderState instance.
            pub const fn new(v: &'static str) -> Self {
                Self(std::borrow::Cow::Borrowed(v))
            }

            /// Gets the enum value.
            pub fn value(&self) -> &str {
                &self.0
            }
        }

        /// Useful constants to work with [TargetRenderState](TargetRenderState)
        pub mod target_render_state {
            use super::TargetRenderState;

            /// The render operation state is unspecified.
            pub const TARGET_RENDER_STATE_UNSPECIFIED: TargetRenderState =
                TargetRenderState::new("TARGET_RENDER_STATE_UNSPECIFIED");

            /// The render operation has completed successfully.
            pub const SUCCEEDED: TargetRenderState = TargetRenderState::new("SUCCEEDED");

            /// The render operation has failed.
            pub const FAILED: TargetRenderState = TargetRenderState::new("FAILED");

            /// The render operation is in progress.
            pub const IN_PROGRESS: TargetRenderState = TargetRenderState::new("IN_PROGRESS");
        }

        impl std::convert::From<std::string::String> for TargetRenderState {
            fn from(value: std::string::String) -> Self {
                Self(std::borrow::Cow::Owned(value))
            }
        }

        /// Well-known rendering failures.
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct FailureCause(std::borrow::Cow<'static, str>);

        impl FailureCause {
            /// Creates a new FailureCause instance.
            pub const fn new(v: &'static str) -> Self {
                Self(std::borrow::Cow::Borrowed(v))
            }

            /// Gets the enum value.
            pub fn value(&self) -> &str {
                &self.0
            }
        }

        /// Useful constants to work with [FailureCause](FailureCause)
        pub mod failure_cause {
            use super::FailureCause;

            /// No reason for failure is specified.
            pub const FAILURE_CAUSE_UNSPECIFIED: FailureCause =
                FailureCause::new("FAILURE_CAUSE_UNSPECIFIED");

            /// Cloud Build is not available, either because it is not enabled or
            /// because Cloud Deploy has insufficient permissions. See [required
            /// permission](https://cloud.google.com/deploy/docs/cloud-deploy-service-account#required_permissions).
            pub const CLOUD_BUILD_UNAVAILABLE: FailureCause =
                FailureCause::new("CLOUD_BUILD_UNAVAILABLE");

            /// The render operation did not complete successfully; check Cloud Build
            /// logs.
            pub const EXECUTION_FAILED: FailureCause = FailureCause::new("EXECUTION_FAILED");

            /// Cloud Build failed to fulfill Cloud Deploy's request. See
            /// failure_message for additional details.
            pub const CLOUD_BUILD_REQUEST_FAILED: FailureCause =
                FailureCause::new("CLOUD_BUILD_REQUEST_FAILED");

            /// The render operation did not complete successfully because the
            /// verification stanza required for verify was not found on the Skaffold
            /// configuration.
            pub const VERIFICATION_CONFIG_NOT_FOUND: FailureCause =
                FailureCause::new("VERIFICATION_CONFIG_NOT_FOUND");

            /// The render operation did not complete successfully because the custom
            /// action required for predeploy or postdeploy was not found in the
            /// Skaffold configuration. See failure_message for additional details.
            pub const CUSTOM_ACTION_NOT_FOUND: FailureCause =
                FailureCause::new("CUSTOM_ACTION_NOT_FOUND");

            /// Release failed during rendering because the release configuration is
            /// not supported with the specified deployment strategy.
            pub const DEPLOYMENT_STRATEGY_NOT_SUPPORTED: FailureCause =
                FailureCause::new("DEPLOYMENT_STRATEGY_NOT_SUPPORTED");

            /// The render operation had a feature configured that is not supported.
            pub const RENDER_FEATURE_NOT_SUPPORTED: FailureCause =
                FailureCause::new("RENDER_FEATURE_NOT_SUPPORTED");
        }

        impl std::convert::From<std::string::String> for FailureCause {
            fn from(value: std::string::String) -> Self {
                Self(std::borrow::Cow::Owned(value))
            }
        }
    }

    /// ReleaseReadyCondition contains information around the status of the
    /// Release. If a release is not ready, you cannot create a rollout with the
    /// release.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ReleaseReadyCondition {
        /// True if the Release is in a valid state. Otherwise at least one condition
        /// in `ReleaseCondition` is in an invalid state. Iterate over those
        /// conditions and see which condition(s) has status = false to find out what
        /// is wrong with the Release.
        pub status: bool,
    }

    impl ReleaseReadyCondition {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [status][crate::model::release::ReleaseReadyCondition::status].
        pub fn set_status<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.status = v.into();
            self
        }
    }

    impl wkt::message::Message for ReleaseReadyCondition {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.deploy.v1.Release.ReleaseReadyCondition"
        }
    }

    /// SkaffoldSupportedCondition contains information about when support for the
    /// release's version of Skaffold ends.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SkaffoldSupportedCondition {
        /// True if the version of Skaffold used by this release is supported.
        pub status: bool,

        /// The Skaffold support state for this release's version of Skaffold.
        pub skaffold_support_state: crate::model::SkaffoldSupportState,

        /// The time at which this release's version of Skaffold will enter
        /// maintenance mode.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub maintenance_mode_time: std::option::Option<wkt::Timestamp>,

        /// The time at which this release's version of Skaffold will no longer be
        /// supported.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub support_expiration_time: std::option::Option<wkt::Timestamp>,
    }

    impl SkaffoldSupportedCondition {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [status][crate::model::release::SkaffoldSupportedCondition::status].
        pub fn set_status<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.status = v.into();
            self
        }

        /// Sets the value of [skaffold_support_state][crate::model::release::SkaffoldSupportedCondition::skaffold_support_state].
        pub fn set_skaffold_support_state<
            T: std::convert::Into<crate::model::SkaffoldSupportState>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.skaffold_support_state = v.into();
            self
        }

        /// Sets the value of [maintenance_mode_time][crate::model::release::SkaffoldSupportedCondition::maintenance_mode_time].
        pub fn set_maintenance_mode_time<
            T: std::convert::Into<std::option::Option<wkt::Timestamp>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.maintenance_mode_time = v.into();
            self
        }

        /// Sets the value of [support_expiration_time][crate::model::release::SkaffoldSupportedCondition::support_expiration_time].
        pub fn set_support_expiration_time<
            T: std::convert::Into<std::option::Option<wkt::Timestamp>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.support_expiration_time = v.into();
            self
        }
    }

    impl wkt::message::Message for SkaffoldSupportedCondition {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.deploy.v1.Release.SkaffoldSupportedCondition"
        }
    }

    /// ReleaseCondition contains all conditions relevant to a Release.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ReleaseCondition {
        /// Details around the Releases's overall status.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub release_ready_condition:
            std::option::Option<crate::model::release::ReleaseReadyCondition>,

        /// Details around the support state of the release's Skaffold
        /// version.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub skaffold_supported_condition:
            std::option::Option<crate::model::release::SkaffoldSupportedCondition>,
    }

    impl ReleaseCondition {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [release_ready_condition][crate::model::release::ReleaseCondition::release_ready_condition].
        pub fn set_release_ready_condition<
            T: std::convert::Into<std::option::Option<crate::model::release::ReleaseReadyCondition>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.release_ready_condition = v.into();
            self
        }

        /// Sets the value of [skaffold_supported_condition][crate::model::release::ReleaseCondition::skaffold_supported_condition].
        pub fn set_skaffold_supported_condition<
            T: std::convert::Into<
                std::option::Option<crate::model::release::SkaffoldSupportedCondition>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.skaffold_supported_condition = v.into();
            self
        }
    }

    impl wkt::message::Message for ReleaseCondition {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.deploy.v1.Release.ReleaseCondition"
        }
    }

    /// Valid states of the render operation.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct RenderState(std::borrow::Cow<'static, str>);

    impl RenderState {
        /// Creates a new RenderState instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [RenderState](RenderState)
    pub mod render_state {
        use super::RenderState;

        /// The render state is unspecified.
        pub const RENDER_STATE_UNSPECIFIED: RenderState =
            RenderState::new("RENDER_STATE_UNSPECIFIED");

        /// All rendering operations have completed successfully.
        pub const SUCCEEDED: RenderState = RenderState::new("SUCCEEDED");

        /// All rendering operations have completed, and one or more have failed.
        pub const FAILED: RenderState = RenderState::new("FAILED");

        /// Rendering has started and is not complete.
        pub const IN_PROGRESS: RenderState = RenderState::new("IN_PROGRESS");
    }

    impl std::convert::From<std::string::String> for RenderState {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// The request object for `CreateDeployPolicy`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateDeployPolicyRequest {
    /// Required. The parent collection in which the `DeployPolicy` must be
    /// created. The format is `projects/{project_id}/locations/{location_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. ID of the `DeployPolicy`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub deploy_policy_id: std::string::String,

    /// Required. The `DeployPolicy` to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub deploy_policy: std::option::Option<crate::model::DeployPolicy>,

    /// Optional. A request ID to identify requests. Specify a unique request ID
    /// so that if you must retry your request, the server knows to ignore the
    /// request if it has already been completed. The server guarantees that for
    /// at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set to true, the request is validated and the user is provided
    /// with an expected result, but no actual change is made.
    pub validate_only: bool,
}

impl CreateDeployPolicyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateDeployPolicyRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [deploy_policy_id][crate::model::CreateDeployPolicyRequest::deploy_policy_id].
    pub fn set_deploy_policy_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.deploy_policy_id = v.into();
        self
    }

    /// Sets the value of [deploy_policy][crate::model::CreateDeployPolicyRequest::deploy_policy].
    pub fn set_deploy_policy<
        T: std::convert::Into<std::option::Option<crate::model::DeployPolicy>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.deploy_policy = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateDeployPolicyRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::CreateDeployPolicyRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }
}

impl wkt::message::Message for CreateDeployPolicyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CreateDeployPolicyRequest"
    }
}

/// The request object for `UpdateDeployPolicy`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateDeployPolicyRequest {
    /// Required. Field mask is used to specify the fields to be overwritten by the
    /// update in the `DeployPolicy` resource. The fields specified in the
    /// update_mask are relative to the resource, not the full request. A field
    /// will be overwritten if it's in the mask. If the user doesn't provide a mask
    /// then all fields are overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The `DeployPolicy` to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub deploy_policy: std::option::Option<crate::model::DeployPolicy>,

    /// Optional. A request ID to identify requests. Specify a unique request ID
    /// so that if you must retry your request, the server knows to ignore the
    /// request if it has already been completed. The server guarantees that for
    /// at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set to true, updating a `DeployPolicy` that does not exist
    /// will result in the creation of a new `DeployPolicy`.
    pub allow_missing: bool,

    /// Optional. If set to true, the request is validated and the user is provided
    /// with an expected result, but no actual change is made.
    pub validate_only: bool,
}

impl UpdateDeployPolicyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateDeployPolicyRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [deploy_policy][crate::model::UpdateDeployPolicyRequest::deploy_policy].
    pub fn set_deploy_policy<
        T: std::convert::Into<std::option::Option<crate::model::DeployPolicy>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.deploy_policy = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateDeployPolicyRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [allow_missing][crate::model::UpdateDeployPolicyRequest::allow_missing].
    pub fn set_allow_missing<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.allow_missing = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::UpdateDeployPolicyRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }
}

impl wkt::message::Message for UpdateDeployPolicyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.UpdateDeployPolicyRequest"
    }
}

/// The request object for `DeleteDeployPolicy`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteDeployPolicyRequest {
    /// Required. The name of the `DeployPolicy` to delete. The format is
    /// `projects/{project_id}/locations/{location_name}/deployPolicies/{deploy_policy_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. A request ID to identify requests. Specify a unique request ID
    /// so that if you must retry your request, the server knows to ignore the
    /// request if it has already been completed. The server guarantees that for
    /// at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set to true, then deleting an already deleted or non-existing
    /// `DeployPolicy` will succeed.
    pub allow_missing: bool,

    /// Optional. If set, validate the request and preview the review, but do not
    /// actually post it.
    pub validate_only: bool,

    /// Optional. This checksum is computed by the server based on the value of
    /// other fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub etag: std::string::String,
}

impl DeleteDeployPolicyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteDeployPolicyRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteDeployPolicyRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [allow_missing][crate::model::DeleteDeployPolicyRequest::allow_missing].
    pub fn set_allow_missing<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.allow_missing = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::DeleteDeployPolicyRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::DeleteDeployPolicyRequest::etag].
    pub fn set_etag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.etag = v.into();
        self
    }
}

impl wkt::message::Message for DeleteDeployPolicyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.DeleteDeployPolicyRequest"
    }
}

/// The request object for `ListDeployPolicies`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListDeployPoliciesRequest {
    /// Required. The parent, which owns this collection of deploy policies. Format
    /// must be `projects/{project_id}/locations/{location_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of deploy policies to return. The service may return
    /// fewer than this value. If unspecified, at most 50 deploy policies will
    /// be returned. The maximum value is 1000; values above 1000 will be set
    /// to 1000.
    pub page_size: i32,

    /// A page token, received from a previous `ListDeployPolicies` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other provided parameters match
    /// the call that provided the page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Filter deploy policies to be returned. See <https://google.aip.dev/160> for
    /// more details. All fields can be used in the filter.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Field to sort by. See <https://google.aip.dev/132#ordering> for more details.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListDeployPoliciesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListDeployPoliciesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListDeployPoliciesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListDeployPoliciesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListDeployPoliciesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListDeployPoliciesRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListDeployPoliciesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.ListDeployPoliciesRequest"
    }
}

/// The response object from `ListDeployPolicies`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListDeployPoliciesResponse {
    /// The `DeployPolicy` objects.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub deploy_policies: std::vec::Vec<crate::model::DeployPolicy>,

    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListDeployPoliciesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListDeployPoliciesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [deploy_policies][crate::model::ListDeployPoliciesResponse::deploy_policies].
    pub fn set_deploy_policies<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::DeployPolicy>,
    {
        use std::iter::Iterator;
        self.deploy_policies = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListDeployPoliciesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListDeployPoliciesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.ListDeployPoliciesResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListDeployPoliciesResponse {
    type PageItem = crate::model::DeployPolicy;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.deploy_policies
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// The request object for `GetDeployPolicy`
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetDeployPolicyRequest {
    /// Required. Name of the `DeployPolicy`. Format must be
    /// `projects/{project_id}/locations/{location_name}/deployPolicies/{deploy_policy_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetDeployPolicyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetDeployPolicyRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetDeployPolicyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.GetDeployPolicyRequest"
    }
}

/// Description of an a image to use during Skaffold rendering.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BuildArtifact {
    /// Optional. Image name in Skaffold configuration.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub image: std::string::String,

    /// Optional. Image tag to use. This will generally be the full path to an
    /// image, such as "gcr.io/my-project/busybox:1.2.3" or
    /// "gcr.io/my-project/busybox@sha256:abc123".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub tag: std::string::String,
}

impl BuildArtifact {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [image][crate::model::BuildArtifact::image].
    pub fn set_image<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.image = v.into();
        self
    }

    /// Sets the value of [tag][crate::model::BuildArtifact::tag].
    pub fn set_tag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.tag = v.into();
        self
    }
}

impl wkt::message::Message for BuildArtifact {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.BuildArtifact"
    }
}

/// The artifacts produced by a target render operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TargetArtifact {
    /// Output only. File path of the resolved Skaffold configuration relative to
    /// the URI.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub skaffold_config_path: std::string::String,

    /// Output only. File path of the rendered manifest relative to the URI.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub manifest_path: std::string::String,

    /// Output only. Map from the phase ID to the phase artifacts for the `Target`.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub phase_artifacts: std::collections::HashMap<
        std::string::String,
        crate::model::target_artifact::PhaseArtifact,
    >,

    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub uri: std::option::Option<crate::model::target_artifact::Uri>,
}

impl TargetArtifact {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [skaffold_config_path][crate::model::TargetArtifact::skaffold_config_path].
    pub fn set_skaffold_config_path<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.skaffold_config_path = v.into();
        self
    }

    /// Sets the value of [manifest_path][crate::model::TargetArtifact::manifest_path].
    pub fn set_manifest_path<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.manifest_path = v.into();
        self
    }

    /// Sets the value of [phase_artifacts][crate::model::TargetArtifact::phase_artifacts].
    pub fn set_phase_artifacts<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::target_artifact::PhaseArtifact>,
    {
        use std::iter::Iterator;
        self.phase_artifacts = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of `uri`.
    pub fn set_uri<
        T: std::convert::Into<std::option::Option<crate::model::target_artifact::Uri>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.uri = v.into();
        self
    }

    /// The value of [uri][crate::model::TargetArtifact::uri]
    /// if it holds a `ArtifactUri`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_artifact_uri(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.uri.as_ref().and_then(|v| match v {
            crate::model::target_artifact::Uri::ArtifactUri(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [uri][crate::model::TargetArtifact::uri]
    /// to hold a `ArtifactUri`.
    ///
    /// Note that all the setters affecting `uri` are
    /// mutually exclusive.
    pub fn set_artifact_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uri =
            std::option::Option::Some(crate::model::target_artifact::Uri::ArtifactUri(v.into()));
        self
    }
}

impl wkt::message::Message for TargetArtifact {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.TargetArtifact"
    }
}

/// Defines additional types related to TargetArtifact
pub mod target_artifact {
    #[allow(unused_imports)]
    use super::*;

    /// Contains the paths to the artifacts, relative to the URI, for a phase.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct PhaseArtifact {
        /// Output only. File path of the resolved Skaffold configuration relative to
        /// the URI.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub skaffold_config_path: std::string::String,

        /// Output only. File path of the rendered manifest relative to the URI.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub manifest_path: std::string::String,

        /// Output only. File path of the directory of rendered job manifests
        /// relative to the URI. This is only set if it is applicable.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub job_manifests_path: std::string::String,
    }

    impl PhaseArtifact {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [skaffold_config_path][crate::model::target_artifact::PhaseArtifact::skaffold_config_path].
        pub fn set_skaffold_config_path<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.skaffold_config_path = v.into();
            self
        }

        /// Sets the value of [manifest_path][crate::model::target_artifact::PhaseArtifact::manifest_path].
        pub fn set_manifest_path<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.manifest_path = v.into();
            self
        }

        /// Sets the value of [job_manifests_path][crate::model::target_artifact::PhaseArtifact::job_manifests_path].
        pub fn set_job_manifests_path<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.job_manifests_path = v.into();
            self
        }
    }

    impl wkt::message::Message for PhaseArtifact {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.deploy.v1.TargetArtifact.PhaseArtifact"
        }
    }

    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Uri {
        /// Output only. URI of a directory containing the artifacts. This contains
        /// deployment configuration used by Skaffold during a rollout, and all
        /// paths are relative to this location.
        ArtifactUri(std::string::String),
    }
}

/// The artifacts produced by a deploy operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeployArtifact {
    /// Output only. URI of a directory containing the artifacts. All paths are
    /// relative to this location.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub artifact_uri: std::string::String,

    /// Output only. File paths of the manifests applied during the deploy
    /// operation relative to the URI.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub manifest_paths: std::vec::Vec<std::string::String>,
}

impl DeployArtifact {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [artifact_uri][crate::model::DeployArtifact::artifact_uri].
    pub fn set_artifact_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.artifact_uri = v.into();
        self
    }

    /// Sets the value of [manifest_paths][crate::model::DeployArtifact::manifest_paths].
    pub fn set_manifest_paths<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.manifest_paths = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for DeployArtifact {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.DeployArtifact"
    }
}

/// CloudRunRenderMetadata contains Cloud Run information associated with a
/// `Release` render.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CloudRunRenderMetadata {
    /// Output only. The name of the Cloud Run Service in the rendered manifest.
    /// Format is `projects/{project}/locations/{location}/services/{service}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service: std::string::String,
}

impl CloudRunRenderMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [service][crate::model::CloudRunRenderMetadata::service].
    pub fn set_service<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service = v.into();
        self
    }
}

impl wkt::message::Message for CloudRunRenderMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CloudRunRenderMetadata"
    }
}

/// RenderMetadata includes information associated with a `Release` render.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RenderMetadata {
    /// Output only. Metadata associated with rendering for Cloud Run.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub cloud_run: std::option::Option<crate::model::CloudRunRenderMetadata>,

    /// Output only. Custom metadata provided by user-defined render operation.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub custom: std::option::Option<crate::model::CustomMetadata>,
}

impl RenderMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [cloud_run][crate::model::RenderMetadata::cloud_run].
    pub fn set_cloud_run<
        T: std::convert::Into<std::option::Option<crate::model::CloudRunRenderMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.cloud_run = v.into();
        self
    }

    /// Sets the value of [custom][crate::model::RenderMetadata::custom].
    pub fn set_custom<T: std::convert::Into<std::option::Option<crate::model::CustomMetadata>>>(
        mut self,
        v: T,
    ) -> Self {
        self.custom = v.into();
        self
    }
}

impl wkt::message::Message for RenderMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.RenderMetadata"
    }
}

/// The request object for `ListReleases`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListReleasesRequest {
    /// Required. The `DeliveryPipeline` which owns this collection of `Release`
    /// objects.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of `Release` objects to return. The service
    /// may return fewer than this value. If unspecified, at most 50 `Release`
    /// objects will be returned. The maximum value is 1000; values above 1000 will
    /// be set to 1000.
    pub page_size: i32,

    /// Optional. A page token, received from a previous `ListReleases` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other provided parameters match
    /// the call that provided the page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. Filter releases to be returned. See <https://google.aip.dev/160>
    /// for more details.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. Field to sort by. See <https://google.aip.dev/132#ordering> for
    /// more details.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListReleasesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListReleasesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListReleasesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListReleasesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListReleasesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListReleasesRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListReleasesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.ListReleasesRequest"
    }
}

/// The response object from `ListReleases`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListReleasesResponse {
    /// The `Release` objects.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub releases: std::vec::Vec<crate::model::Release>,

    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListReleasesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListReleasesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [releases][crate::model::ListReleasesResponse::releases].
    pub fn set_releases<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Release>,
    {
        use std::iter::Iterator;
        self.releases = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListReleasesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListReleasesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.ListReleasesResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListReleasesResponse {
    type PageItem = crate::model::Release;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.releases
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// The request object for `GetRelease`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetReleaseRequest {
    /// Required. Name of the `Release`. Format must be
    /// `projects/{project_id}/locations/{location_name}/deliveryPipelines/{pipeline_name}/releases/{release_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetReleaseRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetReleaseRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetReleaseRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.GetReleaseRequest"
    }
}

/// The request object for `CreateRelease`,
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateReleaseRequest {
    /// Required. The parent collection in which the `Release` is created.
    /// The format is
    /// `projects/{project_id}/locations/{location_name}/deliveryPipelines/{pipeline_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. ID of the `Release`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub release_id: std::string::String,

    /// Required. The `Release` to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub release: std::option::Option<crate::model::Release>,

    /// Optional. A request ID to identify requests. Specify a unique request ID
    /// so that if you must retry your request, the server knows to ignore the
    /// request if it has already been completed. The server guarantees that for
    /// at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set to true, the request is validated and the user is provided
    /// with an expected result, but no actual change is made.
    pub validate_only: bool,

    /// Optional. Deploy policies to override. Format is
    /// `projects/{project}/locations/{location}/deployPolicies/{deployPolicy}`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub override_deploy_policy: std::vec::Vec<std::string::String>,
}

impl CreateReleaseRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateReleaseRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [release_id][crate::model::CreateReleaseRequest::release_id].
    pub fn set_release_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.release_id = v.into();
        self
    }

    /// Sets the value of [release][crate::model::CreateReleaseRequest::release].
    pub fn set_release<T: std::convert::Into<std::option::Option<crate::model::Release>>>(
        mut self,
        v: T,
    ) -> Self {
        self.release = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateReleaseRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::CreateReleaseRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }

    /// Sets the value of [override_deploy_policy][crate::model::CreateReleaseRequest::override_deploy_policy].
    pub fn set_override_deploy_policy<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.override_deploy_policy = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for CreateReleaseRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CreateReleaseRequest"
    }
}

/// A `Rollout` resource in the Cloud Deploy API.
///
/// A `Rollout` contains information around a specific deployment to a `Target`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Rollout {
    /// Identifier. Name of the `Rollout`. Format is
    /// `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/{rollout}`.
    /// The `rollout` component must match `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Unique identifier of the `Rollout`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uid: std::string::String,

    /// Optional. Description of the `Rollout` for user purposes. Max length is 255
    /// characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. User annotations. These attributes can only be set and used by
    /// the user, and not by Cloud Deploy. See
    /// <https://google.aip.dev/128#annotations> for more details such as format and
    /// size limitations.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub annotations: std::collections::HashMap<std::string::String, std::string::String>,

    /// Labels are attributes that can be set and used by both the
    /// user and by Cloud Deploy. Labels must meet the following constraints:
    ///
    /// * Keys and values can contain only lowercase letters, numeric characters,
    ///   underscores, and dashes.
    /// * All characters must use UTF-8 encoding, and international characters are
    ///   allowed.
    /// * Keys must start with a lowercase letter or international character.
    /// * Each resource is limited to a maximum of 64 labels.
    ///
    /// Both keys and values are additionally constrained to be <= 128 bytes.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Output only. Time at which the `Rollout` was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Time at which the `Rollout` was approved.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub approve_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Time at which the `Rollout` was enqueued.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub enqueue_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Time at which the `Rollout` started deploying.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub deploy_start_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Time at which the `Rollout` finished deploying.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub deploy_end_time: std::option::Option<wkt::Timestamp>,

    /// Required. The ID of Target to which this `Rollout` is deploying.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target_id: std::string::String,

    /// Output only. Approval state of the `Rollout`.
    pub approval_state: crate::model::rollout::ApprovalState,

    /// Output only. Current state of the `Rollout`.
    pub state: crate::model::rollout::State,

    /// Output only. Additional information about the rollout failure, if
    /// available.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub failure_reason: std::string::String,

    /// Output only. The resource name of the Cloud Build `Build` object that is
    /// used to deploy the Rollout. Format is
    /// `projects/{project}/locations/{location}/builds/{build}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub deploying_build: std::string::String,

    /// This checksum is computed by the server based on the value of other
    /// fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub etag: std::string::String,

    /// Output only. The reason this rollout failed. This will always be
    /// unspecified while the rollout is in progress.
    pub deploy_failure_cause: crate::model::rollout::FailureCause,

    /// Output only. The phases that represent the workflows of this `Rollout`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub phases: std::vec::Vec<crate::model::Phase>,

    /// Output only. Metadata contains information about the rollout.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub metadata: std::option::Option<crate::model::Metadata>,

    /// Output only. Name of the `ControllerRollout`. Format is
    /// `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/{rollout}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub controller_rollout: std::string::String,

    /// Output only. Name of the `Rollout` that is rolled back by this `Rollout`.
    /// Empty if this `Rollout` wasn't created as a rollback.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rollback_of_rollout: std::string::String,

    /// Output only. Names of `Rollouts` that rolled back this `Rollout`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub rolled_back_by_rollouts: std::vec::Vec<std::string::String>,

    /// Output only. The AutomationRun actively repairing the rollout.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub active_repair_automation_run: std::string::String,
}

impl Rollout {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Rollout::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [uid][crate::model::Rollout::uid].
    pub fn set_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uid = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Rollout::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Rollout::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [approve_time][crate::model::Rollout::approve_time].
    pub fn set_approve_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.approve_time = v.into();
        self
    }

    /// Sets the value of [enqueue_time][crate::model::Rollout::enqueue_time].
    pub fn set_enqueue_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.enqueue_time = v.into();
        self
    }

    /// Sets the value of [deploy_start_time][crate::model::Rollout::deploy_start_time].
    pub fn set_deploy_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.deploy_start_time = v.into();
        self
    }

    /// Sets the value of [deploy_end_time][crate::model::Rollout::deploy_end_time].
    pub fn set_deploy_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.deploy_end_time = v.into();
        self
    }

    /// Sets the value of [target_id][crate::model::Rollout::target_id].
    pub fn set_target_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target_id = v.into();
        self
    }

    /// Sets the value of [approval_state][crate::model::Rollout::approval_state].
    pub fn set_approval_state<T: std::convert::Into<crate::model::rollout::ApprovalState>>(
        mut self,
        v: T,
    ) -> Self {
        self.approval_state = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Rollout::state].
    pub fn set_state<T: std::convert::Into<crate::model::rollout::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [failure_reason][crate::model::Rollout::failure_reason].
    pub fn set_failure_reason<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.failure_reason = v.into();
        self
    }

    /// Sets the value of [deploying_build][crate::model::Rollout::deploying_build].
    pub fn set_deploying_build<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.deploying_build = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::Rollout::etag].
    pub fn set_etag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.etag = v.into();
        self
    }

    /// Sets the value of [deploy_failure_cause][crate::model::Rollout::deploy_failure_cause].
    pub fn set_deploy_failure_cause<T: std::convert::Into<crate::model::rollout::FailureCause>>(
        mut self,
        v: T,
    ) -> Self {
        self.deploy_failure_cause = v.into();
        self
    }

    /// Sets the value of [metadata][crate::model::Rollout::metadata].
    pub fn set_metadata<T: std::convert::Into<std::option::Option<crate::model::Metadata>>>(
        mut self,
        v: T,
    ) -> Self {
        self.metadata = v.into();
        self
    }

    /// Sets the value of [controller_rollout][crate::model::Rollout::controller_rollout].
    pub fn set_controller_rollout<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.controller_rollout = v.into();
        self
    }

    /// Sets the value of [rollback_of_rollout][crate::model::Rollout::rollback_of_rollout].
    pub fn set_rollback_of_rollout<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.rollback_of_rollout = v.into();
        self
    }

    /// Sets the value of [active_repair_automation_run][crate::model::Rollout::active_repair_automation_run].
    pub fn set_active_repair_automation_run<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.active_repair_automation_run = v.into();
        self
    }

    /// Sets the value of [phases][crate::model::Rollout::phases].
    pub fn set_phases<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Phase>,
    {
        use std::iter::Iterator;
        self.phases = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [rolled_back_by_rollouts][crate::model::Rollout::rolled_back_by_rollouts].
    pub fn set_rolled_back_by_rollouts<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.rolled_back_by_rollouts = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [annotations][crate::model::Rollout::annotations].
    pub fn set_annotations<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.annotations = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [labels][crate::model::Rollout::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Rollout {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.Rollout"
    }
}

/// Defines additional types related to Rollout
pub mod rollout {
    #[allow(unused_imports)]
    use super::*;

    /// Valid approval states of a `Rollout`.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct ApprovalState(std::borrow::Cow<'static, str>);

    impl ApprovalState {
        /// Creates a new ApprovalState instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [ApprovalState](ApprovalState)
    pub mod approval_state {
        use super::ApprovalState;

        /// The `Rollout` has an unspecified approval state.
        pub const APPROVAL_STATE_UNSPECIFIED: ApprovalState =
            ApprovalState::new("APPROVAL_STATE_UNSPECIFIED");

        /// The `Rollout` requires approval.
        pub const NEEDS_APPROVAL: ApprovalState = ApprovalState::new("NEEDS_APPROVAL");

        /// The `Rollout` does not require approval.
        pub const DOES_NOT_NEED_APPROVAL: ApprovalState =
            ApprovalState::new("DOES_NOT_NEED_APPROVAL");

        /// The `Rollout` has been approved.
        pub const APPROVED: ApprovalState = ApprovalState::new("APPROVED");

        /// The `Rollout` has been rejected.
        pub const REJECTED: ApprovalState = ApprovalState::new("REJECTED");
    }

    impl std::convert::From<std::string::String> for ApprovalState {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// Valid states of a `Rollout`.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(std::borrow::Cow<'static, str>);

    impl State {
        /// Creates a new State instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [State](State)
    pub mod state {
        use super::State;

        /// The `Rollout` has an unspecified state.
        pub const STATE_UNSPECIFIED: State = State::new("STATE_UNSPECIFIED");

        /// The `Rollout` has completed successfully.
        pub const SUCCEEDED: State = State::new("SUCCEEDED");

        /// The `Rollout` has failed.
        pub const FAILED: State = State::new("FAILED");

        /// The `Rollout` is being deployed.
        pub const IN_PROGRESS: State = State::new("IN_PROGRESS");

        /// The `Rollout` needs approval.
        pub const PENDING_APPROVAL: State = State::new("PENDING_APPROVAL");

        /// An approver rejected the `Rollout`.
        pub const APPROVAL_REJECTED: State = State::new("APPROVAL_REJECTED");

        /// The `Rollout` is waiting for an earlier Rollout(s) to complete on this
        /// `Target`.
        pub const PENDING: State = State::new("PENDING");

        /// The `Rollout` is waiting for the `Release` to be fully rendered.
        pub const PENDING_RELEASE: State = State::new("PENDING_RELEASE");

        /// The `Rollout` is in the process of being cancelled.
        pub const CANCELLING: State = State::new("CANCELLING");

        /// The `Rollout` has been cancelled.
        pub const CANCELLED: State = State::new("CANCELLED");

        /// The `Rollout` is halted.
        pub const HALTED: State = State::new("HALTED");
    }

    impl std::convert::From<std::string::String> for State {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// Well-known rollout failures.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct FailureCause(std::borrow::Cow<'static, str>);

    impl FailureCause {
        /// Creates a new FailureCause instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [FailureCause](FailureCause)
    pub mod failure_cause {
        use super::FailureCause;

        /// No reason for failure is specified.
        pub const FAILURE_CAUSE_UNSPECIFIED: FailureCause =
            FailureCause::new("FAILURE_CAUSE_UNSPECIFIED");

        /// Cloud Build is not available, either because it is not enabled or because
        /// Cloud Deploy has insufficient permissions. See [required
        /// permission](https://cloud.google.com/deploy/docs/cloud-deploy-service-account#required_permissions).
        pub const CLOUD_BUILD_UNAVAILABLE: FailureCause =
            FailureCause::new("CLOUD_BUILD_UNAVAILABLE");

        /// The deploy operation did not complete successfully; check Cloud Build
        /// logs.
        pub const EXECUTION_FAILED: FailureCause = FailureCause::new("EXECUTION_FAILED");

        /// Deployment did not complete within the alloted time.
        pub const DEADLINE_EXCEEDED: FailureCause = FailureCause::new("DEADLINE_EXCEEDED");

        /// Release is in a failed state.
        pub const RELEASE_FAILED: FailureCause = FailureCause::new("RELEASE_FAILED");

        /// Release is abandoned.
        pub const RELEASE_ABANDONED: FailureCause = FailureCause::new("RELEASE_ABANDONED");

        /// No Skaffold verify configuration was found.
        pub const VERIFICATION_CONFIG_NOT_FOUND: FailureCause =
            FailureCause::new("VERIFICATION_CONFIG_NOT_FOUND");

        /// Cloud Build failed to fulfill Cloud Deploy's request. See failure_message
        /// for additional details.
        pub const CLOUD_BUILD_REQUEST_FAILED: FailureCause =
            FailureCause::new("CLOUD_BUILD_REQUEST_FAILED");

        /// A Rollout operation had a feature configured that is not supported.
        pub const OPERATION_FEATURE_NOT_SUPPORTED: FailureCause =
            FailureCause::new("OPERATION_FEATURE_NOT_SUPPORTED");
    }

    impl std::convert::From<std::string::String> for FailureCause {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Metadata includes information associated with a `Rollout`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Metadata {
    /// Output only. The name of the Cloud Run Service that is associated with a
    /// `Rollout`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub cloud_run: std::option::Option<crate::model::CloudRunMetadata>,

    /// Output only. AutomationRolloutMetadata contains the information about the
    /// interactions between Automation service and this rollout.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub automation: std::option::Option<crate::model::AutomationRolloutMetadata>,

    /// Output only. Custom metadata provided by user-defined `Rollout` operations.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub custom: std::option::Option<crate::model::CustomMetadata>,
}

impl Metadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [cloud_run][crate::model::Metadata::cloud_run].
    pub fn set_cloud_run<
        T: std::convert::Into<std::option::Option<crate::model::CloudRunMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.cloud_run = v.into();
        self
    }

    /// Sets the value of [automation][crate::model::Metadata::automation].
    pub fn set_automation<
        T: std::convert::Into<std::option::Option<crate::model::AutomationRolloutMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.automation = v.into();
        self
    }

    /// Sets the value of [custom][crate::model::Metadata::custom].
    pub fn set_custom<T: std::convert::Into<std::option::Option<crate::model::CustomMetadata>>>(
        mut self,
        v: T,
    ) -> Self {
        self.custom = v.into();
        self
    }
}

impl wkt::message::Message for Metadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.Metadata"
    }
}

/// DeployJobRunMetadata surfaces information associated with a `DeployJobRun` to
/// the user.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeployJobRunMetadata {
    /// Output only. The name of the Cloud Run Service that is associated with a
    /// `DeployJobRun`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub cloud_run: std::option::Option<crate::model::CloudRunMetadata>,

    /// Output only. Custom Target metadata associated with a `DeployJobRun`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub custom_target: std::option::Option<crate::model::CustomTargetDeployMetadata>,

    /// Output only. Custom metadata provided by user-defined deploy operation.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub custom: std::option::Option<crate::model::CustomMetadata>,
}

impl DeployJobRunMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [cloud_run][crate::model::DeployJobRunMetadata::cloud_run].
    pub fn set_cloud_run<
        T: std::convert::Into<std::option::Option<crate::model::CloudRunMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.cloud_run = v.into();
        self
    }

    /// Sets the value of [custom_target][crate::model::DeployJobRunMetadata::custom_target].
    pub fn set_custom_target<
        T: std::convert::Into<std::option::Option<crate::model::CustomTargetDeployMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.custom_target = v.into();
        self
    }

    /// Sets the value of [custom][crate::model::DeployJobRunMetadata::custom].
    pub fn set_custom<T: std::convert::Into<std::option::Option<crate::model::CustomMetadata>>>(
        mut self,
        v: T,
    ) -> Self {
        self.custom = v.into();
        self
    }
}

impl wkt::message::Message for DeployJobRunMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.DeployJobRunMetadata"
    }
}

/// CloudRunMetadata contains information from a Cloud Run deployment.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CloudRunMetadata {
    /// Output only. The name of the Cloud Run Service that is associated with a
    /// `Rollout`. Format is
    /// `projects/{project}/locations/{location}/services/{service}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service: std::string::String,

    /// Output only. The Cloud Run Service urls that are associated with a
    /// `Rollout`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub service_urls: std::vec::Vec<std::string::String>,

    /// Output only. The Cloud Run Revision id associated with a `Rollout`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub revision: std::string::String,

    /// Output only. The name of the Cloud Run job that is associated with a
    /// `Rollout`. Format is
    /// `projects/{project}/locations/{location}/jobs/{job_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub job: std::string::String,
}

impl CloudRunMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [service][crate::model::CloudRunMetadata::service].
    pub fn set_service<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service = v.into();
        self
    }

    /// Sets the value of [revision][crate::model::CloudRunMetadata::revision].
    pub fn set_revision<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.revision = v.into();
        self
    }

    /// Sets the value of [job][crate::model::CloudRunMetadata::job].
    pub fn set_job<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.job = v.into();
        self
    }

    /// Sets the value of [service_urls][crate::model::CloudRunMetadata::service_urls].
    pub fn set_service_urls<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.service_urls = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for CloudRunMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CloudRunMetadata"
    }
}

/// CustomTargetDeployMetadata contains information from a Custom Target
/// deploy operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CustomTargetDeployMetadata {
    /// Output only. Skip message provided in the results of a custom deploy
    /// operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub skip_message: std::string::String,
}

impl CustomTargetDeployMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [skip_message][crate::model::CustomTargetDeployMetadata::skip_message].
    pub fn set_skip_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.skip_message = v.into();
        self
    }
}

impl wkt::message::Message for CustomTargetDeployMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CustomTargetDeployMetadata"
    }
}

/// AutomationRolloutMetadata contains Automation-related actions that
/// were performed on a rollout.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AutomationRolloutMetadata {
    /// Output only. The name of the AutomationRun initiated by a promote release
    /// rule.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub promote_automation_run: std::string::String,

    /// Output only. The names of the AutomationRuns initiated by an advance
    /// rollout rule.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub advance_automation_runs: std::vec::Vec<std::string::String>,

    /// Output only. The names of the AutomationRuns initiated by a repair rollout
    /// rule.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub repair_automation_runs: std::vec::Vec<std::string::String>,
}

impl AutomationRolloutMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [promote_automation_run][crate::model::AutomationRolloutMetadata::promote_automation_run].
    pub fn set_promote_automation_run<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.promote_automation_run = v.into();
        self
    }

    /// Sets the value of [advance_automation_runs][crate::model::AutomationRolloutMetadata::advance_automation_runs].
    pub fn set_advance_automation_runs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.advance_automation_runs = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [repair_automation_runs][crate::model::AutomationRolloutMetadata::repair_automation_runs].
    pub fn set_repair_automation_runs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.repair_automation_runs = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for AutomationRolloutMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.AutomationRolloutMetadata"
    }
}

/// CustomMetadata contains information from a user-defined operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CustomMetadata {
    /// Output only. Key-value pairs provided by the user-defined operation.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub values: std::collections::HashMap<std::string::String, std::string::String>,
}

impl CustomMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [values][crate::model::CustomMetadata::values].
    pub fn set_values<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.values = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for CustomMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CustomMetadata"
    }
}

/// Phase represents a collection of jobs that are logically grouped together
/// for a `Rollout`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Phase {
    /// Output only. The ID of the Phase.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub id: std::string::String,

    /// Output only. Current state of the Phase.
    pub state: crate::model::phase::State,

    /// Output only. Additional information on why the Phase was skipped, if
    /// available.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub skip_message: std::string::String,

    /// The job composition of this Phase.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub jobs: std::option::Option<crate::model::phase::Jobs>,
}

impl Phase {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [id][crate::model::Phase::id].
    pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Phase::state].
    pub fn set_state<T: std::convert::Into<crate::model::phase::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [skip_message][crate::model::Phase::skip_message].
    pub fn set_skip_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.skip_message = v.into();
        self
    }

    /// Sets the value of `jobs`.
    pub fn set_jobs<T: std::convert::Into<std::option::Option<crate::model::phase::Jobs>>>(
        mut self,
        v: T,
    ) -> Self {
        self.jobs = v.into();
        self
    }

    /// The value of [jobs][crate::model::Phase::jobs]
    /// if it holds a `DeploymentJobs`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_deployment_jobs(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::DeploymentJobs>> {
        #[allow(unreachable_patterns)]
        self.jobs.as_ref().and_then(|v| match v {
            crate::model::phase::Jobs::DeploymentJobs(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [jobs][crate::model::Phase::jobs]
    /// if it holds a `ChildRolloutJobs`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_child_rollout_jobs(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::ChildRolloutJobs>> {
        #[allow(unreachable_patterns)]
        self.jobs.as_ref().and_then(|v| match v {
            crate::model::phase::Jobs::ChildRolloutJobs(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [jobs][crate::model::Phase::jobs]
    /// to hold a `DeploymentJobs`.
    ///
    /// Note that all the setters affecting `jobs` are
    /// mutually exclusive.
    pub fn set_deployment_jobs<
        T: std::convert::Into<std::boxed::Box<crate::model::DeploymentJobs>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.jobs = std::option::Option::Some(crate::model::phase::Jobs::DeploymentJobs(v.into()));
        self
    }

    /// Sets the value of [jobs][crate::model::Phase::jobs]
    /// to hold a `ChildRolloutJobs`.
    ///
    /// Note that all the setters affecting `jobs` are
    /// mutually exclusive.
    pub fn set_child_rollout_jobs<
        T: std::convert::Into<std::boxed::Box<crate::model::ChildRolloutJobs>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.jobs =
            std::option::Option::Some(crate::model::phase::Jobs::ChildRolloutJobs(v.into()));
        self
    }
}

impl wkt::message::Message for Phase {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.Phase"
    }
}

/// Defines additional types related to Phase
pub mod phase {
    #[allow(unused_imports)]
    use super::*;

    /// Valid states of a Phase.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(std::borrow::Cow<'static, str>);

    impl State {
        /// Creates a new State instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [State](State)
    pub mod state {
        use super::State;

        /// The Phase has an unspecified state.
        pub const STATE_UNSPECIFIED: State = State::new("STATE_UNSPECIFIED");

        /// The Phase is waiting for an earlier Phase(s) to complete.
        pub const PENDING: State = State::new("PENDING");

        /// The Phase is in progress.
        pub const IN_PROGRESS: State = State::new("IN_PROGRESS");

        /// The Phase has succeeded.
        pub const SUCCEEDED: State = State::new("SUCCEEDED");

        /// The Phase has failed.
        pub const FAILED: State = State::new("FAILED");

        /// The Phase was aborted.
        pub const ABORTED: State = State::new("ABORTED");

        /// The Phase was skipped.
        pub const SKIPPED: State = State::new("SKIPPED");
    }

    impl std::convert::From<std::string::String> for State {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// The job composition of this Phase.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Jobs {
        /// Output only. Deployment job composition.
        DeploymentJobs(std::boxed::Box<crate::model::DeploymentJobs>),
        /// Output only. ChildRollout job composition.
        ChildRolloutJobs(std::boxed::Box<crate::model::ChildRolloutJobs>),
    }
}

/// Deployment job composition.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeploymentJobs {
    /// Output only. The predeploy Job, which is the first job on the phase.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub predeploy_job: std::option::Option<crate::model::Job>,

    /// Output only. The deploy Job. This is the deploy job in the phase.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub deploy_job: std::option::Option<crate::model::Job>,

    /// Output only. The verify Job. Runs after a deploy if the deploy succeeds.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub verify_job: std::option::Option<crate::model::Job>,

    /// Output only. The postdeploy Job, which is the last job on the phase.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub postdeploy_job: std::option::Option<crate::model::Job>,
}

impl DeploymentJobs {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [predeploy_job][crate::model::DeploymentJobs::predeploy_job].
    pub fn set_predeploy_job<T: std::convert::Into<std::option::Option<crate::model::Job>>>(
        mut self,
        v: T,
    ) -> Self {
        self.predeploy_job = v.into();
        self
    }

    /// Sets the value of [deploy_job][crate::model::DeploymentJobs::deploy_job].
    pub fn set_deploy_job<T: std::convert::Into<std::option::Option<crate::model::Job>>>(
        mut self,
        v: T,
    ) -> Self {
        self.deploy_job = v.into();
        self
    }

    /// Sets the value of [verify_job][crate::model::DeploymentJobs::verify_job].
    pub fn set_verify_job<T: std::convert::Into<std::option::Option<crate::model::Job>>>(
        mut self,
        v: T,
    ) -> Self {
        self.verify_job = v.into();
        self
    }

    /// Sets the value of [postdeploy_job][crate::model::DeploymentJobs::postdeploy_job].
    pub fn set_postdeploy_job<T: std::convert::Into<std::option::Option<crate::model::Job>>>(
        mut self,
        v: T,
    ) -> Self {
        self.postdeploy_job = v.into();
        self
    }
}

impl wkt::message::Message for DeploymentJobs {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.DeploymentJobs"
    }
}

/// ChildRollouts job composition
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ChildRolloutJobs {
    /// Output only. List of CreateChildRolloutJobs
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub create_rollout_jobs: std::vec::Vec<crate::model::Job>,

    /// Output only. List of AdvanceChildRolloutJobs
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub advance_rollout_jobs: std::vec::Vec<crate::model::Job>,
}

impl ChildRolloutJobs {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [create_rollout_jobs][crate::model::ChildRolloutJobs::create_rollout_jobs].
    pub fn set_create_rollout_jobs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Job>,
    {
        use std::iter::Iterator;
        self.create_rollout_jobs = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [advance_rollout_jobs][crate::model::ChildRolloutJobs::advance_rollout_jobs].
    pub fn set_advance_rollout_jobs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Job>,
    {
        use std::iter::Iterator;
        self.advance_rollout_jobs = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ChildRolloutJobs {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.ChildRolloutJobs"
    }
}

/// Job represents an operation for a `Rollout`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Job {
    /// Output only. The ID of the Job.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub id: std::string::String,

    /// Output only. The current state of the Job.
    pub state: crate::model::job::State,

    /// Output only. Additional information on why the Job was skipped, if
    /// available.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub skip_message: std::string::String,

    /// Output only. The name of the `JobRun` responsible for the most recent
    /// invocation of this Job.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub job_run: std::string::String,

    /// The type of Job.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub job_type: std::option::Option<crate::model::job::JobType>,
}

impl Job {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [id][crate::model::Job::id].
    pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Job::state].
    pub fn set_state<T: std::convert::Into<crate::model::job::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [skip_message][crate::model::Job::skip_message].
    pub fn set_skip_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.skip_message = v.into();
        self
    }

    /// Sets the value of [job_run][crate::model::Job::job_run].
    pub fn set_job_run<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.job_run = v.into();
        self
    }

    /// Sets the value of `job_type`.
    pub fn set_job_type<T: std::convert::Into<std::option::Option<crate::model::job::JobType>>>(
        mut self,
        v: T,
    ) -> Self {
        self.job_type = v.into();
        self
    }

    /// The value of [job_type][crate::model::Job::job_type]
    /// if it holds a `DeployJob`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_deploy_job(&self) -> std::option::Option<&std::boxed::Box<crate::model::DeployJob>> {
        #[allow(unreachable_patterns)]
        self.job_type.as_ref().and_then(|v| match v {
            crate::model::job::JobType::DeployJob(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [job_type][crate::model::Job::job_type]
    /// if it holds a `VerifyJob`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_verify_job(&self) -> std::option::Option<&std::boxed::Box<crate::model::VerifyJob>> {
        #[allow(unreachable_patterns)]
        self.job_type.as_ref().and_then(|v| match v {
            crate::model::job::JobType::VerifyJob(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [job_type][crate::model::Job::job_type]
    /// if it holds a `PredeployJob`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_predeploy_job(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::PredeployJob>> {
        #[allow(unreachable_patterns)]
        self.job_type.as_ref().and_then(|v| match v {
            crate::model::job::JobType::PredeployJob(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [job_type][crate::model::Job::job_type]
    /// if it holds a `PostdeployJob`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_postdeploy_job(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::PostdeployJob>> {
        #[allow(unreachable_patterns)]
        self.job_type.as_ref().and_then(|v| match v {
            crate::model::job::JobType::PostdeployJob(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [job_type][crate::model::Job::job_type]
    /// if it holds a `CreateChildRolloutJob`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_create_child_rollout_job(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::CreateChildRolloutJob>> {
        #[allow(unreachable_patterns)]
        self.job_type.as_ref().and_then(|v| match v {
            crate::model::job::JobType::CreateChildRolloutJob(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [job_type][crate::model::Job::job_type]
    /// if it holds a `AdvanceChildRolloutJob`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_advance_child_rollout_job(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::AdvanceChildRolloutJob>> {
        #[allow(unreachable_patterns)]
        self.job_type.as_ref().and_then(|v| match v {
            crate::model::job::JobType::AdvanceChildRolloutJob(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [job_type][crate::model::Job::job_type]
    /// to hold a `DeployJob`.
    ///
    /// Note that all the setters affecting `job_type` are
    /// mutually exclusive.
    pub fn set_deploy_job<T: std::convert::Into<std::boxed::Box<crate::model::DeployJob>>>(
        mut self,
        v: T,
    ) -> Self {
        self.job_type = std::option::Option::Some(crate::model::job::JobType::DeployJob(v.into()));
        self
    }

    /// Sets the value of [job_type][crate::model::Job::job_type]
    /// to hold a `VerifyJob`.
    ///
    /// Note that all the setters affecting `job_type` are
    /// mutually exclusive.
    pub fn set_verify_job<T: std::convert::Into<std::boxed::Box<crate::model::VerifyJob>>>(
        mut self,
        v: T,
    ) -> Self {
        self.job_type = std::option::Option::Some(crate::model::job::JobType::VerifyJob(v.into()));
        self
    }

    /// Sets the value of [job_type][crate::model::Job::job_type]
    /// to hold a `PredeployJob`.
    ///
    /// Note that all the setters affecting `job_type` are
    /// mutually exclusive.
    pub fn set_predeploy_job<T: std::convert::Into<std::boxed::Box<crate::model::PredeployJob>>>(
        mut self,
        v: T,
    ) -> Self {
        self.job_type =
            std::option::Option::Some(crate::model::job::JobType::PredeployJob(v.into()));
        self
    }

    /// Sets the value of [job_type][crate::model::Job::job_type]
    /// to hold a `PostdeployJob`.
    ///
    /// Note that all the setters affecting `job_type` are
    /// mutually exclusive.
    pub fn set_postdeploy_job<
        T: std::convert::Into<std::boxed::Box<crate::model::PostdeployJob>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.job_type =
            std::option::Option::Some(crate::model::job::JobType::PostdeployJob(v.into()));
        self
    }

    /// Sets the value of [job_type][crate::model::Job::job_type]
    /// to hold a `CreateChildRolloutJob`.
    ///
    /// Note that all the setters affecting `job_type` are
    /// mutually exclusive.
    pub fn set_create_child_rollout_job<
        T: std::convert::Into<std::boxed::Box<crate::model::CreateChildRolloutJob>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.job_type =
            std::option::Option::Some(crate::model::job::JobType::CreateChildRolloutJob(v.into()));
        self
    }

    /// Sets the value of [job_type][crate::model::Job::job_type]
    /// to hold a `AdvanceChildRolloutJob`.
    ///
    /// Note that all the setters affecting `job_type` are
    /// mutually exclusive.
    pub fn set_advance_child_rollout_job<
        T: std::convert::Into<std::boxed::Box<crate::model::AdvanceChildRolloutJob>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.job_type =
            std::option::Option::Some(crate::model::job::JobType::AdvanceChildRolloutJob(v.into()));
        self
    }
}

impl wkt::message::Message for Job {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.Job"
    }
}

/// Defines additional types related to Job
pub mod job {
    #[allow(unused_imports)]
    use super::*;

    /// Valid states of a Job.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(std::borrow::Cow<'static, str>);

    impl State {
        /// Creates a new State instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [State](State)
    pub mod state {
        use super::State;

        /// The Job has an unspecified state.
        pub const STATE_UNSPECIFIED: State = State::new("STATE_UNSPECIFIED");

        /// The Job is waiting for an earlier Phase(s) or Job(s) to complete.
        pub const PENDING: State = State::new("PENDING");

        /// The Job is disabled.
        pub const DISABLED: State = State::new("DISABLED");

        /// The Job is in progress.
        pub const IN_PROGRESS: State = State::new("IN_PROGRESS");

        /// The Job succeeded.
        pub const SUCCEEDED: State = State::new("SUCCEEDED");

        /// The Job failed.
        pub const FAILED: State = State::new("FAILED");

        /// The Job was aborted.
        pub const ABORTED: State = State::new("ABORTED");

        /// The Job was skipped.
        pub const SKIPPED: State = State::new("SKIPPED");

        /// The Job was ignored.
        pub const IGNORED: State = State::new("IGNORED");
    }

    impl std::convert::From<std::string::String> for State {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// The type of Job.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum JobType {
        /// Output only. A deploy Job.
        DeployJob(std::boxed::Box<crate::model::DeployJob>),
        /// Output only. A verify Job.
        VerifyJob(std::boxed::Box<crate::model::VerifyJob>),
        /// Output only. A predeploy Job.
        PredeployJob(std::boxed::Box<crate::model::PredeployJob>),
        /// Output only. A postdeploy Job.
        PostdeployJob(std::boxed::Box<crate::model::PostdeployJob>),
        /// Output only. A createChildRollout Job.
        CreateChildRolloutJob(std::boxed::Box<crate::model::CreateChildRolloutJob>),
        /// Output only. An advanceChildRollout Job.
        AdvanceChildRolloutJob(std::boxed::Box<crate::model::AdvanceChildRolloutJob>),
    }
}

/// A deploy Job.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeployJob {}

impl DeployJob {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for DeployJob {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.DeployJob"
    }
}

/// A verify Job.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct VerifyJob {}

impl VerifyJob {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for VerifyJob {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.VerifyJob"
    }
}

/// A predeploy Job.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PredeployJob {
    /// Output only. The custom actions that the predeploy Job executes.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub actions: std::vec::Vec<std::string::String>,
}

impl PredeployJob {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [actions][crate::model::PredeployJob::actions].
    pub fn set_actions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.actions = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for PredeployJob {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.PredeployJob"
    }
}

/// A postdeploy Job.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PostdeployJob {
    /// Output only. The custom actions that the postdeploy Job executes.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub actions: std::vec::Vec<std::string::String>,
}

impl PostdeployJob {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [actions][crate::model::PostdeployJob::actions].
    pub fn set_actions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.actions = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for PostdeployJob {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.PostdeployJob"
    }
}

/// A createChildRollout Job.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateChildRolloutJob {}

impl CreateChildRolloutJob {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for CreateChildRolloutJob {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CreateChildRolloutJob"
    }
}

/// An advanceChildRollout Job.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AdvanceChildRolloutJob {}

impl AdvanceChildRolloutJob {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for AdvanceChildRolloutJob {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.AdvanceChildRolloutJob"
    }
}

/// ListRolloutsRequest is the request object used by `ListRollouts`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListRolloutsRequest {
    /// Required. The `Release` which owns this collection of `Rollout` objects.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of `Rollout` objects to return. The service
    /// may return fewer than this value. If unspecified, at most 50 `Rollout`
    /// objects will be returned. The maximum value is 1000; values above 1000 will
    /// be set to 1000.
    pub page_size: i32,

    /// Optional. A page token, received from a previous `ListRollouts` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other provided parameters match
    /// the call that provided the page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. Filter rollouts to be returned. See <https://google.aip.dev/160>
    /// for more details.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. Field to sort by. See <https://google.aip.dev/132#ordering> for
    /// more details.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListRolloutsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListRolloutsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListRolloutsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListRolloutsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListRolloutsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListRolloutsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListRolloutsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.ListRolloutsRequest"
    }
}

/// ListRolloutsResponse is the response object reutrned by `ListRollouts`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListRolloutsResponse {
    /// The `Rollout` objects.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub rollouts: std::vec::Vec<crate::model::Rollout>,

    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListRolloutsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListRolloutsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [rollouts][crate::model::ListRolloutsResponse::rollouts].
    pub fn set_rollouts<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Rollout>,
    {
        use std::iter::Iterator;
        self.rollouts = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListRolloutsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListRolloutsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.ListRolloutsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListRolloutsResponse {
    type PageItem = crate::model::Rollout;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.rollouts
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// GetRolloutRequest is the request object used by `GetRollout`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetRolloutRequest {
    /// Required. Name of the `Rollout`. Format must be
    /// `projects/{project_id}/locations/{location_name}/deliveryPipelines/{pipeline_name}/releases/{release_name}/rollouts/{rollout_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetRolloutRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetRolloutRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetRolloutRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.GetRolloutRequest"
    }
}

/// CreateRolloutRequest is the request object used by `CreateRollout`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateRolloutRequest {
    /// Required. The parent collection in which the `Rollout` must be created.
    /// The format is
    /// `projects/{project_id}/locations/{location_name}/deliveryPipelines/{pipeline_name}/releases/{release_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. ID of the `Rollout`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rollout_id: std::string::String,

    /// Required. The `Rollout` to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub rollout: std::option::Option<crate::model::Rollout>,

    /// Optional. A request ID to identify requests. Specify a unique request ID
    /// so that if you must retry your request, the server knows to ignore the
    /// request if it has already been completed. The server guarantees that for
    /// at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set to true, the request is validated and the user is provided
    /// with an expected result, but no actual change is made.
    pub validate_only: bool,

    /// Optional. Deploy policies to override. Format is
    /// `projects/{project}/locations/{location}/deployPolicies/{deployPolicy}`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub override_deploy_policy: std::vec::Vec<std::string::String>,

    /// Optional. The starting phase ID for the `Rollout`. If empty the `Rollout`
    /// will start at the first phase.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub starting_phase_id: std::string::String,
}

impl CreateRolloutRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateRolloutRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [rollout_id][crate::model::CreateRolloutRequest::rollout_id].
    pub fn set_rollout_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.rollout_id = v.into();
        self
    }

    /// Sets the value of [rollout][crate::model::CreateRolloutRequest::rollout].
    pub fn set_rollout<T: std::convert::Into<std::option::Option<crate::model::Rollout>>>(
        mut self,
        v: T,
    ) -> Self {
        self.rollout = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateRolloutRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::CreateRolloutRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }

    /// Sets the value of [starting_phase_id][crate::model::CreateRolloutRequest::starting_phase_id].
    pub fn set_starting_phase_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.starting_phase_id = v.into();
        self
    }

    /// Sets the value of [override_deploy_policy][crate::model::CreateRolloutRequest::override_deploy_policy].
    pub fn set_override_deploy_policy<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.override_deploy_policy = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for CreateRolloutRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CreateRolloutRequest"
    }
}

/// Represents the metadata of the long-running operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OperationMetadata {
    /// Output only. The time the operation was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the operation finished running.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Server-defined resource path for the target of the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target: std::string::String,

    /// Output only. Name of the verb executed by the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub verb: std::string::String,

    /// Output only. Human-readable status of the operation, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub status_message: std::string::String,

    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have successfully been cancelled
    /// have
    /// [google.longrunning.Operation.error][google.longrunning.Operation.error]
    /// value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
    /// corresponding to `Code.CANCELLED`.
    ///
    /// [google.longrunning.Operation.error]: longrunning::model::Operation::result
    /// [google.rpc.Status.code]: rpc::model::Status::code
    pub requested_cancellation: bool,

    /// Output only. API version used to start the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub api_version: std::string::String,
}

impl OperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [create_time][crate::model::OperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::OperationMetadata::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [target][crate::model::OperationMetadata::target].
    pub fn set_target<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [verb][crate::model::OperationMetadata::verb].
    pub fn set_verb<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.verb = v.into();
        self
    }

    /// Sets the value of [status_message][crate::model::OperationMetadata::status_message].
    pub fn set_status_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.status_message = v.into();
        self
    }

    /// Sets the value of [requested_cancellation][crate::model::OperationMetadata::requested_cancellation].
    pub fn set_requested_cancellation<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.requested_cancellation = v.into();
        self
    }

    /// Sets the value of [api_version][crate::model::OperationMetadata::api_version].
    pub fn set_api_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.api_version = v.into();
        self
    }
}

impl wkt::message::Message for OperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.OperationMetadata"
    }
}

/// The request object used by `ApproveRollout`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ApproveRolloutRequest {
    /// Required. Name of the Rollout. Format is
    /// `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/{rollout}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. True = approve; false = reject
    pub approved: bool,

    /// Optional. Deploy policies to override. Format is
    /// `projects/{project}/locations/{location}/deployPolicies/{deployPolicy}`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub override_deploy_policy: std::vec::Vec<std::string::String>,
}

impl ApproveRolloutRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ApproveRolloutRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [approved][crate::model::ApproveRolloutRequest::approved].
    pub fn set_approved<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.approved = v.into();
        self
    }

    /// Sets the value of [override_deploy_policy][crate::model::ApproveRolloutRequest::override_deploy_policy].
    pub fn set_override_deploy_policy<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.override_deploy_policy = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ApproveRolloutRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.ApproveRolloutRequest"
    }
}

/// The response object from `ApproveRollout`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ApproveRolloutResponse {}

impl ApproveRolloutResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for ApproveRolloutResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.ApproveRolloutResponse"
    }
}

/// The request object used by `AdvanceRollout`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AdvanceRolloutRequest {
    /// Required. Name of the Rollout. Format is
    /// `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/{rollout}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The phase ID to advance the `Rollout` to.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub phase_id: std::string::String,

    /// Optional. Deploy policies to override. Format is
    /// `projects/{project}/locations/{location}/deployPolicies/{deployPolicy}`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub override_deploy_policy: std::vec::Vec<std::string::String>,
}

impl AdvanceRolloutRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::AdvanceRolloutRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [phase_id][crate::model::AdvanceRolloutRequest::phase_id].
    pub fn set_phase_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.phase_id = v.into();
        self
    }

    /// Sets the value of [override_deploy_policy][crate::model::AdvanceRolloutRequest::override_deploy_policy].
    pub fn set_override_deploy_policy<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.override_deploy_policy = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for AdvanceRolloutRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.AdvanceRolloutRequest"
    }
}

/// The response object from `AdvanceRollout`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AdvanceRolloutResponse {}

impl AdvanceRolloutResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for AdvanceRolloutResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.AdvanceRolloutResponse"
    }
}

/// The request object used by `CancelRollout`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CancelRolloutRequest {
    /// Required. Name of the Rollout. Format is
    /// `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/{rollout}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. Deploy policies to override. Format is
    /// `projects/{project}/locations/{location}/deployPolicies/{deployPolicy}`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub override_deploy_policy: std::vec::Vec<std::string::String>,
}

impl CancelRolloutRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::CancelRolloutRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [override_deploy_policy][crate::model::CancelRolloutRequest::override_deploy_policy].
    pub fn set_override_deploy_policy<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.override_deploy_policy = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for CancelRolloutRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CancelRolloutRequest"
    }
}

/// The response object from `CancelRollout`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CancelRolloutResponse {}

impl CancelRolloutResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for CancelRolloutResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CancelRolloutResponse"
    }
}

/// The request object used by `IgnoreJob`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct IgnoreJobRequest {
    /// Required. Name of the Rollout. Format is
    /// `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/{rollout}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rollout: std::string::String,

    /// Required. The phase ID the Job to ignore belongs to.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub phase_id: std::string::String,

    /// Required. The job ID for the Job to ignore.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub job_id: std::string::String,

    /// Optional. Deploy policies to override. Format is
    /// `projects/{project}/locations/{location}/deployPolicies/{deployPolicy}`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub override_deploy_policy: std::vec::Vec<std::string::String>,
}

impl IgnoreJobRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [rollout][crate::model::IgnoreJobRequest::rollout].
    pub fn set_rollout<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.rollout = v.into();
        self
    }

    /// Sets the value of [phase_id][crate::model::IgnoreJobRequest::phase_id].
    pub fn set_phase_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.phase_id = v.into();
        self
    }

    /// Sets the value of [job_id][crate::model::IgnoreJobRequest::job_id].
    pub fn set_job_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.job_id = v.into();
        self
    }

    /// Sets the value of [override_deploy_policy][crate::model::IgnoreJobRequest::override_deploy_policy].
    pub fn set_override_deploy_policy<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.override_deploy_policy = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for IgnoreJobRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.IgnoreJobRequest"
    }
}

/// The response object from `IgnoreJob`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct IgnoreJobResponse {}

impl IgnoreJobResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for IgnoreJobResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.IgnoreJobResponse"
    }
}

/// RetryJobRequest is the request object used by `RetryJob`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RetryJobRequest {
    /// Required. Name of the Rollout. Format is
    /// `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/{rollout}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rollout: std::string::String,

    /// Required. The phase ID the Job to retry belongs to.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub phase_id: std::string::String,

    /// Required. The job ID for the Job to retry.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub job_id: std::string::String,

    /// Optional. Deploy policies to override. Format is
    /// `projects/{project}/locations/{location}/deployPolicies/{deployPolicy}`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub override_deploy_policy: std::vec::Vec<std::string::String>,
}

impl RetryJobRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [rollout][crate::model::RetryJobRequest::rollout].
    pub fn set_rollout<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.rollout = v.into();
        self
    }

    /// Sets the value of [phase_id][crate::model::RetryJobRequest::phase_id].
    pub fn set_phase_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.phase_id = v.into();
        self
    }

    /// Sets the value of [job_id][crate::model::RetryJobRequest::job_id].
    pub fn set_job_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.job_id = v.into();
        self
    }

    /// Sets the value of [override_deploy_policy][crate::model::RetryJobRequest::override_deploy_policy].
    pub fn set_override_deploy_policy<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.override_deploy_policy = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for RetryJobRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.RetryJobRequest"
    }
}

/// The response object from 'RetryJob'.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RetryJobResponse {}

impl RetryJobResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for RetryJobResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.RetryJobResponse"
    }
}

/// The request object used by `AbandonRelease`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AbandonReleaseRequest {
    /// Required. Name of the Release. Format is
    /// `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl AbandonReleaseRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::AbandonReleaseRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for AbandonReleaseRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.AbandonReleaseRequest"
    }
}

/// The response object for `AbandonRelease`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AbandonReleaseResponse {}

impl AbandonReleaseResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for AbandonReleaseResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.AbandonReleaseResponse"
    }
}

/// A `JobRun` resource in the Cloud Deploy API.
///
/// A `JobRun` contains information of a single `Rollout` job evaluation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct JobRun {
    /// Output only. Name of the `JobRun`. Format is
    /// `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{releases}/rollouts/{rollouts}/jobRuns/{uuid}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Unique identifier of the `JobRun`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uid: std::string::String,

    /// Output only. ID of the `Rollout` phase this `JobRun` belongs in.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub phase_id: std::string::String,

    /// Output only. ID of the `Rollout` job this `JobRun` corresponds to.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub job_id: std::string::String,

    /// Output only. Time at which the `JobRun` was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Time at which the `JobRun` was started.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Time at which the `JobRun` ended.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The current state of the `JobRun`.
    pub state: crate::model::job_run::State,

    /// Output only. This checksum is computed by the server based on the value of
    /// other fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub etag: std::string::String,

    /// The `JobRun` type and the information for that type.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub job_run: std::option::Option<crate::model::job_run::JobRun>,
}

impl JobRun {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::JobRun::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [uid][crate::model::JobRun::uid].
    pub fn set_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uid = v.into();
        self
    }

    /// Sets the value of [phase_id][crate::model::JobRun::phase_id].
    pub fn set_phase_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.phase_id = v.into();
        self
    }

    /// Sets the value of [job_id][crate::model::JobRun::job_id].
    pub fn set_job_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.job_id = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::JobRun::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [start_time][crate::model::JobRun::start_time].
    pub fn set_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::JobRun::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [state][crate::model::JobRun::state].
    pub fn set_state<T: std::convert::Into<crate::model::job_run::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::JobRun::etag].
    pub fn set_etag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.etag = v.into();
        self
    }

    /// Sets the value of `job_run`.
    pub fn set_job_run<
        T: std::convert::Into<std::option::Option<crate::model::job_run::JobRun>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.job_run = v.into();
        self
    }

    /// The value of [job_run][crate::model::JobRun::job_run]
    /// if it holds a `DeployJobRun`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_deploy_job_run(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::DeployJobRun>> {
        #[allow(unreachable_patterns)]
        self.job_run.as_ref().and_then(|v| match v {
            crate::model::job_run::JobRun::DeployJobRun(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [job_run][crate::model::JobRun::job_run]
    /// if it holds a `VerifyJobRun`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_verify_job_run(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::VerifyJobRun>> {
        #[allow(unreachable_patterns)]
        self.job_run.as_ref().and_then(|v| match v {
            crate::model::job_run::JobRun::VerifyJobRun(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [job_run][crate::model::JobRun::job_run]
    /// if it holds a `PredeployJobRun`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_predeploy_job_run(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::PredeployJobRun>> {
        #[allow(unreachable_patterns)]
        self.job_run.as_ref().and_then(|v| match v {
            crate::model::job_run::JobRun::PredeployJobRun(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [job_run][crate::model::JobRun::job_run]
    /// if it holds a `PostdeployJobRun`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_postdeploy_job_run(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::PostdeployJobRun>> {
        #[allow(unreachable_patterns)]
        self.job_run.as_ref().and_then(|v| match v {
            crate::model::job_run::JobRun::PostdeployJobRun(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [job_run][crate::model::JobRun::job_run]
    /// if it holds a `CreateChildRolloutJobRun`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_create_child_rollout_job_run(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::CreateChildRolloutJobRun>> {
        #[allow(unreachable_patterns)]
        self.job_run.as_ref().and_then(|v| match v {
            crate::model::job_run::JobRun::CreateChildRolloutJobRun(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [job_run][crate::model::JobRun::job_run]
    /// if it holds a `AdvanceChildRolloutJobRun`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_advance_child_rollout_job_run(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::AdvanceChildRolloutJobRun>> {
        #[allow(unreachable_patterns)]
        self.job_run.as_ref().and_then(|v| match v {
            crate::model::job_run::JobRun::AdvanceChildRolloutJobRun(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [job_run][crate::model::JobRun::job_run]
    /// to hold a `DeployJobRun`.
    ///
    /// Note that all the setters affecting `job_run` are
    /// mutually exclusive.
    pub fn set_deploy_job_run<
        T: std::convert::Into<std::boxed::Box<crate::model::DeployJobRun>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.job_run =
            std::option::Option::Some(crate::model::job_run::JobRun::DeployJobRun(v.into()));
        self
    }

    /// Sets the value of [job_run][crate::model::JobRun::job_run]
    /// to hold a `VerifyJobRun`.
    ///
    /// Note that all the setters affecting `job_run` are
    /// mutually exclusive.
    pub fn set_verify_job_run<
        T: std::convert::Into<std::boxed::Box<crate::model::VerifyJobRun>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.job_run =
            std::option::Option::Some(crate::model::job_run::JobRun::VerifyJobRun(v.into()));
        self
    }

    /// Sets the value of [job_run][crate::model::JobRun::job_run]
    /// to hold a `PredeployJobRun`.
    ///
    /// Note that all the setters affecting `job_run` are
    /// mutually exclusive.
    pub fn set_predeploy_job_run<
        T: std::convert::Into<std::boxed::Box<crate::model::PredeployJobRun>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.job_run =
            std::option::Option::Some(crate::model::job_run::JobRun::PredeployJobRun(v.into()));
        self
    }

    /// Sets the value of [job_run][crate::model::JobRun::job_run]
    /// to hold a `PostdeployJobRun`.
    ///
    /// Note that all the setters affecting `job_run` are
    /// mutually exclusive.
    pub fn set_postdeploy_job_run<
        T: std::convert::Into<std::boxed::Box<crate::model::PostdeployJobRun>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.job_run =
            std::option::Option::Some(crate::model::job_run::JobRun::PostdeployJobRun(v.into()));
        self
    }

    /// Sets the value of [job_run][crate::model::JobRun::job_run]
    /// to hold a `CreateChildRolloutJobRun`.
    ///
    /// Note that all the setters affecting `job_run` are
    /// mutually exclusive.
    pub fn set_create_child_rollout_job_run<
        T: std::convert::Into<std::boxed::Box<crate::model::CreateChildRolloutJobRun>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.job_run = std::option::Option::Some(
            crate::model::job_run::JobRun::CreateChildRolloutJobRun(v.into()),
        );
        self
    }

    /// Sets the value of [job_run][crate::model::JobRun::job_run]
    /// to hold a `AdvanceChildRolloutJobRun`.
    ///
    /// Note that all the setters affecting `job_run` are
    /// mutually exclusive.
    pub fn set_advance_child_rollout_job_run<
        T: std::convert::Into<std::boxed::Box<crate::model::AdvanceChildRolloutJobRun>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.job_run = std::option::Option::Some(
            crate::model::job_run::JobRun::AdvanceChildRolloutJobRun(v.into()),
        );
        self
    }
}

impl wkt::message::Message for JobRun {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.JobRun"
    }
}

/// Defines additional types related to JobRun
pub mod job_run {
    #[allow(unused_imports)]
    use super::*;

    /// Valid states of a `JobRun`.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(std::borrow::Cow<'static, str>);

    impl State {
        /// Creates a new State instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [State](State)
    pub mod state {
        use super::State;

        /// The `JobRun` has an unspecified state.
        pub const STATE_UNSPECIFIED: State = State::new("STATE_UNSPECIFIED");

        /// The `JobRun` is in progress.
        pub const IN_PROGRESS: State = State::new("IN_PROGRESS");

        /// The `JobRun` has succeeded.
        pub const SUCCEEDED: State = State::new("SUCCEEDED");

        /// The `JobRun` has failed.
        pub const FAILED: State = State::new("FAILED");

        /// The `JobRun` is terminating.
        pub const TERMINATING: State = State::new("TERMINATING");

        /// The `JobRun` was terminated.
        pub const TERMINATED: State = State::new("TERMINATED");
    }

    impl std::convert::From<std::string::String> for State {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// The `JobRun` type and the information for that type.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum JobRun {
        /// Output only. Information specific to a deploy `JobRun`.
        DeployJobRun(std::boxed::Box<crate::model::DeployJobRun>),
        /// Output only. Information specific to a verify `JobRun`.
        VerifyJobRun(std::boxed::Box<crate::model::VerifyJobRun>),
        /// Output only. Information specific to a predeploy `JobRun`.
        PredeployJobRun(std::boxed::Box<crate::model::PredeployJobRun>),
        /// Output only. Information specific to a postdeploy `JobRun`.
        PostdeployJobRun(std::boxed::Box<crate::model::PostdeployJobRun>),
        /// Output only. Information specific to a createChildRollout `JobRun`.
        CreateChildRolloutJobRun(std::boxed::Box<crate::model::CreateChildRolloutJobRun>),
        /// Output only. Information specific to an advanceChildRollout `JobRun`
        AdvanceChildRolloutJobRun(std::boxed::Box<crate::model::AdvanceChildRolloutJobRun>),
    }
}

/// DeployJobRun contains information specific to a deploy `JobRun`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeployJobRun {
    /// Output only. The resource name of the Cloud Build `Build` object that is
    /// used to deploy. Format is
    /// `projects/{project}/locations/{location}/builds/{build}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub build: std::string::String,

    /// Output only. The reason the deploy failed. This will always be unspecified
    /// while the deploy is in progress or if it succeeded.
    pub failure_cause: crate::model::deploy_job_run::FailureCause,

    /// Output only. Additional information about the deploy failure, if available.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub failure_message: std::string::String,

    /// Output only. Metadata containing information about the deploy job run.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub metadata: std::option::Option<crate::model::DeployJobRunMetadata>,

    /// Output only. The artifact of a deploy job run, if available.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub artifact: std::option::Option<crate::model::DeployArtifact>,
}

impl DeployJobRun {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [build][crate::model::DeployJobRun::build].
    pub fn set_build<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.build = v.into();
        self
    }

    /// Sets the value of [failure_cause][crate::model::DeployJobRun::failure_cause].
    pub fn set_failure_cause<T: std::convert::Into<crate::model::deploy_job_run::FailureCause>>(
        mut self,
        v: T,
    ) -> Self {
        self.failure_cause = v.into();
        self
    }

    /// Sets the value of [failure_message][crate::model::DeployJobRun::failure_message].
    pub fn set_failure_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.failure_message = v.into();
        self
    }

    /// Sets the value of [metadata][crate::model::DeployJobRun::metadata].
    pub fn set_metadata<
        T: std::convert::Into<std::option::Option<crate::model::DeployJobRunMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.metadata = v.into();
        self
    }

    /// Sets the value of [artifact][crate::model::DeployJobRun::artifact].
    pub fn set_artifact<
        T: std::convert::Into<std::option::Option<crate::model::DeployArtifact>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.artifact = v.into();
        self
    }
}

impl wkt::message::Message for DeployJobRun {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.DeployJobRun"
    }
}

/// Defines additional types related to DeployJobRun
pub mod deploy_job_run {
    #[allow(unused_imports)]
    use super::*;

    /// Well-known deploy failures.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct FailureCause(std::borrow::Cow<'static, str>);

    impl FailureCause {
        /// Creates a new FailureCause instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [FailureCause](FailureCause)
    pub mod failure_cause {
        use super::FailureCause;

        /// No reason for failure is specified.
        pub const FAILURE_CAUSE_UNSPECIFIED: FailureCause =
            FailureCause::new("FAILURE_CAUSE_UNSPECIFIED");

        /// Cloud Build is not available, either because it is not enabled or because
        /// Cloud Deploy has insufficient permissions. See [Required
        /// permission](https://cloud.google.com/deploy/docs/cloud-deploy-service-account#required_permissions).
        pub const CLOUD_BUILD_UNAVAILABLE: FailureCause =
            FailureCause::new("CLOUD_BUILD_UNAVAILABLE");

        /// The deploy operation did not complete successfully; check Cloud Build
        /// logs.
        pub const EXECUTION_FAILED: FailureCause = FailureCause::new("EXECUTION_FAILED");

        /// The deploy job run did not complete within the alloted time.
        pub const DEADLINE_EXCEEDED: FailureCause = FailureCause::new("DEADLINE_EXCEEDED");

        /// There were missing resources in the runtime environment required for a
        /// canary deployment. Check the Cloud Build logs for more information.
        pub const MISSING_RESOURCES_FOR_CANARY: FailureCause =
            FailureCause::new("MISSING_RESOURCES_FOR_CANARY");

        /// Cloud Build failed to fulfill Cloud Deploy's request. See failure_message
        /// for additional details.
        pub const CLOUD_BUILD_REQUEST_FAILED: FailureCause =
            FailureCause::new("CLOUD_BUILD_REQUEST_FAILED");

        /// The deploy operation had a feature configured that is not supported.
        pub const DEPLOY_FEATURE_NOT_SUPPORTED: FailureCause =
            FailureCause::new("DEPLOY_FEATURE_NOT_SUPPORTED");
    }

    impl std::convert::From<std::string::String> for FailureCause {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// VerifyJobRun contains information specific to a verify `JobRun`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct VerifyJobRun {
    /// Output only. The resource name of the Cloud Build `Build` object that is
    /// used to verify. Format is
    /// `projects/{project}/locations/{location}/builds/{build}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub build: std::string::String,

    /// Output only. URI of a directory containing the verify artifacts. This
    /// contains the Skaffold event log.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub artifact_uri: std::string::String,

    /// Output only. File path of the Skaffold event log relative to the artifact
    /// URI.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub event_log_path: std::string::String,

    /// Output only. The reason the verify failed. This will always be unspecified
    /// while the verify is in progress or if it succeeded.
    pub failure_cause: crate::model::verify_job_run::FailureCause,

    /// Output only. Additional information about the verify failure, if available.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub failure_message: std::string::String,
}

impl VerifyJobRun {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [build][crate::model::VerifyJobRun::build].
    pub fn set_build<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.build = v.into();
        self
    }

    /// Sets the value of [artifact_uri][crate::model::VerifyJobRun::artifact_uri].
    pub fn set_artifact_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.artifact_uri = v.into();
        self
    }

    /// Sets the value of [event_log_path][crate::model::VerifyJobRun::event_log_path].
    pub fn set_event_log_path<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.event_log_path = v.into();
        self
    }

    /// Sets the value of [failure_cause][crate::model::VerifyJobRun::failure_cause].
    pub fn set_failure_cause<T: std::convert::Into<crate::model::verify_job_run::FailureCause>>(
        mut self,
        v: T,
    ) -> Self {
        self.failure_cause = v.into();
        self
    }

    /// Sets the value of [failure_message][crate::model::VerifyJobRun::failure_message].
    pub fn set_failure_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.failure_message = v.into();
        self
    }
}

impl wkt::message::Message for VerifyJobRun {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.VerifyJobRun"
    }
}

/// Defines additional types related to VerifyJobRun
pub mod verify_job_run {
    #[allow(unused_imports)]
    use super::*;

    /// Well-known verify failures.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct FailureCause(std::borrow::Cow<'static, str>);

    impl FailureCause {
        /// Creates a new FailureCause instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [FailureCause](FailureCause)
    pub mod failure_cause {
        use super::FailureCause;

        /// No reason for failure is specified.
        pub const FAILURE_CAUSE_UNSPECIFIED: FailureCause =
            FailureCause::new("FAILURE_CAUSE_UNSPECIFIED");

        /// Cloud Build is not available, either because it is not enabled or because
        /// Cloud Deploy has insufficient permissions. See [required
        /// permission](https://cloud.google.com/deploy/docs/cloud-deploy-service-account#required_permissions).
        pub const CLOUD_BUILD_UNAVAILABLE: FailureCause =
            FailureCause::new("CLOUD_BUILD_UNAVAILABLE");

        /// The verify operation did not complete successfully; check Cloud Build
        /// logs.
        pub const EXECUTION_FAILED: FailureCause = FailureCause::new("EXECUTION_FAILED");

        /// The verify job run did not complete within the alloted time.
        pub const DEADLINE_EXCEEDED: FailureCause = FailureCause::new("DEADLINE_EXCEEDED");

        /// No Skaffold verify configuration was found.
        pub const VERIFICATION_CONFIG_NOT_FOUND: FailureCause =
            FailureCause::new("VERIFICATION_CONFIG_NOT_FOUND");

        /// Cloud Build failed to fulfill Cloud Deploy's request. See failure_message
        /// for additional details.
        pub const CLOUD_BUILD_REQUEST_FAILED: FailureCause =
            FailureCause::new("CLOUD_BUILD_REQUEST_FAILED");
    }

    impl std::convert::From<std::string::String> for FailureCause {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// PredeployJobRun contains information specific to a predeploy `JobRun`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PredeployJobRun {
    /// Output only. The resource name of the Cloud Build `Build` object that is
    /// used to execute the custom actions associated with the predeploy Job.
    /// Format is `projects/{project}/locations/{location}/builds/{build}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub build: std::string::String,

    /// Output only. The reason the predeploy failed. This will always be
    /// unspecified while the predeploy is in progress or if it succeeded.
    pub failure_cause: crate::model::predeploy_job_run::FailureCause,

    /// Output only. Additional information about the predeploy failure, if
    /// available.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub failure_message: std::string::String,
}

impl PredeployJobRun {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [build][crate::model::PredeployJobRun::build].
    pub fn set_build<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.build = v.into();
        self
    }

    /// Sets the value of [failure_cause][crate::model::PredeployJobRun::failure_cause].
    pub fn set_failure_cause<
        T: std::convert::Into<crate::model::predeploy_job_run::FailureCause>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.failure_cause = v.into();
        self
    }

    /// Sets the value of [failure_message][crate::model::PredeployJobRun::failure_message].
    pub fn set_failure_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.failure_message = v.into();
        self
    }
}

impl wkt::message::Message for PredeployJobRun {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.PredeployJobRun"
    }
}

/// Defines additional types related to PredeployJobRun
pub mod predeploy_job_run {
    #[allow(unused_imports)]
    use super::*;

    /// Well-known predeploy failures.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct FailureCause(std::borrow::Cow<'static, str>);

    impl FailureCause {
        /// Creates a new FailureCause instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [FailureCause](FailureCause)
    pub mod failure_cause {
        use super::FailureCause;

        /// No reason for failure is specified.
        pub const FAILURE_CAUSE_UNSPECIFIED: FailureCause =
            FailureCause::new("FAILURE_CAUSE_UNSPECIFIED");

        /// Cloud Build is not available, either because it is not enabled or because
        /// Cloud Deploy has insufficient permissions. See [required
        /// permission](https://cloud.google.com/deploy/docs/cloud-deploy-service-account#required_permissions).
        pub const CLOUD_BUILD_UNAVAILABLE: FailureCause =
            FailureCause::new("CLOUD_BUILD_UNAVAILABLE");

        /// The predeploy operation did not complete successfully; check Cloud Build
        /// logs.
        pub const EXECUTION_FAILED: FailureCause = FailureCause::new("EXECUTION_FAILED");

        /// The predeploy job run did not complete within the alloted time.
        pub const DEADLINE_EXCEEDED: FailureCause = FailureCause::new("DEADLINE_EXCEEDED");

        /// Cloud Build failed to fulfill Cloud Deploy's request. See failure_message
        /// for additional details.
        pub const CLOUD_BUILD_REQUEST_FAILED: FailureCause =
            FailureCause::new("CLOUD_BUILD_REQUEST_FAILED");
    }

    impl std::convert::From<std::string::String> for FailureCause {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// PostdeployJobRun contains information specific to a postdeploy `JobRun`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PostdeployJobRun {
    /// Output only. The resource name of the Cloud Build `Build` object that is
    /// used to execute the custom actions associated with the postdeploy Job.
    /// Format is `projects/{project}/locations/{location}/builds/{build}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub build: std::string::String,

    /// Output only. The reason the postdeploy failed. This will always be
    /// unspecified while the postdeploy is in progress or if it succeeded.
    pub failure_cause: crate::model::postdeploy_job_run::FailureCause,

    /// Output only. Additional information about the postdeploy failure, if
    /// available.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub failure_message: std::string::String,
}

impl PostdeployJobRun {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [build][crate::model::PostdeployJobRun::build].
    pub fn set_build<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.build = v.into();
        self
    }

    /// Sets the value of [failure_cause][crate::model::PostdeployJobRun::failure_cause].
    pub fn set_failure_cause<
        T: std::convert::Into<crate::model::postdeploy_job_run::FailureCause>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.failure_cause = v.into();
        self
    }

    /// Sets the value of [failure_message][crate::model::PostdeployJobRun::failure_message].
    pub fn set_failure_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.failure_message = v.into();
        self
    }
}

impl wkt::message::Message for PostdeployJobRun {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.PostdeployJobRun"
    }
}

/// Defines additional types related to PostdeployJobRun
pub mod postdeploy_job_run {
    #[allow(unused_imports)]
    use super::*;

    /// Well-known postdeploy failures.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct FailureCause(std::borrow::Cow<'static, str>);

    impl FailureCause {
        /// Creates a new FailureCause instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [FailureCause](FailureCause)
    pub mod failure_cause {
        use super::FailureCause;

        /// No reason for failure is specified.
        pub const FAILURE_CAUSE_UNSPECIFIED: FailureCause =
            FailureCause::new("FAILURE_CAUSE_UNSPECIFIED");

        /// Cloud Build is not available, either because it is not enabled or because
        /// Cloud Deploy has insufficient permissions. See [required
        /// permission](https://cloud.google.com/deploy/docs/cloud-deploy-service-account#required_permissions).
        pub const CLOUD_BUILD_UNAVAILABLE: FailureCause =
            FailureCause::new("CLOUD_BUILD_UNAVAILABLE");

        /// The postdeploy operation did not complete successfully; check Cloud Build
        /// logs.
        pub const EXECUTION_FAILED: FailureCause = FailureCause::new("EXECUTION_FAILED");

        /// The postdeploy job run did not complete within the alloted time.
        pub const DEADLINE_EXCEEDED: FailureCause = FailureCause::new("DEADLINE_EXCEEDED");

        /// Cloud Build failed to fulfill Cloud Deploy's request. See failure_message
        /// for additional details.
        pub const CLOUD_BUILD_REQUEST_FAILED: FailureCause =
            FailureCause::new("CLOUD_BUILD_REQUEST_FAILED");
    }

    impl std::convert::From<std::string::String> for FailureCause {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// CreateChildRolloutJobRun contains information specific to a
/// createChildRollout `JobRun`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateChildRolloutJobRun {
    /// Output only. Name of the `ChildRollout`. Format is
    /// `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/{rollout}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rollout: std::string::String,

    /// Output only. The ID of the childRollout Phase initiated by this JobRun.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rollout_phase_id: std::string::String,
}

impl CreateChildRolloutJobRun {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [rollout][crate::model::CreateChildRolloutJobRun::rollout].
    pub fn set_rollout<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.rollout = v.into();
        self
    }

    /// Sets the value of [rollout_phase_id][crate::model::CreateChildRolloutJobRun::rollout_phase_id].
    pub fn set_rollout_phase_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.rollout_phase_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateChildRolloutJobRun {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CreateChildRolloutJobRun"
    }
}

/// AdvanceChildRolloutJobRun contains information specific to a
/// advanceChildRollout `JobRun`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AdvanceChildRolloutJobRun {
    /// Output only. Name of the `ChildRollout`. Format is
    /// `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/{rollout}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rollout: std::string::String,

    /// Output only. the ID of the ChildRollout's Phase.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rollout_phase_id: std::string::String,
}

impl AdvanceChildRolloutJobRun {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [rollout][crate::model::AdvanceChildRolloutJobRun::rollout].
    pub fn set_rollout<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.rollout = v.into();
        self
    }

    /// Sets the value of [rollout_phase_id][crate::model::AdvanceChildRolloutJobRun::rollout_phase_id].
    pub fn set_rollout_phase_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.rollout_phase_id = v.into();
        self
    }
}

impl wkt::message::Message for AdvanceChildRolloutJobRun {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.AdvanceChildRolloutJobRun"
    }
}

/// ListJobRunsRequest is the request object used by `ListJobRuns`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListJobRunsRequest {
    /// Required. The `Rollout` which owns this collection of `JobRun` objects.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of `JobRun` objects to return. The service may
    /// return fewer than this value. If unspecified, at most 50 `JobRun` objects
    /// will be returned. The maximum value is 1000; values above 1000 will be set
    /// to 1000.
    pub page_size: i32,

    /// Optional. A page token, received from a previous `ListJobRuns` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other provided parameters match the call that provided
    /// the page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. Filter results to be returned. See <https://google.aip.dev/160> for
    /// more details.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. Field to sort by. See <https://google.aip.dev/132#ordering> for
    /// more details.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListJobRunsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListJobRunsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListJobRunsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListJobRunsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListJobRunsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListJobRunsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListJobRunsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.ListJobRunsRequest"
    }
}

/// ListJobRunsResponse is the response object returned by `ListJobRuns`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListJobRunsResponse {
    /// The `JobRun` objects.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub job_runs: std::vec::Vec<crate::model::JobRun>,

    /// A token, which can be sent as `page_token` to retrieve the next page. If
    /// this field is omitted, there are no subsequent pages.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListJobRunsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListJobRunsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [job_runs][crate::model::ListJobRunsResponse::job_runs].
    pub fn set_job_runs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::JobRun>,
    {
        use std::iter::Iterator;
        self.job_runs = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListJobRunsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListJobRunsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.ListJobRunsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListJobRunsResponse {
    type PageItem = crate::model::JobRun;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.job_runs
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// GetJobRunRequest is the request object used by `GetJobRun`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetJobRunRequest {
    /// Required. Name of the `JobRun`. Format must be
    /// `projects/{project_id}/locations/{location_name}/deliveryPipelines/{pipeline_name}/releases/{release_name}/rollouts/{rollout_name}/jobRuns/{job_run_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetJobRunRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetJobRunRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetJobRunRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.GetJobRunRequest"
    }
}

/// The request object used by `TerminateJobRun`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TerminateJobRunRequest {
    /// Required. Name of the `JobRun`. Format must be
    /// `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/{rollout}/jobRuns/{jobRun}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. Deploy policies to override. Format is
    /// `projects/{project}/locations/{location}/deployPolicies/{deployPolicy}`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub override_deploy_policy: std::vec::Vec<std::string::String>,
}

impl TerminateJobRunRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::TerminateJobRunRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [override_deploy_policy][crate::model::TerminateJobRunRequest::override_deploy_policy].
    pub fn set_override_deploy_policy<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.override_deploy_policy = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for TerminateJobRunRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.TerminateJobRunRequest"
    }
}

/// The response object from `TerminateJobRun`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TerminateJobRunResponse {}

impl TerminateJobRunResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for TerminateJobRunResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.TerminateJobRunResponse"
    }
}

/// Service-wide configuration.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Config {
    /// Name of the configuration.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// All supported versions of Skaffold.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub supported_versions: std::vec::Vec<crate::model::SkaffoldVersion>,

    /// Default Skaffold version that is assigned when a Release is created without
    /// specifying a Skaffold version.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub default_skaffold_version: std::string::String,
}

impl Config {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Config::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [default_skaffold_version][crate::model::Config::default_skaffold_version].
    pub fn set_default_skaffold_version<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.default_skaffold_version = v.into();
        self
    }

    /// Sets the value of [supported_versions][crate::model::Config::supported_versions].
    pub fn set_supported_versions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SkaffoldVersion>,
    {
        use std::iter::Iterator;
        self.supported_versions = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Config {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.Config"
    }
}

/// Details of a supported Skaffold version.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SkaffoldVersion {
    /// Release version number. For example, "1.20.3".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub version: std::string::String,

    /// The time at which this version of Skaffold will enter maintenance mode.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub maintenance_mode_time: std::option::Option<wkt::Timestamp>,

    /// The time at which this version of Skaffold will no longer be supported.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub support_expiration_time: std::option::Option<wkt::Timestamp>,

    /// Date when this version is expected to no longer be supported.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub support_end_date: std::option::Option<gtype::model::Date>,
}

impl SkaffoldVersion {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [version][crate::model::SkaffoldVersion::version].
    pub fn set_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.version = v.into();
        self
    }

    /// Sets the value of [maintenance_mode_time][crate::model::SkaffoldVersion::maintenance_mode_time].
    pub fn set_maintenance_mode_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.maintenance_mode_time = v.into();
        self
    }

    /// Sets the value of [support_expiration_time][crate::model::SkaffoldVersion::support_expiration_time].
    pub fn set_support_expiration_time<
        T: std::convert::Into<std::option::Option<wkt::Timestamp>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.support_expiration_time = v.into();
        self
    }

    /// Sets the value of [support_end_date][crate::model::SkaffoldVersion::support_end_date].
    pub fn set_support_end_date<T: std::convert::Into<std::option::Option<gtype::model::Date>>>(
        mut self,
        v: T,
    ) -> Self {
        self.support_end_date = v.into();
        self
    }
}

impl wkt::message::Message for SkaffoldVersion {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.SkaffoldVersion"
    }
}

/// Request to get a configuration.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetConfigRequest {
    /// Required. Name of requested configuration.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetConfigRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.GetConfigRequest"
    }
}

/// An `Automation` resource in the Cloud Deploy API.
///
/// An `Automation` enables the automation of manually driven actions for
/// a Delivery Pipeline, which includes Release promotion among Targets,
/// Rollout repair and Rollout deployment strategy advancement. The intention
/// of Automation is to reduce manual intervention in the continuous delivery
/// process.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Automation {
    /// Output only. Name of the `Automation`. Format is
    /// `projects/{project}/locations/{location}/deliveryPipelines/{delivery_pipeline}/automations/{automation}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Unique identifier of the `Automation`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uid: std::string::String,

    /// Optional. Description of the `Automation`. Max length is 255 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Output only. Time at which the automation was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Time at which the automation was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional. User annotations. These attributes can only be set and used by
    /// the user, and not by Cloud Deploy. Annotations must meet the following
    /// constraints:
    ///
    /// * Annotations are key/value pairs.
    /// * Valid annotation keys have two segments: an optional prefix and name,
    ///   separated by a slash (`/`).
    /// * The name segment is required and must be 63 characters or less,
    ///   beginning and ending with an alphanumeric character (`[a-z0-9A-Z]`) with
    ///   dashes (`-`), underscores (`_`), dots (`.`), and alphanumerics between.
    /// * The prefix is optional. If specified, the prefix must be a DNS subdomain:
    ///   a series of DNS labels separated by dots(`.`), not longer than 253
    ///   characters in total, followed by a slash (`/`).
    ///
    /// See
    /// <https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set>
    /// for more details.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub annotations: std::collections::HashMap<std::string::String, std::string::String>,

    /// Optional. Labels are attributes that can be set and used by both the
    /// user and by Cloud Deploy. Labels must meet the following constraints:
    ///
    /// * Keys and values can contain only lowercase letters, numeric characters,
    ///   underscores, and dashes.
    /// * All characters must use UTF-8 encoding, and international characters are
    ///   allowed.
    /// * Keys must start with a lowercase letter or international character.
    /// * Each resource is limited to a maximum of 64 labels.
    ///
    /// Both keys and values are additionally constrained to be <= 63 characters.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Optional. The weak etag of the `Automation` resource.
    /// This checksum is computed by the server based on the value of other
    /// fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub etag: std::string::String,

    /// Optional. When Suspended, automation is deactivated from execution.
    pub suspended: bool,

    /// Required. Email address of the user-managed IAM service account that
    /// creates Cloud Deploy release and rollout resources.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_account: std::string::String,

    /// Required. Selected resources to which the automation will be applied.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub selector: std::option::Option<crate::model::AutomationResourceSelector>,

    /// Required. List of Automation rules associated with the Automation resource.
    /// Must have at least one rule and limited to 250 rules per Delivery Pipeline.
    /// Note: the order of the rules here is not the same as the order of
    /// execution.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub rules: std::vec::Vec<crate::model::AutomationRule>,
}

impl Automation {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Automation::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [uid][crate::model::Automation::uid].
    pub fn set_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uid = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Automation::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Automation::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Automation::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::Automation::etag].
    pub fn set_etag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.etag = v.into();
        self
    }

    /// Sets the value of [suspended][crate::model::Automation::suspended].
    pub fn set_suspended<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.suspended = v.into();
        self
    }

    /// Sets the value of [service_account][crate::model::Automation::service_account].
    pub fn set_service_account<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service_account = v.into();
        self
    }

    /// Sets the value of [selector][crate::model::Automation::selector].
    pub fn set_selector<
        T: std::convert::Into<std::option::Option<crate::model::AutomationResourceSelector>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.selector = v.into();
        self
    }

    /// Sets the value of [rules][crate::model::Automation::rules].
    pub fn set_rules<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::AutomationRule>,
    {
        use std::iter::Iterator;
        self.rules = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [annotations][crate::model::Automation::annotations].
    pub fn set_annotations<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.annotations = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [labels][crate::model::Automation::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Automation {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.Automation"
    }
}

/// AutomationResourceSelector contains the information to select the resources
/// to which an Automation is going to be applied.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AutomationResourceSelector {
    /// Optional. Contains attributes about a target.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub targets: std::vec::Vec<crate::model::TargetAttribute>,
}

impl AutomationResourceSelector {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [targets][crate::model::AutomationResourceSelector::targets].
    pub fn set_targets<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TargetAttribute>,
    {
        use std::iter::Iterator;
        self.targets = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for AutomationResourceSelector {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.AutomationResourceSelector"
    }
}

/// `AutomationRule` defines the automation activities.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AutomationRule {
    /// The configuration of the Automation rule.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub rule: std::option::Option<crate::model::automation_rule::Rule>,
}

impl AutomationRule {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of `rule`.
    pub fn set_rule<
        T: std::convert::Into<std::option::Option<crate::model::automation_rule::Rule>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.rule = v.into();
        self
    }

    /// The value of [rule][crate::model::AutomationRule::rule]
    /// if it holds a `PromoteReleaseRule`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_promote_release_rule(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::PromoteReleaseRule>> {
        #[allow(unreachable_patterns)]
        self.rule.as_ref().and_then(|v| match v {
            crate::model::automation_rule::Rule::PromoteReleaseRule(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [rule][crate::model::AutomationRule::rule]
    /// if it holds a `AdvanceRolloutRule`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_advance_rollout_rule(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::AdvanceRolloutRule>> {
        #[allow(unreachable_patterns)]
        self.rule.as_ref().and_then(|v| match v {
            crate::model::automation_rule::Rule::AdvanceRolloutRule(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [rule][crate::model::AutomationRule::rule]
    /// if it holds a `RepairRolloutRule`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_repair_rollout_rule(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::RepairRolloutRule>> {
        #[allow(unreachable_patterns)]
        self.rule.as_ref().and_then(|v| match v {
            crate::model::automation_rule::Rule::RepairRolloutRule(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [rule][crate::model::AutomationRule::rule]
    /// if it holds a `TimedPromoteReleaseRule`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_timed_promote_release_rule(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::TimedPromoteReleaseRule>> {
        #[allow(unreachable_patterns)]
        self.rule.as_ref().and_then(|v| match v {
            crate::model::automation_rule::Rule::TimedPromoteReleaseRule(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [rule][crate::model::AutomationRule::rule]
    /// to hold a `PromoteReleaseRule`.
    ///
    /// Note that all the setters affecting `rule` are
    /// mutually exclusive.
    pub fn set_promote_release_rule<
        T: std::convert::Into<std::boxed::Box<crate::model::PromoteReleaseRule>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.rule = std::option::Option::Some(
            crate::model::automation_rule::Rule::PromoteReleaseRule(v.into()),
        );
        self
    }

    /// Sets the value of [rule][crate::model::AutomationRule::rule]
    /// to hold a `AdvanceRolloutRule`.
    ///
    /// Note that all the setters affecting `rule` are
    /// mutually exclusive.
    pub fn set_advance_rollout_rule<
        T: std::convert::Into<std::boxed::Box<crate::model::AdvanceRolloutRule>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.rule = std::option::Option::Some(
            crate::model::automation_rule::Rule::AdvanceRolloutRule(v.into()),
        );
        self
    }

    /// Sets the value of [rule][crate::model::AutomationRule::rule]
    /// to hold a `RepairRolloutRule`.
    ///
    /// Note that all the setters affecting `rule` are
    /// mutually exclusive.
    pub fn set_repair_rollout_rule<
        T: std::convert::Into<std::boxed::Box<crate::model::RepairRolloutRule>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.rule = std::option::Option::Some(
            crate::model::automation_rule::Rule::RepairRolloutRule(v.into()),
        );
        self
    }

    /// Sets the value of [rule][crate::model::AutomationRule::rule]
    /// to hold a `TimedPromoteReleaseRule`.
    ///
    /// Note that all the setters affecting `rule` are
    /// mutually exclusive.
    pub fn set_timed_promote_release_rule<
        T: std::convert::Into<std::boxed::Box<crate::model::TimedPromoteReleaseRule>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.rule = std::option::Option::Some(
            crate::model::automation_rule::Rule::TimedPromoteReleaseRule(v.into()),
        );
        self
    }
}

impl wkt::message::Message for AutomationRule {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.AutomationRule"
    }
}

/// Defines additional types related to AutomationRule
pub mod automation_rule {
    #[allow(unused_imports)]
    use super::*;

    /// The configuration of the Automation rule.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Rule {
        /// Optional. `PromoteReleaseRule` will automatically promote a release from
        /// the current target to a specified target.
        PromoteReleaseRule(std::boxed::Box<crate::model::PromoteReleaseRule>),
        /// Optional. The `AdvanceRolloutRule` will automatically advance a
        /// successful Rollout.
        AdvanceRolloutRule(std::boxed::Box<crate::model::AdvanceRolloutRule>),
        /// Optional. The `RepairRolloutRule` will automatically repair a failed
        /// rollout.
        RepairRolloutRule(std::boxed::Box<crate::model::RepairRolloutRule>),
        /// Optional. The `TimedPromoteReleaseRule` will automatically promote a
        /// release from the current target(s) to the specified target(s) on a
        /// configured schedule.
        TimedPromoteReleaseRule(std::boxed::Box<crate::model::TimedPromoteReleaseRule>),
    }
}

/// The `TimedPromoteReleaseRule` will automatically promote a release from the
/// current target(s) to the specified target(s) on a configured schedule.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TimedPromoteReleaseRule {
    /// Required. ID of the rule. This ID must be unique in the `Automation`
    /// resource to which this rule belongs. The format is
    /// `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub id: std::string::String,

    /// Optional. The ID of the stage in the pipeline to which this `Release` is
    /// deploying. If unspecified, default it to the next stage in the promotion
    /// flow. The value of this field could be one of the following:
    ///
    /// * The last segment of a target name
    /// * "@next", the next target in the promotion sequence
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub destination_target_id: std::string::String,

    /// Required. Schedule in crontab format. e.g. "0 9 * * 1" for every Monday at
    /// 9am.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub schedule: std::string::String,

    /// Required. The time zone in IANA format [IANA Time Zone
    /// Database](https://www.iana.org/time-zones) (e.g. America/New_York).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub time_zone: std::string::String,

    /// Output only. Information around the state of the Automation rule.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub condition: std::option::Option<crate::model::AutomationRuleCondition>,

    /// Optional. The starting phase of the rollout created by this rule. Default
    /// to the first phase.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub destination_phase: std::string::String,
}

impl TimedPromoteReleaseRule {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [id][crate::model::TimedPromoteReleaseRule::id].
    pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id = v.into();
        self
    }

    /// Sets the value of [destination_target_id][crate::model::TimedPromoteReleaseRule::destination_target_id].
    pub fn set_destination_target_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.destination_target_id = v.into();
        self
    }

    /// Sets the value of [schedule][crate::model::TimedPromoteReleaseRule::schedule].
    pub fn set_schedule<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.schedule = v.into();
        self
    }

    /// Sets the value of [time_zone][crate::model::TimedPromoteReleaseRule::time_zone].
    pub fn set_time_zone<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.time_zone = v.into();
        self
    }

    /// Sets the value of [condition][crate::model::TimedPromoteReleaseRule::condition].
    pub fn set_condition<
        T: std::convert::Into<std::option::Option<crate::model::AutomationRuleCondition>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.condition = v.into();
        self
    }

    /// Sets the value of [destination_phase][crate::model::TimedPromoteReleaseRule::destination_phase].
    pub fn set_destination_phase<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.destination_phase = v.into();
        self
    }
}

impl wkt::message::Message for TimedPromoteReleaseRule {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.TimedPromoteReleaseRule"
    }
}

/// The `PromoteRelease` rule will automatically promote a release from the
/// current target to a specified target.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PromoteReleaseRule {
    /// Required. ID of the rule. This id must be unique in the `Automation`
    /// resource to which this rule belongs. The format is
    /// `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub id: std::string::String,

    /// Optional. How long the release need to be paused until being promoted to
    /// the next target.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub wait: std::option::Option<wkt::Duration>,

    /// Optional. The ID of the stage in the pipeline to which this `Release` is
    /// deploying. If unspecified, default it to the next stage in the promotion
    /// flow. The value of this field could be one of the following:
    ///
    /// * The last segment of a target name
    /// * "@next", the next target in the promotion sequence
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub destination_target_id: std::string::String,

    /// Output only. Information around the state of the Automation rule.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub condition: std::option::Option<crate::model::AutomationRuleCondition>,

    /// Optional. The starting phase of the rollout created by this operation.
    /// Default to the first phase.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub destination_phase: std::string::String,
}

impl PromoteReleaseRule {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [id][crate::model::PromoteReleaseRule::id].
    pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id = v.into();
        self
    }

    /// Sets the value of [wait][crate::model::PromoteReleaseRule::wait].
    pub fn set_wait<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.wait = v.into();
        self
    }

    /// Sets the value of [destination_target_id][crate::model::PromoteReleaseRule::destination_target_id].
    pub fn set_destination_target_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.destination_target_id = v.into();
        self
    }

    /// Sets the value of [condition][crate::model::PromoteReleaseRule::condition].
    pub fn set_condition<
        T: std::convert::Into<std::option::Option<crate::model::AutomationRuleCondition>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.condition = v.into();
        self
    }

    /// Sets the value of [destination_phase][crate::model::PromoteReleaseRule::destination_phase].
    pub fn set_destination_phase<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.destination_phase = v.into();
        self
    }
}

impl wkt::message::Message for PromoteReleaseRule {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.PromoteReleaseRule"
    }
}

/// The `AdvanceRollout` automation rule will automatically advance a successful
/// Rollout to the next phase.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AdvanceRolloutRule {
    /// Required. ID of the rule. This id must be unique in the `Automation`
    /// resource to which this rule belongs. The format is
    /// `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub id: std::string::String,

    /// Optional. Proceeds only after phase name matched any one in the list.
    /// This value must consist of lower-case letters, numbers, and hyphens,
    /// start with a letter and end with a letter or a number, and have a max
    /// length of 63 characters. In other words, it must match the following
    /// regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub source_phases: std::vec::Vec<std::string::String>,

    /// Optional. How long to wait after a rollout is finished.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub wait: std::option::Option<wkt::Duration>,

    /// Output only. Information around the state of the Automation rule.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub condition: std::option::Option<crate::model::AutomationRuleCondition>,
}

impl AdvanceRolloutRule {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [id][crate::model::AdvanceRolloutRule::id].
    pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id = v.into();
        self
    }

    /// Sets the value of [wait][crate::model::AdvanceRolloutRule::wait].
    pub fn set_wait<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.wait = v.into();
        self
    }

    /// Sets the value of [condition][crate::model::AdvanceRolloutRule::condition].
    pub fn set_condition<
        T: std::convert::Into<std::option::Option<crate::model::AutomationRuleCondition>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.condition = v.into();
        self
    }

    /// Sets the value of [source_phases][crate::model::AdvanceRolloutRule::source_phases].
    pub fn set_source_phases<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.source_phases = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for AdvanceRolloutRule {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.AdvanceRolloutRule"
    }
}

/// The `RepairRolloutRule` automation rule will automatically repair a failed
/// `Rollout`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RepairRolloutRule {
    /// Required. ID of the rule. This id must be unique in the `Automation`
    /// resource to which this rule belongs. The format is
    /// `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub id: std::string::String,

    /// Optional. Phases within which jobs are subject to automatic repair actions
    /// on failure. Proceeds only after phase name matched any one in the list, or
    /// for all phases if unspecified. This value must consist of lower-case
    /// letters, numbers, and hyphens, start with a letter and end with a letter or
    /// a number, and have a max length of 63 characters. In other words, it must
    /// match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub phases: std::vec::Vec<std::string::String>,

    /// Optional. Jobs to repair. Proceeds only after job name matched any one in
    /// the list, or for all jobs if unspecified or empty. The phase that includes
    /// the job must match the phase ID specified in `source_phase`. This value
    /// must consist of lower-case letters, numbers, and hyphens, start with a
    /// letter and end with a letter or a number, and have a max length of 63
    /// characters. In other words, it must match the following regex:
    /// `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub jobs: std::vec::Vec<std::string::String>,

    /// Output only. Information around the state of the 'Automation' rule.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub condition: std::option::Option<crate::model::AutomationRuleCondition>,

    /// Required. Defines the types of automatic repair phases for failed jobs.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub repair_phases: std::vec::Vec<crate::model::RepairPhaseConfig>,
}

impl RepairRolloutRule {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [id][crate::model::RepairRolloutRule::id].
    pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id = v.into();
        self
    }

    /// Sets the value of [condition][crate::model::RepairRolloutRule::condition].
    pub fn set_condition<
        T: std::convert::Into<std::option::Option<crate::model::AutomationRuleCondition>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.condition = v.into();
        self
    }

    /// Sets the value of [phases][crate::model::RepairRolloutRule::phases].
    pub fn set_phases<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.phases = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [jobs][crate::model::RepairRolloutRule::jobs].
    pub fn set_jobs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.jobs = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [repair_phases][crate::model::RepairRolloutRule::repair_phases].
    pub fn set_repair_phases<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::RepairPhaseConfig>,
    {
        use std::iter::Iterator;
        self.repair_phases = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for RepairRolloutRule {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.RepairRolloutRule"
    }
}

/// Configuration of the repair phase.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RepairPhaseConfig {
    /// The repair phase to perform.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub repair_phase: std::option::Option<crate::model::repair_phase_config::RepairPhase>,
}

impl RepairPhaseConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of `repair_phase`.
    pub fn set_repair_phase<
        T: std::convert::Into<std::option::Option<crate::model::repair_phase_config::RepairPhase>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.repair_phase = v.into();
        self
    }

    /// The value of [repair_phase][crate::model::RepairPhaseConfig::repair_phase]
    /// if it holds a `Retry`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_retry(&self) -> std::option::Option<&std::boxed::Box<crate::model::Retry>> {
        #[allow(unreachable_patterns)]
        self.repair_phase.as_ref().and_then(|v| match v {
            crate::model::repair_phase_config::RepairPhase::Retry(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [repair_phase][crate::model::RepairPhaseConfig::repair_phase]
    /// if it holds a `Rollback`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_rollback(&self) -> std::option::Option<&std::boxed::Box<crate::model::Rollback>> {
        #[allow(unreachable_patterns)]
        self.repair_phase.as_ref().and_then(|v| match v {
            crate::model::repair_phase_config::RepairPhase::Rollback(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [repair_phase][crate::model::RepairPhaseConfig::repair_phase]
    /// to hold a `Retry`.
    ///
    /// Note that all the setters affecting `repair_phase` are
    /// mutually exclusive.
    pub fn set_retry<T: std::convert::Into<std::boxed::Box<crate::model::Retry>>>(
        mut self,
        v: T,
    ) -> Self {
        self.repair_phase = std::option::Option::Some(
            crate::model::repair_phase_config::RepairPhase::Retry(v.into()),
        );
        self
    }

    /// Sets the value of [repair_phase][crate::model::RepairPhaseConfig::repair_phase]
    /// to hold a `Rollback`.
    ///
    /// Note that all the setters affecting `repair_phase` are
    /// mutually exclusive.
    pub fn set_rollback<T: std::convert::Into<std::boxed::Box<crate::model::Rollback>>>(
        mut self,
        v: T,
    ) -> Self {
        self.repair_phase = std::option::Option::Some(
            crate::model::repair_phase_config::RepairPhase::Rollback(v.into()),
        );
        self
    }
}

impl wkt::message::Message for RepairPhaseConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.RepairPhaseConfig"
    }
}

/// Defines additional types related to RepairPhaseConfig
pub mod repair_phase_config {
    #[allow(unused_imports)]
    use super::*;

    /// The repair phase to perform.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum RepairPhase {
        /// Optional. Retries a failed job.
        Retry(std::boxed::Box<crate::model::Retry>),
        /// Optional. Rolls back a `Rollout`.
        Rollback(std::boxed::Box<crate::model::Rollback>),
    }
}

/// Retries the failed job.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Retry {
    /// Required. Total number of retries. Retry is skipped if set to 0; The
    /// minimum value is 1, and the maximum value is 10.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub attempts: i64,

    /// Optional. How long to wait for the first retry. Default is 0, and the
    /// maximum value is 14d.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub wait: std::option::Option<wkt::Duration>,

    /// Optional. The pattern of how wait time will be increased. Default is
    /// linear. Backoff mode will be ignored if `wait` is 0.
    pub backoff_mode: crate::model::BackoffMode,
}

impl Retry {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [attempts][crate::model::Retry::attempts].
    pub fn set_attempts<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.attempts = v.into();
        self
    }

    /// Sets the value of [wait][crate::model::Retry::wait].
    pub fn set_wait<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.wait = v.into();
        self
    }

    /// Sets the value of [backoff_mode][crate::model::Retry::backoff_mode].
    pub fn set_backoff_mode<T: std::convert::Into<crate::model::BackoffMode>>(
        mut self,
        v: T,
    ) -> Self {
        self.backoff_mode = v.into();
        self
    }
}

impl wkt::message::Message for Retry {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.Retry"
    }
}

/// Rolls back a `Rollout`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Rollback {
    /// Optional. The starting phase ID for the `Rollout`. If unspecified, the
    /// `Rollout` will start in the stable phase.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub destination_phase: std::string::String,

    /// Optional. If pending rollout exists on the target, the rollback operation
    /// will be aborted.
    pub disable_rollback_if_rollout_pending: bool,
}

impl Rollback {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [destination_phase][crate::model::Rollback::destination_phase].
    pub fn set_destination_phase<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.destination_phase = v.into();
        self
    }

    /// Sets the value of [disable_rollback_if_rollout_pending][crate::model::Rollback::disable_rollback_if_rollout_pending].
    pub fn set_disable_rollback_if_rollout_pending<T: std::convert::Into<bool>>(
        mut self,
        v: T,
    ) -> Self {
        self.disable_rollback_if_rollout_pending = v.into();
        self
    }
}

impl wkt::message::Message for Rollback {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.Rollback"
    }
}

/// `AutomationRuleCondition` contains conditions relevant to an
/// `Automation` rule.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AutomationRuleCondition {
    /// Optional. Details around targets enumerated in the rule.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub targets_present_condition: std::option::Option<crate::model::TargetsPresentCondition>,

    /// Details specific to the automation rule type.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub rule_type_condition:
        std::option::Option<crate::model::automation_rule_condition::RuleTypeCondition>,
}

impl AutomationRuleCondition {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [targets_present_condition][crate::model::AutomationRuleCondition::targets_present_condition].
    pub fn set_targets_present_condition<
        T: std::convert::Into<std::option::Option<crate::model::TargetsPresentCondition>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.targets_present_condition = v.into();
        self
    }

    /// Sets the value of `rule_type_condition`.
    pub fn set_rule_type_condition<
        T: std::convert::Into<
            std::option::Option<crate::model::automation_rule_condition::RuleTypeCondition>,
        >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.rule_type_condition = v.into();
        self
    }

    /// The value of [rule_type_condition][crate::model::AutomationRuleCondition::rule_type_condition]
    /// if it holds a `TimedPromoteReleaseCondition`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_timed_promote_release_condition(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::TimedPromoteReleaseCondition>> {
        #[allow(unreachable_patterns)]
        self.rule_type_condition.as_ref().and_then(|v| match v {
            crate::model::automation_rule_condition::RuleTypeCondition::TimedPromoteReleaseCondition(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [rule_type_condition][crate::model::AutomationRuleCondition::rule_type_condition]
    /// to hold a `TimedPromoteReleaseCondition`.
    ///
    /// Note that all the setters affecting `rule_type_condition` are
    /// mutually exclusive.
    pub fn set_timed_promote_release_condition<
        T: std::convert::Into<std::boxed::Box<crate::model::TimedPromoteReleaseCondition>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.rule_type_condition = std::option::Option::Some(
            crate::model::automation_rule_condition::RuleTypeCondition::TimedPromoteReleaseCondition(
                v.into()
            )
        );
        self
    }
}

impl wkt::message::Message for AutomationRuleCondition {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.AutomationRuleCondition"
    }
}

/// Defines additional types related to AutomationRuleCondition
pub mod automation_rule_condition {
    #[allow(unused_imports)]
    use super::*;

    /// Details specific to the automation rule type.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum RuleTypeCondition {
        /// Optional. TimedPromoteReleaseCondition contains rule conditions specific
        /// to a an Automation with a timed promote release rule defined.
        TimedPromoteReleaseCondition(std::boxed::Box<crate::model::TimedPromoteReleaseCondition>),
    }
}

/// `TimedPromoteReleaseCondition` contains conditions specific to an Automation
/// with a Timed Promote Release rule defined.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TimedPromoteReleaseCondition {
    /// Output only. When the next scheduled promotion(s) will occur.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub next_promotion_time: std::option::Option<wkt::Timestamp>,

    /// Output only. A list of targets involved in the upcoming timed promotion(s).
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub targets_list: std::vec::Vec<crate::model::timed_promote_release_condition::Targets>,
}

impl TimedPromoteReleaseCondition {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_promotion_time][crate::model::TimedPromoteReleaseCondition::next_promotion_time].
    pub fn set_next_promotion_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.next_promotion_time = v.into();
        self
    }

    /// Sets the value of [targets_list][crate::model::TimedPromoteReleaseCondition::targets_list].
    pub fn set_targets_list<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::timed_promote_release_condition::Targets>,
    {
        use std::iter::Iterator;
        self.targets_list = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for TimedPromoteReleaseCondition {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.TimedPromoteReleaseCondition"
    }
}

/// Defines additional types related to TimedPromoteReleaseCondition
pub mod timed_promote_release_condition {
    #[allow(unused_imports)]
    use super::*;

    /// The targets involved in a single timed promotion.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Targets {
        /// Optional. The source target ID.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub source_target_id: std::string::String,

        /// Optional. The destination target ID.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub destination_target_id: std::string::String,
    }

    impl Targets {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [source_target_id][crate::model::timed_promote_release_condition::Targets::source_target_id].
        pub fn set_source_target_id<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.source_target_id = v.into();
            self
        }

        /// Sets the value of [destination_target_id][crate::model::timed_promote_release_condition::Targets::destination_target_id].
        pub fn set_destination_target_id<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.destination_target_id = v.into();
            self
        }
    }

    impl wkt::message::Message for Targets {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.deploy.v1.TimedPromoteReleaseCondition.Targets"
        }
    }
}

/// The request object for `CreateAutomation`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateAutomationRequest {
    /// Required. The parent collection in which the `Automation` must be created.
    /// The format is
    /// `projects/{project_id}/locations/{location_name}/deliveryPipelines/{pipeline_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. ID of the `Automation`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub automation_id: std::string::String,

    /// Required. The `Automation` to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub automation: std::option::Option<crate::model::Automation>,

    /// Optional. A request ID to identify requests. Specify a unique request ID
    /// so that if you must retry your request, the server knows to ignore the
    /// request if it has already been completed. The server guarantees that for
    /// at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set to true, the request is validated and the user is provided
    /// with an expected result, but no actual change is made.
    pub validate_only: bool,
}

impl CreateAutomationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateAutomationRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [automation_id][crate::model::CreateAutomationRequest::automation_id].
    pub fn set_automation_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.automation_id = v.into();
        self
    }

    /// Sets the value of [automation][crate::model::CreateAutomationRequest::automation].
    pub fn set_automation<T: std::convert::Into<std::option::Option<crate::model::Automation>>>(
        mut self,
        v: T,
    ) -> Self {
        self.automation = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateAutomationRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::CreateAutomationRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }
}

impl wkt::message::Message for CreateAutomationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CreateAutomationRequest"
    }
}

/// The request object for `UpdateAutomation`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateAutomationRequest {
    /// Required. Field mask is used to specify the fields to be overwritten by the
    /// update in the `Automation` resource. The fields specified in the
    /// update_mask are relative to the resource, not the full request. A field
    /// will be overwritten if it's in the mask. If the user doesn't provide a mask
    /// then all fields are overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The `Automation` to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub automation: std::option::Option<crate::model::Automation>,

    /// Optional. A request ID to identify requests. Specify a unique request ID
    /// so that if you must retry your request, the server knows to ignore the
    /// request if it has already been completed. The server guarantees that for
    /// at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set to true, updating a `Automation` that does not exist will
    /// result in the creation of a new `Automation`.
    pub allow_missing: bool,

    /// Optional. If set to true, the request is validated and the user is provided
    /// with an expected result, but no actual change is made.
    pub validate_only: bool,
}

impl UpdateAutomationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateAutomationRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [automation][crate::model::UpdateAutomationRequest::automation].
    pub fn set_automation<T: std::convert::Into<std::option::Option<crate::model::Automation>>>(
        mut self,
        v: T,
    ) -> Self {
        self.automation = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateAutomationRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [allow_missing][crate::model::UpdateAutomationRequest::allow_missing].
    pub fn set_allow_missing<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.allow_missing = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::UpdateAutomationRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }
}

impl wkt::message::Message for UpdateAutomationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.UpdateAutomationRequest"
    }
}

/// The request object for `DeleteAutomation`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteAutomationRequest {
    /// Required. The name of the `Automation` to delete. The format is
    /// `projects/{project_id}/locations/{location_name}/deliveryPipelines/{pipeline_name}/automations/{automation_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. A request ID to identify requests. Specify a unique request ID
    /// so that if you must retry your request, the server knows to ignore the
    /// request if it has already been completed. The server guarantees that for
    /// at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set to true, then deleting an already deleted or non-existing
    /// `Automation` will succeed.
    pub allow_missing: bool,

    /// Optional. If set, validate the request and verify whether the resource
    /// exists, but do not actually post it.
    pub validate_only: bool,

    /// Optional. The weak etag of the request.
    /// This checksum is computed by the server based on the value of other
    /// fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub etag: std::string::String,
}

impl DeleteAutomationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteAutomationRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteAutomationRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [allow_missing][crate::model::DeleteAutomationRequest::allow_missing].
    pub fn set_allow_missing<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.allow_missing = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::DeleteAutomationRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::DeleteAutomationRequest::etag].
    pub fn set_etag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.etag = v.into();
        self
    }
}

impl wkt::message::Message for DeleteAutomationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.DeleteAutomationRequest"
    }
}

/// The request object for `ListAutomations`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListAutomationsRequest {
    /// Required. The parent `Delivery Pipeline`, which owns this collection of
    /// automations. Format must be
    /// `projects/{project_id}/locations/{location_name}/deliveryPipelines/{pipeline_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of automations to return. The service may return
    /// fewer than this value. If unspecified, at most 50 automations will
    /// be returned. The maximum value is 1000; values above 1000 will be set
    /// to 1000.
    pub page_size: i32,

    /// A page token, received from a previous `ListAutomations` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other provided parameters match
    /// the call that provided the page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Filter automations to be returned. All fields can be used in the
    /// filter.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Field to sort by.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListAutomationsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListAutomationsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListAutomationsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListAutomationsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListAutomationsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListAutomationsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListAutomationsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.ListAutomationsRequest"
    }
}

/// The response object from `ListAutomations`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListAutomationsResponse {
    /// The `Automation` objects.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub automations: std::vec::Vec<crate::model::Automation>,

    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListAutomationsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListAutomationsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [automations][crate::model::ListAutomationsResponse::automations].
    pub fn set_automations<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Automation>,
    {
        use std::iter::Iterator;
        self.automations = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListAutomationsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListAutomationsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.ListAutomationsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListAutomationsResponse {
    type PageItem = crate::model::Automation;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.automations
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// The request object for `GetAutomation`
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetAutomationRequest {
    /// Required. Name of the `Automation`. Format must be
    /// `projects/{project_id}/locations/{location_name}/deliveryPipelines/{pipeline_name}/automations/{automation_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetAutomationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetAutomationRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetAutomationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.GetAutomationRequest"
    }
}

/// An `AutomationRun` resource in the Cloud Deploy API.
///
/// An `AutomationRun` represents an execution instance of an
/// automation rule.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AutomationRun {
    /// Output only. Name of the `AutomationRun`. Format is
    /// `projects/{project}/locations/{location}/deliveryPipelines/{delivery_pipeline}/automationRuns/{automation_run}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Time at which the `AutomationRun` was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Time at which the automationRun was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The weak etag of the `AutomationRun` resource.
    /// This checksum is computed by the server based on the value of other
    /// fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub etag: std::string::String,

    /// Output only. Email address of the user-managed IAM service account that
    /// performs the operations against Cloud Deploy resources.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_account: std::string::String,

    /// Output only. Snapshot of the Automation taken at AutomationRun creation
    /// time.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub automation_snapshot: std::option::Option<crate::model::Automation>,

    /// Output only. The ID of the source target that initiates the
    /// `AutomationRun`. The value of this field is the last segment of a target
    /// name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target_id: std::string::String,

    /// Output only. Current state of the `AutomationRun`.
    pub state: crate::model::automation_run::State,

    /// Output only. Explains the current state of the `AutomationRun`. Present
    /// only when an explanation is needed.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub state_description: std::string::String,

    /// Output only. Contains information about what policies prevented the
    /// `AutomationRun` from proceeding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub policy_violation: std::option::Option<crate::model::PolicyViolation>,

    /// Output only. Time the `AutomationRun` expires. An `AutomationRun` expires
    /// after 14 days from its creation date.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub expire_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The ID of the automation rule that initiated the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rule_id: std::string::String,

    /// Output only. The ID of the automation that initiated the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub automation_id: std::string::String,

    /// Output only. Earliest time the `AutomationRun` will attempt to resume.
    /// Wait-time is configured by `wait` in automation rule.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub wait_until_time: std::option::Option<wkt::Timestamp>,

    /// The operation that the `AutomationRun` will perform.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub operation: std::option::Option<crate::model::automation_run::Operation>,
}

impl AutomationRun {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::AutomationRun::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::AutomationRun::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::AutomationRun::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::AutomationRun::etag].
    pub fn set_etag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.etag = v.into();
        self
    }

    /// Sets the value of [service_account][crate::model::AutomationRun::service_account].
    pub fn set_service_account<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service_account = v.into();
        self
    }

    /// Sets the value of [automation_snapshot][crate::model::AutomationRun::automation_snapshot].
    pub fn set_automation_snapshot<
        T: std::convert::Into<std::option::Option<crate::model::Automation>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.automation_snapshot = v.into();
        self
    }

    /// Sets the value of [target_id][crate::model::AutomationRun::target_id].
    pub fn set_target_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target_id = v.into();
        self
    }

    /// Sets the value of [state][crate::model::AutomationRun::state].
    pub fn set_state<T: std::convert::Into<crate::model::automation_run::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [state_description][crate::model::AutomationRun::state_description].
    pub fn set_state_description<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.state_description = v.into();
        self
    }

    /// Sets the value of [policy_violation][crate::model::AutomationRun::policy_violation].
    pub fn set_policy_violation<
        T: std::convert::Into<std::option::Option<crate::model::PolicyViolation>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.policy_violation = v.into();
        self
    }

    /// Sets the value of [expire_time][crate::model::AutomationRun::expire_time].
    pub fn set_expire_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.expire_time = v.into();
        self
    }

    /// Sets the value of [rule_id][crate::model::AutomationRun::rule_id].
    pub fn set_rule_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.rule_id = v.into();
        self
    }

    /// Sets the value of [automation_id][crate::model::AutomationRun::automation_id].
    pub fn set_automation_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.automation_id = v.into();
        self
    }

    /// Sets the value of [wait_until_time][crate::model::AutomationRun::wait_until_time].
    pub fn set_wait_until_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.wait_until_time = v.into();
        self
    }

    /// Sets the value of `operation`.
    pub fn set_operation<
        T: std::convert::Into<std::option::Option<crate::model::automation_run::Operation>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.operation = v.into();
        self
    }

    /// The value of [operation][crate::model::AutomationRun::operation]
    /// if it holds a `PromoteReleaseOperation`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_promote_release_operation(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::PromoteReleaseOperation>> {
        #[allow(unreachable_patterns)]
        self.operation.as_ref().and_then(|v| match v {
            crate::model::automation_run::Operation::PromoteReleaseOperation(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [operation][crate::model::AutomationRun::operation]
    /// if it holds a `AdvanceRolloutOperation`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_advance_rollout_operation(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::AdvanceRolloutOperation>> {
        #[allow(unreachable_patterns)]
        self.operation.as_ref().and_then(|v| match v {
            crate::model::automation_run::Operation::AdvanceRolloutOperation(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [operation][crate::model::AutomationRun::operation]
    /// if it holds a `RepairRolloutOperation`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_repair_rollout_operation(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::RepairRolloutOperation>> {
        #[allow(unreachable_patterns)]
        self.operation.as_ref().and_then(|v| match v {
            crate::model::automation_run::Operation::RepairRolloutOperation(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [operation][crate::model::AutomationRun::operation]
    /// if it holds a `TimedPromoteReleaseOperation`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_timed_promote_release_operation(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::TimedPromoteReleaseOperation>> {
        #[allow(unreachable_patterns)]
        self.operation.as_ref().and_then(|v| match v {
            crate::model::automation_run::Operation::TimedPromoteReleaseOperation(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [operation][crate::model::AutomationRun::operation]
    /// to hold a `PromoteReleaseOperation`.
    ///
    /// Note that all the setters affecting `operation` are
    /// mutually exclusive.
    pub fn set_promote_release_operation<
        T: std::convert::Into<std::boxed::Box<crate::model::PromoteReleaseOperation>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.operation = std::option::Option::Some(
            crate::model::automation_run::Operation::PromoteReleaseOperation(v.into()),
        );
        self
    }

    /// Sets the value of [operation][crate::model::AutomationRun::operation]
    /// to hold a `AdvanceRolloutOperation`.
    ///
    /// Note that all the setters affecting `operation` are
    /// mutually exclusive.
    pub fn set_advance_rollout_operation<
        T: std::convert::Into<std::boxed::Box<crate::model::AdvanceRolloutOperation>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.operation = std::option::Option::Some(
            crate::model::automation_run::Operation::AdvanceRolloutOperation(v.into()),
        );
        self
    }

    /// Sets the value of [operation][crate::model::AutomationRun::operation]
    /// to hold a `RepairRolloutOperation`.
    ///
    /// Note that all the setters affecting `operation` are
    /// mutually exclusive.
    pub fn set_repair_rollout_operation<
        T: std::convert::Into<std::boxed::Box<crate::model::RepairRolloutOperation>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.operation = std::option::Option::Some(
            crate::model::automation_run::Operation::RepairRolloutOperation(v.into()),
        );
        self
    }

    /// Sets the value of [operation][crate::model::AutomationRun::operation]
    /// to hold a `TimedPromoteReleaseOperation`.
    ///
    /// Note that all the setters affecting `operation` are
    /// mutually exclusive.
    pub fn set_timed_promote_release_operation<
        T: std::convert::Into<std::boxed::Box<crate::model::TimedPromoteReleaseOperation>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.operation = std::option::Option::Some(
            crate::model::automation_run::Operation::TimedPromoteReleaseOperation(v.into()),
        );
        self
    }
}

impl wkt::message::Message for AutomationRun {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.AutomationRun"
    }
}

/// Defines additional types related to AutomationRun
pub mod automation_run {
    #[allow(unused_imports)]
    use super::*;

    /// Valid state of an `AutomationRun`.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(std::borrow::Cow<'static, str>);

    impl State {
        /// Creates a new State instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [State](State)
    pub mod state {
        use super::State;

        /// The `AutomationRun` has an unspecified state.
        pub const STATE_UNSPECIFIED: State = State::new("STATE_UNSPECIFIED");

        /// The `AutomationRun` has succeeded.
        pub const SUCCEEDED: State = State::new("SUCCEEDED");

        /// The `AutomationRun` was cancelled.
        pub const CANCELLED: State = State::new("CANCELLED");

        /// The `AutomationRun` has failed.
        pub const FAILED: State = State::new("FAILED");

        /// The `AutomationRun` is in progress.
        pub const IN_PROGRESS: State = State::new("IN_PROGRESS");

        /// The `AutomationRun` is pending.
        pub const PENDING: State = State::new("PENDING");

        /// The `AutomationRun` was aborted.
        pub const ABORTED: State = State::new("ABORTED");
    }

    impl std::convert::From<std::string::String> for State {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// The operation that the `AutomationRun` will perform.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Operation {
        /// Output only. Promotes a release to a specified 'Target'.
        PromoteReleaseOperation(std::boxed::Box<crate::model::PromoteReleaseOperation>),
        /// Output only. Advances a rollout to the next phase.
        AdvanceRolloutOperation(std::boxed::Box<crate::model::AdvanceRolloutOperation>),
        /// Output only. Repairs a failed 'Rollout'.
        RepairRolloutOperation(std::boxed::Box<crate::model::RepairRolloutOperation>),
        /// Output only. Promotes a release to a specified 'Target' as defined in a
        /// Timed Promote Release rule.
        TimedPromoteReleaseOperation(std::boxed::Box<crate::model::TimedPromoteReleaseOperation>),
    }
}

/// Contains the information of an automated promote-release operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PromoteReleaseOperation {
    /// Output only. The ID of the target that represents the promotion stage to
    /// which the release will be promoted. The value of this field is the last
    /// segment of a target name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target_id: std::string::String,

    /// Output only. How long the operation will be paused.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub wait: std::option::Option<wkt::Duration>,

    /// Output only. The name of the rollout that initiates the `AutomationRun`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rollout: std::string::String,

    /// Output only. The starting phase of the rollout created by this operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub phase: std::string::String,
}

impl PromoteReleaseOperation {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [target_id][crate::model::PromoteReleaseOperation::target_id].
    pub fn set_target_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target_id = v.into();
        self
    }

    /// Sets the value of [wait][crate::model::PromoteReleaseOperation::wait].
    pub fn set_wait<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.wait = v.into();
        self
    }

    /// Sets the value of [rollout][crate::model::PromoteReleaseOperation::rollout].
    pub fn set_rollout<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.rollout = v.into();
        self
    }

    /// Sets the value of [phase][crate::model::PromoteReleaseOperation::phase].
    pub fn set_phase<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.phase = v.into();
        self
    }
}

impl wkt::message::Message for PromoteReleaseOperation {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.PromoteReleaseOperation"
    }
}

/// Contains the information of an automated advance-rollout operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AdvanceRolloutOperation {
    /// Output only. The phase of a deployment that initiated the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub source_phase: std::string::String,

    /// Output only. How long the operation will be paused.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub wait: std::option::Option<wkt::Duration>,

    /// Output only. The name of the rollout that initiates the `AutomationRun`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rollout: std::string::String,

    /// Output only. The phase the rollout will be advanced to.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub destination_phase: std::string::String,
}

impl AdvanceRolloutOperation {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [source_phase][crate::model::AdvanceRolloutOperation::source_phase].
    pub fn set_source_phase<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.source_phase = v.into();
        self
    }

    /// Sets the value of [wait][crate::model::AdvanceRolloutOperation::wait].
    pub fn set_wait<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.wait = v.into();
        self
    }

    /// Sets the value of [rollout][crate::model::AdvanceRolloutOperation::rollout].
    pub fn set_rollout<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.rollout = v.into();
        self
    }

    /// Sets the value of [destination_phase][crate::model::AdvanceRolloutOperation::destination_phase].
    pub fn set_destination_phase<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.destination_phase = v.into();
        self
    }
}

impl wkt::message::Message for AdvanceRolloutOperation {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.AdvanceRolloutOperation"
    }
}

/// Contains the information for an automated `repair rollout` operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RepairRolloutOperation {
    /// Output only. The name of the rollout that initiates the `AutomationRun`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rollout: std::string::String,

    /// Output only. The index of the current repair action in the repair sequence.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub current_repair_phase_index: i64,

    /// Output only. Records of the repair attempts. Each repair phase may have
    /// multiple retry attempts or single rollback attempt.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub repair_phases: std::vec::Vec<crate::model::RepairPhase>,

    /// Output only. The phase ID of the phase that includes the job being
    /// repaired.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub phase_id: std::string::String,

    /// Output only. The job ID for the Job to repair.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub job_id: std::string::String,
}

impl RepairRolloutOperation {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [rollout][crate::model::RepairRolloutOperation::rollout].
    pub fn set_rollout<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.rollout = v.into();
        self
    }

    /// Sets the value of [current_repair_phase_index][crate::model::RepairRolloutOperation::current_repair_phase_index].
    pub fn set_current_repair_phase_index<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.current_repair_phase_index = v.into();
        self
    }

    /// Sets the value of [phase_id][crate::model::RepairRolloutOperation::phase_id].
    pub fn set_phase_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.phase_id = v.into();
        self
    }

    /// Sets the value of [job_id][crate::model::RepairRolloutOperation::job_id].
    pub fn set_job_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.job_id = v.into();
        self
    }

    /// Sets the value of [repair_phases][crate::model::RepairRolloutOperation::repair_phases].
    pub fn set_repair_phases<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::RepairPhase>,
    {
        use std::iter::Iterator;
        self.repair_phases = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for RepairRolloutOperation {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.RepairRolloutOperation"
    }
}

/// Contains the information of an automated timed promote-release operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TimedPromoteReleaseOperation {
    /// Output only. The ID of the target that represents the promotion stage to
    /// which the release will be promoted. The value of this field is the last
    /// segment of a target name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target_id: std::string::String,

    /// Output only. The name of the release to be promoted.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub release: std::string::String,

    /// Output only. The starting phase of the rollout created by this operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub phase: std::string::String,
}

impl TimedPromoteReleaseOperation {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [target_id][crate::model::TimedPromoteReleaseOperation::target_id].
    pub fn set_target_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target_id = v.into();
        self
    }

    /// Sets the value of [release][crate::model::TimedPromoteReleaseOperation::release].
    pub fn set_release<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.release = v.into();
        self
    }

    /// Sets the value of [phase][crate::model::TimedPromoteReleaseOperation::phase].
    pub fn set_phase<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.phase = v.into();
        self
    }
}

impl wkt::message::Message for TimedPromoteReleaseOperation {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.TimedPromoteReleaseOperation"
    }
}

/// RepairPhase tracks the repair attempts that have been made for
/// each `RepairPhaseConfig` specified in the `Automation` resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RepairPhase {
    /// The `RepairPhase` type and the information for that type.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub repair_phase: std::option::Option<crate::model::repair_phase::RepairPhase>,
}

impl RepairPhase {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of `repair_phase`.
    pub fn set_repair_phase<
        T: std::convert::Into<std::option::Option<crate::model::repair_phase::RepairPhase>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.repair_phase = v.into();
        self
    }

    /// The value of [repair_phase][crate::model::RepairPhase::repair_phase]
    /// if it holds a `Retry`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_retry(&self) -> std::option::Option<&std::boxed::Box<crate::model::RetryPhase>> {
        #[allow(unreachable_patterns)]
        self.repair_phase.as_ref().and_then(|v| match v {
            crate::model::repair_phase::RepairPhase::Retry(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [repair_phase][crate::model::RepairPhase::repair_phase]
    /// if it holds a `Rollback`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_rollback(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::RollbackAttempt>> {
        #[allow(unreachable_patterns)]
        self.repair_phase.as_ref().and_then(|v| match v {
            crate::model::repair_phase::RepairPhase::Rollback(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [repair_phase][crate::model::RepairPhase::repair_phase]
    /// to hold a `Retry`.
    ///
    /// Note that all the setters affecting `repair_phase` are
    /// mutually exclusive.
    pub fn set_retry<T: std::convert::Into<std::boxed::Box<crate::model::RetryPhase>>>(
        mut self,
        v: T,
    ) -> Self {
        self.repair_phase =
            std::option::Option::Some(crate::model::repair_phase::RepairPhase::Retry(v.into()));
        self
    }

    /// Sets the value of [repair_phase][crate::model::RepairPhase::repair_phase]
    /// to hold a `Rollback`.
    ///
    /// Note that all the setters affecting `repair_phase` are
    /// mutually exclusive.
    pub fn set_rollback<T: std::convert::Into<std::boxed::Box<crate::model::RollbackAttempt>>>(
        mut self,
        v: T,
    ) -> Self {
        self.repair_phase =
            std::option::Option::Some(crate::model::repair_phase::RepairPhase::Rollback(v.into()));
        self
    }
}

impl wkt::message::Message for RepairPhase {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.RepairPhase"
    }
}

/// Defines additional types related to RepairPhase
pub mod repair_phase {
    #[allow(unused_imports)]
    use super::*;

    /// The `RepairPhase` type and the information for that type.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum RepairPhase {
        /// Output only. Records of the retry attempts for retry repair mode.
        Retry(std::boxed::Box<crate::model::RetryPhase>),
        /// Output only. Rollback attempt for rollback repair mode .
        Rollback(std::boxed::Box<crate::model::RollbackAttempt>),
    }
}

/// RetryPhase contains the retry attempts and the metadata for initiating a
/// new attempt.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RetryPhase {
    /// Output only. The number of attempts that have been made.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub total_attempts: i64,

    /// Output only. The pattern of how the wait time of the retry attempt is
    /// calculated.
    pub backoff_mode: crate::model::BackoffMode,

    /// Output only. Detail of a retry action.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub attempts: std::vec::Vec<crate::model::RetryAttempt>,
}

impl RetryPhase {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [total_attempts][crate::model::RetryPhase::total_attempts].
    pub fn set_total_attempts<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.total_attempts = v.into();
        self
    }

    /// Sets the value of [backoff_mode][crate::model::RetryPhase::backoff_mode].
    pub fn set_backoff_mode<T: std::convert::Into<crate::model::BackoffMode>>(
        mut self,
        v: T,
    ) -> Self {
        self.backoff_mode = v.into();
        self
    }

    /// Sets the value of [attempts][crate::model::RetryPhase::attempts].
    pub fn set_attempts<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::RetryAttempt>,
    {
        use std::iter::Iterator;
        self.attempts = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for RetryPhase {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.RetryPhase"
    }
}

/// RetryAttempt represents an action of retrying the failed Cloud Deploy job.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RetryAttempt {
    /// Output only. The index of this retry attempt.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub attempt: i64,

    /// Output only. How long the operation will be paused.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub wait: std::option::Option<wkt::Duration>,

    /// Output only. Valid state of this retry action.
    pub state: crate::model::RepairState,

    /// Output only. Description of the state of the Retry.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub state_desc: std::string::String,
}

impl RetryAttempt {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [attempt][crate::model::RetryAttempt::attempt].
    pub fn set_attempt<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.attempt = v.into();
        self
    }

    /// Sets the value of [wait][crate::model::RetryAttempt::wait].
    pub fn set_wait<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.wait = v.into();
        self
    }

    /// Sets the value of [state][crate::model::RetryAttempt::state].
    pub fn set_state<T: std::convert::Into<crate::model::RepairState>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [state_desc][crate::model::RetryAttempt::state_desc].
    pub fn set_state_desc<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.state_desc = v.into();
        self
    }
}

impl wkt::message::Message for RetryAttempt {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.RetryAttempt"
    }
}

/// RollbackAttempt represents an action of rolling back a Cloud Deploy 'Target'.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RollbackAttempt {
    /// Output only. The phase to which the rollout will be rolled back to.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub destination_phase: std::string::String,

    /// Output only. ID of the rollback `Rollout` to create.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rollout_id: std::string::String,

    /// Output only. Valid state of this rollback action.
    pub state: crate::model::RepairState,

    /// Output only. Description of the state of the Rollback.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub state_desc: std::string::String,

    /// Output only. If active rollout exists on the target, abort this rollback.
    pub disable_rollback_if_rollout_pending: bool,
}

impl RollbackAttempt {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [destination_phase][crate::model::RollbackAttempt::destination_phase].
    pub fn set_destination_phase<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.destination_phase = v.into();
        self
    }

    /// Sets the value of [rollout_id][crate::model::RollbackAttempt::rollout_id].
    pub fn set_rollout_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.rollout_id = v.into();
        self
    }

    /// Sets the value of [state][crate::model::RollbackAttempt::state].
    pub fn set_state<T: std::convert::Into<crate::model::RepairState>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [state_desc][crate::model::RollbackAttempt::state_desc].
    pub fn set_state_desc<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.state_desc = v.into();
        self
    }

    /// Sets the value of [disable_rollback_if_rollout_pending][crate::model::RollbackAttempt::disable_rollback_if_rollout_pending].
    pub fn set_disable_rollback_if_rollout_pending<T: std::convert::Into<bool>>(
        mut self,
        v: T,
    ) -> Self {
        self.disable_rollback_if_rollout_pending = v.into();
        self
    }
}

impl wkt::message::Message for RollbackAttempt {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.RollbackAttempt"
    }
}

/// The request object for `ListAutomationRuns`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListAutomationRunsRequest {
    /// Required. The parent `Delivery Pipeline`, which owns this collection of
    /// automationRuns. Format must be
    /// `projects/{project}/locations/{location}/deliveryPipelines/{delivery_pipeline}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of automationRuns to return. The service may return
    /// fewer than this value. If unspecified, at most 50 automationRuns will
    /// be returned. The maximum value is 1000; values above 1000 will be set
    /// to 1000.
    pub page_size: i32,

    /// A page token, received from a previous `ListAutomationRuns` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other provided parameters match
    /// the call that provided the page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Filter automationRuns to be returned. All fields can be used in the
    /// filter.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Field to sort by.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListAutomationRunsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListAutomationRunsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListAutomationRunsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListAutomationRunsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListAutomationRunsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListAutomationRunsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListAutomationRunsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.ListAutomationRunsRequest"
    }
}

/// The response object from `ListAutomationRuns`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListAutomationRunsResponse {
    /// The `AutomationRuns` objects.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub automation_runs: std::vec::Vec<crate::model::AutomationRun>,

    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListAutomationRunsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListAutomationRunsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [automation_runs][crate::model::ListAutomationRunsResponse::automation_runs].
    pub fn set_automation_runs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::AutomationRun>,
    {
        use std::iter::Iterator;
        self.automation_runs = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListAutomationRunsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListAutomationRunsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.ListAutomationRunsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListAutomationRunsResponse {
    type PageItem = crate::model::AutomationRun;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.automation_runs
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// The request object for `GetAutomationRun`
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetAutomationRunRequest {
    /// Required. Name of the `AutomationRun`. Format must be
    /// `projects/{project}/locations/{location}/deliveryPipelines/{delivery_pipeline}/automationRuns/{automation_run}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetAutomationRunRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetAutomationRunRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetAutomationRunRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.GetAutomationRunRequest"
    }
}

/// The request object used by `CancelAutomationRun`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CancelAutomationRunRequest {
    /// Required. Name of the `AutomationRun`. Format is
    /// `projects/{project}/locations/{location}/deliveryPipelines/{delivery_pipeline}/automationRuns/{automation_run}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl CancelAutomationRunRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::CancelAutomationRunRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for CancelAutomationRunRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CancelAutomationRunRequest"
    }
}

/// The response object from `CancelAutomationRun`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CancelAutomationRunResponse {}

impl CancelAutomationRunResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for CancelAutomationRunResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CancelAutomationRunResponse"
    }
}

/// Payload proto for "clouddeploy.googleapis.com/customtargettype_notification"
/// Platform Log event that describes the failure to send a custom target type
/// status change Pub/Sub notification.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CustomTargetTypeNotificationEvent {
    /// Debug message for when a notification fails to send.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub message: std::string::String,

    /// Unique identifier of the `CustomTargetType`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub custom_target_type_uid: std::string::String,

    /// The name of the `CustomTargetType`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub custom_target_type: std::string::String,

    /// Type of this notification, e.g. for a Pub/Sub failure.
    #[serde(rename = "type")]
    pub r#type: crate::model::Type,
}

impl CustomTargetTypeNotificationEvent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [message][crate::model::CustomTargetTypeNotificationEvent::message].
    pub fn set_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.message = v.into();
        self
    }

    /// Sets the value of [custom_target_type_uid][crate::model::CustomTargetTypeNotificationEvent::custom_target_type_uid].
    pub fn set_custom_target_type_uid<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.custom_target_type_uid = v.into();
        self
    }

    /// Sets the value of [custom_target_type][crate::model::CustomTargetTypeNotificationEvent::custom_target_type].
    pub fn set_custom_target_type<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.custom_target_type = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::CustomTargetTypeNotificationEvent::type].
    pub fn set_type<T: std::convert::Into<crate::model::Type>>(mut self, v: T) -> Self {
        self.r#type = v.into();
        self
    }
}

impl wkt::message::Message for CustomTargetTypeNotificationEvent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.CustomTargetTypeNotificationEvent"
    }
}

/// Payload proto for "clouddeploy.googleapis.com/deliverypipeline_notification"
/// Platform Log event that describes the failure to send delivery pipeline
/// status change Pub/Sub notification.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeliveryPipelineNotificationEvent {
    /// Debug message for when a notification fails to send.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub message: std::string::String,

    /// Unique identifier of the `DeliveryPipeline`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub pipeline_uid: std::string::String,

    /// The name of the `Delivery Pipeline`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub delivery_pipeline: std::string::String,

    /// Type of this notification, e.g. for a Pub/Sub failure.
    #[serde(rename = "type")]
    pub r#type: crate::model::Type,
}

impl DeliveryPipelineNotificationEvent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [message][crate::model::DeliveryPipelineNotificationEvent::message].
    pub fn set_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.message = v.into();
        self
    }

    /// Sets the value of [pipeline_uid][crate::model::DeliveryPipelineNotificationEvent::pipeline_uid].
    pub fn set_pipeline_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.pipeline_uid = v.into();
        self
    }

    /// Sets the value of [delivery_pipeline][crate::model::DeliveryPipelineNotificationEvent::delivery_pipeline].
    pub fn set_delivery_pipeline<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.delivery_pipeline = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::DeliveryPipelineNotificationEvent::type].
    pub fn set_type<T: std::convert::Into<crate::model::Type>>(mut self, v: T) -> Self {
        self.r#type = v.into();
        self
    }
}

impl wkt::message::Message for DeliveryPipelineNotificationEvent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.DeliveryPipelineNotificationEvent"
    }
}

/// Payload proto for "clouddeploy.googleapis.com/deploypolicy_evaluation"
/// Platform Log event that describes the deploy policy evaluation event.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeployPolicyEvaluationEvent {
    /// Debug message for when a deploy policy event occurs.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub message: std::string::String,

    /// Rule type (e.g. Restrict Rollouts).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rule_type: std::string::String,

    /// Rule id.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rule: std::string::String,

    /// Unique identifier of the `Delivery Pipeline`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub pipeline_uid: std::string::String,

    /// The name of the `Delivery Pipeline`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub delivery_pipeline: std::string::String,

    /// Unique identifier of the `Target`. This is an optional field, as a `Target`
    /// may not always be applicable to a policy.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target_uid: std::string::String,

    /// The name of the `Target`. This is an optional field, as a `Target` may not
    /// always be applicable to a policy.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target: std::string::String,

    /// What invoked the action (e.g. a user or automation).
    pub invoker: crate::model::deploy_policy::Invoker,

    /// The name of the `DeployPolicy`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub deploy_policy: std::string::String,

    /// Unique identifier of the `DeployPolicy`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub deploy_policy_uid: std::string::String,

    /// Whether the request is allowed. Allowed is set as true if:
    /// (1) the request complies with the policy; or
    /// (2) the request doesn't comply with the policy but the policy was
    /// overridden; or
    /// (3) the request doesn't comply with the policy but the policy was suspended
    pub allowed: bool,

    /// The policy verdict of the request.
    pub verdict: crate::model::deploy_policy_evaluation_event::PolicyVerdict,

    /// Things that could have overridden the policy verdict. Overrides together
    /// with verdict decide whether the request is allowed.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub overrides:
        std::vec::Vec<crate::model::deploy_policy_evaluation_event::PolicyVerdictOverride>,
}

impl DeployPolicyEvaluationEvent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [message][crate::model::DeployPolicyEvaluationEvent::message].
    pub fn set_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.message = v.into();
        self
    }

    /// Sets the value of [rule_type][crate::model::DeployPolicyEvaluationEvent::rule_type].
    pub fn set_rule_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.rule_type = v.into();
        self
    }

    /// Sets the value of [rule][crate::model::DeployPolicyEvaluationEvent::rule].
    pub fn set_rule<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.rule = v.into();
        self
    }

    /// Sets the value of [pipeline_uid][crate::model::DeployPolicyEvaluationEvent::pipeline_uid].
    pub fn set_pipeline_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.pipeline_uid = v.into();
        self
    }

    /// Sets the value of [delivery_pipeline][crate::model::DeployPolicyEvaluationEvent::delivery_pipeline].
    pub fn set_delivery_pipeline<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.delivery_pipeline = v.into();
        self
    }

    /// Sets the value of [target_uid][crate::model::DeployPolicyEvaluationEvent::target_uid].
    pub fn set_target_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target_uid = v.into();
        self
    }

    /// Sets the value of [target][crate::model::DeployPolicyEvaluationEvent::target].
    pub fn set_target<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [invoker][crate::model::DeployPolicyEvaluationEvent::invoker].
    pub fn set_invoker<T: std::convert::Into<crate::model::deploy_policy::Invoker>>(
        mut self,
        v: T,
    ) -> Self {
        self.invoker = v.into();
        self
    }

    /// Sets the value of [deploy_policy][crate::model::DeployPolicyEvaluationEvent::deploy_policy].
    pub fn set_deploy_policy<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.deploy_policy = v.into();
        self
    }

    /// Sets the value of [deploy_policy_uid][crate::model::DeployPolicyEvaluationEvent::deploy_policy_uid].
    pub fn set_deploy_policy_uid<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.deploy_policy_uid = v.into();
        self
    }

    /// Sets the value of [allowed][crate::model::DeployPolicyEvaluationEvent::allowed].
    pub fn set_allowed<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.allowed = v.into();
        self
    }

    /// Sets the value of [verdict][crate::model::DeployPolicyEvaluationEvent::verdict].
    pub fn set_verdict<
        T: std::convert::Into<crate::model::deploy_policy_evaluation_event::PolicyVerdict>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.verdict = v.into();
        self
    }

    /// Sets the value of [overrides][crate::model::DeployPolicyEvaluationEvent::overrides].
    pub fn set_overrides<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::deploy_policy_evaluation_event::PolicyVerdictOverride>,
    {
        use std::iter::Iterator;
        self.overrides = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for DeployPolicyEvaluationEvent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.DeployPolicyEvaluationEvent"
    }
}

/// Defines additional types related to DeployPolicyEvaluationEvent
pub mod deploy_policy_evaluation_event {
    #[allow(unused_imports)]
    use super::*;

    /// The policy verdict of the request.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct PolicyVerdict(std::borrow::Cow<'static, str>);

    impl PolicyVerdict {
        /// Creates a new PolicyVerdict instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [PolicyVerdict](PolicyVerdict)
    pub mod policy_verdict {
        use super::PolicyVerdict;

        /// This should never happen.
        pub const POLICY_VERDICT_UNSPECIFIED: PolicyVerdict =
            PolicyVerdict::new("POLICY_VERDICT_UNSPECIFIED");

        /// Allowed by policy. This enum value is not currently used but may be used
        /// in the future. Currently logs are only generated when a request is denied
        /// by policy.
        pub const ALLOWED_BY_POLICY: PolicyVerdict = PolicyVerdict::new("ALLOWED_BY_POLICY");

        /// Denied by policy.
        pub const DENIED_BY_POLICY: PolicyVerdict = PolicyVerdict::new("DENIED_BY_POLICY");
    }

    impl std::convert::From<std::string::String> for PolicyVerdict {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// Things that could have overridden the policy verdict. When overrides are
    /// used, the request will be allowed even if it is DENIED_BY_POLICY.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct PolicyVerdictOverride(std::borrow::Cow<'static, str>);

    impl PolicyVerdictOverride {
        /// Creates a new PolicyVerdictOverride instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [PolicyVerdictOverride](PolicyVerdictOverride)
    pub mod policy_verdict_override {
        use super::PolicyVerdictOverride;

        /// This should never happen.
        pub const POLICY_VERDICT_OVERRIDE_UNSPECIFIED: PolicyVerdictOverride =
            PolicyVerdictOverride::new("POLICY_VERDICT_OVERRIDE_UNSPECIFIED");

        /// The policy was overridden.
        pub const POLICY_OVERRIDDEN: PolicyVerdictOverride =
            PolicyVerdictOverride::new("POLICY_OVERRIDDEN");

        /// The policy was suspended.
        pub const POLICY_SUSPENDED: PolicyVerdictOverride =
            PolicyVerdictOverride::new("POLICY_SUSPENDED");
    }

    impl std::convert::From<std::string::String> for PolicyVerdictOverride {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Payload proto for "clouddeploy.googleapis.com/deploypolicy_notification".
/// Platform Log event that describes the failure to send a pub/sub notification
/// when there is a DeployPolicy status change.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeployPolicyNotificationEvent {
    /// Debug message for when a deploy policy fails to send a pub/sub
    /// notification.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub message: std::string::String,

    /// The name of the `DeployPolicy`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub deploy_policy: std::string::String,

    /// Unique identifier of the deploy policy.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub deploy_policy_uid: std::string::String,

    /// Type of this notification, e.g. for a Pub/Sub failure.
    #[serde(rename = "type")]
    pub r#type: crate::model::Type,
}

impl DeployPolicyNotificationEvent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [message][crate::model::DeployPolicyNotificationEvent::message].
    pub fn set_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.message = v.into();
        self
    }

    /// Sets the value of [deploy_policy][crate::model::DeployPolicyNotificationEvent::deploy_policy].
    pub fn set_deploy_policy<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.deploy_policy = v.into();
        self
    }

    /// Sets the value of [deploy_policy_uid][crate::model::DeployPolicyNotificationEvent::deploy_policy_uid].
    pub fn set_deploy_policy_uid<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.deploy_policy_uid = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::DeployPolicyNotificationEvent::type].
    pub fn set_type<T: std::convert::Into<crate::model::Type>>(mut self, v: T) -> Self {
        self.r#type = v.into();
        self
    }
}

impl wkt::message::Message for DeployPolicyNotificationEvent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.DeployPolicyNotificationEvent"
    }
}

/// Payload proto for "clouddeploy.googleapis.com/jobrun_notification"
/// Platform Log event that describes the failure to send JobRun resource update
/// Pub/Sub notification.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct JobRunNotificationEvent {
    /// Debug message for when a notification fails to send.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub message: std::string::String,

    /// The name of the `JobRun`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub job_run: std::string::String,

    /// Unique identifier of the `DeliveryPipeline`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub pipeline_uid: std::string::String,

    /// Unique identifier of the `Release`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub release_uid: std::string::String,

    /// The name of the `Release`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub release: std::string::String,

    /// Unique identifier of the `Rollout`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rollout_uid: std::string::String,

    /// The name of the `Rollout`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rollout: std::string::String,

    /// ID of the `Target`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target_id: std::string::String,

    /// Type of this notification, e.g. for a Pub/Sub failure.
    #[serde(rename = "type")]
    pub r#type: crate::model::Type,
}

impl JobRunNotificationEvent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [message][crate::model::JobRunNotificationEvent::message].
    pub fn set_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.message = v.into();
        self
    }

    /// Sets the value of [job_run][crate::model::JobRunNotificationEvent::job_run].
    pub fn set_job_run<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.job_run = v.into();
        self
    }

    /// Sets the value of [pipeline_uid][crate::model::JobRunNotificationEvent::pipeline_uid].
    pub fn set_pipeline_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.pipeline_uid = v.into();
        self
    }

    /// Sets the value of [release_uid][crate::model::JobRunNotificationEvent::release_uid].
    pub fn set_release_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.release_uid = v.into();
        self
    }

    /// Sets the value of [release][crate::model::JobRunNotificationEvent::release].
    pub fn set_release<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.release = v.into();
        self
    }

    /// Sets the value of [rollout_uid][crate::model::JobRunNotificationEvent::rollout_uid].
    pub fn set_rollout_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.rollout_uid = v.into();
        self
    }

    /// Sets the value of [rollout][crate::model::JobRunNotificationEvent::rollout].
    pub fn set_rollout<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.rollout = v.into();
        self
    }

    /// Sets the value of [target_id][crate::model::JobRunNotificationEvent::target_id].
    pub fn set_target_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target_id = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::JobRunNotificationEvent::type].
    pub fn set_type<T: std::convert::Into<crate::model::Type>>(mut self, v: T) -> Self {
        self.r#type = v.into();
        self
    }
}

impl wkt::message::Message for JobRunNotificationEvent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.JobRunNotificationEvent"
    }
}

/// Payload proto for "clouddeploy.googleapis.com/release_notification"
/// Platform Log event that describes the failure to send release status change
/// Pub/Sub notification.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ReleaseNotificationEvent {
    /// Debug message for when a notification fails to send.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub message: std::string::String,

    /// Unique identifier of the `DeliveryPipeline`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub pipeline_uid: std::string::String,

    /// Unique identifier of the `Release`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub release_uid: std::string::String,

    /// The name of the `Release`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub release: std::string::String,

    /// Type of this notification, e.g. for a Pub/Sub failure.
    #[serde(rename = "type")]
    pub r#type: crate::model::Type,
}

impl ReleaseNotificationEvent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [message][crate::model::ReleaseNotificationEvent::message].
    pub fn set_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.message = v.into();
        self
    }

    /// Sets the value of [pipeline_uid][crate::model::ReleaseNotificationEvent::pipeline_uid].
    pub fn set_pipeline_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.pipeline_uid = v.into();
        self
    }

    /// Sets the value of [release_uid][crate::model::ReleaseNotificationEvent::release_uid].
    pub fn set_release_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.release_uid = v.into();
        self
    }

    /// Sets the value of [release][crate::model::ReleaseNotificationEvent::release].
    pub fn set_release<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.release = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::ReleaseNotificationEvent::type].
    pub fn set_type<T: std::convert::Into<crate::model::Type>>(mut self, v: T) -> Self {
        self.r#type = v.into();
        self
    }
}

impl wkt::message::Message for ReleaseNotificationEvent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.ReleaseNotificationEvent"
    }
}

/// Payload proto for "clouddeploy.googleapis.com/release_render"
/// Platform Log event that describes the render status change.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ReleaseRenderEvent {
    /// Debug message for when a render transition occurs. Provides further
    /// details as rendering progresses through render states.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub message: std::string::String,

    /// Unique identifier of the `DeliveryPipeline`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub pipeline_uid: std::string::String,

    /// The name of the release.
    /// release_uid is not in this log message because we write some of these log
    /// messages at release creation time, before we've generated the uid.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub release: std::string::String,

    /// Type of this notification, e.g. for a release render state change event.
    #[serde(rename = "type")]
    pub r#type: crate::model::Type,

    /// The state of the release render.
    pub release_render_state: crate::model::release::RenderState,
}

impl ReleaseRenderEvent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [message][crate::model::ReleaseRenderEvent::message].
    pub fn set_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.message = v.into();
        self
    }

    /// Sets the value of [pipeline_uid][crate::model::ReleaseRenderEvent::pipeline_uid].
    pub fn set_pipeline_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.pipeline_uid = v.into();
        self
    }

    /// Sets the value of [release][crate::model::ReleaseRenderEvent::release].
    pub fn set_release<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.release = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::ReleaseRenderEvent::type].
    pub fn set_type<T: std::convert::Into<crate::model::Type>>(mut self, v: T) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [release_render_state][crate::model::ReleaseRenderEvent::release_render_state].
    pub fn set_release_render_state<T: std::convert::Into<crate::model::release::RenderState>>(
        mut self,
        v: T,
    ) -> Self {
        self.release_render_state = v.into();
        self
    }
}

impl wkt::message::Message for ReleaseRenderEvent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.ReleaseRenderEvent"
    }
}

/// Payload proto for "clouddeploy.googleapis.com/rollout_notification"
/// Platform Log event that describes the failure to send rollout status change
/// Pub/Sub notification.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RolloutNotificationEvent {
    /// Debug message for when a notification fails to send.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub message: std::string::String,

    /// Unique identifier of the `DeliveryPipeline`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub pipeline_uid: std::string::String,

    /// Unique identifier of the `Release`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub release_uid: std::string::String,

    /// The name of the `Release`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub release: std::string::String,

    /// Unique identifier of the `Rollout`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rollout_uid: std::string::String,

    /// The name of the `Rollout`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rollout: std::string::String,

    /// ID of the `Target` that the rollout is deployed to.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target_id: std::string::String,

    /// Type of this notification, e.g. for a Pub/Sub failure.
    #[serde(rename = "type")]
    pub r#type: crate::model::Type,
}

impl RolloutNotificationEvent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [message][crate::model::RolloutNotificationEvent::message].
    pub fn set_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.message = v.into();
        self
    }

    /// Sets the value of [pipeline_uid][crate::model::RolloutNotificationEvent::pipeline_uid].
    pub fn set_pipeline_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.pipeline_uid = v.into();
        self
    }

    /// Sets the value of [release_uid][crate::model::RolloutNotificationEvent::release_uid].
    pub fn set_release_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.release_uid = v.into();
        self
    }

    /// Sets the value of [release][crate::model::RolloutNotificationEvent::release].
    pub fn set_release<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.release = v.into();
        self
    }

    /// Sets the value of [rollout_uid][crate::model::RolloutNotificationEvent::rollout_uid].
    pub fn set_rollout_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.rollout_uid = v.into();
        self
    }

    /// Sets the value of [rollout][crate::model::RolloutNotificationEvent::rollout].
    pub fn set_rollout<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.rollout = v.into();
        self
    }

    /// Sets the value of [target_id][crate::model::RolloutNotificationEvent::target_id].
    pub fn set_target_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target_id = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::RolloutNotificationEvent::type].
    pub fn set_type<T: std::convert::Into<crate::model::Type>>(mut self, v: T) -> Self {
        self.r#type = v.into();
        self
    }
}

impl wkt::message::Message for RolloutNotificationEvent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.RolloutNotificationEvent"
    }
}

/// Payload proto for "clouddeploy.googleapis.com/rollout_update"
/// Platform Log event that describes the rollout update event.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RolloutUpdateEvent {
    /// Debug message for when a rollout update event occurs.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub message: std::string::String,

    /// Unique identifier of the pipeline.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub pipeline_uid: std::string::String,

    /// Unique identifier of the release.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub release_uid: std::string::String,

    /// The name of the `Release`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub release: std::string::String,

    /// The name of the rollout.
    /// rollout_uid is not in this log message because we write some of these log
    /// messages at rollout creation time, before we've generated the uid.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rollout: std::string::String,

    /// ID of the target.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target_id: std::string::String,

    /// Type of this notification, e.g. for a rollout update event.
    #[serde(rename = "type")]
    pub r#type: crate::model::Type,

    /// The type of the rollout update.
    pub rollout_update_type: crate::model::rollout_update_event::RolloutUpdateType,
}

impl RolloutUpdateEvent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [message][crate::model::RolloutUpdateEvent::message].
    pub fn set_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.message = v.into();
        self
    }

    /// Sets the value of [pipeline_uid][crate::model::RolloutUpdateEvent::pipeline_uid].
    pub fn set_pipeline_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.pipeline_uid = v.into();
        self
    }

    /// Sets the value of [release_uid][crate::model::RolloutUpdateEvent::release_uid].
    pub fn set_release_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.release_uid = v.into();
        self
    }

    /// Sets the value of [release][crate::model::RolloutUpdateEvent::release].
    pub fn set_release<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.release = v.into();
        self
    }

    /// Sets the value of [rollout][crate::model::RolloutUpdateEvent::rollout].
    pub fn set_rollout<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.rollout = v.into();
        self
    }

    /// Sets the value of [target_id][crate::model::RolloutUpdateEvent::target_id].
    pub fn set_target_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target_id = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::RolloutUpdateEvent::type].
    pub fn set_type<T: std::convert::Into<crate::model::Type>>(mut self, v: T) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [rollout_update_type][crate::model::RolloutUpdateEvent::rollout_update_type].
    pub fn set_rollout_update_type<
        T: std::convert::Into<crate::model::rollout_update_event::RolloutUpdateType>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.rollout_update_type = v.into();
        self
    }
}

impl wkt::message::Message for RolloutUpdateEvent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.RolloutUpdateEvent"
    }
}

/// Defines additional types related to RolloutUpdateEvent
pub mod rollout_update_event {
    #[allow(unused_imports)]
    use super::*;

    /// RolloutUpdateType indicates the type of the rollout update.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct RolloutUpdateType(std::borrow::Cow<'static, str>);

    impl RolloutUpdateType {
        /// Creates a new RolloutUpdateType instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [RolloutUpdateType](RolloutUpdateType)
    pub mod rollout_update_type {
        use super::RolloutUpdateType;

        /// Rollout update type unspecified.
        pub const ROLLOUT_UPDATE_TYPE_UNSPECIFIED: RolloutUpdateType =
            RolloutUpdateType::new("ROLLOUT_UPDATE_TYPE_UNSPECIFIED");

        /// rollout state updated to pending.
        pub const PENDING: RolloutUpdateType = RolloutUpdateType::new("PENDING");

        /// Rollout state updated to pending release.
        pub const PENDING_RELEASE: RolloutUpdateType = RolloutUpdateType::new("PENDING_RELEASE");

        /// Rollout state updated to in progress.
        pub const IN_PROGRESS: RolloutUpdateType = RolloutUpdateType::new("IN_PROGRESS");

        /// Rollout state updated to cancelling.
        pub const CANCELLING: RolloutUpdateType = RolloutUpdateType::new("CANCELLING");

        /// Rollout state updated to cancelled.
        pub const CANCELLED: RolloutUpdateType = RolloutUpdateType::new("CANCELLED");

        /// Rollout state updated to halted.
        pub const HALTED: RolloutUpdateType = RolloutUpdateType::new("HALTED");

        /// Rollout state updated to succeeded.
        pub const SUCCEEDED: RolloutUpdateType = RolloutUpdateType::new("SUCCEEDED");

        /// Rollout state updated to failed.
        pub const FAILED: RolloutUpdateType = RolloutUpdateType::new("FAILED");

        /// Rollout requires approval.
        pub const APPROVAL_REQUIRED: RolloutUpdateType =
            RolloutUpdateType::new("APPROVAL_REQUIRED");

        /// Rollout has been approved.
        pub const APPROVED: RolloutUpdateType = RolloutUpdateType::new("APPROVED");

        /// Rollout has been rejected.
        pub const REJECTED: RolloutUpdateType = RolloutUpdateType::new("REJECTED");

        /// Rollout requires advance to the next phase.
        pub const ADVANCE_REQUIRED: RolloutUpdateType = RolloutUpdateType::new("ADVANCE_REQUIRED");

        /// Rollout has been advanced.
        pub const ADVANCED: RolloutUpdateType = RolloutUpdateType::new("ADVANCED");
    }

    impl std::convert::From<std::string::String> for RolloutUpdateType {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Payload proto for "clouddeploy.googleapis.com/target_notification"
/// Platform Log event that describes the failure to send target status change
/// Pub/Sub notification.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TargetNotificationEvent {
    /// Debug message for when a notification fails to send.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub message: std::string::String,

    /// The name of the `Target`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target: std::string::String,

    /// Type of this notification, e.g. for a Pub/Sub failure.
    #[serde(rename = "type")]
    pub r#type: crate::model::Type,
}

impl TargetNotificationEvent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [message][crate::model::TargetNotificationEvent::message].
    pub fn set_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.message = v.into();
        self
    }

    /// Sets the value of [target][crate::model::TargetNotificationEvent::target].
    pub fn set_target<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::TargetNotificationEvent::type].
    pub fn set_type<T: std::convert::Into<crate::model::Type>>(mut self, v: T) -> Self {
        self.r#type = v.into();
        self
    }
}

impl wkt::message::Message for TargetNotificationEvent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.deploy.v1.TargetNotificationEvent"
    }
}

/// The support state of a specific Skaffold version.
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct SkaffoldSupportState(std::borrow::Cow<'static, str>);

impl SkaffoldSupportState {
    /// Creates a new SkaffoldSupportState instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [SkaffoldSupportState](SkaffoldSupportState)
pub mod skaffold_support_state {
    use super::SkaffoldSupportState;

    /// Default value. This value is unused.
    pub const SKAFFOLD_SUPPORT_STATE_UNSPECIFIED: SkaffoldSupportState =
        SkaffoldSupportState::new("SKAFFOLD_SUPPORT_STATE_UNSPECIFIED");

    /// This Skaffold version is currently supported.
    pub const SKAFFOLD_SUPPORT_STATE_SUPPORTED: SkaffoldSupportState =
        SkaffoldSupportState::new("SKAFFOLD_SUPPORT_STATE_SUPPORTED");

    /// This Skaffold version is in maintenance mode.
    pub const SKAFFOLD_SUPPORT_STATE_MAINTENANCE_MODE: SkaffoldSupportState =
        SkaffoldSupportState::new("SKAFFOLD_SUPPORT_STATE_MAINTENANCE_MODE");

    /// This Skaffold version is no longer supported.
    pub const SKAFFOLD_SUPPORT_STATE_UNSUPPORTED: SkaffoldSupportState =
        SkaffoldSupportState::new("SKAFFOLD_SUPPORT_STATE_UNSUPPORTED");
}

impl std::convert::From<std::string::String> for SkaffoldSupportState {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}

/// The pattern of how wait time is increased.
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct BackoffMode(std::borrow::Cow<'static, str>);

impl BackoffMode {
    /// Creates a new BackoffMode instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [BackoffMode](BackoffMode)
pub mod backoff_mode {
    use super::BackoffMode;

    /// No WaitMode is specified.
    pub const BACKOFF_MODE_UNSPECIFIED: BackoffMode = BackoffMode::new("BACKOFF_MODE_UNSPECIFIED");

    /// Increases the wait time linearly.
    pub const BACKOFF_MODE_LINEAR: BackoffMode = BackoffMode::new("BACKOFF_MODE_LINEAR");

    /// Increases the wait time exponentially.
    pub const BACKOFF_MODE_EXPONENTIAL: BackoffMode = BackoffMode::new("BACKOFF_MODE_EXPONENTIAL");
}

impl std::convert::From<std::string::String> for BackoffMode {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}

/// Valid state of a repair attempt.
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct RepairState(std::borrow::Cow<'static, str>);

impl RepairState {
    /// Creates a new RepairState instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [RepairState](RepairState)
pub mod repair_state {
    use super::RepairState;

    /// The `repair` has an unspecified state.
    pub const REPAIR_STATE_UNSPECIFIED: RepairState = RepairState::new("REPAIR_STATE_UNSPECIFIED");

    /// The `repair` action has succeeded.
    pub const REPAIR_STATE_SUCCEEDED: RepairState = RepairState::new("REPAIR_STATE_SUCCEEDED");

    /// The `repair` action was cancelled.
    pub const REPAIR_STATE_CANCELLED: RepairState = RepairState::new("REPAIR_STATE_CANCELLED");

    /// The `repair` action has failed.
    pub const REPAIR_STATE_FAILED: RepairState = RepairState::new("REPAIR_STATE_FAILED");

    /// The `repair` action is in progress.
    pub const REPAIR_STATE_IN_PROGRESS: RepairState = RepairState::new("REPAIR_STATE_IN_PROGRESS");

    /// The `repair` action is pending.
    pub const REPAIR_STATE_PENDING: RepairState = RepairState::new("REPAIR_STATE_PENDING");

    /// The `repair` action was aborted.
    pub const REPAIR_STATE_ABORTED: RepairState = RepairState::new("REPAIR_STATE_ABORTED");
}

impl std::convert::From<std::string::String> for RepairState {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}

/// Type indicates the type of the log entry and can be used as a filter.
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct Type(std::borrow::Cow<'static, str>);

impl Type {
    /// Creates a new Type instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [Type](Type)
pub mod r#type {
    use super::Type;

    /// Type is unspecified.
    pub const TYPE_UNSPECIFIED: Type = Type::new("TYPE_UNSPECIFIED");

    /// A Pub/Sub notification failed to be sent.
    pub const TYPE_PUBSUB_NOTIFICATION_FAILURE: Type =
        Type::new("TYPE_PUBSUB_NOTIFICATION_FAILURE");

    /// Resource state changed.
    pub const TYPE_RESOURCE_STATE_CHANGE: Type = Type::new("TYPE_RESOURCE_STATE_CHANGE");

    /// A process aborted.
    pub const TYPE_PROCESS_ABORTED: Type = Type::new("TYPE_PROCESS_ABORTED");

    /// Restriction check failed.
    pub const TYPE_RESTRICTION_VIOLATED: Type = Type::new("TYPE_RESTRICTION_VIOLATED");

    /// Resource deleted.
    pub const TYPE_RESOURCE_DELETED: Type = Type::new("TYPE_RESOURCE_DELETED");

    /// Rollout updated.
    pub const TYPE_ROLLOUT_UPDATE: Type = Type::new("TYPE_ROLLOUT_UPDATE");

    /// Deploy Policy evaluation.
    pub const TYPE_DEPLOY_POLICY_EVALUATION: Type = Type::new("TYPE_DEPLOY_POLICY_EVALUATION");

    /// Deprecated: This field is never used. Use release_render log type instead.
    pub const TYPE_RENDER_STATUES_CHANGE: Type = Type::new("TYPE_RENDER_STATUES_CHANGE");
}

impl std::convert::From<std::string::String> for Type {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}
