// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;
use std::sync::Arc;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::CloudDeploy].
///
/// Application developers may need to implement this trait to mock
/// `client::CloudDeploy`.  In other use-cases, application developers only
/// use `client::CloudDeploy` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait CloudDeploy: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::CloudDeploy::list_delivery_pipelines].
    fn list_delivery_pipelines(
        &self,
        _req: crate::model::ListDeliveryPipelinesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::ListDeliveryPipelinesResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::ListDeliveryPipelinesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::CloudDeploy::get_delivery_pipeline].
    fn get_delivery_pipeline(
        &self,
        _req: crate::model::GetDeliveryPipelineRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::DeliveryPipeline>> + Send
    {
        std::future::ready::<crate::Result<crate::model::DeliveryPipeline>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::create_delivery_pipeline].
    fn create_delivery_pipeline(
        &self,
        _req: crate::model::CreateDeliveryPipelineRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::update_delivery_pipeline].
    fn update_delivery_pipeline(
        &self,
        _req: crate::model::UpdateDeliveryPipelineRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::delete_delivery_pipeline].
    fn delete_delivery_pipeline(
        &self,
        _req: crate::model::DeleteDeliveryPipelineRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::list_targets].
    fn list_targets(
        &self,
        _req: crate::model::ListTargetsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListTargetsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListTargetsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::rollback_target].
    fn rollback_target(
        &self,
        _req: crate::model::RollbackTargetRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::RollbackTargetResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::RollbackTargetResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::CloudDeploy::get_target].
    fn get_target(
        &self,
        _req: crate::model::GetTargetRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Target>> + Send {
        std::future::ready::<crate::Result<crate::model::Target>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::create_target].
    fn create_target(
        &self,
        _req: crate::model::CreateTargetRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::update_target].
    fn update_target(
        &self,
        _req: crate::model::UpdateTargetRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::delete_target].
    fn delete_target(
        &self,
        _req: crate::model::DeleteTargetRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::list_custom_target_types].
    fn list_custom_target_types(
        &self,
        _req: crate::model::ListCustomTargetTypesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::ListCustomTargetTypesResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::ListCustomTargetTypesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::CloudDeploy::get_custom_target_type].
    fn get_custom_target_type(
        &self,
        _req: crate::model::GetCustomTargetTypeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::CustomTargetType>> + Send
    {
        std::future::ready::<crate::Result<crate::model::CustomTargetType>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::create_custom_target_type].
    fn create_custom_target_type(
        &self,
        _req: crate::model::CreateCustomTargetTypeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::update_custom_target_type].
    fn update_custom_target_type(
        &self,
        _req: crate::model::UpdateCustomTargetTypeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::delete_custom_target_type].
    fn delete_custom_target_type(
        &self,
        _req: crate::model::DeleteCustomTargetTypeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::list_releases].
    fn list_releases(
        &self,
        _req: crate::model::ListReleasesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListReleasesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListReleasesResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::get_release].
    fn get_release(
        &self,
        _req: crate::model::GetReleaseRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Release>> + Send {
        std::future::ready::<crate::Result<crate::model::Release>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::create_release].
    fn create_release(
        &self,
        _req: crate::model::CreateReleaseRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::abandon_release].
    fn abandon_release(
        &self,
        _req: crate::model::AbandonReleaseRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::AbandonReleaseResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::AbandonReleaseResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::CloudDeploy::create_deploy_policy].
    fn create_deploy_policy(
        &self,
        _req: crate::model::CreateDeployPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::update_deploy_policy].
    fn update_deploy_policy(
        &self,
        _req: crate::model::UpdateDeployPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::delete_deploy_policy].
    fn delete_deploy_policy(
        &self,
        _req: crate::model::DeleteDeployPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::list_deploy_policies].
    fn list_deploy_policies(
        &self,
        _req: crate::model::ListDeployPoliciesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListDeployPoliciesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListDeployPoliciesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::CloudDeploy::get_deploy_policy].
    fn get_deploy_policy(
        &self,
        _req: crate::model::GetDeployPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::DeployPolicy>> + Send {
        std::future::ready::<crate::Result<crate::model::DeployPolicy>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::approve_rollout].
    fn approve_rollout(
        &self,
        _req: crate::model::ApproveRolloutRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ApproveRolloutResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ApproveRolloutResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::CloudDeploy::advance_rollout].
    fn advance_rollout(
        &self,
        _req: crate::model::AdvanceRolloutRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::AdvanceRolloutResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::AdvanceRolloutResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::CloudDeploy::cancel_rollout].
    fn cancel_rollout(
        &self,
        _req: crate::model::CancelRolloutRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::CancelRolloutResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::CancelRolloutResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::list_rollouts].
    fn list_rollouts(
        &self,
        _req: crate::model::ListRolloutsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListRolloutsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListRolloutsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::get_rollout].
    fn get_rollout(
        &self,
        _req: crate::model::GetRolloutRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Rollout>> + Send {
        std::future::ready::<crate::Result<crate::model::Rollout>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::create_rollout].
    fn create_rollout(
        &self,
        _req: crate::model::CreateRolloutRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::ignore_job].
    fn ignore_job(
        &self,
        _req: crate::model::IgnoreJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::IgnoreJobResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::IgnoreJobResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::retry_job].
    fn retry_job(
        &self,
        _req: crate::model::RetryJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::RetryJobResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::RetryJobResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::list_job_runs].
    fn list_job_runs(
        &self,
        _req: crate::model::ListJobRunsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListJobRunsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListJobRunsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::get_job_run].
    fn get_job_run(
        &self,
        _req: crate::model::GetJobRunRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::JobRun>> + Send {
        std::future::ready::<crate::Result<crate::model::JobRun>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::terminate_job_run].
    fn terminate_job_run(
        &self,
        _req: crate::model::TerminateJobRunRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::TerminateJobRunResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::TerminateJobRunResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::CloudDeploy::get_config].
    fn get_config(
        &self,
        _req: crate::model::GetConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Config>> + Send {
        std::future::ready::<crate::Result<crate::model::Config>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::create_automation].
    fn create_automation(
        &self,
        _req: crate::model::CreateAutomationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::update_automation].
    fn update_automation(
        &self,
        _req: crate::model::UpdateAutomationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::delete_automation].
    fn delete_automation(
        &self,
        _req: crate::model::DeleteAutomationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::get_automation].
    fn get_automation(
        &self,
        _req: crate::model::GetAutomationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Automation>> + Send {
        std::future::ready::<crate::Result<crate::model::Automation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::list_automations].
    fn list_automations(
        &self,
        _req: crate::model::ListAutomationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListAutomationsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListAutomationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::CloudDeploy::get_automation_run].
    fn get_automation_run(
        &self,
        _req: crate::model::GetAutomationRunRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::AutomationRun>> + Send {
        std::future::ready::<crate::Result<crate::model::AutomationRun>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::list_automation_runs].
    fn list_automation_runs(
        &self,
        _req: crate::model::ListAutomationRunsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListAutomationRunsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListAutomationRunsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::CloudDeploy::cancel_automation_run].
    fn cancel_automation_run(
        &self,
        _req: crate::model::CancelAutomationRunRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::CancelAutomationRunResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::CancelAutomationRunResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::CloudDeploy::list_locations].
    fn list_locations(
        &self,
        _req: location::model::ListLocationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::ListLocationsResponse>> + Send
    {
        std::future::ready::<crate::Result<location::model::ListLocationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::CloudDeploy::get_location].
    fn get_location(
        &self,
        _req: location::model::GetLocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::Location>> + Send {
        std::future::ready::<crate::Result<location::model::Location>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::set_iam_policy].
    fn set_iam_policy(
        &self,
        _req: iam_v1::model::SetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<iam_v1::model::Policy>> + Send {
        std::future::ready::<crate::Result<iam_v1::model::Policy>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::get_iam_policy].
    fn get_iam_policy(
        &self,
        _req: iam_v1::model::GetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<iam_v1::model::Policy>> + Send {
        std::future::ready::<crate::Result<iam_v1::model::Policy>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::test_iam_permissions].
    fn test_iam_permissions(
        &self,
        _req: iam_v1::model::TestIamPermissionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<iam_v1::model::TestIamPermissionsResponse>> + Send
    {
        std::future::ready::<crate::Result<iam_v1::model::TestIamPermissionsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::CloudDeploy::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::ListOperationsResponse>>
    + Send {
        std::future::ready::<crate::Result<longrunning::model::ListOperationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::CloudDeploy::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudDeploy::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<()>> + Send {
        std::future::ready::<crate::Result<()>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CloudDeploy::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<()>> + Send {
        std::future::ready::<crate::Result<()>>(Err(Error::other("unimplemented")))
    }

    /// Returns the polling error policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_error_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        Arc::new(gax::polling_error_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}
