// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gaxi;
extern crate gtype;
extern crate iam_v1;
extern crate lazy_static;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate rpc;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// Information about the principal, resource, and permission to check.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AccessTuple {
    /// Required. The principal whose access you want to check, in the form of
    /// the email address that represents that principal. For example,
    /// `alice@example.com` or
    /// `my-service-account@my-project.iam.gserviceaccount.com`.
    ///
    /// The principal must be a Google Account or a service account. Other types of
    /// principals are not supported.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub principal: std::string::String,

    /// Required. The full resource name that identifies the resource. For example,
    /// `//compute.googleapis.com/projects/my-project/zones/us-central1-a/instances/my-instance`.
    ///
    /// For examples of full resource names for Google Cloud services, see
    /// <https://cloud.google.com/iam/help/troubleshooter/full-resource-names>.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub full_resource_name: std::string::String,

    /// Required. The IAM permission to check for the specified principal and
    /// resource.
    ///
    /// For a complete list of IAM permissions, see
    /// <https://cloud.google.com/iam/help/permissions/reference>.
    ///
    /// For a complete list of predefined IAM roles and the permissions in each
    /// role, see <https://cloud.google.com/iam/help/roles/reference>.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub permission: std::string::String,
}

impl AccessTuple {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [principal][crate::model::AccessTuple::principal].
    pub fn set_principal<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.principal = v.into();
        self
    }

    /// Sets the value of [full_resource_name][crate::model::AccessTuple::full_resource_name].
    pub fn set_full_resource_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.full_resource_name = v.into();
        self
    }

    /// Sets the value of [permission][crate::model::AccessTuple::permission].
    pub fn set_permission<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.permission = v.into();
        self
    }
}

impl wkt::message::Message for AccessTuple {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.AccessTuple"
    }
}

/// Details about how a specific IAM [Policy][google.iam.v1.Policy] contributed
/// to the access check.
///
/// [google.iam.v1.Policy]: iam_v1::model::Policy
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExplainedPolicy {
    /// Indicates whether _this policy_ provides the specified permission to the
    /// specified principal for the specified resource.
    ///
    /// This field does _not_ indicate whether the principal actually has the
    /// permission for the resource. There might be another policy that overrides
    /// this policy. To determine whether the principal actually has the
    /// permission, use the `access` field in the
    /// [TroubleshootIamPolicyResponse][IamChecker.TroubleshootIamPolicyResponse].
    pub access: crate::model::AccessState,

    /// The full resource name that identifies the resource. For example,
    /// `//compute.googleapis.com/projects/my-project/zones/us-central1-a/instances/my-instance`.
    ///
    /// If the user who created the
    /// [Replay][google.cloud.policysimulator.v1.Replay] does not have
    /// access to the policy, this field is omitted.
    ///
    /// For examples of full resource names for Google Cloud services, see
    /// <https://cloud.google.com/iam/help/troubleshooter/full-resource-names>.
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub full_resource_name: std::string::String,

    /// The IAM policy attached to the resource.
    ///
    /// If the user who created the
    /// [Replay][google.cloud.policysimulator.v1.Replay] does not have
    /// access to the policy, this field is empty.
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub policy: std::option::Option<iam_v1::model::Policy>,

    /// Details about how each binding in the policy affects the principal's
    /// ability, or inability, to use the permission for the resource.
    ///
    /// If the user who created the
    /// [Replay][google.cloud.policysimulator.v1.Replay] does not have
    /// access to the policy, this field is omitted.
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub binding_explanations: std::vec::Vec<crate::model::BindingExplanation>,

    /// The relevance of this policy to the overall determination in the
    /// [TroubleshootIamPolicyResponse][IamChecker.TroubleshootIamPolicyResponse].
    ///
    /// If the user who created the
    /// [Replay][google.cloud.policysimulator.v1.Replay] does not have
    /// access to the policy, this field is omitted.
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    pub relevance: crate::model::HeuristicRelevance,
}

impl ExplainedPolicy {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [access][crate::model::ExplainedPolicy::access].
    pub fn set_access<T: std::convert::Into<crate::model::AccessState>>(mut self, v: T) -> Self {
        self.access = v.into();
        self
    }

    /// Sets the value of [full_resource_name][crate::model::ExplainedPolicy::full_resource_name].
    pub fn set_full_resource_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.full_resource_name = v.into();
        self
    }

    /// Sets the value of [policy][crate::model::ExplainedPolicy::policy].
    pub fn set_policy<T: std::convert::Into<std::option::Option<iam_v1::model::Policy>>>(
        mut self,
        v: T,
    ) -> Self {
        self.policy = v.into();
        self
    }

    /// Sets the value of [relevance][crate::model::ExplainedPolicy::relevance].
    pub fn set_relevance<T: std::convert::Into<crate::model::HeuristicRelevance>>(
        mut self,
        v: T,
    ) -> Self {
        self.relevance = v.into();
        self
    }

    /// Sets the value of [binding_explanations][crate::model::ExplainedPolicy::binding_explanations].
    pub fn set_binding_explanations<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::BindingExplanation>,
    {
        use std::iter::Iterator;
        self.binding_explanations = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ExplainedPolicy {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.ExplainedPolicy"
    }
}

/// Details about how a binding in a policy affects a principal's ability to use
/// a permission.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BindingExplanation {
    /// Required. Indicates whether _this binding_ provides the specified
    /// permission to the specified principal for the specified resource.
    ///
    /// This field does _not_ indicate whether the principal actually has the
    /// permission for the resource. There might be another binding that overrides
    /// this binding. To determine whether the principal actually has the
    /// permission, use the `access` field in the
    /// [TroubleshootIamPolicyResponse][IamChecker.TroubleshootIamPolicyResponse].
    pub access: crate::model::AccessState,

    /// The role that this binding grants. For example,
    /// `roles/compute.serviceAgent`.
    ///
    /// For a complete list of predefined IAM roles, as well as the permissions in
    /// each role, see <https://cloud.google.com/iam/help/roles/reference>.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub role: std::string::String,

    /// Indicates whether the role granted by this binding contains the specified
    /// permission.
    pub role_permission: crate::model::binding_explanation::RolePermission,

    /// The relevance of the permission's existence, or nonexistence, in the role
    /// to the overall determination for the entire policy.
    pub role_permission_relevance: crate::model::HeuristicRelevance,

    /// Indicates whether each principal in the binding includes the principal
    /// specified in the request, either directly or indirectly. Each key
    /// identifies a principal in the binding, and each value indicates whether the
    /// principal in the binding includes the principal in the request.
    ///
    /// For example, suppose that a binding includes the following principals:
    ///
    /// * `user:alice@example.com`
    /// * `group:product-eng@example.com`
    ///
    /// The principal in the replayed access tuple is `user:bob@example.com`. This
    /// user is a principal of the group `group:product-eng@example.com`.
    ///
    /// For the first principal in the binding, the key is
    /// `user:alice@example.com`, and the `membership` field in the value is set to
    /// `MEMBERSHIP_NOT_INCLUDED`.
    ///
    /// For the second principal in the binding, the key is
    /// `group:product-eng@example.com`, and the `membership` field in the value is
    /// set to `MEMBERSHIP_INCLUDED`.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub memberships: std::collections::HashMap<
        std::string::String,
        crate::model::binding_explanation::AnnotatedMembership,
    >,

    /// The relevance of this binding to the overall determination for the entire
    /// policy.
    pub relevance: crate::model::HeuristicRelevance,

    /// A condition expression that prevents this binding from granting access
    /// unless the expression evaluates to `true`.
    ///
    /// To learn about IAM Conditions, see
    /// <https://cloud.google.com/iam/docs/conditions-overview>.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub condition: std::option::Option<gtype::model::Expr>,
}

impl BindingExplanation {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [access][crate::model::BindingExplanation::access].
    pub fn set_access<T: std::convert::Into<crate::model::AccessState>>(mut self, v: T) -> Self {
        self.access = v.into();
        self
    }

    /// Sets the value of [role][crate::model::BindingExplanation::role].
    pub fn set_role<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.role = v.into();
        self
    }

    /// Sets the value of [role_permission][crate::model::BindingExplanation::role_permission].
    pub fn set_role_permission<
        T: std::convert::Into<crate::model::binding_explanation::RolePermission>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.role_permission = v.into();
        self
    }

    /// Sets the value of [role_permission_relevance][crate::model::BindingExplanation::role_permission_relevance].
    pub fn set_role_permission_relevance<
        T: std::convert::Into<crate::model::HeuristicRelevance>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.role_permission_relevance = v.into();
        self
    }

    /// Sets the value of [relevance][crate::model::BindingExplanation::relevance].
    pub fn set_relevance<T: std::convert::Into<crate::model::HeuristicRelevance>>(
        mut self,
        v: T,
    ) -> Self {
        self.relevance = v.into();
        self
    }

    /// Sets the value of [condition][crate::model::BindingExplanation::condition].
    pub fn set_condition<T: std::convert::Into<std::option::Option<gtype::model::Expr>>>(
        mut self,
        v: T,
    ) -> Self {
        self.condition = v.into();
        self
    }

    /// Sets the value of [memberships][crate::model::BindingExplanation::memberships].
    pub fn set_memberships<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::binding_explanation::AnnotatedMembership>,
    {
        use std::iter::Iterator;
        self.memberships = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for BindingExplanation {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.BindingExplanation"
    }
}

/// Defines additional types related to [BindingExplanation].
pub mod binding_explanation {
    #[allow(unused_imports)]
    use super::*;

    /// Details about whether the binding includes the principal.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AnnotatedMembership {
        /// Indicates whether the binding includes the principal.
        pub membership: crate::model::binding_explanation::Membership,

        /// The relevance of the principal's status to the overall determination for
        /// the binding.
        pub relevance: crate::model::HeuristicRelevance,
    }

    impl AnnotatedMembership {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [membership][crate::model::binding_explanation::AnnotatedMembership::membership].
        pub fn set_membership<
            T: std::convert::Into<crate::model::binding_explanation::Membership>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.membership = v.into();
            self
        }

        /// Sets the value of [relevance][crate::model::binding_explanation::AnnotatedMembership::relevance].
        pub fn set_relevance<T: std::convert::Into<crate::model::HeuristicRelevance>>(
            mut self,
            v: T,
        ) -> Self {
            self.relevance = v.into();
            self
        }
    }

    impl wkt::message::Message for AnnotatedMembership {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.policysimulator.v1.BindingExplanation.AnnotatedMembership"
        }
    }

    /// Whether a role includes a specific permission.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct RolePermission(i32);

    impl RolePermission {
        /// Default value. This value is unused.
        pub const ROLE_PERMISSION_UNSPECIFIED: RolePermission = RolePermission::new(0);

        /// The permission is included in the role.
        pub const ROLE_PERMISSION_INCLUDED: RolePermission = RolePermission::new(1);

        /// The permission is not included in the role.
        pub const ROLE_PERMISSION_NOT_INCLUDED: RolePermission = RolePermission::new(2);

        /// The user who created the
        /// [Replay][google.cloud.policysimulator.v1.Replay] is not
        /// allowed to access the binding.
        ///
        /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
        pub const ROLE_PERMISSION_UNKNOWN_INFO_DENIED: RolePermission = RolePermission::new(3);

        /// Creates a new RolePermission instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("ROLE_PERMISSION_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("ROLE_PERMISSION_INCLUDED"),
                2 => std::borrow::Cow::Borrowed("ROLE_PERMISSION_NOT_INCLUDED"),
                3 => std::borrow::Cow::Borrowed("ROLE_PERMISSION_UNKNOWN_INFO_DENIED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "ROLE_PERMISSION_UNSPECIFIED" => {
                    std::option::Option::Some(Self::ROLE_PERMISSION_UNSPECIFIED)
                }
                "ROLE_PERMISSION_INCLUDED" => {
                    std::option::Option::Some(Self::ROLE_PERMISSION_INCLUDED)
                }
                "ROLE_PERMISSION_NOT_INCLUDED" => {
                    std::option::Option::Some(Self::ROLE_PERMISSION_NOT_INCLUDED)
                }
                "ROLE_PERMISSION_UNKNOWN_INFO_DENIED" => {
                    std::option::Option::Some(Self::ROLE_PERMISSION_UNKNOWN_INFO_DENIED)
                }
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for RolePermission {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for RolePermission {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Whether the binding includes the principal.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Membership(i32);

    impl Membership {
        /// Default value. This value is unused.
        pub const MEMBERSHIP_UNSPECIFIED: Membership = Membership::new(0);

        /// The binding includes the principal. The principal can be included
        /// directly or indirectly. For example:
        ///
        /// * A principal is included directly if that principal is listed in the
        ///   binding.
        /// * A principal is included indirectly if that principal is in a Google
        ///   group or Google Workspace domain that is listed in the binding.
        pub const MEMBERSHIP_INCLUDED: Membership = Membership::new(1);

        /// The binding does not include the principal.
        pub const MEMBERSHIP_NOT_INCLUDED: Membership = Membership::new(2);

        /// The user who created the
        /// [Replay][google.cloud.policysimulator.v1.Replay] is not
        /// allowed to access the binding.
        ///
        /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
        pub const MEMBERSHIP_UNKNOWN_INFO_DENIED: Membership = Membership::new(3);

        /// The principal is an unsupported type. Only Google Accounts and service
        /// accounts are supported.
        pub const MEMBERSHIP_UNKNOWN_UNSUPPORTED: Membership = Membership::new(4);

        /// Creates a new Membership instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("MEMBERSHIP_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("MEMBERSHIP_INCLUDED"),
                2 => std::borrow::Cow::Borrowed("MEMBERSHIP_NOT_INCLUDED"),
                3 => std::borrow::Cow::Borrowed("MEMBERSHIP_UNKNOWN_INFO_DENIED"),
                4 => std::borrow::Cow::Borrowed("MEMBERSHIP_UNKNOWN_UNSUPPORTED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "MEMBERSHIP_UNSPECIFIED" => std::option::Option::Some(Self::MEMBERSHIP_UNSPECIFIED),
                "MEMBERSHIP_INCLUDED" => std::option::Option::Some(Self::MEMBERSHIP_INCLUDED),
                "MEMBERSHIP_NOT_INCLUDED" => {
                    std::option::Option::Some(Self::MEMBERSHIP_NOT_INCLUDED)
                }
                "MEMBERSHIP_UNKNOWN_INFO_DENIED" => {
                    std::option::Option::Some(Self::MEMBERSHIP_UNKNOWN_INFO_DENIED)
                }
                "MEMBERSHIP_UNKNOWN_UNSUPPORTED" => {
                    std::option::Option::Some(Self::MEMBERSHIP_UNKNOWN_UNSUPPORTED)
                }
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for Membership {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for Membership {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// A resource describing a `Replay`, or simulation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Replay {
    /// Output only. The resource name of the `Replay`, which has the following
    /// format:
    ///
    /// `{projects|folders|organizations}/{resource-id}/locations/global/replays/{replay-id}`,
    /// where `{resource-id}` is the ID of the project, folder, or organization
    /// that owns the Replay.
    ///
    /// Example:
    /// `projects/my-example-project/locations/global/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The current state of the `Replay`.
    pub state: crate::model::replay::State,

    /// Required. The configuration used for the `Replay`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub config: std::option::Option<crate::model::ReplayConfig>,

    /// Output only. Summary statistics about the replayed log entries.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub results_summary: std::option::Option<crate::model::replay::ResultsSummary>,
}

impl Replay {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Replay::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Replay::state].
    pub fn set_state<T: std::convert::Into<crate::model::replay::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [config][crate::model::Replay::config].
    pub fn set_config<T: std::convert::Into<std::option::Option<crate::model::ReplayConfig>>>(
        mut self,
        v: T,
    ) -> Self {
        self.config = v.into();
        self
    }

    /// Sets the value of [results_summary][crate::model::Replay::results_summary].
    pub fn set_results_summary<
        T: std::convert::Into<std::option::Option<crate::model::replay::ResultsSummary>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.results_summary = v.into();
        self
    }
}

impl wkt::message::Message for Replay {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.Replay"
    }
}

/// Defines additional types related to [Replay].
pub mod replay {
    #[allow(unused_imports)]
    use super::*;

    /// Summary statistics about the replayed log entries.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ResultsSummary {
        /// The total number of log entries replayed.
        pub log_count: i32,

        /// The number of replayed log entries with no difference between
        /// baseline and simulated policies.
        pub unchanged_count: i32,

        /// The number of replayed log entries with a difference between baseline and
        /// simulated policies.
        pub difference_count: i32,

        /// The number of log entries that could not be replayed.
        pub error_count: i32,

        /// The date of the oldest log entry replayed.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub oldest_date: std::option::Option<gtype::model::Date>,

        /// The date of the newest log entry replayed.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub newest_date: std::option::Option<gtype::model::Date>,
    }

    impl ResultsSummary {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [log_count][crate::model::replay::ResultsSummary::log_count].
        pub fn set_log_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.log_count = v.into();
            self
        }

        /// Sets the value of [unchanged_count][crate::model::replay::ResultsSummary::unchanged_count].
        pub fn set_unchanged_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.unchanged_count = v.into();
            self
        }

        /// Sets the value of [difference_count][crate::model::replay::ResultsSummary::difference_count].
        pub fn set_difference_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.difference_count = v.into();
            self
        }

        /// Sets the value of [error_count][crate::model::replay::ResultsSummary::error_count].
        pub fn set_error_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.error_count = v.into();
            self
        }

        /// Sets the value of [oldest_date][crate::model::replay::ResultsSummary::oldest_date].
        pub fn set_oldest_date<T: std::convert::Into<std::option::Option<gtype::model::Date>>>(
            mut self,
            v: T,
        ) -> Self {
            self.oldest_date = v.into();
            self
        }

        /// Sets the value of [newest_date][crate::model::replay::ResultsSummary::newest_date].
        pub fn set_newest_date<T: std::convert::Into<std::option::Option<gtype::model::Date>>>(
            mut self,
            v: T,
        ) -> Self {
            self.newest_date = v.into();
            self
        }
    }

    impl wkt::message::Message for ResultsSummary {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.policysimulator.v1.Replay.ResultsSummary"
        }
    }

    /// The current state of the [Replay][google.cloud.policysimulator.v1.Replay].
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// Default value. This value is unused.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// The `Replay` has not started yet.
        pub const PENDING: State = State::new(1);

        /// The `Replay` is currently running.
        pub const RUNNING: State = State::new(2);

        /// The `Replay` has successfully completed.
        pub const SUCCEEDED: State = State::new(3);

        /// The `Replay` has finished with an error.
        pub const FAILED: State = State::new(4);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("PENDING"),
                2 => std::borrow::Cow::Borrowed("RUNNING"),
                3 => std::borrow::Cow::Borrowed("SUCCEEDED"),
                4 => std::borrow::Cow::Borrowed("FAILED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "PENDING" => std::option::Option::Some(Self::PENDING),
                "RUNNING" => std::option::Option::Some(Self::RUNNING),
                "SUCCEEDED" => std::option::Option::Some(Self::SUCCEEDED),
                "FAILED" => std::option::Option::Some(Self::FAILED),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// The result of replaying a single access tuple against a simulated state.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ReplayResult {
    /// The resource name of the `ReplayResult`, in the following format:
    ///
    /// `{projects|folders|organizations}/{resource-id}/locations/global/replays/{replay-id}/results/{replay-result-id}`,
    /// where `{resource-id}` is the ID of the project, folder, or organization
    /// that owns the [Replay][google.cloud.policysimulator.v1.Replay].
    ///
    /// Example:
    /// `projects/my-example-project/locations/global/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36/results/1234`
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The [Replay][google.cloud.policysimulator.v1.Replay] that the access tuple
    /// was included in.
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The access tuple that was replayed. This field includes information about
    /// the principal, resource, and permission that were involved in the access
    /// attempt.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub access_tuple: std::option::Option<crate::model::AccessTuple>,

    /// The latest date this access tuple was seen in the logs.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub last_seen_date: std::option::Option<gtype::model::Date>,

    /// The result of replaying the access tuple.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub result: std::option::Option<crate::model::replay_result::Result>,
}

impl ReplayResult {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ReplayResult::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [parent][crate::model::ReplayResult::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [access_tuple][crate::model::ReplayResult::access_tuple].
    pub fn set_access_tuple<
        T: std::convert::Into<std::option::Option<crate::model::AccessTuple>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.access_tuple = v.into();
        self
    }

    /// Sets the value of [last_seen_date][crate::model::ReplayResult::last_seen_date].
    pub fn set_last_seen_date<T: std::convert::Into<std::option::Option<gtype::model::Date>>>(
        mut self,
        v: T,
    ) -> Self {
        self.last_seen_date = v.into();
        self
    }

    /// Sets the value of `result`.
    pub fn set_result<
        T: std::convert::Into<std::option::Option<crate::model::replay_result::Result>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.result = v.into();
        self
    }

    /// The value of [result][crate::model::ReplayResult::result]
    /// if it holds a `Diff`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_diff(&self) -> std::option::Option<&std::boxed::Box<crate::model::ReplayDiff>> {
        #[allow(unreachable_patterns)]
        self.result.as_ref().and_then(|v| match v {
            crate::model::replay_result::Result::Diff(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [result][crate::model::ReplayResult::result]
    /// if it holds a `Error`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_error(&self) -> std::option::Option<&std::boxed::Box<rpc::model::Status>> {
        #[allow(unreachable_patterns)]
        self.result.as_ref().and_then(|v| match v {
            crate::model::replay_result::Result::Error(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [result][crate::model::ReplayResult::result]
    /// to hold a `Diff`.
    ///
    /// Note that all the setters affecting `result` are
    /// mutually exclusive.
    pub fn set_diff<T: std::convert::Into<std::boxed::Box<crate::model::ReplayDiff>>>(
        mut self,
        v: T,
    ) -> Self {
        self.result =
            std::option::Option::Some(crate::model::replay_result::Result::Diff(v.into()));
        self
    }

    /// Sets the value of [result][crate::model::ReplayResult::result]
    /// to hold a `Error`.
    ///
    /// Note that all the setters affecting `result` are
    /// mutually exclusive.
    pub fn set_error<T: std::convert::Into<std::boxed::Box<rpc::model::Status>>>(
        mut self,
        v: T,
    ) -> Self {
        self.result =
            std::option::Option::Some(crate::model::replay_result::Result::Error(v.into()));
        self
    }
}

impl wkt::message::Message for ReplayResult {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.ReplayResult"
    }
}

/// Defines additional types related to [ReplayResult].
pub mod replay_result {
    #[allow(unused_imports)]
    use super::*;

    /// The result of replaying the access tuple.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Result {
        /// The difference between the principal's access under the current
        /// (baseline) policies and the principal's access under the proposed
        /// (simulated) policies.
        ///
        /// This field is only included for access tuples that were successfully
        /// replayed and had different results under the current policies and the
        /// proposed policies.
        Diff(std::boxed::Box<crate::model::ReplayDiff>),
        /// The error that caused the access tuple replay to fail.
        ///
        /// This field is only included for access tuples that were not replayed
        /// successfully.
        Error(std::boxed::Box<rpc::model::Status>),
    }
}

/// Request message for
/// [Simulator.CreateReplay][google.cloud.policysimulator.v1.Simulator.CreateReplay].
///
/// [google.cloud.policysimulator.v1.Simulator.CreateReplay]: crate::client::Simulator::create_replay
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateReplayRequest {
    /// Required. The parent resource where this
    /// [Replay][google.cloud.policysimulator.v1.Replay] will be created. This
    /// resource must be a project, folder, or organization with a location.
    ///
    /// Example: `projects/my-example-project/locations/global`
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The [Replay][google.cloud.policysimulator.v1.Replay] to create.
    /// Set `Replay.ReplayConfig` to configure the replay.
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub replay: std::option::Option<crate::model::Replay>,
}

impl CreateReplayRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateReplayRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [replay][crate::model::CreateReplayRequest::replay].
    pub fn set_replay<T: std::convert::Into<std::option::Option<crate::model::Replay>>>(
        mut self,
        v: T,
    ) -> Self {
        self.replay = v.into();
        self
    }
}

impl wkt::message::Message for CreateReplayRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.CreateReplayRequest"
    }
}

/// Metadata about a Replay operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ReplayOperationMetadata {
    /// Time when the request was received.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_time: std::option::Option<wkt::Timestamp>,
}

impl ReplayOperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [start_time][crate::model::ReplayOperationMetadata::start_time].
    pub fn set_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_time = v.into();
        self
    }
}

impl wkt::message::Message for ReplayOperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.ReplayOperationMetadata"
    }
}

/// Request message for
/// [Simulator.GetReplay][google.cloud.policysimulator.v1.Simulator.GetReplay].
///
/// [google.cloud.policysimulator.v1.Simulator.GetReplay]: crate::client::Simulator::get_replay
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetReplayRequest {
    /// Required. The name of the [Replay][google.cloud.policysimulator.v1.Replay]
    /// to retrieve, in the following format:
    ///
    /// `{projects|folders|organizations}/{resource-id}/locations/global/replays/{replay-id}`,
    /// where `{resource-id}` is the ID of the project, folder, or organization
    /// that owns the `Replay`.
    ///
    /// Example:
    /// `projects/my-example-project/locations/global/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36`
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetReplayRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetReplayRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetReplayRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.GetReplayRequest"
    }
}

/// Request message for
/// [Simulator.ListReplayResults][google.cloud.policysimulator.v1.Simulator.ListReplayResults].
///
/// [google.cloud.policysimulator.v1.Simulator.ListReplayResults]: crate::client::Simulator::list_replay_results
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListReplayResultsRequest {
    /// Required. The [Replay][google.cloud.policysimulator.v1.Replay] whose
    /// results are listed, in the following format:
    ///
    /// `{projects|folders|organizations}/{resource-id}/locations/global/replays/{replay-id}`
    ///
    /// Example:
    /// `projects/my-project/locations/global/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36`
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of
    /// [ReplayResult][google.cloud.policysimulator.v1.ReplayResult] objects to
    /// return. Defaults to 5000.
    ///
    /// The maximum value is 5000; values above 5000 are rounded down to 5000.
    ///
    /// [google.cloud.policysimulator.v1.ReplayResult]: crate::model::ReplayResult
    pub page_size: i32,

    /// A page token, received from a previous
    /// [Simulator.ListReplayResults][google.cloud.policysimulator.v1.Simulator.ListReplayResults]
    /// call. Provide this token to retrieve the next page of results.
    ///
    /// When paginating, all other parameters provided to
    /// [Simulator.ListReplayResults[] must match the call that provided the page
    /// token.
    ///
    /// [google.cloud.policysimulator.v1.Simulator.ListReplayResults]: crate::client::Simulator::list_replay_results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListReplayResultsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListReplayResultsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListReplayResultsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListReplayResultsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListReplayResultsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.ListReplayResultsRequest"
    }
}

/// Response message for
/// [Simulator.ListReplayResults][google.cloud.policysimulator.v1.Simulator.ListReplayResults].
///
/// [google.cloud.policysimulator.v1.Simulator.ListReplayResults]: crate::client::Simulator::list_replay_results
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListReplayResultsResponse {
    /// The results of running a [Replay][google.cloud.policysimulator.v1.Replay].
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub replay_results: std::vec::Vec<crate::model::ReplayResult>,

    /// A token that you can use to retrieve the next page of
    /// [ReplayResult][google.cloud.policysimulator.v1.ReplayResult] objects. If
    /// this field is omitted, there are no subsequent pages.
    ///
    /// [google.cloud.policysimulator.v1.ReplayResult]: crate::model::ReplayResult
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListReplayResultsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListReplayResultsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [replay_results][crate::model::ListReplayResultsResponse::replay_results].
    pub fn set_replay_results<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ReplayResult>,
    {
        use std::iter::Iterator;
        self.replay_results = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListReplayResultsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.ListReplayResultsResponse"
    }
}

impl gax::paginator::PageableResponse for ListReplayResultsResponse {
    type PageItem = crate::model::ReplayResult;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.replay_results
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The configuration used for a
/// [Replay][google.cloud.policysimulator.v1.Replay].
///
/// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ReplayConfig {
    /// A mapping of the resources that you want to simulate policies for and the
    /// policies that you want to simulate.
    ///
    /// Keys are the full resource names for the resources. For example,
    /// `//cloudresourcemanager.googleapis.com/projects/my-project`.
    /// For examples of full resource names for Google Cloud services, see
    /// <https://cloud.google.com/iam/help/troubleshooter/full-resource-names>.
    ///
    /// Values are [Policy][google.iam.v1.Policy] objects representing the policies
    /// that you want to simulate.
    ///
    /// Replays automatically take into account any IAM policies inherited through
    /// the resource hierarchy, and any policies set on descendant resources. You
    /// do not need to include these policies in the policy overlay.
    ///
    /// [google.iam.v1.Policy]: iam_v1::model::Policy
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub policy_overlay: std::collections::HashMap<std::string::String, iam_v1::model::Policy>,

    /// The logs to use as input for the
    /// [Replay][google.cloud.policysimulator.v1.Replay].
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    pub log_source: crate::model::replay_config::LogSource,
}

impl ReplayConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [log_source][crate::model::ReplayConfig::log_source].
    pub fn set_log_source<T: std::convert::Into<crate::model::replay_config::LogSource>>(
        mut self,
        v: T,
    ) -> Self {
        self.log_source = v.into();
        self
    }

    /// Sets the value of [policy_overlay][crate::model::ReplayConfig::policy_overlay].
    pub fn set_policy_overlay<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<iam_v1::model::Policy>,
    {
        use std::iter::Iterator;
        self.policy_overlay = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for ReplayConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.ReplayConfig"
    }
}

/// Defines additional types related to [ReplayConfig].
pub mod replay_config {
    #[allow(unused_imports)]
    use super::*;

    /// The source of the logs to use for a
    /// [Replay][google.cloud.policysimulator.v1.Replay].
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct LogSource(i32);

    impl LogSource {
        /// An unspecified log source.
        /// If the log source is unspecified, the
        /// [Replay][google.cloud.policysimulator.v1.Replay] defaults to using
        /// `RECENT_ACCESSES`.
        ///
        /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
        pub const LOG_SOURCE_UNSPECIFIED: LogSource = LogSource::new(0);

        /// All access logs from the last 90 days. These logs may not include logs
        /// from the most recent 7 days.
        pub const RECENT_ACCESSES: LogSource = LogSource::new(1);

        /// Creates a new LogSource instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("LOG_SOURCE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("RECENT_ACCESSES"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "LOG_SOURCE_UNSPECIFIED" => std::option::Option::Some(Self::LOG_SOURCE_UNSPECIFIED),
                "RECENT_ACCESSES" => std::option::Option::Some(Self::RECENT_ACCESSES),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for LogSource {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for LogSource {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// The difference between the results of evaluating an access tuple under
/// the current (baseline) policies and under the proposed (simulated) policies.
/// This difference explains how a principal's access could change if the
/// proposed policies were applied.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ReplayDiff {
    /// A summary and comparison of the principal's access under the current
    /// (baseline) policies and the proposed (simulated) policies for a single
    /// access tuple.
    ///
    /// The evaluation of the principal's access is reported in the
    /// [AccessState][google.cloud.policysimulator.v1.AccessState] field.
    ///
    /// [google.cloud.policysimulator.v1.AccessState]: crate::model::AccessState
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub access_diff: std::option::Option<crate::model::AccessStateDiff>,
}

impl ReplayDiff {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [access_diff][crate::model::ReplayDiff::access_diff].
    pub fn set_access_diff<
        T: std::convert::Into<std::option::Option<crate::model::AccessStateDiff>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.access_diff = v.into();
        self
    }
}

impl wkt::message::Message for ReplayDiff {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.ReplayDiff"
    }
}

/// A summary and comparison of the principal's access under the current
/// (baseline) policies and the proposed (simulated) policies for a single
/// access tuple.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AccessStateDiff {
    /// The results of evaluating the access tuple under the current (baseline)
    /// policies.
    ///
    /// If the [AccessState][google.cloud.policysimulator.v1.AccessState] couldn't
    /// be fully evaluated, this field explains why.
    ///
    /// [google.cloud.policysimulator.v1.AccessState]: crate::model::AccessState
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub baseline: std::option::Option<crate::model::ExplainedAccess>,

    /// The results of evaluating the access tuple under the proposed (simulated)
    /// policies.
    ///
    /// If the AccessState couldn't be fully evaluated, this field explains why.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub simulated: std::option::Option<crate::model::ExplainedAccess>,

    /// How the principal's access, specified in the AccessState field, changed
    /// between the current (baseline) policies and proposed (simulated) policies.
    pub access_change: crate::model::access_state_diff::AccessChangeType,
}

impl AccessStateDiff {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [baseline][crate::model::AccessStateDiff::baseline].
    pub fn set_baseline<
        T: std::convert::Into<std::option::Option<crate::model::ExplainedAccess>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.baseline = v.into();
        self
    }

    /// Sets the value of [simulated][crate::model::AccessStateDiff::simulated].
    pub fn set_simulated<
        T: std::convert::Into<std::option::Option<crate::model::ExplainedAccess>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.simulated = v.into();
        self
    }

    /// Sets the value of [access_change][crate::model::AccessStateDiff::access_change].
    pub fn set_access_change<
        T: std::convert::Into<crate::model::access_state_diff::AccessChangeType>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.access_change = v.into();
        self
    }
}

impl wkt::message::Message for AccessStateDiff {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.AccessStateDiff"
    }
}

/// Defines additional types related to [AccessStateDiff].
pub mod access_state_diff {
    #[allow(unused_imports)]
    use super::*;

    /// How the principal's access, specified in the AccessState field, changed
    /// between the current (baseline) policies and proposed (simulated) policies.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct AccessChangeType(i32);

    impl AccessChangeType {
        /// Default value. This value is unused.
        pub const ACCESS_CHANGE_TYPE_UNSPECIFIED: AccessChangeType = AccessChangeType::new(0);

        /// The principal's access did not change.
        /// This includes the case where both baseline and simulated are UNKNOWN,
        /// but the unknown information is equivalent.
        pub const NO_CHANGE: AccessChangeType = AccessChangeType::new(1);

        /// The principal's access under both the current policies and the proposed
        /// policies is `UNKNOWN`, but the unknown information differs between them.
        pub const UNKNOWN_CHANGE: AccessChangeType = AccessChangeType::new(2);

        /// The principal had access under the current policies (`GRANTED`), but will
        /// no longer have access after the proposed changes (`NOT_GRANTED`).
        pub const ACCESS_REVOKED: AccessChangeType = AccessChangeType::new(3);

        /// The principal did not have access under the current policies
        /// (`NOT_GRANTED`), but will have access after the proposed changes
        /// (`GRANTED`).
        pub const ACCESS_GAINED: AccessChangeType = AccessChangeType::new(4);

        /// This result can occur for the following reasons:
        ///
        /// * The principal had access under the current policies (`GRANTED`), but
        ///   their access after the proposed changes is `UNKNOWN`.
        ///
        /// * The principal's access under the current policies is `UNKNOWN`, but
        ///   they
        ///   will not have access after the proposed changes (`NOT_GRANTED`).
        ///
        pub const ACCESS_MAYBE_REVOKED: AccessChangeType = AccessChangeType::new(5);

        /// This result can occur for the following reasons:
        ///
        /// * The principal did not have access under the current policies
        ///   (`NOT_GRANTED`), but their access after the proposed changes is
        ///   `UNKNOWN`.
        ///
        /// * The principal's access under the current policies is `UNKNOWN`, but
        ///   they will have access after the proposed changes (`GRANTED`).
        ///
        pub const ACCESS_MAYBE_GAINED: AccessChangeType = AccessChangeType::new(6);

        /// Creates a new AccessChangeType instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("ACCESS_CHANGE_TYPE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("NO_CHANGE"),
                2 => std::borrow::Cow::Borrowed("UNKNOWN_CHANGE"),
                3 => std::borrow::Cow::Borrowed("ACCESS_REVOKED"),
                4 => std::borrow::Cow::Borrowed("ACCESS_GAINED"),
                5 => std::borrow::Cow::Borrowed("ACCESS_MAYBE_REVOKED"),
                6 => std::borrow::Cow::Borrowed("ACCESS_MAYBE_GAINED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "ACCESS_CHANGE_TYPE_UNSPECIFIED" => {
                    std::option::Option::Some(Self::ACCESS_CHANGE_TYPE_UNSPECIFIED)
                }
                "NO_CHANGE" => std::option::Option::Some(Self::NO_CHANGE),
                "UNKNOWN_CHANGE" => std::option::Option::Some(Self::UNKNOWN_CHANGE),
                "ACCESS_REVOKED" => std::option::Option::Some(Self::ACCESS_REVOKED),
                "ACCESS_GAINED" => std::option::Option::Some(Self::ACCESS_GAINED),
                "ACCESS_MAYBE_REVOKED" => std::option::Option::Some(Self::ACCESS_MAYBE_REVOKED),
                "ACCESS_MAYBE_GAINED" => std::option::Option::Some(Self::ACCESS_MAYBE_GAINED),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for AccessChangeType {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for AccessChangeType {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Details about how a set of policies, listed in
/// [ExplainedPolicy][google.cloud.policysimulator.v1.ExplainedPolicy], resulted
/// in a certain [AccessState][google.cloud.policysimulator.v1.AccessState] when
/// replaying an access tuple.
///
/// [google.cloud.policysimulator.v1.AccessState]: crate::model::AccessState
/// [google.cloud.policysimulator.v1.ExplainedPolicy]: crate::model::ExplainedPolicy
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExplainedAccess {
    /// Whether the principal in the access tuple has permission to access the
    /// resource in the access tuple under the given policies.
    pub access_state: crate::model::AccessState,

    /// If the [AccessState][google.cloud.policysimulator.v1.AccessState] is
    /// `UNKNOWN`, this field contains the policies that led to that result.
    ///
    /// If the `AccessState` is `GRANTED` or `NOT_GRANTED`, this field is
    /// omitted.
    ///
    /// [google.cloud.policysimulator.v1.AccessState]: crate::model::AccessState
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub policies: std::vec::Vec<crate::model::ExplainedPolicy>,

    /// If the [AccessState][google.cloud.policysimulator.v1.AccessState] is
    /// `UNKNOWN`, this field contains a list of errors explaining why the result
    /// is `UNKNOWN`.
    ///
    /// If the `AccessState` is `GRANTED` or `NOT_GRANTED`, this field is
    /// omitted.
    ///
    /// [google.cloud.policysimulator.v1.AccessState]: crate::model::AccessState
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub errors: std::vec::Vec<rpc::model::Status>,
}

impl ExplainedAccess {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [access_state][crate::model::ExplainedAccess::access_state].
    pub fn set_access_state<T: std::convert::Into<crate::model::AccessState>>(
        mut self,
        v: T,
    ) -> Self {
        self.access_state = v.into();
        self
    }

    /// Sets the value of [policies][crate::model::ExplainedAccess::policies].
    pub fn set_policies<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ExplainedPolicy>,
    {
        use std::iter::Iterator;
        self.policies = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [errors][crate::model::ExplainedAccess::errors].
    pub fn set_errors<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<rpc::model::Status>,
    {
        use std::iter::Iterator;
        self.errors = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ExplainedAccess {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.ExplainedAccess"
    }
}

/// Whether a principal has a permission for a resource.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct AccessState(i32);

impl AccessState {
    /// Default value. This value is unused.
    pub const ACCESS_STATE_UNSPECIFIED: AccessState = AccessState::new(0);

    /// The principal has the permission.
    pub const GRANTED: AccessState = AccessState::new(1);

    /// The principal does not have the permission.
    pub const NOT_GRANTED: AccessState = AccessState::new(2);

    /// The principal has the permission only if a condition expression evaluates
    /// to `true`.
    pub const UNKNOWN_CONDITIONAL: AccessState = AccessState::new(3);

    /// The user who created the
    /// [Replay][google.cloud.policysimulator.v1.Replay] does not have
    /// access to all of the policies that Policy Simulator needs to evaluate.
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    pub const UNKNOWN_INFO_DENIED: AccessState = AccessState::new(4);

    /// Creates a new AccessState instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("ACCESS_STATE_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("GRANTED"),
            2 => std::borrow::Cow::Borrowed("NOT_GRANTED"),
            3 => std::borrow::Cow::Borrowed("UNKNOWN_CONDITIONAL"),
            4 => std::borrow::Cow::Borrowed("UNKNOWN_INFO_DENIED"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "ACCESS_STATE_UNSPECIFIED" => std::option::Option::Some(Self::ACCESS_STATE_UNSPECIFIED),
            "GRANTED" => std::option::Option::Some(Self::GRANTED),
            "NOT_GRANTED" => std::option::Option::Some(Self::NOT_GRANTED),
            "UNKNOWN_CONDITIONAL" => std::option::Option::Some(Self::UNKNOWN_CONDITIONAL),
            "UNKNOWN_INFO_DENIED" => std::option::Option::Some(Self::UNKNOWN_INFO_DENIED),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for AccessState {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for AccessState {
    fn default() -> Self {
        Self::new(0)
    }
}

/// The extent to which a single data point, such as the existence of a binding
/// or whether a binding includes a specific principal, contributes to an overall
/// determination.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct HeuristicRelevance(i32);

impl HeuristicRelevance {
    /// Default value. This value is unused.
    pub const HEURISTIC_RELEVANCE_UNSPECIFIED: HeuristicRelevance = HeuristicRelevance::new(0);

    /// The data point has a limited effect on the result. Changing the data point
    /// is unlikely to affect the overall determination.
    pub const NORMAL: HeuristicRelevance = HeuristicRelevance::new(1);

    /// The data point has a strong effect on the result. Changing the data point
    /// is likely to affect the overall determination.
    pub const HIGH: HeuristicRelevance = HeuristicRelevance::new(2);

    /// Creates a new HeuristicRelevance instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("HEURISTIC_RELEVANCE_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("NORMAL"),
            2 => std::borrow::Cow::Borrowed("HIGH"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "HEURISTIC_RELEVANCE_UNSPECIFIED" => {
                std::option::Option::Some(Self::HEURISTIC_RELEVANCE_UNSPECIFIED)
            }
            "NORMAL" => std::option::Option::Some(Self::NORMAL),
            "HIGH" => std::option::Option::Some(Self::HIGH),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for HeuristicRelevance {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for HeuristicRelevance {
    fn default() -> Self {
        Self::new(0)
    }
}
