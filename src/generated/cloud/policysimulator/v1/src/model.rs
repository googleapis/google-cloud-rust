// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gaxi;
extern crate gtype;
extern crate iam_v1;
extern crate lazy_static;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate rpc;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// Information about the principal, resource, and permission to check.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct AccessTuple {
    /// Required. The principal whose access you want to check, in the form of
    /// the email address that represents that principal. For example,
    /// `alice@example.com` or
    /// `my-service-account@my-project.iam.gserviceaccount.com`.
    ///
    /// The principal must be a Google Account or a service account. Other types of
    /// principals are not supported.
    pub principal: std::string::String,

    /// Required. The full resource name that identifies the resource. For example,
    /// `//compute.googleapis.com/projects/my-project/zones/us-central1-a/instances/my-instance`.
    ///
    /// For examples of full resource names for Google Cloud services, see
    /// <https://cloud.google.com/iam/help/troubleshooter/full-resource-names>.
    pub full_resource_name: std::string::String,

    /// Required. The IAM permission to check for the specified principal and
    /// resource.
    ///
    /// For a complete list of IAM permissions, see
    /// <https://cloud.google.com/iam/help/permissions/reference>.
    ///
    /// For a complete list of predefined IAM roles and the permissions in each
    /// role, see <https://cloud.google.com/iam/help/roles/reference>.
    pub permission: std::string::String,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl AccessTuple {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [principal][crate::model::AccessTuple::principal].
    pub fn set_principal<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.principal = v.into();
        self
    }

    /// Sets the value of [full_resource_name][crate::model::AccessTuple::full_resource_name].
    pub fn set_full_resource_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.full_resource_name = v.into();
        self
    }

    /// Sets the value of [permission][crate::model::AccessTuple::permission].
    pub fn set_permission<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.permission = v.into();
        self
    }
}

impl wkt::message::Message for AccessTuple {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.AccessTuple"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for AccessTuple {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __principal,
            __full_resource_name,
            __permission,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for AccessTuple")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "principal" => Ok(__FieldTag::__principal),
                            "fullResourceName" => Ok(__FieldTag::__full_resource_name),
                            "full_resource_name" => Ok(__FieldTag::__full_resource_name),
                            "permission" => Ok(__FieldTag::__permission),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = AccessTuple;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct AccessTuple")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__principal => {
                            if !fields.insert(__FieldTag::__principal) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for principal",
                                ));
                            }
                            result.principal = map
                                .next_value::<std::option::Option<std::string::String>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__full_resource_name => {
                            if !fields.insert(__FieldTag::__full_resource_name) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for full_resource_name",
                                ));
                            }
                            result.full_resource_name = map
                                .next_value::<std::option::Option<std::string::String>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__permission => {
                            if !fields.insert(__FieldTag::__permission) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for permission",
                                ));
                            }
                            result.permission = map
                                .next_value::<std::option::Option<std::string::String>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for AccessTuple {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if !self.principal.is_empty() {
            state.serialize_entry("principal", &self.principal)?;
        }
        if !self.full_resource_name.is_empty() {
            state.serialize_entry("fullResourceName", &self.full_resource_name)?;
        }
        if !self.permission.is_empty() {
            state.serialize_entry("permission", &self.permission)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// Details about how a specific IAM [Policy][google.iam.v1.Policy] contributed
/// to the access check.
///
/// [google.iam.v1.Policy]: iam_v1::model::Policy
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct ExplainedPolicy {
    /// Indicates whether _this policy_ provides the specified permission to the
    /// specified principal for the specified resource.
    ///
    /// This field does _not_ indicate whether the principal actually has the
    /// permission for the resource. There might be another policy that overrides
    /// this policy. To determine whether the principal actually has the
    /// permission, use the `access` field in the
    /// [TroubleshootIamPolicyResponse][IamChecker.TroubleshootIamPolicyResponse].
    pub access: crate::model::AccessState,

    /// The full resource name that identifies the resource. For example,
    /// `//compute.googleapis.com/projects/my-project/zones/us-central1-a/instances/my-instance`.
    ///
    /// If the user who created the
    /// [Replay][google.cloud.policysimulator.v1.Replay] does not have
    /// access to the policy, this field is omitted.
    ///
    /// For examples of full resource names for Google Cloud services, see
    /// <https://cloud.google.com/iam/help/troubleshooter/full-resource-names>.
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    pub full_resource_name: std::string::String,

    /// The IAM policy attached to the resource.
    ///
    /// If the user who created the
    /// [Replay][google.cloud.policysimulator.v1.Replay] does not have
    /// access to the policy, this field is empty.
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    pub policy: std::option::Option<iam_v1::model::Policy>,

    /// Details about how each binding in the policy affects the principal's
    /// ability, or inability, to use the permission for the resource.
    ///
    /// If the user who created the
    /// [Replay][google.cloud.policysimulator.v1.Replay] does not have
    /// access to the policy, this field is omitted.
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    pub binding_explanations: std::vec::Vec<crate::model::BindingExplanation>,

    /// The relevance of this policy to the overall determination in the
    /// [TroubleshootIamPolicyResponse][IamChecker.TroubleshootIamPolicyResponse].
    ///
    /// If the user who created the
    /// [Replay][google.cloud.policysimulator.v1.Replay] does not have
    /// access to the policy, this field is omitted.
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    pub relevance: crate::model::HeuristicRelevance,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ExplainedPolicy {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [access][crate::model::ExplainedPolicy::access].
    pub fn set_access<T: std::convert::Into<crate::model::AccessState>>(mut self, v: T) -> Self {
        self.access = v.into();
        self
    }

    /// Sets the value of [full_resource_name][crate::model::ExplainedPolicy::full_resource_name].
    pub fn set_full_resource_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.full_resource_name = v.into();
        self
    }

    /// Sets the value of [policy][crate::model::ExplainedPolicy::policy].
    pub fn set_policy<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<iam_v1::model::Policy>,
    {
        self.policy = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [policy][crate::model::ExplainedPolicy::policy].
    pub fn set_or_clear_policy<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<iam_v1::model::Policy>,
    {
        self.policy = v.map(|x| x.into());
        self
    }

    /// Sets the value of [binding_explanations][crate::model::ExplainedPolicy::binding_explanations].
    pub fn set_binding_explanations<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::BindingExplanation>,
    {
        use std::iter::Iterator;
        self.binding_explanations = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [relevance][crate::model::ExplainedPolicy::relevance].
    pub fn set_relevance<T: std::convert::Into<crate::model::HeuristicRelevance>>(
        mut self,
        v: T,
    ) -> Self {
        self.relevance = v.into();
        self
    }
}

impl wkt::message::Message for ExplainedPolicy {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.ExplainedPolicy"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for ExplainedPolicy {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __access,
            __full_resource_name,
            __policy,
            __binding_explanations,
            __relevance,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for ExplainedPolicy")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "access" => Ok(__FieldTag::__access),
                            "fullResourceName" => Ok(__FieldTag::__full_resource_name),
                            "full_resource_name" => Ok(__FieldTag::__full_resource_name),
                            "policy" => Ok(__FieldTag::__policy),
                            "bindingExplanations" => Ok(__FieldTag::__binding_explanations),
                            "binding_explanations" => Ok(__FieldTag::__binding_explanations),
                            "relevance" => Ok(__FieldTag::__relevance),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = ExplainedPolicy;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct ExplainedPolicy")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__access => {
                            if !fields.insert(__FieldTag::__access) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for access",
                                ));
                            }
                            result.access = map
                                .next_value::<std::option::Option<crate::model::AccessState>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__full_resource_name => {
                            if !fields.insert(__FieldTag::__full_resource_name) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for full_resource_name",
                                ));
                            }
                            result.full_resource_name = map
                                .next_value::<std::option::Option<std::string::String>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__policy => {
                            if !fields.insert(__FieldTag::__policy) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for policy",
                                ));
                            }
                            result.policy =
                                map.next_value::<std::option::Option<iam_v1::model::Policy>>()?;
                        }
                        __FieldTag::__binding_explanations => {
                            if !fields.insert(__FieldTag::__binding_explanations) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for binding_explanations",
                                ));
                            }
                            result.binding_explanations = map
                                .next_value::<std::option::Option<
                                    std::vec::Vec<crate::model::BindingExplanation>,
                                >>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__relevance => {
                            if !fields.insert(__FieldTag::__relevance) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for relevance",
                                ));
                            }
                            result.relevance = map.next_value::<std::option::Option<crate::model::HeuristicRelevance>>()?.unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for ExplainedPolicy {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if !wkt::internal::is_default(&self.access) {
            state.serialize_entry("access", &self.access)?;
        }
        if !self.full_resource_name.is_empty() {
            state.serialize_entry("fullResourceName", &self.full_resource_name)?;
        }
        if self.policy.is_some() {
            state.serialize_entry("policy", &self.policy)?;
        }
        if !self.binding_explanations.is_empty() {
            state.serialize_entry("bindingExplanations", &self.binding_explanations)?;
        }
        if !wkt::internal::is_default(&self.relevance) {
            state.serialize_entry("relevance", &self.relevance)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// Details about how a binding in a policy affects a principal's ability to use
/// a permission.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct BindingExplanation {
    /// Required. Indicates whether _this binding_ provides the specified
    /// permission to the specified principal for the specified resource.
    ///
    /// This field does _not_ indicate whether the principal actually has the
    /// permission for the resource. There might be another binding that overrides
    /// this binding. To determine whether the principal actually has the
    /// permission, use the `access` field in the
    /// [TroubleshootIamPolicyResponse][IamChecker.TroubleshootIamPolicyResponse].
    pub access: crate::model::AccessState,

    /// The role that this binding grants. For example,
    /// `roles/compute.serviceAgent`.
    ///
    /// For a complete list of predefined IAM roles, as well as the permissions in
    /// each role, see <https://cloud.google.com/iam/help/roles/reference>.
    pub role: std::string::String,

    /// Indicates whether the role granted by this binding contains the specified
    /// permission.
    pub role_permission: crate::model::binding_explanation::RolePermission,

    /// The relevance of the permission's existence, or nonexistence, in the role
    /// to the overall determination for the entire policy.
    pub role_permission_relevance: crate::model::HeuristicRelevance,

    /// Indicates whether each principal in the binding includes the principal
    /// specified in the request, either directly or indirectly. Each key
    /// identifies a principal in the binding, and each value indicates whether the
    /// principal in the binding includes the principal in the request.
    ///
    /// For example, suppose that a binding includes the following principals:
    ///
    /// * `user:alice@example.com`
    /// * `group:product-eng@example.com`
    ///
    /// The principal in the replayed access tuple is `user:bob@example.com`. This
    /// user is a principal of the group `group:product-eng@example.com`.
    ///
    /// For the first principal in the binding, the key is
    /// `user:alice@example.com`, and the `membership` field in the value is set to
    /// `MEMBERSHIP_NOT_INCLUDED`.
    ///
    /// For the second principal in the binding, the key is
    /// `group:product-eng@example.com`, and the `membership` field in the value is
    /// set to `MEMBERSHIP_INCLUDED`.
    pub memberships: std::collections::HashMap<
        std::string::String,
        crate::model::binding_explanation::AnnotatedMembership,
    >,

    /// The relevance of this binding to the overall determination for the entire
    /// policy.
    pub relevance: crate::model::HeuristicRelevance,

    /// A condition expression that prevents this binding from granting access
    /// unless the expression evaluates to `true`.
    ///
    /// To learn about IAM Conditions, see
    /// <https://cloud.google.com/iam/docs/conditions-overview>.
    pub condition: std::option::Option<gtype::model::Expr>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl BindingExplanation {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [access][crate::model::BindingExplanation::access].
    pub fn set_access<T: std::convert::Into<crate::model::AccessState>>(mut self, v: T) -> Self {
        self.access = v.into();
        self
    }

    /// Sets the value of [role][crate::model::BindingExplanation::role].
    pub fn set_role<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.role = v.into();
        self
    }

    /// Sets the value of [role_permission][crate::model::BindingExplanation::role_permission].
    pub fn set_role_permission<
        T: std::convert::Into<crate::model::binding_explanation::RolePermission>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.role_permission = v.into();
        self
    }

    /// Sets the value of [role_permission_relevance][crate::model::BindingExplanation::role_permission_relevance].
    pub fn set_role_permission_relevance<
        T: std::convert::Into<crate::model::HeuristicRelevance>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.role_permission_relevance = v.into();
        self
    }

    /// Sets the value of [memberships][crate::model::BindingExplanation::memberships].
    pub fn set_memberships<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::binding_explanation::AnnotatedMembership>,
    {
        use std::iter::Iterator;
        self.memberships = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [relevance][crate::model::BindingExplanation::relevance].
    pub fn set_relevance<T: std::convert::Into<crate::model::HeuristicRelevance>>(
        mut self,
        v: T,
    ) -> Self {
        self.relevance = v.into();
        self
    }

    /// Sets the value of [condition][crate::model::BindingExplanation::condition].
    pub fn set_condition<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<gtype::model::Expr>,
    {
        self.condition = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [condition][crate::model::BindingExplanation::condition].
    pub fn set_or_clear_condition<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<gtype::model::Expr>,
    {
        self.condition = v.map(|x| x.into());
        self
    }
}

impl wkt::message::Message for BindingExplanation {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.BindingExplanation"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for BindingExplanation {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __access,
            __role,
            __role_permission,
            __role_permission_relevance,
            __memberships,
            __relevance,
            __condition,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for BindingExplanation")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "access" => Ok(__FieldTag::__access),
                            "role" => Ok(__FieldTag::__role),
                            "rolePermission" => Ok(__FieldTag::__role_permission),
                            "role_permission" => Ok(__FieldTag::__role_permission),
                            "rolePermissionRelevance" => {
                                Ok(__FieldTag::__role_permission_relevance)
                            }
                            "role_permission_relevance" => {
                                Ok(__FieldTag::__role_permission_relevance)
                            }
                            "memberships" => Ok(__FieldTag::__memberships),
                            "relevance" => Ok(__FieldTag::__relevance),
                            "condition" => Ok(__FieldTag::__condition),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = BindingExplanation;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct BindingExplanation")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__access => {
                            if !fields.insert(__FieldTag::__access) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for access",
                                ));
                            }
                            result.access = map
                                .next_value::<std::option::Option<crate::model::AccessState>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__role => {
                            if !fields.insert(__FieldTag::__role) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for role",
                                ));
                            }
                            result.role = map
                                .next_value::<std::option::Option<std::string::String>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__role_permission => {
                            if !fields.insert(__FieldTag::__role_permission) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for role_permission",
                                ));
                            }
                            result.role_permission = map
                                .next_value::<std::option::Option<
                                    crate::model::binding_explanation::RolePermission,
                                >>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__role_permission_relevance => {
                            if !fields.insert(__FieldTag::__role_permission_relevance) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for role_permission_relevance",
                                ));
                            }
                            result.role_permission_relevance = map.next_value::<std::option::Option<crate::model::HeuristicRelevance>>()?.unwrap_or_default();
                        }
                        __FieldTag::__memberships => {
                            if !fields.insert(__FieldTag::__memberships) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for memberships",
                                ));
                            }
                            result.memberships = map
                                .next_value::<std::option::Option<
                                    std::collections::HashMap<
                                        std::string::String,
                                        crate::model::binding_explanation::AnnotatedMembership,
                                    >,
                                >>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__relevance => {
                            if !fields.insert(__FieldTag::__relevance) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for relevance",
                                ));
                            }
                            result.relevance = map.next_value::<std::option::Option<crate::model::HeuristicRelevance>>()?.unwrap_or_default();
                        }
                        __FieldTag::__condition => {
                            if !fields.insert(__FieldTag::__condition) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for condition",
                                ));
                            }
                            result.condition =
                                map.next_value::<std::option::Option<gtype::model::Expr>>()?;
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for BindingExplanation {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if !wkt::internal::is_default(&self.access) {
            state.serialize_entry("access", &self.access)?;
        }
        if !self.role.is_empty() {
            state.serialize_entry("role", &self.role)?;
        }
        if !wkt::internal::is_default(&self.role_permission) {
            state.serialize_entry("rolePermission", &self.role_permission)?;
        }
        if !wkt::internal::is_default(&self.role_permission_relevance) {
            state.serialize_entry("rolePermissionRelevance", &self.role_permission_relevance)?;
        }
        if !self.memberships.is_empty() {
            state.serialize_entry("memberships", &self.memberships)?;
        }
        if !wkt::internal::is_default(&self.relevance) {
            state.serialize_entry("relevance", &self.relevance)?;
        }
        if self.condition.is_some() {
            state.serialize_entry("condition", &self.condition)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// Defines additional types related to [BindingExplanation].
pub mod binding_explanation {
    #[allow(unused_imports)]
    use super::*;

    /// Details about whether the binding includes the principal.
    #[derive(Clone, Debug, Default, PartialEq)]
    #[non_exhaustive]
    pub struct AnnotatedMembership {
        /// Indicates whether the binding includes the principal.
        pub membership: crate::model::binding_explanation::Membership,

        /// The relevance of the principal's status to the overall determination for
        /// the binding.
        pub relevance: crate::model::HeuristicRelevance,

        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl AnnotatedMembership {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [membership][crate::model::binding_explanation::AnnotatedMembership::membership].
        pub fn set_membership<
            T: std::convert::Into<crate::model::binding_explanation::Membership>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.membership = v.into();
            self
        }

        /// Sets the value of [relevance][crate::model::binding_explanation::AnnotatedMembership::relevance].
        pub fn set_relevance<T: std::convert::Into<crate::model::HeuristicRelevance>>(
            mut self,
            v: T,
        ) -> Self {
            self.relevance = v.into();
            self
        }
    }

    impl wkt::message::Message for AnnotatedMembership {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.policysimulator.v1.BindingExplanation.AnnotatedMembership"
        }
    }

    #[doc(hidden)]
    impl<'de> serde::de::Deserialize<'de> for AnnotatedMembership {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            #[derive(PartialEq, Eq, Hash)]
            enum __FieldTag {
                __membership,
                __relevance,
                Unknown(std::string::String),
            }
            impl<'de> serde::de::Deserialize<'de> for __FieldTag {
                fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
                where
                    D: serde::Deserializer<'de>,
                {
                    struct Visitor;
                    impl<'de> serde::de::Visitor<'de> for Visitor {
                        type Value = __FieldTag;
                        fn expecting(
                            &self,
                            formatter: &mut std::fmt::Formatter,
                        ) -> std::fmt::Result {
                            formatter.write_str("a field name for AnnotatedMembership")
                        }
                        fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                        where
                            E: serde::de::Error,
                        {
                            use std::result::Result::Ok;
                            use std::string::ToString;
                            match value {
                                "membership" => Ok(__FieldTag::__membership),
                                "relevance" => Ok(__FieldTag::__relevance),
                                _ => Ok(__FieldTag::Unknown(value.to_string())),
                            }
                        }
                    }
                    deserializer.deserialize_identifier(Visitor)
                }
            }
            struct Visitor;
            impl<'de> serde::de::Visitor<'de> for Visitor {
                type Value = AnnotatedMembership;
                fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                    formatter.write_str("struct AnnotatedMembership")
                }
                fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
                where
                    A: serde::de::MapAccess<'de>,
                {
                    #[allow(unused_imports)]
                    use serde::de::Error;
                    use std::option::Option::Some;
                    let mut fields = std::collections::HashSet::new();
                    let mut result = Self::Value::new();
                    while let Some(tag) = map.next_key::<__FieldTag>()? {
                        #[allow(clippy::match_single_binding)]
                        match tag {
                            __FieldTag::__membership => {
                                if !fields.insert(__FieldTag::__membership) {
                                    return std::result::Result::Err(A::Error::duplicate_field(
                                        "multiple values for membership",
                                    ));
                                }
                                result.membership = map
                                    .next_value::<std::option::Option<
                                        crate::model::binding_explanation::Membership,
                                    >>()?
                                    .unwrap_or_default();
                            }
                            __FieldTag::__relevance => {
                                if !fields.insert(__FieldTag::__relevance) {
                                    return std::result::Result::Err(A::Error::duplicate_field(
                                        "multiple values for relevance",
                                    ));
                                }
                                result.relevance = map.next_value::<std::option::Option<crate::model::HeuristicRelevance>>()?.unwrap_or_default();
                            }
                            __FieldTag::Unknown(key) => {
                                let value = map.next_value::<serde_json::Value>()?;
                                result._unknown_fields.insert(key, value);
                            }
                        }
                    }
                    std::result::Result::Ok(result)
                }
            }
            deserializer.deserialize_any(Visitor)
        }
    }

    #[doc(hidden)]
    impl serde::ser::Serialize for AnnotatedMembership {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::ser::Serializer,
        {
            use serde::ser::SerializeMap;
            #[allow(unused_imports)]
            use std::option::Option::Some;
            let mut state = serializer.serialize_map(std::option::Option::None)?;
            if !wkt::internal::is_default(&self.membership) {
                state.serialize_entry("membership", &self.membership)?;
            }
            if !wkt::internal::is_default(&self.relevance) {
                state.serialize_entry("relevance", &self.relevance)?;
            }
            if !self._unknown_fields.is_empty() {
                for (key, value) in self._unknown_fields.iter() {
                    state.serialize_entry(key, &value)?;
                }
            }
            state.end()
        }
    }

    /// Whether a role includes a specific permission.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum RolePermission {
        /// Default value. This value is unused.
        Unspecified,
        /// The permission is included in the role.
        Included,
        /// The permission is not included in the role.
        NotIncluded,
        /// The user who created the
        /// [Replay][google.cloud.policysimulator.v1.Replay] is not
        /// allowed to access the binding.
        ///
        /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
        UnknownInfoDenied,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [RolePermission::value] or
        /// [RolePermission::name].
        UnknownValue(role_permission::UnknownValue),
    }

    #[doc(hidden)]
    pub mod role_permission {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl RolePermission {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Included => std::option::Option::Some(1),
                Self::NotIncluded => std::option::Option::Some(2),
                Self::UnknownInfoDenied => std::option::Option::Some(3),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("ROLE_PERMISSION_UNSPECIFIED"),
                Self::Included => std::option::Option::Some("ROLE_PERMISSION_INCLUDED"),
                Self::NotIncluded => std::option::Option::Some("ROLE_PERMISSION_NOT_INCLUDED"),
                Self::UnknownInfoDenied => {
                    std::option::Option::Some("ROLE_PERMISSION_UNKNOWN_INFO_DENIED")
                }
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for RolePermission {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for RolePermission {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for RolePermission {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Included,
                2 => Self::NotIncluded,
                3 => Self::UnknownInfoDenied,
                _ => Self::UnknownValue(role_permission::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for RolePermission {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "ROLE_PERMISSION_UNSPECIFIED" => Self::Unspecified,
                "ROLE_PERMISSION_INCLUDED" => Self::Included,
                "ROLE_PERMISSION_NOT_INCLUDED" => Self::NotIncluded,
                "ROLE_PERMISSION_UNKNOWN_INFO_DENIED" => Self::UnknownInfoDenied,
                _ => Self::UnknownValue(role_permission::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for RolePermission {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Included => serializer.serialize_i32(1),
                Self::NotIncluded => serializer.serialize_i32(2),
                Self::UnknownInfoDenied => serializer.serialize_i32(3),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for RolePermission {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<RolePermission>::new(
                ".google.cloud.policysimulator.v1.BindingExplanation.RolePermission",
            ))
        }
    }

    /// Whether the binding includes the principal.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum Membership {
        /// Default value. This value is unused.
        Unspecified,
        /// The binding includes the principal. The principal can be included
        /// directly or indirectly. For example:
        ///
        /// * A principal is included directly if that principal is listed in the
        ///   binding.
        /// * A principal is included indirectly if that principal is in a Google
        ///   group or Google Workspace domain that is listed in the binding.
        Included,
        /// The binding does not include the principal.
        NotIncluded,
        /// The user who created the
        /// [Replay][google.cloud.policysimulator.v1.Replay] is not
        /// allowed to access the binding.
        ///
        /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
        UnknownInfoDenied,
        /// The principal is an unsupported type. Only Google Accounts and service
        /// accounts are supported.
        UnknownUnsupported,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [Membership::value] or
        /// [Membership::name].
        UnknownValue(membership::UnknownValue),
    }

    #[doc(hidden)]
    pub mod membership {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl Membership {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Included => std::option::Option::Some(1),
                Self::NotIncluded => std::option::Option::Some(2),
                Self::UnknownInfoDenied => std::option::Option::Some(3),
                Self::UnknownUnsupported => std::option::Option::Some(4),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("MEMBERSHIP_UNSPECIFIED"),
                Self::Included => std::option::Option::Some("MEMBERSHIP_INCLUDED"),
                Self::NotIncluded => std::option::Option::Some("MEMBERSHIP_NOT_INCLUDED"),
                Self::UnknownInfoDenied => {
                    std::option::Option::Some("MEMBERSHIP_UNKNOWN_INFO_DENIED")
                }
                Self::UnknownUnsupported => {
                    std::option::Option::Some("MEMBERSHIP_UNKNOWN_UNSUPPORTED")
                }
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for Membership {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for Membership {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for Membership {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Included,
                2 => Self::NotIncluded,
                3 => Self::UnknownInfoDenied,
                4 => Self::UnknownUnsupported,
                _ => Self::UnknownValue(membership::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for Membership {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "MEMBERSHIP_UNSPECIFIED" => Self::Unspecified,
                "MEMBERSHIP_INCLUDED" => Self::Included,
                "MEMBERSHIP_NOT_INCLUDED" => Self::NotIncluded,
                "MEMBERSHIP_UNKNOWN_INFO_DENIED" => Self::UnknownInfoDenied,
                "MEMBERSHIP_UNKNOWN_UNSUPPORTED" => Self::UnknownUnsupported,
                _ => Self::UnknownValue(membership::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for Membership {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Included => serializer.serialize_i32(1),
                Self::NotIncluded => serializer.serialize_i32(2),
                Self::UnknownInfoDenied => serializer.serialize_i32(3),
                Self::UnknownUnsupported => serializer.serialize_i32(4),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for Membership {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<Membership>::new(
                ".google.cloud.policysimulator.v1.BindingExplanation.Membership",
            ))
        }
    }
}

/// A resource describing a `Replay`, or simulation.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct Replay {
    /// Output only. The resource name of the `Replay`, which has the following
    /// format:
    ///
    /// `{projects|folders|organizations}/{resource-id}/locations/global/replays/{replay-id}`,
    /// where `{resource-id}` is the ID of the project, folder, or organization
    /// that owns the Replay.
    ///
    /// Example:
    /// `projects/my-example-project/locations/global/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36`
    pub name: std::string::String,

    /// Output only. The current state of the `Replay`.
    pub state: crate::model::replay::State,

    /// Required. The configuration used for the `Replay`.
    pub config: std::option::Option<crate::model::ReplayConfig>,

    /// Output only. Summary statistics about the replayed log entries.
    pub results_summary: std::option::Option<crate::model::replay::ResultsSummary>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Replay {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Replay::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Replay::state].
    pub fn set_state<T: std::convert::Into<crate::model::replay::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [config][crate::model::Replay::config].
    pub fn set_config<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::ReplayConfig>,
    {
        self.config = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [config][crate::model::Replay::config].
    pub fn set_or_clear_config<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::ReplayConfig>,
    {
        self.config = v.map(|x| x.into());
        self
    }

    /// Sets the value of [results_summary][crate::model::Replay::results_summary].
    pub fn set_results_summary<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::replay::ResultsSummary>,
    {
        self.results_summary = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [results_summary][crate::model::Replay::results_summary].
    pub fn set_or_clear_results_summary<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::replay::ResultsSummary>,
    {
        self.results_summary = v.map(|x| x.into());
        self
    }
}

impl wkt::message::Message for Replay {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.Replay"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for Replay {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __name,
            __state,
            __config,
            __results_summary,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for Replay")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "name" => Ok(__FieldTag::__name),
                            "state" => Ok(__FieldTag::__state),
                            "config" => Ok(__FieldTag::__config),
                            "resultsSummary" => Ok(__FieldTag::__results_summary),
                            "results_summary" => Ok(__FieldTag::__results_summary),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = Replay;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct Replay")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__name => {
                            if !fields.insert(__FieldTag::__name) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for name",
                                ));
                            }
                            result.name = map
                                .next_value::<std::option::Option<std::string::String>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__state => {
                            if !fields.insert(__FieldTag::__state) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for state",
                                ));
                            }
                            result.state = map
                                .next_value::<std::option::Option<crate::model::replay::State>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__config => {
                            if !fields.insert(__FieldTag::__config) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for config",
                                ));
                            }
                            result.config = map
                                .next_value::<std::option::Option<crate::model::ReplayConfig>>()?;
                        }
                        __FieldTag::__results_summary => {
                            if !fields.insert(__FieldTag::__results_summary) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for results_summary",
                                ));
                            }
                            result.results_summary = map.next_value::<std::option::Option<crate::model::replay::ResultsSummary>>()?
                                ;
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for Replay {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if !self.name.is_empty() {
            state.serialize_entry("name", &self.name)?;
        }
        if !wkt::internal::is_default(&self.state) {
            state.serialize_entry("state", &self.state)?;
        }
        if self.config.is_some() {
            state.serialize_entry("config", &self.config)?;
        }
        if self.results_summary.is_some() {
            state.serialize_entry("resultsSummary", &self.results_summary)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// Defines additional types related to [Replay].
pub mod replay {
    #[allow(unused_imports)]
    use super::*;

    /// Summary statistics about the replayed log entries.
    #[derive(Clone, Debug, Default, PartialEq)]
    #[non_exhaustive]
    pub struct ResultsSummary {
        /// The total number of log entries replayed.
        pub log_count: i32,

        /// The number of replayed log entries with no difference between
        /// baseline and simulated policies.
        pub unchanged_count: i32,

        /// The number of replayed log entries with a difference between baseline and
        /// simulated policies.
        pub difference_count: i32,

        /// The number of log entries that could not be replayed.
        pub error_count: i32,

        /// The date of the oldest log entry replayed.
        pub oldest_date: std::option::Option<gtype::model::Date>,

        /// The date of the newest log entry replayed.
        pub newest_date: std::option::Option<gtype::model::Date>,

        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl ResultsSummary {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [log_count][crate::model::replay::ResultsSummary::log_count].
        pub fn set_log_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.log_count = v.into();
            self
        }

        /// Sets the value of [unchanged_count][crate::model::replay::ResultsSummary::unchanged_count].
        pub fn set_unchanged_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.unchanged_count = v.into();
            self
        }

        /// Sets the value of [difference_count][crate::model::replay::ResultsSummary::difference_count].
        pub fn set_difference_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.difference_count = v.into();
            self
        }

        /// Sets the value of [error_count][crate::model::replay::ResultsSummary::error_count].
        pub fn set_error_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.error_count = v.into();
            self
        }

        /// Sets the value of [oldest_date][crate::model::replay::ResultsSummary::oldest_date].
        pub fn set_oldest_date<T>(mut self, v: T) -> Self
        where
            T: std::convert::Into<gtype::model::Date>,
        {
            self.oldest_date = std::option::Option::Some(v.into());
            self
        }

        /// Sets or clears the value of [oldest_date][crate::model::replay::ResultsSummary::oldest_date].
        pub fn set_or_clear_oldest_date<T>(mut self, v: std::option::Option<T>) -> Self
        where
            T: std::convert::Into<gtype::model::Date>,
        {
            self.oldest_date = v.map(|x| x.into());
            self
        }

        /// Sets the value of [newest_date][crate::model::replay::ResultsSummary::newest_date].
        pub fn set_newest_date<T>(mut self, v: T) -> Self
        where
            T: std::convert::Into<gtype::model::Date>,
        {
            self.newest_date = std::option::Option::Some(v.into());
            self
        }

        /// Sets or clears the value of [newest_date][crate::model::replay::ResultsSummary::newest_date].
        pub fn set_or_clear_newest_date<T>(mut self, v: std::option::Option<T>) -> Self
        where
            T: std::convert::Into<gtype::model::Date>,
        {
            self.newest_date = v.map(|x| x.into());
            self
        }
    }

    impl wkt::message::Message for ResultsSummary {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.policysimulator.v1.Replay.ResultsSummary"
        }
    }

    #[doc(hidden)]
    impl<'de> serde::de::Deserialize<'de> for ResultsSummary {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            #[derive(PartialEq, Eq, Hash)]
            enum __FieldTag {
                __log_count,
                __unchanged_count,
                __difference_count,
                __error_count,
                __oldest_date,
                __newest_date,
                Unknown(std::string::String),
            }
            impl<'de> serde::de::Deserialize<'de> for __FieldTag {
                fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
                where
                    D: serde::Deserializer<'de>,
                {
                    struct Visitor;
                    impl<'de> serde::de::Visitor<'de> for Visitor {
                        type Value = __FieldTag;
                        fn expecting(
                            &self,
                            formatter: &mut std::fmt::Formatter,
                        ) -> std::fmt::Result {
                            formatter.write_str("a field name for ResultsSummary")
                        }
                        fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                        where
                            E: serde::de::Error,
                        {
                            use std::result::Result::Ok;
                            use std::string::ToString;
                            match value {
                                "logCount" => Ok(__FieldTag::__log_count),
                                "log_count" => Ok(__FieldTag::__log_count),
                                "unchangedCount" => Ok(__FieldTag::__unchanged_count),
                                "unchanged_count" => Ok(__FieldTag::__unchanged_count),
                                "differenceCount" => Ok(__FieldTag::__difference_count),
                                "difference_count" => Ok(__FieldTag::__difference_count),
                                "errorCount" => Ok(__FieldTag::__error_count),
                                "error_count" => Ok(__FieldTag::__error_count),
                                "oldestDate" => Ok(__FieldTag::__oldest_date),
                                "oldest_date" => Ok(__FieldTag::__oldest_date),
                                "newestDate" => Ok(__FieldTag::__newest_date),
                                "newest_date" => Ok(__FieldTag::__newest_date),
                                _ => Ok(__FieldTag::Unknown(value.to_string())),
                            }
                        }
                    }
                    deserializer.deserialize_identifier(Visitor)
                }
            }
            struct Visitor;
            impl<'de> serde::de::Visitor<'de> for Visitor {
                type Value = ResultsSummary;
                fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                    formatter.write_str("struct ResultsSummary")
                }
                fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
                where
                    A: serde::de::MapAccess<'de>,
                {
                    #[allow(unused_imports)]
                    use serde::de::Error;
                    use std::option::Option::Some;
                    let mut fields = std::collections::HashSet::new();
                    let mut result = Self::Value::new();
                    while let Some(tag) = map.next_key::<__FieldTag>()? {
                        #[allow(clippy::match_single_binding)]
                        match tag {
                            __FieldTag::__log_count => {
                                if !fields.insert(__FieldTag::__log_count) {
                                    return std::result::Result::Err(A::Error::duplicate_field(
                                        "multiple values for log_count",
                                    ));
                                }
                                struct __With(std::option::Option<i32>);
                                impl<'de> serde::de::Deserialize<'de> for __With {
                                    fn deserialize<D>(
                                        deserializer: D,
                                    ) -> std::result::Result<Self, D::Error>
                                    where
                                        D: serde::de::Deserializer<'de>,
                                    {
                                        serde_with::As::< std::option::Option<wkt::internal::I32> >::deserialize(deserializer).map(__With)
                                    }
                                }
                                result.log_count =
                                    map.next_value::<__With>()?.0.unwrap_or_default();
                            }
                            __FieldTag::__unchanged_count => {
                                if !fields.insert(__FieldTag::__unchanged_count) {
                                    return std::result::Result::Err(A::Error::duplicate_field(
                                        "multiple values for unchanged_count",
                                    ));
                                }
                                struct __With(std::option::Option<i32>);
                                impl<'de> serde::de::Deserialize<'de> for __With {
                                    fn deserialize<D>(
                                        deserializer: D,
                                    ) -> std::result::Result<Self, D::Error>
                                    where
                                        D: serde::de::Deserializer<'de>,
                                    {
                                        serde_with::As::< std::option::Option<wkt::internal::I32> >::deserialize(deserializer).map(__With)
                                    }
                                }
                                result.unchanged_count =
                                    map.next_value::<__With>()?.0.unwrap_or_default();
                            }
                            __FieldTag::__difference_count => {
                                if !fields.insert(__FieldTag::__difference_count) {
                                    return std::result::Result::Err(A::Error::duplicate_field(
                                        "multiple values for difference_count",
                                    ));
                                }
                                struct __With(std::option::Option<i32>);
                                impl<'de> serde::de::Deserialize<'de> for __With {
                                    fn deserialize<D>(
                                        deserializer: D,
                                    ) -> std::result::Result<Self, D::Error>
                                    where
                                        D: serde::de::Deserializer<'de>,
                                    {
                                        serde_with::As::< std::option::Option<wkt::internal::I32> >::deserialize(deserializer).map(__With)
                                    }
                                }
                                result.difference_count =
                                    map.next_value::<__With>()?.0.unwrap_or_default();
                            }
                            __FieldTag::__error_count => {
                                if !fields.insert(__FieldTag::__error_count) {
                                    return std::result::Result::Err(A::Error::duplicate_field(
                                        "multiple values for error_count",
                                    ));
                                }
                                struct __With(std::option::Option<i32>);
                                impl<'de> serde::de::Deserialize<'de> for __With {
                                    fn deserialize<D>(
                                        deserializer: D,
                                    ) -> std::result::Result<Self, D::Error>
                                    where
                                        D: serde::de::Deserializer<'de>,
                                    {
                                        serde_with::As::< std::option::Option<wkt::internal::I32> >::deserialize(deserializer).map(__With)
                                    }
                                }
                                result.error_count =
                                    map.next_value::<__With>()?.0.unwrap_or_default();
                            }
                            __FieldTag::__oldest_date => {
                                if !fields.insert(__FieldTag::__oldest_date) {
                                    return std::result::Result::Err(A::Error::duplicate_field(
                                        "multiple values for oldest_date",
                                    ));
                                }
                                result.oldest_date =
                                    map.next_value::<std::option::Option<gtype::model::Date>>()?;
                            }
                            __FieldTag::__newest_date => {
                                if !fields.insert(__FieldTag::__newest_date) {
                                    return std::result::Result::Err(A::Error::duplicate_field(
                                        "multiple values for newest_date",
                                    ));
                                }
                                result.newest_date =
                                    map.next_value::<std::option::Option<gtype::model::Date>>()?;
                            }
                            __FieldTag::Unknown(key) => {
                                let value = map.next_value::<serde_json::Value>()?;
                                result._unknown_fields.insert(key, value);
                            }
                        }
                    }
                    std::result::Result::Ok(result)
                }
            }
            deserializer.deserialize_any(Visitor)
        }
    }

    #[doc(hidden)]
    impl serde::ser::Serialize for ResultsSummary {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::ser::Serializer,
        {
            use serde::ser::SerializeMap;
            #[allow(unused_imports)]
            use std::option::Option::Some;
            let mut state = serializer.serialize_map(std::option::Option::None)?;
            if !wkt::internal::is_default(&self.log_count) {
                struct __With<'a>(&'a i32);
                impl<'a> serde::ser::Serialize for __With<'a> {
                    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                    where
                        S: serde::ser::Serializer,
                    {
                        serde_with::As::<wkt::internal::I32>::serialize(self.0, serializer)
                    }
                }
                state.serialize_entry("logCount", &__With(&self.log_count))?;
            }
            if !wkt::internal::is_default(&self.unchanged_count) {
                struct __With<'a>(&'a i32);
                impl<'a> serde::ser::Serialize for __With<'a> {
                    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                    where
                        S: serde::ser::Serializer,
                    {
                        serde_with::As::<wkt::internal::I32>::serialize(self.0, serializer)
                    }
                }
                state.serialize_entry("unchangedCount", &__With(&self.unchanged_count))?;
            }
            if !wkt::internal::is_default(&self.difference_count) {
                struct __With<'a>(&'a i32);
                impl<'a> serde::ser::Serialize for __With<'a> {
                    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                    where
                        S: serde::ser::Serializer,
                    {
                        serde_with::As::<wkt::internal::I32>::serialize(self.0, serializer)
                    }
                }
                state.serialize_entry("differenceCount", &__With(&self.difference_count))?;
            }
            if !wkt::internal::is_default(&self.error_count) {
                struct __With<'a>(&'a i32);
                impl<'a> serde::ser::Serialize for __With<'a> {
                    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                    where
                        S: serde::ser::Serializer,
                    {
                        serde_with::As::<wkt::internal::I32>::serialize(self.0, serializer)
                    }
                }
                state.serialize_entry("errorCount", &__With(&self.error_count))?;
            }
            if self.oldest_date.is_some() {
                state.serialize_entry("oldestDate", &self.oldest_date)?;
            }
            if self.newest_date.is_some() {
                state.serialize_entry("newestDate", &self.newest_date)?;
            }
            if !self._unknown_fields.is_empty() {
                for (key, value) in self._unknown_fields.iter() {
                    state.serialize_entry(key, &value)?;
                }
            }
            state.end()
        }
    }

    /// The current state of the [Replay][google.cloud.policysimulator.v1.Replay].
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum State {
        /// Default value. This value is unused.
        Unspecified,
        /// The `Replay` has not started yet.
        Pending,
        /// The `Replay` is currently running.
        Running,
        /// The `Replay` has successfully completed.
        Succeeded,
        /// The `Replay` has finished with an error.
        Failed,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [State::value] or
        /// [State::name].
        UnknownValue(state::UnknownValue),
    }

    #[doc(hidden)]
    pub mod state {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl State {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Pending => std::option::Option::Some(1),
                Self::Running => std::option::Option::Some(2),
                Self::Succeeded => std::option::Option::Some(3),
                Self::Failed => std::option::Option::Some(4),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("STATE_UNSPECIFIED"),
                Self::Pending => std::option::Option::Some("PENDING"),
                Self::Running => std::option::Option::Some("RUNNING"),
                Self::Succeeded => std::option::Option::Some("SUCCEEDED"),
                Self::Failed => std::option::Option::Some("FAILED"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for State {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Pending,
                2 => Self::Running,
                3 => Self::Succeeded,
                4 => Self::Failed,
                _ => Self::UnknownValue(state::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for State {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "STATE_UNSPECIFIED" => Self::Unspecified,
                "PENDING" => Self::Pending,
                "RUNNING" => Self::Running,
                "SUCCEEDED" => Self::Succeeded,
                "FAILED" => Self::Failed,
                _ => Self::UnknownValue(state::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for State {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Pending => serializer.serialize_i32(1),
                Self::Running => serializer.serialize_i32(2),
                Self::Succeeded => serializer.serialize_i32(3),
                Self::Failed => serializer.serialize_i32(4),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for State {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<State>::new(
                ".google.cloud.policysimulator.v1.Replay.State",
            ))
        }
    }
}

/// The result of replaying a single access tuple against a simulated state.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct ReplayResult {
    /// The resource name of the `ReplayResult`, in the following format:
    ///
    /// `{projects|folders|organizations}/{resource-id}/locations/global/replays/{replay-id}/results/{replay-result-id}`,
    /// where `{resource-id}` is the ID of the project, folder, or organization
    /// that owns the [Replay][google.cloud.policysimulator.v1.Replay].
    ///
    /// Example:
    /// `projects/my-example-project/locations/global/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36/results/1234`
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    pub name: std::string::String,

    /// The [Replay][google.cloud.policysimulator.v1.Replay] that the access tuple
    /// was included in.
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    pub parent: std::string::String,

    /// The access tuple that was replayed. This field includes information about
    /// the principal, resource, and permission that were involved in the access
    /// attempt.
    pub access_tuple: std::option::Option<crate::model::AccessTuple>,

    /// The latest date this access tuple was seen in the logs.
    pub last_seen_date: std::option::Option<gtype::model::Date>,

    /// The result of replaying the access tuple.
    pub result: std::option::Option<crate::model::replay_result::Result>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ReplayResult {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ReplayResult::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [parent][crate::model::ReplayResult::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [access_tuple][crate::model::ReplayResult::access_tuple].
    pub fn set_access_tuple<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::AccessTuple>,
    {
        self.access_tuple = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [access_tuple][crate::model::ReplayResult::access_tuple].
    pub fn set_or_clear_access_tuple<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::AccessTuple>,
    {
        self.access_tuple = v.map(|x| x.into());
        self
    }

    /// Sets the value of [last_seen_date][crate::model::ReplayResult::last_seen_date].
    pub fn set_last_seen_date<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<gtype::model::Date>,
    {
        self.last_seen_date = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [last_seen_date][crate::model::ReplayResult::last_seen_date].
    pub fn set_or_clear_last_seen_date<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<gtype::model::Date>,
    {
        self.last_seen_date = v.map(|x| x.into());
        self
    }

    /// Sets the value of [result][crate::model::ReplayResult::result].
    ///
    /// Note that all the setters affecting `result` are mutually
    /// exclusive.
    pub fn set_result<
        T: std::convert::Into<std::option::Option<crate::model::replay_result::Result>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.result = v.into();
        self
    }

    /// The value of [result][crate::model::ReplayResult::result]
    /// if it holds a `Diff`, `None` if the field is not set or
    /// holds a different branch.
    pub fn diff(&self) -> std::option::Option<&std::boxed::Box<crate::model::ReplayDiff>> {
        #[allow(unreachable_patterns)]
        self.result.as_ref().and_then(|v| match v {
            crate::model::replay_result::Result::Diff(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [result][crate::model::ReplayResult::result]
    /// to hold a `Diff`.
    ///
    /// Note that all the setters affecting `result` are
    /// mutually exclusive.
    pub fn set_diff<T: std::convert::Into<std::boxed::Box<crate::model::ReplayDiff>>>(
        mut self,
        v: T,
    ) -> Self {
        self.result =
            std::option::Option::Some(crate::model::replay_result::Result::Diff(v.into()));
        self
    }

    /// The value of [result][crate::model::ReplayResult::result]
    /// if it holds a `Error`, `None` if the field is not set or
    /// holds a different branch.
    pub fn error(&self) -> std::option::Option<&std::boxed::Box<rpc::model::Status>> {
        #[allow(unreachable_patterns)]
        self.result.as_ref().and_then(|v| match v {
            crate::model::replay_result::Result::Error(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [result][crate::model::ReplayResult::result]
    /// to hold a `Error`.
    ///
    /// Note that all the setters affecting `result` are
    /// mutually exclusive.
    pub fn set_error<T: std::convert::Into<std::boxed::Box<rpc::model::Status>>>(
        mut self,
        v: T,
    ) -> Self {
        self.result =
            std::option::Option::Some(crate::model::replay_result::Result::Error(v.into()));
        self
    }
}

impl wkt::message::Message for ReplayResult {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.ReplayResult"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for ReplayResult {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __diff,
            __error,
            __name,
            __parent,
            __access_tuple,
            __last_seen_date,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for ReplayResult")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "diff" => Ok(__FieldTag::__diff),
                            "error" => Ok(__FieldTag::__error),
                            "name" => Ok(__FieldTag::__name),
                            "parent" => Ok(__FieldTag::__parent),
                            "accessTuple" => Ok(__FieldTag::__access_tuple),
                            "access_tuple" => Ok(__FieldTag::__access_tuple),
                            "lastSeenDate" => Ok(__FieldTag::__last_seen_date),
                            "last_seen_date" => Ok(__FieldTag::__last_seen_date),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = ReplayResult;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct ReplayResult")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__diff => {
                            if !fields.insert(__FieldTag::__diff) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for diff",
                                ));
                            }
                            if result.result.is_some() {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for `result`, a oneof with full ID .google.cloud.policysimulator.v1.ReplayResult.diff, latest field was diff",
                                ));
                            }
                            result.result = std::option::Option::Some(
                                crate::model::replay_result::Result::Diff(
                                    map.next_value::<std::option::Option<
                                        std::boxed::Box<crate::model::ReplayDiff>,
                                    >>()?
                                    .unwrap_or_default(),
                                ),
                            );
                        }
                        __FieldTag::__error => {
                            if !fields.insert(__FieldTag::__error) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for error",
                                ));
                            }
                            if result.result.is_some() {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for `result`, a oneof with full ID .google.cloud.policysimulator.v1.ReplayResult.error, latest field was error",
                                ));
                            }
                            result.result =
                                std::option::Option::Some(
                                    crate::model::replay_result::Result::Error(
                                        map.next_value::<std::option::Option<
                                            std::boxed::Box<rpc::model::Status>,
                                        >>()?
                                        .unwrap_or_default(),
                                    ),
                                );
                        }
                        __FieldTag::__name => {
                            if !fields.insert(__FieldTag::__name) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for name",
                                ));
                            }
                            result.name = map
                                .next_value::<std::option::Option<std::string::String>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__parent => {
                            if !fields.insert(__FieldTag::__parent) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for parent",
                                ));
                            }
                            result.parent = map
                                .next_value::<std::option::Option<std::string::String>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__access_tuple => {
                            if !fields.insert(__FieldTag::__access_tuple) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for access_tuple",
                                ));
                            }
                            result.access_tuple =
                                map.next_value::<std::option::Option<crate::model::AccessTuple>>()?;
                        }
                        __FieldTag::__last_seen_date => {
                            if !fields.insert(__FieldTag::__last_seen_date) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for last_seen_date",
                                ));
                            }
                            result.last_seen_date =
                                map.next_value::<std::option::Option<gtype::model::Date>>()?;
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for ReplayResult {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if let Some(value) = self.diff() {
            state.serialize_entry("diff", value)?;
        }
        if let Some(value) = self.error() {
            state.serialize_entry("error", value)?;
        }
        if !self.name.is_empty() {
            state.serialize_entry("name", &self.name)?;
        }
        if !self.parent.is_empty() {
            state.serialize_entry("parent", &self.parent)?;
        }
        if self.access_tuple.is_some() {
            state.serialize_entry("accessTuple", &self.access_tuple)?;
        }
        if self.last_seen_date.is_some() {
            state.serialize_entry("lastSeenDate", &self.last_seen_date)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// Defines additional types related to [ReplayResult].
pub mod replay_result {
    #[allow(unused_imports)]
    use super::*;

    /// The result of replaying the access tuple.
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum Result {
        /// The difference between the principal's access under the current
        /// (baseline) policies and the principal's access under the proposed
        /// (simulated) policies.
        ///
        /// This field is only included for access tuples that were successfully
        /// replayed and had different results under the current policies and the
        /// proposed policies.
        Diff(std::boxed::Box<crate::model::ReplayDiff>),
        /// The error that caused the access tuple replay to fail.
        ///
        /// This field is only included for access tuples that were not replayed
        /// successfully.
        Error(std::boxed::Box<rpc::model::Status>),
    }
}

/// Request message for
/// [Simulator.CreateReplay][google.cloud.policysimulator.v1.Simulator.CreateReplay].
///
/// [google.cloud.policysimulator.v1.Simulator.CreateReplay]: crate::client::Simulator::create_replay
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct CreateReplayRequest {
    /// Required. The parent resource where this
    /// [Replay][google.cloud.policysimulator.v1.Replay] will be created. This
    /// resource must be a project, folder, or organization with a location.
    ///
    /// Example: `projects/my-example-project/locations/global`
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    pub parent: std::string::String,

    /// Required. The [Replay][google.cloud.policysimulator.v1.Replay] to create.
    /// Set `Replay.ReplayConfig` to configure the replay.
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    pub replay: std::option::Option<crate::model::Replay>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateReplayRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateReplayRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [replay][crate::model::CreateReplayRequest::replay].
    pub fn set_replay<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::Replay>,
    {
        self.replay = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [replay][crate::model::CreateReplayRequest::replay].
    pub fn set_or_clear_replay<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::Replay>,
    {
        self.replay = v.map(|x| x.into());
        self
    }
}

impl wkt::message::Message for CreateReplayRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.CreateReplayRequest"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for CreateReplayRequest {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __parent,
            __replay,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for CreateReplayRequest")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "parent" => Ok(__FieldTag::__parent),
                            "replay" => Ok(__FieldTag::__replay),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = CreateReplayRequest;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct CreateReplayRequest")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__parent => {
                            if !fields.insert(__FieldTag::__parent) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for parent",
                                ));
                            }
                            result.parent = map
                                .next_value::<std::option::Option<std::string::String>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__replay => {
                            if !fields.insert(__FieldTag::__replay) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for replay",
                                ));
                            }
                            result.replay =
                                map.next_value::<std::option::Option<crate::model::Replay>>()?;
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for CreateReplayRequest {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if !self.parent.is_empty() {
            state.serialize_entry("parent", &self.parent)?;
        }
        if self.replay.is_some() {
            state.serialize_entry("replay", &self.replay)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// Metadata about a Replay operation.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct ReplayOperationMetadata {
    /// Time when the request was received.
    pub start_time: std::option::Option<wkt::Timestamp>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ReplayOperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [start_time][crate::model::ReplayOperationMetadata::start_time].
    pub fn set_start_time<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::Timestamp>,
    {
        self.start_time = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [start_time][crate::model::ReplayOperationMetadata::start_time].
    pub fn set_or_clear_start_time<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::Timestamp>,
    {
        self.start_time = v.map(|x| x.into());
        self
    }
}

impl wkt::message::Message for ReplayOperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.ReplayOperationMetadata"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for ReplayOperationMetadata {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __start_time,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for ReplayOperationMetadata")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "startTime" => Ok(__FieldTag::__start_time),
                            "start_time" => Ok(__FieldTag::__start_time),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = ReplayOperationMetadata;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct ReplayOperationMetadata")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__start_time => {
                            if !fields.insert(__FieldTag::__start_time) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for start_time",
                                ));
                            }
                            result.start_time =
                                map.next_value::<std::option::Option<wkt::Timestamp>>()?;
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for ReplayOperationMetadata {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if self.start_time.is_some() {
            state.serialize_entry("startTime", &self.start_time)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// Request message for
/// [Simulator.GetReplay][google.cloud.policysimulator.v1.Simulator.GetReplay].
///
/// [google.cloud.policysimulator.v1.Simulator.GetReplay]: crate::client::Simulator::get_replay
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct GetReplayRequest {
    /// Required. The name of the [Replay][google.cloud.policysimulator.v1.Replay]
    /// to retrieve, in the following format:
    ///
    /// `{projects|folders|organizations}/{resource-id}/locations/global/replays/{replay-id}`,
    /// where `{resource-id}` is the ID of the project, folder, or organization
    /// that owns the `Replay`.
    ///
    /// Example:
    /// `projects/my-example-project/locations/global/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36`
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    pub name: std::string::String,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetReplayRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetReplayRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetReplayRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.GetReplayRequest"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for GetReplayRequest {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __name,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for GetReplayRequest")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "name" => Ok(__FieldTag::__name),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = GetReplayRequest;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct GetReplayRequest")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__name => {
                            if !fields.insert(__FieldTag::__name) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for name",
                                ));
                            }
                            result.name = map
                                .next_value::<std::option::Option<std::string::String>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for GetReplayRequest {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if !self.name.is_empty() {
            state.serialize_entry("name", &self.name)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// Request message for
/// [Simulator.ListReplayResults][google.cloud.policysimulator.v1.Simulator.ListReplayResults].
///
/// [google.cloud.policysimulator.v1.Simulator.ListReplayResults]: crate::client::Simulator::list_replay_results
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct ListReplayResultsRequest {
    /// Required. The [Replay][google.cloud.policysimulator.v1.Replay] whose
    /// results are listed, in the following format:
    ///
    /// `{projects|folders|organizations}/{resource-id}/locations/global/replays/{replay-id}`
    ///
    /// Example:
    /// `projects/my-project/locations/global/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36`
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    pub parent: std::string::String,

    /// The maximum number of
    /// [ReplayResult][google.cloud.policysimulator.v1.ReplayResult] objects to
    /// return. Defaults to 5000.
    ///
    /// The maximum value is 5000; values above 5000 are rounded down to 5000.
    ///
    /// [google.cloud.policysimulator.v1.ReplayResult]: crate::model::ReplayResult
    pub page_size: i32,

    /// A page token, received from a previous
    /// [Simulator.ListReplayResults][google.cloud.policysimulator.v1.Simulator.ListReplayResults]
    /// call. Provide this token to retrieve the next page of results.
    ///
    /// When paginating, all other parameters provided to
    /// [Simulator.ListReplayResults[] must match the call that provided the page
    /// token.
    ///
    /// [google.cloud.policysimulator.v1.Simulator.ListReplayResults]: crate::client::Simulator::list_replay_results
    pub page_token: std::string::String,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListReplayResultsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListReplayResultsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListReplayResultsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListReplayResultsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListReplayResultsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.ListReplayResultsRequest"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for ListReplayResultsRequest {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __parent,
            __page_size,
            __page_token,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for ListReplayResultsRequest")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "parent" => Ok(__FieldTag::__parent),
                            "pageSize" => Ok(__FieldTag::__page_size),
                            "page_size" => Ok(__FieldTag::__page_size),
                            "pageToken" => Ok(__FieldTag::__page_token),
                            "page_token" => Ok(__FieldTag::__page_token),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = ListReplayResultsRequest;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct ListReplayResultsRequest")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__parent => {
                            if !fields.insert(__FieldTag::__parent) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for parent",
                                ));
                            }
                            result.parent = map
                                .next_value::<std::option::Option<std::string::String>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__page_size => {
                            if !fields.insert(__FieldTag::__page_size) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for page_size",
                                ));
                            }
                            struct __With(std::option::Option<i32>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<wkt::internal::I32> >::deserialize(deserializer).map(__With)
                                }
                            }
                            result.page_size = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__page_token => {
                            if !fields.insert(__FieldTag::__page_token) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for page_token",
                                ));
                            }
                            result.page_token = map
                                .next_value::<std::option::Option<std::string::String>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for ListReplayResultsRequest {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if !self.parent.is_empty() {
            state.serialize_entry("parent", &self.parent)?;
        }
        if !wkt::internal::is_default(&self.page_size) {
            struct __With<'a>(&'a i32);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<wkt::internal::I32>::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("pageSize", &__With(&self.page_size))?;
        }
        if !self.page_token.is_empty() {
            state.serialize_entry("pageToken", &self.page_token)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// Response message for
/// [Simulator.ListReplayResults][google.cloud.policysimulator.v1.Simulator.ListReplayResults].
///
/// [google.cloud.policysimulator.v1.Simulator.ListReplayResults]: crate::client::Simulator::list_replay_results
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct ListReplayResultsResponse {
    /// The results of running a [Replay][google.cloud.policysimulator.v1.Replay].
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    pub replay_results: std::vec::Vec<crate::model::ReplayResult>,

    /// A token that you can use to retrieve the next page of
    /// [ReplayResult][google.cloud.policysimulator.v1.ReplayResult] objects. If
    /// this field is omitted, there are no subsequent pages.
    ///
    /// [google.cloud.policysimulator.v1.ReplayResult]: crate::model::ReplayResult
    pub next_page_token: std::string::String,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListReplayResultsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [replay_results][crate::model::ListReplayResultsResponse::replay_results].
    pub fn set_replay_results<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ReplayResult>,
    {
        use std::iter::Iterator;
        self.replay_results = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [next_page_token][crate::model::ListReplayResultsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListReplayResultsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.ListReplayResultsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListReplayResultsResponse {
    type PageItem = crate::model::ReplayResult;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.replay_results
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for ListReplayResultsResponse {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __replay_results,
            __next_page_token,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for ListReplayResultsResponse")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "replayResults" => Ok(__FieldTag::__replay_results),
                            "replay_results" => Ok(__FieldTag::__replay_results),
                            "nextPageToken" => Ok(__FieldTag::__next_page_token),
                            "next_page_token" => Ok(__FieldTag::__next_page_token),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = ListReplayResultsResponse;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct ListReplayResultsResponse")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__replay_results => {
                            if !fields.insert(__FieldTag::__replay_results) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for replay_results",
                                ));
                            }
                            result.replay_results = map.next_value::<std::option::Option<std::vec::Vec<crate::model::ReplayResult>>>()?.unwrap_or_default();
                        }
                        __FieldTag::__next_page_token => {
                            if !fields.insert(__FieldTag::__next_page_token) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for next_page_token",
                                ));
                            }
                            result.next_page_token = map
                                .next_value::<std::option::Option<std::string::String>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for ListReplayResultsResponse {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if !self.replay_results.is_empty() {
            state.serialize_entry("replayResults", &self.replay_results)?;
        }
        if !self.next_page_token.is_empty() {
            state.serialize_entry("nextPageToken", &self.next_page_token)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// The configuration used for a
/// [Replay][google.cloud.policysimulator.v1.Replay].
///
/// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct ReplayConfig {
    /// A mapping of the resources that you want to simulate policies for and the
    /// policies that you want to simulate.
    ///
    /// Keys are the full resource names for the resources. For example,
    /// `//cloudresourcemanager.googleapis.com/projects/my-project`.
    /// For examples of full resource names for Google Cloud services, see
    /// <https://cloud.google.com/iam/help/troubleshooter/full-resource-names>.
    ///
    /// Values are [Policy][google.iam.v1.Policy] objects representing the policies
    /// that you want to simulate.
    ///
    /// Replays automatically take into account any IAM policies inherited through
    /// the resource hierarchy, and any policies set on descendant resources. You
    /// do not need to include these policies in the policy overlay.
    ///
    /// [google.iam.v1.Policy]: iam_v1::model::Policy
    pub policy_overlay: std::collections::HashMap<std::string::String, iam_v1::model::Policy>,

    /// The logs to use as input for the
    /// [Replay][google.cloud.policysimulator.v1.Replay].
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    pub log_source: crate::model::replay_config::LogSource,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ReplayConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [policy_overlay][crate::model::ReplayConfig::policy_overlay].
    pub fn set_policy_overlay<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<iam_v1::model::Policy>,
    {
        use std::iter::Iterator;
        self.policy_overlay = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [log_source][crate::model::ReplayConfig::log_source].
    pub fn set_log_source<T: std::convert::Into<crate::model::replay_config::LogSource>>(
        mut self,
        v: T,
    ) -> Self {
        self.log_source = v.into();
        self
    }
}

impl wkt::message::Message for ReplayConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.ReplayConfig"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for ReplayConfig {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __policy_overlay,
            __log_source,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for ReplayConfig")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "policyOverlay" => Ok(__FieldTag::__policy_overlay),
                            "policy_overlay" => Ok(__FieldTag::__policy_overlay),
                            "logSource" => Ok(__FieldTag::__log_source),
                            "log_source" => Ok(__FieldTag::__log_source),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = ReplayConfig;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct ReplayConfig")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__policy_overlay => {
                            if !fields.insert(__FieldTag::__policy_overlay) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for policy_overlay",
                                ));
                            }
                            result.policy_overlay = map
                                .next_value::<std::option::Option<
                                    std::collections::HashMap<
                                        std::string::String,
                                        iam_v1::model::Policy,
                                    >,
                                >>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__log_source => {
                            if !fields.insert(__FieldTag::__log_source) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for log_source",
                                ));
                            }
                            result.log_source = map.next_value::<std::option::Option<crate::model::replay_config::LogSource>>()?.unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for ReplayConfig {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if !self.policy_overlay.is_empty() {
            state.serialize_entry("policyOverlay", &self.policy_overlay)?;
        }
        if !wkt::internal::is_default(&self.log_source) {
            state.serialize_entry("logSource", &self.log_source)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// Defines additional types related to [ReplayConfig].
pub mod replay_config {
    #[allow(unused_imports)]
    use super::*;

    /// The source of the logs to use for a
    /// [Replay][google.cloud.policysimulator.v1.Replay].
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum LogSource {
        /// An unspecified log source.
        /// If the log source is unspecified, the
        /// [Replay][google.cloud.policysimulator.v1.Replay] defaults to using
        /// `RECENT_ACCESSES`.
        ///
        /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
        Unspecified,
        /// All access logs from the last 90 days. These logs may not include logs
        /// from the most recent 7 days.
        RecentAccesses,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [LogSource::value] or
        /// [LogSource::name].
        UnknownValue(log_source::UnknownValue),
    }

    #[doc(hidden)]
    pub mod log_source {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl LogSource {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::RecentAccesses => std::option::Option::Some(1),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("LOG_SOURCE_UNSPECIFIED"),
                Self::RecentAccesses => std::option::Option::Some("RECENT_ACCESSES"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for LogSource {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for LogSource {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for LogSource {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::RecentAccesses,
                _ => Self::UnknownValue(log_source::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for LogSource {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "LOG_SOURCE_UNSPECIFIED" => Self::Unspecified,
                "RECENT_ACCESSES" => Self::RecentAccesses,
                _ => Self::UnknownValue(log_source::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for LogSource {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::RecentAccesses => serializer.serialize_i32(1),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for LogSource {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<LogSource>::new(
                ".google.cloud.policysimulator.v1.ReplayConfig.LogSource",
            ))
        }
    }
}

/// The difference between the results of evaluating an access tuple under
/// the current (baseline) policies and under the proposed (simulated) policies.
/// This difference explains how a principal's access could change if the
/// proposed policies were applied.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct ReplayDiff {
    /// A summary and comparison of the principal's access under the current
    /// (baseline) policies and the proposed (simulated) policies for a single
    /// access tuple.
    ///
    /// The evaluation of the principal's access is reported in the
    /// [AccessState][google.cloud.policysimulator.v1.AccessState] field.
    ///
    /// [google.cloud.policysimulator.v1.AccessState]: crate::model::AccessState
    pub access_diff: std::option::Option<crate::model::AccessStateDiff>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ReplayDiff {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [access_diff][crate::model::ReplayDiff::access_diff].
    pub fn set_access_diff<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::AccessStateDiff>,
    {
        self.access_diff = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [access_diff][crate::model::ReplayDiff::access_diff].
    pub fn set_or_clear_access_diff<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::AccessStateDiff>,
    {
        self.access_diff = v.map(|x| x.into());
        self
    }
}

impl wkt::message::Message for ReplayDiff {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.ReplayDiff"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for ReplayDiff {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __access_diff,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for ReplayDiff")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "accessDiff" => Ok(__FieldTag::__access_diff),
                            "access_diff" => Ok(__FieldTag::__access_diff),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = ReplayDiff;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct ReplayDiff")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__access_diff => {
                            if !fields.insert(__FieldTag::__access_diff) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for access_diff",
                                ));
                            }
                            result.access_diff = map
                                .next_value::<std::option::Option<crate::model::AccessStateDiff>>(
                                )?;
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for ReplayDiff {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if self.access_diff.is_some() {
            state.serialize_entry("accessDiff", &self.access_diff)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// A summary and comparison of the principal's access under the current
/// (baseline) policies and the proposed (simulated) policies for a single
/// access tuple.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct AccessStateDiff {
    /// The results of evaluating the access tuple under the current (baseline)
    /// policies.
    ///
    /// If the [AccessState][google.cloud.policysimulator.v1.AccessState] couldn't
    /// be fully evaluated, this field explains why.
    ///
    /// [google.cloud.policysimulator.v1.AccessState]: crate::model::AccessState
    pub baseline: std::option::Option<crate::model::ExplainedAccess>,

    /// The results of evaluating the access tuple under the proposed (simulated)
    /// policies.
    ///
    /// If the AccessState couldn't be fully evaluated, this field explains why.
    pub simulated: std::option::Option<crate::model::ExplainedAccess>,

    /// How the principal's access, specified in the AccessState field, changed
    /// between the current (baseline) policies and proposed (simulated) policies.
    pub access_change: crate::model::access_state_diff::AccessChangeType,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl AccessStateDiff {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [baseline][crate::model::AccessStateDiff::baseline].
    pub fn set_baseline<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::ExplainedAccess>,
    {
        self.baseline = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [baseline][crate::model::AccessStateDiff::baseline].
    pub fn set_or_clear_baseline<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::ExplainedAccess>,
    {
        self.baseline = v.map(|x| x.into());
        self
    }

    /// Sets the value of [simulated][crate::model::AccessStateDiff::simulated].
    pub fn set_simulated<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::ExplainedAccess>,
    {
        self.simulated = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [simulated][crate::model::AccessStateDiff::simulated].
    pub fn set_or_clear_simulated<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::ExplainedAccess>,
    {
        self.simulated = v.map(|x| x.into());
        self
    }

    /// Sets the value of [access_change][crate::model::AccessStateDiff::access_change].
    pub fn set_access_change<
        T: std::convert::Into<crate::model::access_state_diff::AccessChangeType>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.access_change = v.into();
        self
    }
}

impl wkt::message::Message for AccessStateDiff {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.AccessStateDiff"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for AccessStateDiff {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __baseline,
            __simulated,
            __access_change,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for AccessStateDiff")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "baseline" => Ok(__FieldTag::__baseline),
                            "simulated" => Ok(__FieldTag::__simulated),
                            "accessChange" => Ok(__FieldTag::__access_change),
                            "access_change" => Ok(__FieldTag::__access_change),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = AccessStateDiff;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct AccessStateDiff")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__baseline => {
                            if !fields.insert(__FieldTag::__baseline) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for baseline",
                                ));
                            }
                            result.baseline = map
                                .next_value::<std::option::Option<crate::model::ExplainedAccess>>(
                                )?;
                        }
                        __FieldTag::__simulated => {
                            if !fields.insert(__FieldTag::__simulated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for simulated",
                                ));
                            }
                            result.simulated = map
                                .next_value::<std::option::Option<crate::model::ExplainedAccess>>(
                                )?;
                        }
                        __FieldTag::__access_change => {
                            if !fields.insert(__FieldTag::__access_change) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for access_change",
                                ));
                            }
                            result.access_change = map
                                .next_value::<std::option::Option<
                                    crate::model::access_state_diff::AccessChangeType,
                                >>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for AccessStateDiff {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if self.baseline.is_some() {
            state.serialize_entry("baseline", &self.baseline)?;
        }
        if self.simulated.is_some() {
            state.serialize_entry("simulated", &self.simulated)?;
        }
        if !wkt::internal::is_default(&self.access_change) {
            state.serialize_entry("accessChange", &self.access_change)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// Defines additional types related to [AccessStateDiff].
pub mod access_state_diff {
    #[allow(unused_imports)]
    use super::*;

    /// How the principal's access, specified in the AccessState field, changed
    /// between the current (baseline) policies and proposed (simulated) policies.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum AccessChangeType {
        /// Default value. This value is unused.
        Unspecified,
        /// The principal's access did not change.
        /// This includes the case where both baseline and simulated are UNKNOWN,
        /// but the unknown information is equivalent.
        NoChange,
        /// The principal's access under both the current policies and the proposed
        /// policies is `UNKNOWN`, but the unknown information differs between them.
        UnknownChange,
        /// The principal had access under the current policies (`GRANTED`), but will
        /// no longer have access after the proposed changes (`NOT_GRANTED`).
        AccessRevoked,
        /// The principal did not have access under the current policies
        /// (`NOT_GRANTED`), but will have access after the proposed changes
        /// (`GRANTED`).
        AccessGained,
        /// This result can occur for the following reasons:
        ///
        /// * The principal had access under the current policies (`GRANTED`), but
        ///   their access after the proposed changes is `UNKNOWN`.
        ///
        /// * The principal's access under the current policies is `UNKNOWN`, but
        ///   they
        ///   will not have access after the proposed changes (`NOT_GRANTED`).
        ///
        AccessMaybeRevoked,
        /// This result can occur for the following reasons:
        ///
        /// * The principal did not have access under the current policies
        ///   (`NOT_GRANTED`), but their access after the proposed changes is
        ///   `UNKNOWN`.
        ///
        /// * The principal's access under the current policies is `UNKNOWN`, but
        ///   they will have access after the proposed changes (`GRANTED`).
        ///
        AccessMaybeGained,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [AccessChangeType::value] or
        /// [AccessChangeType::name].
        UnknownValue(access_change_type::UnknownValue),
    }

    #[doc(hidden)]
    pub mod access_change_type {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl AccessChangeType {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::NoChange => std::option::Option::Some(1),
                Self::UnknownChange => std::option::Option::Some(2),
                Self::AccessRevoked => std::option::Option::Some(3),
                Self::AccessGained => std::option::Option::Some(4),
                Self::AccessMaybeRevoked => std::option::Option::Some(5),
                Self::AccessMaybeGained => std::option::Option::Some(6),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("ACCESS_CHANGE_TYPE_UNSPECIFIED"),
                Self::NoChange => std::option::Option::Some("NO_CHANGE"),
                Self::UnknownChange => std::option::Option::Some("UNKNOWN_CHANGE"),
                Self::AccessRevoked => std::option::Option::Some("ACCESS_REVOKED"),
                Self::AccessGained => std::option::Option::Some("ACCESS_GAINED"),
                Self::AccessMaybeRevoked => std::option::Option::Some("ACCESS_MAYBE_REVOKED"),
                Self::AccessMaybeGained => std::option::Option::Some("ACCESS_MAYBE_GAINED"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for AccessChangeType {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for AccessChangeType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for AccessChangeType {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::NoChange,
                2 => Self::UnknownChange,
                3 => Self::AccessRevoked,
                4 => Self::AccessGained,
                5 => Self::AccessMaybeRevoked,
                6 => Self::AccessMaybeGained,
                _ => Self::UnknownValue(access_change_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for AccessChangeType {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "ACCESS_CHANGE_TYPE_UNSPECIFIED" => Self::Unspecified,
                "NO_CHANGE" => Self::NoChange,
                "UNKNOWN_CHANGE" => Self::UnknownChange,
                "ACCESS_REVOKED" => Self::AccessRevoked,
                "ACCESS_GAINED" => Self::AccessGained,
                "ACCESS_MAYBE_REVOKED" => Self::AccessMaybeRevoked,
                "ACCESS_MAYBE_GAINED" => Self::AccessMaybeGained,
                _ => Self::UnknownValue(access_change_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for AccessChangeType {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::NoChange => serializer.serialize_i32(1),
                Self::UnknownChange => serializer.serialize_i32(2),
                Self::AccessRevoked => serializer.serialize_i32(3),
                Self::AccessGained => serializer.serialize_i32(4),
                Self::AccessMaybeRevoked => serializer.serialize_i32(5),
                Self::AccessMaybeGained => serializer.serialize_i32(6),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for AccessChangeType {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<AccessChangeType>::new(
                ".google.cloud.policysimulator.v1.AccessStateDiff.AccessChangeType",
            ))
        }
    }
}

/// Details about how a set of policies, listed in
/// [ExplainedPolicy][google.cloud.policysimulator.v1.ExplainedPolicy], resulted
/// in a certain [AccessState][google.cloud.policysimulator.v1.AccessState] when
/// replaying an access tuple.
///
/// [google.cloud.policysimulator.v1.AccessState]: crate::model::AccessState
/// [google.cloud.policysimulator.v1.ExplainedPolicy]: crate::model::ExplainedPolicy
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct ExplainedAccess {
    /// Whether the principal in the access tuple has permission to access the
    /// resource in the access tuple under the given policies.
    pub access_state: crate::model::AccessState,

    /// If the [AccessState][google.cloud.policysimulator.v1.AccessState] is
    /// `UNKNOWN`, this field contains the policies that led to that result.
    ///
    /// If the `AccessState` is `GRANTED` or `NOT_GRANTED`, this field is
    /// omitted.
    ///
    /// [google.cloud.policysimulator.v1.AccessState]: crate::model::AccessState
    pub policies: std::vec::Vec<crate::model::ExplainedPolicy>,

    /// If the [AccessState][google.cloud.policysimulator.v1.AccessState] is
    /// `UNKNOWN`, this field contains a list of errors explaining why the result
    /// is `UNKNOWN`.
    ///
    /// If the `AccessState` is `GRANTED` or `NOT_GRANTED`, this field is
    /// omitted.
    ///
    /// [google.cloud.policysimulator.v1.AccessState]: crate::model::AccessState
    pub errors: std::vec::Vec<rpc::model::Status>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ExplainedAccess {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [access_state][crate::model::ExplainedAccess::access_state].
    pub fn set_access_state<T: std::convert::Into<crate::model::AccessState>>(
        mut self,
        v: T,
    ) -> Self {
        self.access_state = v.into();
        self
    }

    /// Sets the value of [policies][crate::model::ExplainedAccess::policies].
    pub fn set_policies<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ExplainedPolicy>,
    {
        use std::iter::Iterator;
        self.policies = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [errors][crate::model::ExplainedAccess::errors].
    pub fn set_errors<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<rpc::model::Status>,
    {
        use std::iter::Iterator;
        self.errors = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ExplainedAccess {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policysimulator.v1.ExplainedAccess"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for ExplainedAccess {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __access_state,
            __policies,
            __errors,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for ExplainedAccess")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "accessState" => Ok(__FieldTag::__access_state),
                            "access_state" => Ok(__FieldTag::__access_state),
                            "policies" => Ok(__FieldTag::__policies),
                            "errors" => Ok(__FieldTag::__errors),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = ExplainedAccess;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct ExplainedAccess")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__access_state => {
                            if !fields.insert(__FieldTag::__access_state) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for access_state",
                                ));
                            }
                            result.access_state = map
                                .next_value::<std::option::Option<crate::model::AccessState>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__policies => {
                            if !fields.insert(__FieldTag::__policies) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for policies",
                                ));
                            }
                            result.policies =
                                map.next_value::<std::option::Option<
                                    std::vec::Vec<crate::model::ExplainedPolicy>,
                                >>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__errors => {
                            if !fields.insert(__FieldTag::__errors) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for errors",
                                ));
                            }
                            result.errors = map.next_value::<std::option::Option<std::vec::Vec<rpc::model::Status>>>()?.unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for ExplainedAccess {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if !wkt::internal::is_default(&self.access_state) {
            state.serialize_entry("accessState", &self.access_state)?;
        }
        if !self.policies.is_empty() {
            state.serialize_entry("policies", &self.policies)?;
        }
        if !self.errors.is_empty() {
            state.serialize_entry("errors", &self.errors)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// Whether a principal has a permission for a resource.
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum AccessState {
    /// Default value. This value is unused.
    Unspecified,
    /// The principal has the permission.
    Granted,
    /// The principal does not have the permission.
    NotGranted,
    /// The principal has the permission only if a condition expression evaluates
    /// to `true`.
    UnknownConditional,
    /// The user who created the
    /// [Replay][google.cloud.policysimulator.v1.Replay] does not have
    /// access to all of the policies that Policy Simulator needs to evaluate.
    ///
    /// [google.cloud.policysimulator.v1.Replay]: crate::model::Replay
    UnknownInfoDenied,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [AccessState::value] or
    /// [AccessState::name].
    UnknownValue(access_state::UnknownValue),
}

#[doc(hidden)]
pub mod access_state {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl AccessState {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::Granted => std::option::Option::Some(1),
            Self::NotGranted => std::option::Option::Some(2),
            Self::UnknownConditional => std::option::Option::Some(3),
            Self::UnknownInfoDenied => std::option::Option::Some(4),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("ACCESS_STATE_UNSPECIFIED"),
            Self::Granted => std::option::Option::Some("GRANTED"),
            Self::NotGranted => std::option::Option::Some("NOT_GRANTED"),
            Self::UnknownConditional => std::option::Option::Some("UNKNOWN_CONDITIONAL"),
            Self::UnknownInfoDenied => std::option::Option::Some("UNKNOWN_INFO_DENIED"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for AccessState {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for AccessState {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for AccessState {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::Granted,
            2 => Self::NotGranted,
            3 => Self::UnknownConditional,
            4 => Self::UnknownInfoDenied,
            _ => Self::UnknownValue(access_state::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for AccessState {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "ACCESS_STATE_UNSPECIFIED" => Self::Unspecified,
            "GRANTED" => Self::Granted,
            "NOT_GRANTED" => Self::NotGranted,
            "UNKNOWN_CONDITIONAL" => Self::UnknownConditional,
            "UNKNOWN_INFO_DENIED" => Self::UnknownInfoDenied,
            _ => Self::UnknownValue(access_state::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for AccessState {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::Granted => serializer.serialize_i32(1),
            Self::NotGranted => serializer.serialize_i32(2),
            Self::UnknownConditional => serializer.serialize_i32(3),
            Self::UnknownInfoDenied => serializer.serialize_i32(4),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for AccessState {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<AccessState>::new(
            ".google.cloud.policysimulator.v1.AccessState",
        ))
    }
}

/// The extent to which a single data point, such as the existence of a binding
/// or whether a binding includes a specific principal, contributes to an overall
/// determination.
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum HeuristicRelevance {
    /// Default value. This value is unused.
    Unspecified,
    /// The data point has a limited effect on the result. Changing the data point
    /// is unlikely to affect the overall determination.
    Normal,
    /// The data point has a strong effect on the result. Changing the data point
    /// is likely to affect the overall determination.
    High,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [HeuristicRelevance::value] or
    /// [HeuristicRelevance::name].
    UnknownValue(heuristic_relevance::UnknownValue),
}

#[doc(hidden)]
pub mod heuristic_relevance {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl HeuristicRelevance {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::Normal => std::option::Option::Some(1),
            Self::High => std::option::Option::Some(2),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("HEURISTIC_RELEVANCE_UNSPECIFIED"),
            Self::Normal => std::option::Option::Some("NORMAL"),
            Self::High => std::option::Option::Some("HIGH"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for HeuristicRelevance {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for HeuristicRelevance {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for HeuristicRelevance {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::Normal,
            2 => Self::High,
            _ => Self::UnknownValue(heuristic_relevance::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for HeuristicRelevance {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "HEURISTIC_RELEVANCE_UNSPECIFIED" => Self::Unspecified,
            "NORMAL" => Self::Normal,
            "HIGH" => Self::High,
            _ => Self::UnknownValue(heuristic_relevance::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for HeuristicRelevance {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::Normal => serializer.serialize_i32(1),
            Self::High => serializer.serialize_i32(2),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for HeuristicRelevance {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<HeuristicRelevance>::new(
            ".google.cloud.policysimulator.v1.HeuristicRelevance",
        ))
    }
}
