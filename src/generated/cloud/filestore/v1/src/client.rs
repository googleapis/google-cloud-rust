// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Cloud Filestore API.
///
/// # Service Description
///
/// Configures and manages Filestore resources.
///
/// Filestore Manager v1.
///
/// The `file.googleapis.com` service implements the Filestore API and
/// defines the following resource model for managing instances:
///
/// * The service works with a collection of cloud projects, named: `/projects/*`
/// * Each project has a collection of available locations, named: `/locations/*`
/// * Each location has a collection of instances and backups, named:
///   `/instances/*` and `/backups/*` respectively.
/// * As such, Filestore instances are resources of the form:
///   `/projects/{project_number}/locations/{location_id}/instances/{instance_id}`
///   and backups are resources of the form:
///   `/projects/{project_number}/locations/{location_id}/backup/{backup_id}`
///
/// Note that location_id must be a Google Cloud `zone` for instances, but
/// a Google Cloud `region` for backups; for example:
///
/// * `projects/12345/locations/us-central1-c/instances/my-filestore`
/// * `projects/12345/locations/us-central1/backups/my-backup`
///
/// # Configuration
///
/// `CloudFilestoreManager` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `CloudFilestoreManager` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `CloudFilestoreManager` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct CloudFilestoreManager {
    inner: Arc<dyn crate::stubs::dynamic::CloudFilestoreManager>,
}

impl CloudFilestoreManager {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::CloudFilestoreManager + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::CloudFilestoreManager>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::CloudFilestoreManager> {
        crate::transport::CloudFilestoreManager::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::CloudFilestoreManager> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::CloudFilestoreManager::new)
    }

    /// Lists all instances in a project for either a specified location
    /// or for all locations.
    pub fn list_instances(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::cloud_filestore_manager::ListInstances {
        crate::builders::cloud_filestore_manager::ListInstances::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets the details of a specific instance.
    pub fn get_instance(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_filestore_manager::GetInstance {
        crate::builders::cloud_filestore_manager::GetInstance::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates an instance.
    /// When creating from a backup, the capacity of the new instance needs to be
    /// equal to or larger than the capacity of the backup (and also equal to or
    /// larger than the minimum capacity of the tier).
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_instance(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::cloud_filestore_manager::CreateInstance {
        crate::builders::cloud_filestore_manager::CreateInstance::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the settings of a specific instance.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_instance(
        &self,
        instance: impl Into<crate::model::Instance>,
    ) -> crate::builders::cloud_filestore_manager::UpdateInstance {
        crate::builders::cloud_filestore_manager::UpdateInstance::new(self.inner.clone())
            .set_instance(instance.into())
    }

    /// Restores an existing instance's file share from a backup.
    ///
    /// The capacity of the instance needs to be equal to or larger than the
    /// capacity of the backup (and also equal to or larger than the minimum
    /// capacity of the tier).
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn restore_instance(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_filestore_manager::RestoreInstance {
        crate::builders::cloud_filestore_manager::RestoreInstance::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Revert an existing instance's file system to a specified snapshot.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn revert_instance(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_filestore_manager::RevertInstance {
        crate::builders::cloud_filestore_manager::RevertInstance::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deletes an instance.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_instance(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_filestore_manager::DeleteInstance {
        crate::builders::cloud_filestore_manager::DeleteInstance::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists all snapshots in a project for either a specified location
    /// or for all locations.
    pub fn list_snapshots(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::cloud_filestore_manager::ListSnapshots {
        crate::builders::cloud_filestore_manager::ListSnapshots::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets the details of a specific snapshot.
    pub fn get_snapshot(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_filestore_manager::GetSnapshot {
        crate::builders::cloud_filestore_manager::GetSnapshot::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a snapshot.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_snapshot(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::cloud_filestore_manager::CreateSnapshot {
        crate::builders::cloud_filestore_manager::CreateSnapshot::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a snapshot.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_snapshot(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_filestore_manager::DeleteSnapshot {
        crate::builders::cloud_filestore_manager::DeleteSnapshot::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates the settings of a specific snapshot.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_snapshot(
        &self,
        snapshot: impl Into<crate::model::Snapshot>,
    ) -> crate::builders::cloud_filestore_manager::UpdateSnapshot {
        crate::builders::cloud_filestore_manager::UpdateSnapshot::new(self.inner.clone())
            .set_snapshot(snapshot.into())
    }

    /// Lists all backups in a project for either a specified location or for all
    /// locations.
    pub fn list_backups(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::cloud_filestore_manager::ListBackups {
        crate::builders::cloud_filestore_manager::ListBackups::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets the details of a specific backup.
    pub fn get_backup(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_filestore_manager::GetBackup {
        crate::builders::cloud_filestore_manager::GetBackup::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a backup.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_backup(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::cloud_filestore_manager::CreateBackup {
        crate::builders::cloud_filestore_manager::CreateBackup::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a backup.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_backup(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_filestore_manager::DeleteBackup {
        crate::builders::cloud_filestore_manager::DeleteBackup::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates the settings of a specific backup.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_backup(
        &self,
        backup: impl Into<crate::model::Backup>,
    ) -> crate::builders::cloud_filestore_manager::UpdateBackup {
        crate::builders::cloud_filestore_manager::UpdateBackup::new(self.inner.clone())
            .set_backup(backup.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_filestore_manager::ListLocations {
        crate::builders::cloud_filestore_manager::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_filestore_manager::GetLocation {
        crate::builders::cloud_filestore_manager::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_filestore_manager::ListOperations {
        crate::builders::cloud_filestore_manager::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_filestore_manager::GetOperation {
        crate::builders::cloud_filestore_manager::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_filestore_manager::DeleteOperation {
        crate::builders::cloud_filestore_manager::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_filestore_manager::CancelOperation {
        crate::builders::cloud_filestore_manager::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
