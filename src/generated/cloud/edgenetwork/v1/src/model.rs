// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate lazy_static;
extern crate location;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// A Google Edge Cloud zone.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Zone {
    /// Required. The resource name of the zone.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The time when the zone was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time when the zone was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Deprecated: not implemented.
    /// Labels as key value pairs.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Deprecated: not implemented.
    /// The deployment layout type.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub layout_name: std::string::String,
}

impl Zone {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Zone::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Zone::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Zone::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [layout_name][crate::model::Zone::layout_name].
    pub fn set_layout_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.layout_name = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::Zone::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Zone {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.Zone"
    }
}

/// Message describing Network object
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Network {
    /// Required. The canonical resource name of the network.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The time when the network was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time when the network was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Labels associated with this resource.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Optional. A free-text description of the resource. Max length 1024
    /// characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// IP (L3) MTU value of the network.
    /// Valid values are: 1500 and 9000.
    /// Default to 1500 if not set.
    pub mtu: i32,
}

impl Network {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Network::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Network::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Network::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Network::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [mtu][crate::model::Network::mtu].
    pub fn set_mtu<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.mtu = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::Network::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Network {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.Network"
    }
}

/// Message describing Subnet object
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Subnet {
    /// Required. The canonical resource name of the subnet.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The time when the subnet was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time when the subnet was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Labels associated with this resource.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Optional. A free-text description of the resource. Max length 1024
    /// characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Required. The network that this subnetwork belongs to.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub network: std::string::String,

    /// The ranges of ipv4 addresses that are owned by this subnetwork.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub ipv4_cidr: std::vec::Vec<std::string::String>,

    /// The ranges of ipv6 addresses that are owned by this subnetwork.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub ipv6_cidr: std::vec::Vec<std::string::String>,

    /// Optional. VLAN id provided by user. If not specified we assign one
    /// automatically.
    pub vlan_id: i32,

    /// Optional. A bonding type in the subnet creation specifies whether a VLAN
    /// being created will be present on Bonded or Non-Bonded or Both port types.
    /// In addition, this flag is to be used to set the specific network
    /// configuration which clusters can then use for their workloads based on the
    /// bonding choice.
    pub bonding_type: crate::model::subnet::BondingType,

    /// Output only. Current stage of the resource to the device by config push.
    pub state: crate::model::ResourceState,
}

impl Subnet {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Subnet::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Subnet::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Subnet::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Subnet::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [network][crate::model::Subnet::network].
    pub fn set_network<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.network = v.into();
        self
    }

    /// Sets the value of [vlan_id][crate::model::Subnet::vlan_id].
    pub fn set_vlan_id<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.vlan_id = v.into();
        self
    }

    /// Sets the value of [bonding_type][crate::model::Subnet::bonding_type].
    pub fn set_bonding_type<T: std::convert::Into<crate::model::subnet::BondingType>>(
        mut self,
        v: T,
    ) -> Self {
        self.bonding_type = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Subnet::state].
    pub fn set_state<T: std::convert::Into<crate::model::ResourceState>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [ipv4_cidr][crate::model::Subnet::ipv4_cidr].
    pub fn set_ipv4_cidr<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.ipv4_cidr = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [ipv6_cidr][crate::model::Subnet::ipv6_cidr].
    pub fn set_ipv6_cidr<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.ipv6_cidr = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [labels][crate::model::Subnet::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Subnet {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.Subnet"
    }
}

/// Defines additional types related to Subnet
pub mod subnet {
    #[allow(unused_imports)]
    use super::*;

    /// Bonding type in the subnet.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct BondingType(std::borrow::Cow<'static, str>);

    impl BondingType {
        /// Creates a new BondingType instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [BondingType](BondingType)
    pub mod bonding_type {
        use super::BondingType;

        /// Unspecified
        /// Bonding type will be unspecified by default and if the user chooses to
        /// not specify a bonding type at time of creating the VLAN. This will be
        /// treated as mixed bonding where the VLAN will have both bonded and
        /// non-bonded connectivity to machines.
        pub const BONDING_TYPE_UNSPECIFIED: BondingType =
            BondingType::new("BONDING_TYPE_UNSPECIFIED");

        /// Multi homed.
        pub const BONDED: BondingType = BondingType::new("BONDED");

        /// Single homed.
        pub const NON_BONDED: BondingType = BondingType::new("NON_BONDED");
    }

    impl std::convert::From<std::string::String> for BondingType {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    impl std::default::Default for BondingType {
        fn default() -> Self {
            bonding_type::BONDING_TYPE_UNSPECIFIED
        }
    }
}

/// Message describing Interconnect object
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Interconnect {
    /// Required. The canonical resource name of the interconnect.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The time when the subnet was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time when the subnet was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Labels associated with this resource.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Optional. A free-text description of the resource. Max length 1024
    /// characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. Type of interconnect, which takes only the value 'DEDICATED' for
    /// now.
    pub interconnect_type: crate::model::interconnect::InterconnectType,

    /// Output only. Unique identifier for the link.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uuid: std::string::String,

    /// Output only. Cloud resource name of the switch device.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub device_cloud_resource_name: std::string::String,

    /// Output only. Physical ports (e.g., TenGigE0/0/0/1) that form the
    /// interconnect.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub physical_ports: std::vec::Vec<std::string::String>,
}

impl Interconnect {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Interconnect::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Interconnect::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Interconnect::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Interconnect::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [interconnect_type][crate::model::Interconnect::interconnect_type].
    pub fn set_interconnect_type<
        T: std::convert::Into<crate::model::interconnect::InterconnectType>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.interconnect_type = v.into();
        self
    }

    /// Sets the value of [uuid][crate::model::Interconnect::uuid].
    pub fn set_uuid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uuid = v.into();
        self
    }

    /// Sets the value of [device_cloud_resource_name][crate::model::Interconnect::device_cloud_resource_name].
    pub fn set_device_cloud_resource_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.device_cloud_resource_name = v.into();
        self
    }

    /// Sets the value of [physical_ports][crate::model::Interconnect::physical_ports].
    pub fn set_physical_ports<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.physical_ports = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [labels][crate::model::Interconnect::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Interconnect {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.Interconnect"
    }
}

/// Defines additional types related to Interconnect
pub mod interconnect {
    #[allow(unused_imports)]
    use super::*;

    /// Type of interconnect.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct InterconnectType(std::borrow::Cow<'static, str>);

    impl InterconnectType {
        /// Creates a new InterconnectType instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [InterconnectType](InterconnectType)
    pub mod interconnect_type {
        use super::InterconnectType;

        /// Unspecified.
        pub const INTERCONNECT_TYPE_UNSPECIFIED: InterconnectType =
            InterconnectType::new("INTERCONNECT_TYPE_UNSPECIFIED");

        /// Dedicated Interconnect.
        pub const DEDICATED: InterconnectType = InterconnectType::new("DEDICATED");
    }

    impl std::convert::From<std::string::String> for InterconnectType {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    impl std::default::Default for InterconnectType {
        fn default() -> Self {
            interconnect_type::INTERCONNECT_TYPE_UNSPECIFIED
        }
    }
}

/// Message describing InterconnectAttachment object
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct InterconnectAttachment {
    /// Required. The canonical resource name of the interconnect attachment.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The time when the interconnect attachment was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time when the interconnect attachment was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Labels associated with this resource.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Optional. A free-text description of the resource. Max length 1024
    /// characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Required. The canonical name of underlying Interconnect object that this
    /// attachment's traffic will traverse through. The name is in the form of
    /// `projects/{project}/locations/{location}/zones/{zone}/interconnects/{interconnect}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub interconnect: std::string::String,

    /// Optional. The canonical Network name in the form of
    /// `projects/{project}/locations/{location}/zones/{zone}/networks/{network}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub network: std::string::String,

    /// Required. VLAN id provided by user. Must be site-wise unique.
    pub vlan_id: i32,

    /// IP (L3) MTU value of the virtual edge cloud.
    /// Valid values are: 1500 and 9000.
    /// Default to 1500 if not set.
    pub mtu: i32,

    /// Output only. Current stage of the resource to the device by config push.
    pub state: crate::model::ResourceState,
}

impl InterconnectAttachment {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::InterconnectAttachment::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::InterconnectAttachment::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::InterconnectAttachment::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::InterconnectAttachment::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [interconnect][crate::model::InterconnectAttachment::interconnect].
    pub fn set_interconnect<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.interconnect = v.into();
        self
    }

    /// Sets the value of [network][crate::model::InterconnectAttachment::network].
    pub fn set_network<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.network = v.into();
        self
    }

    /// Sets the value of [vlan_id][crate::model::InterconnectAttachment::vlan_id].
    pub fn set_vlan_id<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.vlan_id = v.into();
        self
    }

    /// Sets the value of [mtu][crate::model::InterconnectAttachment::mtu].
    pub fn set_mtu<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.mtu = v.into();
        self
    }

    /// Sets the value of [state][crate::model::InterconnectAttachment::state].
    pub fn set_state<T: std::convert::Into<crate::model::ResourceState>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::InterconnectAttachment::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for InterconnectAttachment {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.InterconnectAttachment"
    }
}

/// Message describing Router object
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Router {
    /// Required. The canonical resource name of the router.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The time when the router was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time when the router was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Labels associated with this resource.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Optional. A free-text description of the resource. Max length 1024
    /// characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Required. The canonical name of the network to which this router belongs.
    /// The name is in the form of
    /// `projects/{project}/locations/{location}/zones/{zone}/networks/{network}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub network: std::string::String,

    /// Router interfaces.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub interface: std::vec::Vec<crate::model::router::Interface>,

    /// BGP peers.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub bgp_peer: std::vec::Vec<crate::model::router::BgpPeer>,

    /// BGP information specific to this router.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub bgp: std::option::Option<crate::model::router::Bgp>,

    /// Output only. Current stage of the resource to the device by config push.
    pub state: crate::model::ResourceState,

    /// Optional. A list of CIDRs in IP/Length format to advertise northbound as
    /// static routes from this router.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub route_advertisements: std::vec::Vec<std::string::String>,
}

impl Router {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Router::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Router::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Router::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Router::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [network][crate::model::Router::network].
    pub fn set_network<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.network = v.into();
        self
    }

    /// Sets the value of [bgp][crate::model::Router::bgp].
    pub fn set_bgp<T: std::convert::Into<std::option::Option<crate::model::router::Bgp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.bgp = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Router::state].
    pub fn set_state<T: std::convert::Into<crate::model::ResourceState>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [interface][crate::model::Router::interface].
    pub fn set_interface<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::router::Interface>,
    {
        use std::iter::Iterator;
        self.interface = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [bgp_peer][crate::model::Router::bgp_peer].
    pub fn set_bgp_peer<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::router::BgpPeer>,
    {
        use std::iter::Iterator;
        self.bgp_peer = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [route_advertisements][crate::model::Router::route_advertisements].
    pub fn set_route_advertisements<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.route_advertisements = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [labels][crate::model::Router::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Router {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.Router"
    }
}

/// Defines additional types related to Router
pub mod router {
    #[allow(unused_imports)]
    use super::*;

    /// Router Interface defines the GDCE zone side layer-3 information for
    /// building the BGP session.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Interface {
        /// Name of this interface entry. Unique within the Zones resource.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub name: std::string::String,

        /// IP address and range of the interface.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub ipv4_cidr: std::string::String,

        /// IPv6 address and range of the interface.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub ipv6_cidr: std::string::String,

        /// The canonical name of the linked Interconnect attachment.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub linked_interconnect_attachment: std::string::String,

        /// The canonical name of the subnetwork resource that this interface
        /// belongs to.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub subnetwork: std::string::String,

        /// Create loopback interface in the router when specified.
        /// The number of IP addresses must match the number of TOR devices.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub loopback_ip_addresses: std::vec::Vec<std::string::String>,
    }

    impl Interface {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [name][crate::model::router::Interface::name].
        pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.name = v.into();
            self
        }

        /// Sets the value of [ipv4_cidr][crate::model::router::Interface::ipv4_cidr].
        pub fn set_ipv4_cidr<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.ipv4_cidr = v.into();
            self
        }

        /// Sets the value of [ipv6_cidr][crate::model::router::Interface::ipv6_cidr].
        pub fn set_ipv6_cidr<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.ipv6_cidr = v.into();
            self
        }

        /// Sets the value of [linked_interconnect_attachment][crate::model::router::Interface::linked_interconnect_attachment].
        pub fn set_linked_interconnect_attachment<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.linked_interconnect_attachment = v.into();
            self
        }

        /// Sets the value of [subnetwork][crate::model::router::Interface::subnetwork].
        pub fn set_subnetwork<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.subnetwork = v.into();
            self
        }

        /// Sets the value of [loopback_ip_addresses][crate::model::router::Interface::loopback_ip_addresses].
        pub fn set_loopback_ip_addresses<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.loopback_ip_addresses = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for Interface {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.edgenetwork.v1.Router.Interface"
        }
    }

    /// BGPPeer defines the peer side layer-3 information for building the BGP
    /// session.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct BgpPeer {
        /// Name of this BGP peer. Unique within the Zones resource.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub name: std::string::String,

        /// Name of the RouterInterface the BGP peer is associated with.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub interface: std::string::String,

        /// IP range of the interface within Google.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub interface_ipv4_cidr: std::string::String,

        /// IPv6 range of the interface within Google.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub interface_ipv6_cidr: std::string::String,

        /// IP range of the BGP interface outside Google.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub peer_ipv4_cidr: std::string::String,

        /// IPv6 range of the BGP interface outside Google.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub peer_ipv6_cidr: std::string::String,

        /// Peer BGP Autonomous System Number (ASN). Each BGP interface may use
        /// a different value.
        pub peer_asn: u32,

        /// Output only. Local BGP Autonomous System Number (ASN).
        /// This field is ST_NOT_REQUIRED because it stores private ASNs, which are
        /// meaningless outside the zone in which they are being used.
        pub local_asn: u32,
    }

    impl BgpPeer {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [name][crate::model::router::BgpPeer::name].
        pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.name = v.into();
            self
        }

        /// Sets the value of [interface][crate::model::router::BgpPeer::interface].
        pub fn set_interface<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.interface = v.into();
            self
        }

        /// Sets the value of [interface_ipv4_cidr][crate::model::router::BgpPeer::interface_ipv4_cidr].
        pub fn set_interface_ipv4_cidr<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.interface_ipv4_cidr = v.into();
            self
        }

        /// Sets the value of [interface_ipv6_cidr][crate::model::router::BgpPeer::interface_ipv6_cidr].
        pub fn set_interface_ipv6_cidr<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.interface_ipv6_cidr = v.into();
            self
        }

        /// Sets the value of [peer_ipv4_cidr][crate::model::router::BgpPeer::peer_ipv4_cidr].
        pub fn set_peer_ipv4_cidr<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.peer_ipv4_cidr = v.into();
            self
        }

        /// Sets the value of [peer_ipv6_cidr][crate::model::router::BgpPeer::peer_ipv6_cidr].
        pub fn set_peer_ipv6_cidr<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.peer_ipv6_cidr = v.into();
            self
        }

        /// Sets the value of [peer_asn][crate::model::router::BgpPeer::peer_asn].
        pub fn set_peer_asn<T: std::convert::Into<u32>>(mut self, v: T) -> Self {
            self.peer_asn = v.into();
            self
        }

        /// Sets the value of [local_asn][crate::model::router::BgpPeer::local_asn].
        pub fn set_local_asn<T: std::convert::Into<u32>>(mut self, v: T) -> Self {
            self.local_asn = v.into();
            self
        }
    }

    impl wkt::message::Message for BgpPeer {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.edgenetwork.v1.Router.BgpPeer"
        }
    }

    /// BGP information specific to this router.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Bgp {
        /// Locally assigned BGP ASN.
        pub asn: u32,

        /// The interval in seconds between BGP keepalive messages that are
        /// sent to the peer. Default is 20 with value between 20 and 60.
        pub keepalive_interval_in_seconds: u32,
    }

    impl Bgp {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [asn][crate::model::router::Bgp::asn].
        pub fn set_asn<T: std::convert::Into<u32>>(mut self, v: T) -> Self {
            self.asn = v.into();
            self
        }

        /// Sets the value of [keepalive_interval_in_seconds][crate::model::router::Bgp::keepalive_interval_in_seconds].
        pub fn set_keepalive_interval_in_seconds<T: std::convert::Into<u32>>(
            mut self,
            v: T,
        ) -> Self {
            self.keepalive_interval_in_seconds = v.into();
            self
        }
    }

    impl wkt::message::Message for Bgp {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.edgenetwork.v1.Router.Bgp"
        }
    }
}

/// LinkLayerAddress contains an IP address and corresponding link-layer address.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct LinkLayerAddress {
    /// The MAC address of this neighbor.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub mac_address: std::string::String,

    /// The IP address of this neighbor.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub ip_address: std::string::String,
}

impl LinkLayerAddress {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [mac_address][crate::model::LinkLayerAddress::mac_address].
    pub fn set_mac_address<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.mac_address = v.into();
        self
    }

    /// Sets the value of [ip_address][crate::model::LinkLayerAddress::ip_address].
    pub fn set_ip_address<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.ip_address = v.into();
        self
    }
}

impl wkt::message::Message for LinkLayerAddress {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.LinkLayerAddress"
    }
}

/// SubnetStatus contains detailed and current technical information about this
/// subnet resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SubnetStatus {
    /// The name of CCFE subnet resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// BVI MAC address.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub mac_address: std::string::String,

    /// A list of LinkLayerAddress, describing the ip address and corresponding
    /// link-layer address of the neighbors for this subnet.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub link_layer_addresses: std::vec::Vec<crate::model::LinkLayerAddress>,
}

impl SubnetStatus {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::SubnetStatus::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [mac_address][crate::model::SubnetStatus::mac_address].
    pub fn set_mac_address<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.mac_address = v.into();
        self
    }

    /// Sets the value of [link_layer_addresses][crate::model::SubnetStatus::link_layer_addresses].
    pub fn set_link_layer_addresses<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::LinkLayerAddress>,
    {
        use std::iter::Iterator;
        self.link_layer_addresses = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SubnetStatus {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.SubnetStatus"
    }
}

/// Diagnostics information about interconnect, contains detailed and current
/// technical information about Google's side of the connection.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct InterconnectDiagnostics {
    /// The MAC address of the Interconnect's bundle interface.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub mac_address: std::string::String,

    /// A list of LinkLayerAddress, describing the ip address and corresponding
    /// link-layer address of the neighbors for this interconnect.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub link_layer_addresses: std::vec::Vec<crate::model::LinkLayerAddress>,

    /// A list of LinkStatus objects, used to describe the status for each link on
    /// the Interconnect.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub links: std::vec::Vec<crate::model::interconnect_diagnostics::LinkStatus>,
}

impl InterconnectDiagnostics {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [mac_address][crate::model::InterconnectDiagnostics::mac_address].
    pub fn set_mac_address<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.mac_address = v.into();
        self
    }

    /// Sets the value of [link_layer_addresses][crate::model::InterconnectDiagnostics::link_layer_addresses].
    pub fn set_link_layer_addresses<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::LinkLayerAddress>,
    {
        use std::iter::Iterator;
        self.link_layer_addresses = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [links][crate::model::InterconnectDiagnostics::links].
    pub fn set_links<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::interconnect_diagnostics::LinkStatus>,
    {
        use std::iter::Iterator;
        self.links = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for InterconnectDiagnostics {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.InterconnectDiagnostics"
    }
}

/// Defines additional types related to InterconnectDiagnostics
pub mod interconnect_diagnostics {
    #[allow(unused_imports)]
    use super::*;

    /// Describing the status for each link on the Interconnect.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct LinkStatus {
        /// The unique ID for this link assigned during turn up by Google.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub circuit_id: std::string::String,

        /// Describing the state of a LACP link.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub lacp_status:
            std::option::Option<crate::model::interconnect_diagnostics::LinkLACPStatus>,

        /// A list of LinkLLDPStatus objects, used to describe LLDP status of each
        /// peer for each link on the Interconnect.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub lldp_statuses: std::vec::Vec<crate::model::interconnect_diagnostics::LinkLLDPStatus>,

        /// Packet counts specific statistics for this link.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub packet_counts:
            std::option::Option<crate::model::interconnect_diagnostics::PacketCounts>,
    }

    impl LinkStatus {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [circuit_id][crate::model::interconnect_diagnostics::LinkStatus::circuit_id].
        pub fn set_circuit_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.circuit_id = v.into();
            self
        }

        /// Sets the value of [lacp_status][crate::model::interconnect_diagnostics::LinkStatus::lacp_status].
        pub fn set_lacp_status<
            T: std::convert::Into<
                std::option::Option<crate::model::interconnect_diagnostics::LinkLACPStatus>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.lacp_status = v.into();
            self
        }

        /// Sets the value of [packet_counts][crate::model::interconnect_diagnostics::LinkStatus::packet_counts].
        pub fn set_packet_counts<
            T: std::convert::Into<
                std::option::Option<crate::model::interconnect_diagnostics::PacketCounts>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.packet_counts = v.into();
            self
        }

        /// Sets the value of [lldp_statuses][crate::model::interconnect_diagnostics::LinkStatus::lldp_statuses].
        pub fn set_lldp_statuses<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::interconnect_diagnostics::LinkLLDPStatus>,
        {
            use std::iter::Iterator;
            self.lldp_statuses = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for LinkStatus {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.edgenetwork.v1.InterconnectDiagnostics.LinkStatus"
        }
    }

    /// Containing a collection of interface-related statistics objects.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct PacketCounts {
        /// The number of packets that are delivered.
        #[serde_as(as = "serde_with::DisplayFromStr")]
        pub inbound_unicast: i64,

        /// The number of inbound packets that contained errors.
        #[serde_as(as = "serde_with::DisplayFromStr")]
        pub inbound_errors: i64,

        /// The number of inbound packets that were chosen to be discarded even
        /// though no errors had been detected to prevent their being deliverable.
        #[serde_as(as = "serde_with::DisplayFromStr")]
        pub inbound_discards: i64,

        /// The total number of packets that are requested be transmitted.
        #[serde_as(as = "serde_with::DisplayFromStr")]
        pub outbound_unicast: i64,

        /// The number of outbound packets that could not be transmitted because of
        /// errors.
        #[serde_as(as = "serde_with::DisplayFromStr")]
        pub outbound_errors: i64,

        /// The number of outbound packets that were chosen to be discarded even
        /// though no errors had been detected to prevent their being transmitted.
        #[serde_as(as = "serde_with::DisplayFromStr")]
        pub outbound_discards: i64,
    }

    impl PacketCounts {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [inbound_unicast][crate::model::interconnect_diagnostics::PacketCounts::inbound_unicast].
        pub fn set_inbound_unicast<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
            self.inbound_unicast = v.into();
            self
        }

        /// Sets the value of [inbound_errors][crate::model::interconnect_diagnostics::PacketCounts::inbound_errors].
        pub fn set_inbound_errors<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
            self.inbound_errors = v.into();
            self
        }

        /// Sets the value of [inbound_discards][crate::model::interconnect_diagnostics::PacketCounts::inbound_discards].
        pub fn set_inbound_discards<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
            self.inbound_discards = v.into();
            self
        }

        /// Sets the value of [outbound_unicast][crate::model::interconnect_diagnostics::PacketCounts::outbound_unicast].
        pub fn set_outbound_unicast<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
            self.outbound_unicast = v.into();
            self
        }

        /// Sets the value of [outbound_errors][crate::model::interconnect_diagnostics::PacketCounts::outbound_errors].
        pub fn set_outbound_errors<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
            self.outbound_errors = v.into();
            self
        }

        /// Sets the value of [outbound_discards][crate::model::interconnect_diagnostics::PacketCounts::outbound_discards].
        pub fn set_outbound_discards<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
            self.outbound_discards = v.into();
            self
        }
    }

    impl wkt::message::Message for PacketCounts {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.edgenetwork.v1.InterconnectDiagnostics.PacketCounts"
        }
    }

    /// Describing the status of a LACP link.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct LinkLACPStatus {
        /// The state of a LACP link.
        pub state: crate::model::interconnect_diagnostics::link_lacp_status::State,

        /// System ID of the port on Google's side of the LACP exchange.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub google_system_id: std::string::String,

        /// System ID of the port on the neighbor's side of the LACP exchange.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub neighbor_system_id: std::string::String,

        /// A true value indicates that the participant will allow the link to be
        /// used as part of the aggregate.
        /// A false value indicates the link should be used as an individual link.
        pub aggregatable: bool,

        /// If true, the participant is collecting incoming frames on the link,
        /// otherwise false
        pub collecting: bool,

        /// When true, the participant is distributing outgoing frames; when false,
        /// distribution is disabled
        pub distributing: bool,
    }

    impl LinkLACPStatus {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [state][crate::model::interconnect_diagnostics::LinkLACPStatus::state].
        pub fn set_state<
            T: std::convert::Into<crate::model::interconnect_diagnostics::link_lacp_status::State>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.state = v.into();
            self
        }

        /// Sets the value of [google_system_id][crate::model::interconnect_diagnostics::LinkLACPStatus::google_system_id].
        pub fn set_google_system_id<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.google_system_id = v.into();
            self
        }

        /// Sets the value of [neighbor_system_id][crate::model::interconnect_diagnostics::LinkLACPStatus::neighbor_system_id].
        pub fn set_neighbor_system_id<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.neighbor_system_id = v.into();
            self
        }

        /// Sets the value of [aggregatable][crate::model::interconnect_diagnostics::LinkLACPStatus::aggregatable].
        pub fn set_aggregatable<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.aggregatable = v.into();
            self
        }

        /// Sets the value of [collecting][crate::model::interconnect_diagnostics::LinkLACPStatus::collecting].
        pub fn set_collecting<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.collecting = v.into();
            self
        }

        /// Sets the value of [distributing][crate::model::interconnect_diagnostics::LinkLACPStatus::distributing].
        pub fn set_distributing<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.distributing = v.into();
            self
        }
    }

    impl wkt::message::Message for LinkLACPStatus {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.edgenetwork.v1.InterconnectDiagnostics.LinkLACPStatus"
        }
    }

    /// Defines additional types related to LinkLACPStatus
    pub mod link_lacp_status {
        #[allow(unused_imports)]
        use super::*;

        /// State enum for LACP link.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct State(std::borrow::Cow<'static, str>);

        impl State {
            /// Creates a new State instance.
            pub const fn new(v: &'static str) -> Self {
                Self(std::borrow::Cow::Borrowed(v))
            }

            /// Gets the enum value.
            pub fn value(&self) -> &str {
                &self.0
            }
        }

        /// Useful constants to work with [State](State)
        pub mod state {
            use super::State;

            /// The default state indicating state is in unknown state.
            pub const UNKNOWN: State = State::new("UNKNOWN");

            /// The link is configured and active within the bundle.
            pub const ACTIVE: State = State::new("ACTIVE");

            /// The link is not configured within the bundle, this means the rest of
            /// the object should be empty.
            pub const DETACHED: State = State::new("DETACHED");
        }

        impl std::convert::From<std::string::String> for State {
            fn from(value: std::string::String) -> Self {
                Self(std::borrow::Cow::Owned(value))
            }
        }

        impl std::default::Default for State {
            fn default() -> Self {
                state::UNKNOWN
            }
        }
    }

    /// Describing a LLDP link.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct LinkLLDPStatus {
        /// The peer system's administratively assigned name.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub peer_system_name: std::string::String,

        /// The textual description of the network entity of LLDP peer.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub peer_system_description: std::string::String,

        /// The peer chassis component of the endpoint identifier associated with the
        /// transmitting LLDP agent.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub peer_chassis_id: std::string::String,

        /// The format and source of the peer chassis identifier string.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub peer_chassis_id_type: std::string::String,

        /// The port component of the endpoint identifier associated with the
        /// transmitting LLDP agent. If the specified port is an IEEE 802.3 Repeater
        /// port, then this TLV is optional.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub peer_port_id: std::string::String,

        /// The format and source of the peer port identifier string.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub peer_port_id_type: std::string::String,
    }

    impl LinkLLDPStatus {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [peer_system_name][crate::model::interconnect_diagnostics::LinkLLDPStatus::peer_system_name].
        pub fn set_peer_system_name<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.peer_system_name = v.into();
            self
        }

        /// Sets the value of [peer_system_description][crate::model::interconnect_diagnostics::LinkLLDPStatus::peer_system_description].
        pub fn set_peer_system_description<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.peer_system_description = v.into();
            self
        }

        /// Sets the value of [peer_chassis_id][crate::model::interconnect_diagnostics::LinkLLDPStatus::peer_chassis_id].
        pub fn set_peer_chassis_id<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.peer_chassis_id = v.into();
            self
        }

        /// Sets the value of [peer_chassis_id_type][crate::model::interconnect_diagnostics::LinkLLDPStatus::peer_chassis_id_type].
        pub fn set_peer_chassis_id_type<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.peer_chassis_id_type = v.into();
            self
        }

        /// Sets the value of [peer_port_id][crate::model::interconnect_diagnostics::LinkLLDPStatus::peer_port_id].
        pub fn set_peer_port_id<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.peer_port_id = v.into();
            self
        }

        /// Sets the value of [peer_port_id_type][crate::model::interconnect_diagnostics::LinkLLDPStatus::peer_port_id_type].
        pub fn set_peer_port_id_type<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.peer_port_id_type = v.into();
            self
        }
    }

    impl wkt::message::Message for LinkLLDPStatus {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.edgenetwork.v1.InterconnectDiagnostics.LinkLLDPStatus"
        }
    }
}

/// Describing the current status of a router.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RouterStatus {
    /// The canonical name of the network to which this router belongs.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub network: std::string::String,

    /// A list of BgpPeerStatus objects, describing all BGP peers related to this
    /// router.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub bgp_peer_status: std::vec::Vec<crate::model::router_status::BgpPeerStatus>,
}

impl RouterStatus {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [network][crate::model::RouterStatus::network].
    pub fn set_network<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.network = v.into();
        self
    }

    /// Sets the value of [bgp_peer_status][crate::model::RouterStatus::bgp_peer_status].
    pub fn set_bgp_peer_status<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::router_status::BgpPeerStatus>,
    {
        use std::iter::Iterator;
        self.bgp_peer_status = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for RouterStatus {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.RouterStatus"
    }
}

/// Defines additional types related to RouterStatus
pub mod router_status {
    #[allow(unused_imports)]
    use super::*;

    /// Status of a BGP peer.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct BgpPeerStatus {
        /// Name of this BGP peer. Unique within the Routers resource.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub name: std::string::String,

        /// IP address of the local BGP interface.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub ip_address: std::string::String,

        /// IP address of the remote BGP interface.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub peer_ip_address: std::string::String,

        /// The current status of BGP.
        pub status: crate::model::router_status::bgp_peer_status::BgpStatus,

        /// BGP state as specified in RFC1771.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub state: std::string::String,

        /// Time this session has been up.
        /// Format:
        /// 14 years, 51 weeks, 6 days, 23 hours, 59 minutes, 59 seconds
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub uptime: std::string::String,

        /// Time this session has been up, in seconds.
        #[serde_as(as = "serde_with::DisplayFromStr")]
        pub uptime_seconds: i64,

        /// A collection of counts for prefixes.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub prefix_counter: std::option::Option<crate::model::router_status::PrefixCounter>,
    }

    impl BgpPeerStatus {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [name][crate::model::router_status::BgpPeerStatus::name].
        pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.name = v.into();
            self
        }

        /// Sets the value of [ip_address][crate::model::router_status::BgpPeerStatus::ip_address].
        pub fn set_ip_address<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.ip_address = v.into();
            self
        }

        /// Sets the value of [peer_ip_address][crate::model::router_status::BgpPeerStatus::peer_ip_address].
        pub fn set_peer_ip_address<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.peer_ip_address = v.into();
            self
        }

        /// Sets the value of [status][crate::model::router_status::BgpPeerStatus::status].
        pub fn set_status<
            T: std::convert::Into<crate::model::router_status::bgp_peer_status::BgpStatus>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.status = v.into();
            self
        }

        /// Sets the value of [state][crate::model::router_status::BgpPeerStatus::state].
        pub fn set_state<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.state = v.into();
            self
        }

        /// Sets the value of [uptime][crate::model::router_status::BgpPeerStatus::uptime].
        pub fn set_uptime<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.uptime = v.into();
            self
        }

        /// Sets the value of [uptime_seconds][crate::model::router_status::BgpPeerStatus::uptime_seconds].
        pub fn set_uptime_seconds<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
            self.uptime_seconds = v.into();
            self
        }

        /// Sets the value of [prefix_counter][crate::model::router_status::BgpPeerStatus::prefix_counter].
        pub fn set_prefix_counter<
            T: std::convert::Into<std::option::Option<crate::model::router_status::PrefixCounter>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.prefix_counter = v.into();
            self
        }
    }

    impl wkt::message::Message for BgpPeerStatus {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.edgenetwork.v1.RouterStatus.BgpPeerStatus"
        }
    }

    /// Defines additional types related to BgpPeerStatus
    pub mod bgp_peer_status {
        #[allow(unused_imports)]
        use super::*;

        /// Status of the BGP peer: {UP, DOWN}
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct BgpStatus(std::borrow::Cow<'static, str>);

        impl BgpStatus {
            /// Creates a new BgpStatus instance.
            pub const fn new(v: &'static str) -> Self {
                Self(std::borrow::Cow::Borrowed(v))
            }

            /// Gets the enum value.
            pub fn value(&self) -> &str {
                &self.0
            }
        }

        /// Useful constants to work with [BgpStatus](BgpStatus)
        pub mod bgp_status {
            use super::BgpStatus;

            /// The default status indicating BGP session is in unknown state.
            pub const UNKNOWN: BgpStatus = BgpStatus::new("UNKNOWN");

            /// The UP status indicating BGP session is established.
            pub const UP: BgpStatus = BgpStatus::new("UP");

            /// The DOWN state indicating BGP session is not established yet.
            pub const DOWN: BgpStatus = BgpStatus::new("DOWN");
        }

        impl std::convert::From<std::string::String> for BgpStatus {
            fn from(value: std::string::String) -> Self {
                Self(std::borrow::Cow::Owned(value))
            }
        }

        impl std::default::Default for BgpStatus {
            fn default() -> Self {
                bgp_status::UNKNOWN
            }
        }
    }

    /// PrefixCounter contains a collection of prefixes related counts.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct PrefixCounter {
        /// Number of prefixes advertised.
        #[serde_as(as = "serde_with::DisplayFromStr")]
        pub advertised: i64,

        /// Number of prefixes denied.
        #[serde_as(as = "serde_with::DisplayFromStr")]
        pub denied: i64,

        /// Number of prefixes received.
        #[serde_as(as = "serde_with::DisplayFromStr")]
        pub received: i64,

        /// Number of prefixes sent.
        #[serde_as(as = "serde_with::DisplayFromStr")]
        pub sent: i64,

        /// Number of prefixes suppressed.
        #[serde_as(as = "serde_with::DisplayFromStr")]
        pub suppressed: i64,

        /// Number of prefixes withdrawn.
        #[serde_as(as = "serde_with::DisplayFromStr")]
        pub withdrawn: i64,
    }

    impl PrefixCounter {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [advertised][crate::model::router_status::PrefixCounter::advertised].
        pub fn set_advertised<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
            self.advertised = v.into();
            self
        }

        /// Sets the value of [denied][crate::model::router_status::PrefixCounter::denied].
        pub fn set_denied<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
            self.denied = v.into();
            self
        }

        /// Sets the value of [received][crate::model::router_status::PrefixCounter::received].
        pub fn set_received<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
            self.received = v.into();
            self
        }

        /// Sets the value of [sent][crate::model::router_status::PrefixCounter::sent].
        pub fn set_sent<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
            self.sent = v.into();
            self
        }

        /// Sets the value of [suppressed][crate::model::router_status::PrefixCounter::suppressed].
        pub fn set_suppressed<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
            self.suppressed = v.into();
            self
        }

        /// Sets the value of [withdrawn][crate::model::router_status::PrefixCounter::withdrawn].
        pub fn set_withdrawn<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
            self.withdrawn = v.into();
            self
        }
    }

    impl wkt::message::Message for PrefixCounter {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.edgenetwork.v1.RouterStatus.PrefixCounter"
        }
    }
}

/// Deprecated: not implemented.
/// Message for requesting list of Zones
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListZonesRequest {
    /// Required. Parent value for ListZonesRequest
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Requested page size. Server may return fewer items than requested.
    /// If unspecified, server will pick an appropriate default.
    pub page_size: i32,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Filtering results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Hint for how to order the results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListZonesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListZonesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListZonesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListZonesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListZonesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListZonesRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListZonesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.ListZonesRequest"
    }
}

/// Deprecated: not implemented.
/// Message for response to listing Zones
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListZonesResponse {
    /// The list of Zone
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub zones: std::vec::Vec<crate::model::Zone>,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListZonesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListZonesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [zones][crate::model::ListZonesResponse::zones].
    pub fn set_zones<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Zone>,
    {
        use std::iter::Iterator;
        self.zones = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListZonesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListZonesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.ListZonesResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListZonesResponse {
    type PageItem = crate::model::Zone;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.zones
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Deprecated: not implemented.
/// Message for getting a Zone
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetZoneRequest {
    /// Required. Name of the resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetZoneRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetZoneRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetZoneRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.GetZoneRequest"
    }
}

/// Message for requesting list of Networks
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListNetworksRequest {
    /// Required. Parent value for ListNetworksRequest
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Requested page size. Server may return fewer items than requested.
    /// If unspecified, server will pick an appropriate default.
    pub page_size: i32,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Filtering results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Hint for how to order the results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListNetworksRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListNetworksRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListNetworksRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListNetworksRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListNetworksRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListNetworksRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListNetworksRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.ListNetworksRequest"
    }
}

/// Message for response to listing Networks
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListNetworksResponse {
    /// The list of Network
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub networks: std::vec::Vec<crate::model::Network>,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListNetworksResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListNetworksResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [networks][crate::model::ListNetworksResponse::networks].
    pub fn set_networks<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Network>,
    {
        use std::iter::Iterator;
        self.networks = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListNetworksResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListNetworksResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.ListNetworksResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListNetworksResponse {
    type PageItem = crate::model::Network;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.networks
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Message for getting a Network
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetNetworkRequest {
    /// Required. Name of the resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetNetworkRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetNetworkRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetNetworkRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.GetNetworkRequest"
    }
}

/// Message for creating a Network
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateNetworkRequest {
    /// Required. Value for parent.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Id of the requesting object
    /// If auto-generating Id server-side, remove this field and
    /// network_id from the method_signature of Create RPC
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub network_id: std::string::String,

    /// Required. The resource being created
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub network: std::option::Option<crate::model::Network>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl CreateNetworkRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateNetworkRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [network_id][crate::model::CreateNetworkRequest::network_id].
    pub fn set_network_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.network_id = v.into();
        self
    }

    /// Sets the value of [network][crate::model::CreateNetworkRequest::network].
    pub fn set_network<T: std::convert::Into<std::option::Option<crate::model::Network>>>(
        mut self,
        v: T,
    ) -> Self {
        self.network = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateNetworkRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateNetworkRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.CreateNetworkRequest"
    }
}

/// Message for deleting a Network
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteNetworkRequest {
    /// Required. Name of the resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl DeleteNetworkRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteNetworkRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteNetworkRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for DeleteNetworkRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.DeleteNetworkRequest"
    }
}

/// Message for requesting list of Subnets
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListSubnetsRequest {
    /// Required. Parent value for ListSubnetsRequest
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Requested page size. Server may return fewer items than requested.
    /// If unspecified, server will pick an appropriate default.
    pub page_size: i32,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Filtering results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Hint for how to order the results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListSubnetsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListSubnetsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListSubnetsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListSubnetsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListSubnetsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListSubnetsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListSubnetsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.ListSubnetsRequest"
    }
}

/// Message for response to listing Subnets
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListSubnetsResponse {
    /// The list of Subnet
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub subnets: std::vec::Vec<crate::model::Subnet>,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListSubnetsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListSubnetsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [subnets][crate::model::ListSubnetsResponse::subnets].
    pub fn set_subnets<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Subnet>,
    {
        use std::iter::Iterator;
        self.subnets = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListSubnetsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListSubnetsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.ListSubnetsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListSubnetsResponse {
    type PageItem = crate::model::Subnet;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.subnets
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Message for getting a Subnet
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetSubnetRequest {
    /// Required. Name of the resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetSubnetRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetSubnetRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetSubnetRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.GetSubnetRequest"
    }
}

/// Message for creating a Subnet
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateSubnetRequest {
    /// Required. Value for parent.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Id of the requesting object
    /// If auto-generating Id server-side, remove this field and
    /// subnet_id from the method_signature of Create RPC
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub subnet_id: std::string::String,

    /// Required. The resource being created
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub subnet: std::option::Option<crate::model::Subnet>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl CreateSubnetRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateSubnetRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [subnet_id][crate::model::CreateSubnetRequest::subnet_id].
    pub fn set_subnet_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.subnet_id = v.into();
        self
    }

    /// Sets the value of [subnet][crate::model::CreateSubnetRequest::subnet].
    pub fn set_subnet<T: std::convert::Into<std::option::Option<crate::model::Subnet>>>(
        mut self,
        v: T,
    ) -> Self {
        self.subnet = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateSubnetRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateSubnetRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.CreateSubnetRequest"
    }
}

/// Message for updating a Subnet
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateSubnetRequest {
    /// Required. Field mask is used to specify the fields to be overwritten in the
    /// Subnet resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The resource being updated
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub subnet: std::option::Option<crate::model::Subnet>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl UpdateSubnetRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateSubnetRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [subnet][crate::model::UpdateSubnetRequest::subnet].
    pub fn set_subnet<T: std::convert::Into<std::option::Option<crate::model::Subnet>>>(
        mut self,
        v: T,
    ) -> Self {
        self.subnet = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateSubnetRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for UpdateSubnetRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.UpdateSubnetRequest"
    }
}

/// Message for deleting a Subnet
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteSubnetRequest {
    /// Required. Name of the resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl DeleteSubnetRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteSubnetRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteSubnetRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for DeleteSubnetRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.DeleteSubnetRequest"
    }
}

/// Message for requesting list of Interconnects
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListInterconnectsRequest {
    /// Required. Parent value for ListInterconnectsRequest
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Requested page size. Server may return fewer items than requested.
    /// If unspecified, server will pick an appropriate default.
    pub page_size: i32,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Filtering results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Hint for how to order the results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListInterconnectsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListInterconnectsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListInterconnectsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListInterconnectsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListInterconnectsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListInterconnectsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListInterconnectsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.ListInterconnectsRequest"
    }
}

/// Message for response to listing Interconnects
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListInterconnectsResponse {
    /// The list of Interconnect
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub interconnects: std::vec::Vec<crate::model::Interconnect>,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListInterconnectsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListInterconnectsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [interconnects][crate::model::ListInterconnectsResponse::interconnects].
    pub fn set_interconnects<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Interconnect>,
    {
        use std::iter::Iterator;
        self.interconnects = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListInterconnectsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListInterconnectsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.ListInterconnectsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListInterconnectsResponse {
    type PageItem = crate::model::Interconnect;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.interconnects
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Message for getting a Interconnect
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetInterconnectRequest {
    /// Required. Name of the resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetInterconnectRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetInterconnectRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetInterconnectRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.GetInterconnectRequest"
    }
}

/// Message for requesting list of InterconnectAttachments
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListInterconnectAttachmentsRequest {
    /// Required. Parent value for ListInterconnectAttachmentsRequest
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Requested page size. Server may return fewer items than requested.
    /// If unspecified, server will pick an appropriate default.
    pub page_size: i32,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Filtering results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Hint for how to order the results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListInterconnectAttachmentsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListInterconnectAttachmentsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListInterconnectAttachmentsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListInterconnectAttachmentsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListInterconnectAttachmentsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListInterconnectAttachmentsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListInterconnectAttachmentsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.ListInterconnectAttachmentsRequest"
    }
}

/// Message for response to listing InterconnectAttachments
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListInterconnectAttachmentsResponse {
    /// The list of InterconnectAttachment
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub interconnect_attachments: std::vec::Vec<crate::model::InterconnectAttachment>,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListInterconnectAttachmentsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListInterconnectAttachmentsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [interconnect_attachments][crate::model::ListInterconnectAttachmentsResponse::interconnect_attachments].
    pub fn set_interconnect_attachments<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::InterconnectAttachment>,
    {
        use std::iter::Iterator;
        self.interconnect_attachments = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListInterconnectAttachmentsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListInterconnectAttachmentsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.ListInterconnectAttachmentsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListInterconnectAttachmentsResponse {
    type PageItem = crate::model::InterconnectAttachment;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.interconnect_attachments
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Message for getting a InterconnectAttachment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetInterconnectAttachmentRequest {
    /// Required. Name of the resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetInterconnectAttachmentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetInterconnectAttachmentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetInterconnectAttachmentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.GetInterconnectAttachmentRequest"
    }
}

/// Message for creating a InterconnectAttachment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateInterconnectAttachmentRequest {
    /// Required. Value for parent.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Id of the requesting object
    /// If auto-generating Id server-side, remove this field and
    /// interconnect_attachment_id from the method_signature of Create RPC
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub interconnect_attachment_id: std::string::String,

    /// Required. The resource being created
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub interconnect_attachment: std::option::Option<crate::model::InterconnectAttachment>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl CreateInterconnectAttachmentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateInterconnectAttachmentRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [interconnect_attachment_id][crate::model::CreateInterconnectAttachmentRequest::interconnect_attachment_id].
    pub fn set_interconnect_attachment_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.interconnect_attachment_id = v.into();
        self
    }

    /// Sets the value of [interconnect_attachment][crate::model::CreateInterconnectAttachmentRequest::interconnect_attachment].
    pub fn set_interconnect_attachment<
        T: std::convert::Into<std::option::Option<crate::model::InterconnectAttachment>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.interconnect_attachment = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateInterconnectAttachmentRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateInterconnectAttachmentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.CreateInterconnectAttachmentRequest"
    }
}

/// Message for deleting a InterconnectAttachment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteInterconnectAttachmentRequest {
    /// Required. Name of the resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl DeleteInterconnectAttachmentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteInterconnectAttachmentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteInterconnectAttachmentRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for DeleteInterconnectAttachmentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.DeleteInterconnectAttachmentRequest"
    }
}

/// Message for requesting list of Routers
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListRoutersRequest {
    /// Required. Parent value for ListRoutersRequest
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Requested page size. Server may return fewer items than requested.
    /// If unspecified, server will pick an appropriate default.
    pub page_size: i32,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Filtering results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Hint for how to order the results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListRoutersRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListRoutersRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListRoutersRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListRoutersRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListRoutersRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListRoutersRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListRoutersRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.ListRoutersRequest"
    }
}

/// Message for response to listing Routers
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListRoutersResponse {
    /// The list of Router
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub routers: std::vec::Vec<crate::model::Router>,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListRoutersResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListRoutersResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [routers][crate::model::ListRoutersResponse::routers].
    pub fn set_routers<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Router>,
    {
        use std::iter::Iterator;
        self.routers = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListRoutersResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListRoutersResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.ListRoutersResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListRoutersResponse {
    type PageItem = crate::model::Router;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.routers
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Message for getting a Router
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetRouterRequest {
    /// Required. Name of the resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetRouterRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetRouterRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetRouterRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.GetRouterRequest"
    }
}

/// Message for creating a Router
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateRouterRequest {
    /// Required. Value for parent.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Id of the requesting object
    /// If auto-generating Id server-side, remove this field and
    /// router_id from the method_signature of Create RPC
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub router_id: std::string::String,

    /// Required. The resource being created
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub router: std::option::Option<crate::model::Router>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl CreateRouterRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateRouterRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [router_id][crate::model::CreateRouterRequest::router_id].
    pub fn set_router_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.router_id = v.into();
        self
    }

    /// Sets the value of [router][crate::model::CreateRouterRequest::router].
    pub fn set_router<T: std::convert::Into<std::option::Option<crate::model::Router>>>(
        mut self,
        v: T,
    ) -> Self {
        self.router = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateRouterRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateRouterRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.CreateRouterRequest"
    }
}

/// Message for updating a Router
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateRouterRequest {
    /// Required. Field mask is used to specify the fields to be overwritten in the
    /// Router resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The resource being updated
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub router: std::option::Option<crate::model::Router>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl UpdateRouterRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateRouterRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [router][crate::model::UpdateRouterRequest::router].
    pub fn set_router<T: std::convert::Into<std::option::Option<crate::model::Router>>>(
        mut self,
        v: T,
    ) -> Self {
        self.router = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateRouterRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for UpdateRouterRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.UpdateRouterRequest"
    }
}

/// Message for deleting a Router
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteRouterRequest {
    /// Required. Name of the resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl DeleteRouterRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteRouterRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteRouterRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for DeleteRouterRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.DeleteRouterRequest"
    }
}

/// Represents the metadata of the long-running operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OperationMetadata {
    /// Output only. The time the operation was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the operation finished running.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Server-defined resource path for the target of the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target: std::string::String,

    /// Output only. Name of the verb executed by the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub verb: std::string::String,

    /// Output only. Human-readable status of the operation, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub status_message: std::string::String,

    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have been cancelled successfully
    /// have [Operation.error][] value with a
    /// [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
    /// `Code.CANCELLED`.
    ///
    /// [google.rpc.Status.code]: rpc::model::Status::code
    pub requested_cancellation: bool,

    /// Output only. API version used to start the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub api_version: std::string::String,
}

impl OperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [create_time][crate::model::OperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::OperationMetadata::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [target][crate::model::OperationMetadata::target].
    pub fn set_target<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [verb][crate::model::OperationMetadata::verb].
    pub fn set_verb<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.verb = v.into();
        self
    }

    /// Sets the value of [status_message][crate::model::OperationMetadata::status_message].
    pub fn set_status_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.status_message = v.into();
        self
    }

    /// Sets the value of [requested_cancellation][crate::model::OperationMetadata::requested_cancellation].
    pub fn set_requested_cancellation<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.requested_cancellation = v.into();
        self
    }

    /// Sets the value of [api_version][crate::model::OperationMetadata::api_version].
    pub fn set_api_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.api_version = v.into();
        self
    }
}

impl wkt::message::Message for OperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.OperationMetadata"
    }
}

/// Message for requesting the diagnostics of a network within a specific zone.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DiagnoseNetworkRequest {
    /// Required. The name of the network resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DiagnoseNetworkRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DiagnoseNetworkRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DiagnoseNetworkRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.DiagnoseNetworkRequest"
    }
}

/// DiagnoseNetworkResponse contains the current status for a specific network.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DiagnoseNetworkResponse {
    /// The time when the network status was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// The network status of a specific network.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub result: std::option::Option<crate::model::diagnose_network_response::NetworkStatus>,
}

impl DiagnoseNetworkResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_time][crate::model::DiagnoseNetworkResponse::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [result][crate::model::DiagnoseNetworkResponse::result].
    pub fn set_result<
        T: std::convert::Into<
            std::option::Option<crate::model::diagnose_network_response::NetworkStatus>,
        >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.result = v.into();
        self
    }
}

impl wkt::message::Message for DiagnoseNetworkResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.DiagnoseNetworkResponse"
    }
}

/// Defines additional types related to DiagnoseNetworkResponse
pub mod diagnose_network_response {
    #[allow(unused_imports)]
    use super::*;

    /// NetworkStatus has a list of status for the subnets under the current
    /// network.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct NetworkStatus {
        /// A list of status for the subnets under the current network.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub subnet_status: std::vec::Vec<crate::model::SubnetStatus>,

        /// The MACsec status of internal links.
        pub macsec_status_internal_links:
            crate::model::diagnose_network_response::network_status::MacsecStatus,
    }

    impl NetworkStatus {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [macsec_status_internal_links][crate::model::diagnose_network_response::NetworkStatus::macsec_status_internal_links].
        pub fn set_macsec_status_internal_links<
            T: std::convert::Into<
                crate::model::diagnose_network_response::network_status::MacsecStatus,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.macsec_status_internal_links = v.into();
            self
        }

        /// Sets the value of [subnet_status][crate::model::diagnose_network_response::NetworkStatus::subnet_status].
        pub fn set_subnet_status<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::SubnetStatus>,
        {
            use std::iter::Iterator;
            self.subnet_status = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for NetworkStatus {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.edgenetwork.v1.DiagnoseNetworkResponse.NetworkStatus"
        }
    }

    /// Defines additional types related to NetworkStatus
    pub mod network_status {
        #[allow(unused_imports)]
        use super::*;

        /// Denotes the status of MACsec sessions for the links of a zone.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct MacsecStatus(std::borrow::Cow<'static, str>);

        impl MacsecStatus {
            /// Creates a new MacsecStatus instance.
            pub const fn new(v: &'static str) -> Self {
                Self(std::borrow::Cow::Borrowed(v))
            }

            /// Gets the enum value.
            pub fn value(&self) -> &str {
                &self.0
            }
        }

        /// Useful constants to work with [MacsecStatus](MacsecStatus)
        pub mod macsec_status {
            use super::MacsecStatus;

            /// MACsec status not specified, likely due to missing metrics.
            pub const MACSEC_STATUS_UNSPECIFIED: MacsecStatus =
                MacsecStatus::new("MACSEC_STATUS_UNSPECIFIED");

            /// All relevant links have at least one MACsec session up.
            pub const SECURE: MacsecStatus = MacsecStatus::new("SECURE");

            /// At least one relevant link does not have any MACsec sessions up.
            pub const UNSECURE: MacsecStatus = MacsecStatus::new("UNSECURE");
        }

        impl std::convert::From<std::string::String> for MacsecStatus {
            fn from(value: std::string::String) -> Self {
                Self(std::borrow::Cow::Owned(value))
            }
        }

        impl std::default::Default for MacsecStatus {
            fn default() -> Self {
                macsec_status::MACSEC_STATUS_UNSPECIFIED
            }
        }
    }
}

/// Message for requesting the diagnostics of an interconnect within a specific
/// zone.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DiagnoseInterconnectRequest {
    /// Required. The name of the interconnect resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DiagnoseInterconnectRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DiagnoseInterconnectRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DiagnoseInterconnectRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.DiagnoseInterconnectRequest"
    }
}

/// DiagnoseInterconnectResponse contains the current diagnostics for a
/// specific interconnect.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DiagnoseInterconnectResponse {
    /// The time when the interconnect diagnostics was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// The network status of a specific interconnect.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub result: std::option::Option<crate::model::InterconnectDiagnostics>,
}

impl DiagnoseInterconnectResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_time][crate::model::DiagnoseInterconnectResponse::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [result][crate::model::DiagnoseInterconnectResponse::result].
    pub fn set_result<
        T: std::convert::Into<std::option::Option<crate::model::InterconnectDiagnostics>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.result = v.into();
        self
    }
}

impl wkt::message::Message for DiagnoseInterconnectResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.DiagnoseInterconnectResponse"
    }
}

/// Message for requesting diagnositcs of a router within a specific zone.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DiagnoseRouterRequest {
    /// Required. The name of the router resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DiagnoseRouterRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DiagnoseRouterRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DiagnoseRouterRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.DiagnoseRouterRequest"
    }
}

/// DiagnoseRouterResponse contains the current status for a specific router.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DiagnoseRouterResponse {
    /// The time when the router status was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// The network status of a specific router.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub result: std::option::Option<crate::model::RouterStatus>,
}

impl DiagnoseRouterResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_time][crate::model::DiagnoseRouterResponse::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [result][crate::model::DiagnoseRouterResponse::result].
    pub fn set_result<T: std::convert::Into<std::option::Option<crate::model::RouterStatus>>>(
        mut self,
        v: T,
    ) -> Self {
        self.result = v.into();
        self
    }
}

impl wkt::message::Message for DiagnoseRouterResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.DiagnoseRouterResponse"
    }
}

/// Message for initializing a specified zone
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct InitializeZoneRequest {
    /// Required. The name of the zone resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl InitializeZoneRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::InitializeZoneRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for InitializeZoneRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.InitializeZoneRequest"
    }
}

/// The response of initializing a zone
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct InitializeZoneResponse {}

impl InitializeZoneResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for InitializeZoneResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.edgenetwork.v1.InitializeZoneResponse"
    }
}

/// ResourceState describes the state the resource.
/// A normal lifecycle of a new resource being created would be: PENDING ->
/// PROVISIONING -> RUNNING. A normal lifecycle of an existing resource being
/// deleted would be: RUNNING -> DELETING. Any failures during processing will
/// result the resource to be in a SUSPENDED state.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct ResourceState(std::borrow::Cow<'static, str>);

impl ResourceState {
    /// Creates a new ResourceState instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [ResourceState](ResourceState)
pub mod resource_state {
    use super::ResourceState;

    /// Unspecified state.
    pub const STATE_UNKNOWN: ResourceState = ResourceState::new("STATE_UNKNOWN");

    /// The resource is being prepared to be applied to the rack.
    pub const STATE_PENDING: ResourceState = ResourceState::new("STATE_PENDING");

    /// The resource has started being applied to the rack.
    pub const STATE_PROVISIONING: ResourceState = ResourceState::new("STATE_PROVISIONING");

    /// The resource has been pushed to the rack.
    pub const STATE_RUNNING: ResourceState = ResourceState::new("STATE_RUNNING");

    /// The resource failed to push to the rack.
    pub const STATE_SUSPENDED: ResourceState = ResourceState::new("STATE_SUSPENDED");

    /// The resource is under deletion.
    pub const STATE_DELETING: ResourceState = ResourceState::new("STATE_DELETING");
}

impl std::convert::From<std::string::String> for ResourceState {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}

impl std::default::Default for ResourceState {
    fn default() -> Self {
        resource_state::STATE_UNKNOWN
    }
}
