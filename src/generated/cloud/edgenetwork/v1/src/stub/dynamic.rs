// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

/// A dyn-compatible, crate-private version of [super::EdgeNetwork].
#[async_trait::async_trait]
pub trait EdgeNetwork: std::fmt::Debug + Send + Sync {
    async fn initialize_zone(
        &self,
        req: crate::model::InitializeZoneRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::InitializeZoneResponse>>;

    async fn list_zones(
        &self,
        req: crate::model::ListZonesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListZonesResponse>>;

    async fn get_zone(
        &self,
        req: crate::model::GetZoneRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Zone>>;

    async fn list_networks(
        &self,
        req: crate::model::ListNetworksRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListNetworksResponse>>;

    async fn get_network(
        &self,
        req: crate::model::GetNetworkRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Network>>;

    async fn diagnose_network(
        &self,
        req: crate::model::DiagnoseNetworkRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::DiagnoseNetworkResponse>>;

    async fn create_network(
        &self,
        req: crate::model::CreateNetworkRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>>;

    async fn delete_network(
        &self,
        req: crate::model::DeleteNetworkRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>>;

    async fn list_subnets(
        &self,
        req: crate::model::ListSubnetsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListSubnetsResponse>>;

    async fn get_subnet(
        &self,
        req: crate::model::GetSubnetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Subnet>>;

    async fn create_subnet(
        &self,
        req: crate::model::CreateSubnetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>>;

    async fn update_subnet(
        &self,
        req: crate::model::UpdateSubnetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>>;

    async fn delete_subnet(
        &self,
        req: crate::model::DeleteSubnetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>>;

    async fn list_interconnects(
        &self,
        req: crate::model::ListInterconnectsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListInterconnectsResponse>>;

    async fn get_interconnect(
        &self,
        req: crate::model::GetInterconnectRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Interconnect>>;

    async fn diagnose_interconnect(
        &self,
        req: crate::model::DiagnoseInterconnectRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::DiagnoseInterconnectResponse>>;

    async fn list_interconnect_attachments(
        &self,
        req: crate::model::ListInterconnectAttachmentsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListInterconnectAttachmentsResponse>>;

    async fn get_interconnect_attachment(
        &self,
        req: crate::model::GetInterconnectAttachmentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::InterconnectAttachment>>;

    async fn create_interconnect_attachment(
        &self,
        req: crate::model::CreateInterconnectAttachmentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>>;

    async fn delete_interconnect_attachment(
        &self,
        req: crate::model::DeleteInterconnectAttachmentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>>;

    async fn list_routers(
        &self,
        req: crate::model::ListRoutersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListRoutersResponse>>;

    async fn get_router(
        &self,
        req: crate::model::GetRouterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Router>>;

    async fn diagnose_router(
        &self,
        req: crate::model::DiagnoseRouterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::DiagnoseRouterResponse>>;

    async fn create_router(
        &self,
        req: crate::model::CreateRouterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>>;

    async fn update_router(
        &self,
        req: crate::model::UpdateRouterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>>;

    async fn delete_router(
        &self,
        req: crate::model::DeleteRouterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>>;

    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<location::model::ListLocationsResponse>>;

    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<location::model::Location>>;

    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>>;

    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>>;

    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>>;

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy>;

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}

/// All implementations of [super::EdgeNetwork] also implement [EdgeNetwork].
#[async_trait::async_trait]
impl<T: super::EdgeNetwork> EdgeNetwork for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn initialize_zone(
        &self,
        req: crate::model::InitializeZoneRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::InitializeZoneResponse>> {
        T::initialize_zone(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_zones(
        &self,
        req: crate::model::ListZonesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListZonesResponse>> {
        T::list_zones(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_zone(
        &self,
        req: crate::model::GetZoneRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Zone>> {
        T::get_zone(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_networks(
        &self,
        req: crate::model::ListNetworksRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListNetworksResponse>> {
        T::list_networks(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_network(
        &self,
        req: crate::model::GetNetworkRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Network>> {
        T::get_network(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn diagnose_network(
        &self,
        req: crate::model::DiagnoseNetworkRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::DiagnoseNetworkResponse>> {
        T::diagnose_network(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_network(
        &self,
        req: crate::model::CreateNetworkRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>> {
        T::create_network(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_network(
        &self,
        req: crate::model::DeleteNetworkRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>> {
        T::delete_network(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_subnets(
        &self,
        req: crate::model::ListSubnetsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListSubnetsResponse>> {
        T::list_subnets(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_subnet(
        &self,
        req: crate::model::GetSubnetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Subnet>> {
        T::get_subnet(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_subnet(
        &self,
        req: crate::model::CreateSubnetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>> {
        T::create_subnet(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_subnet(
        &self,
        req: crate::model::UpdateSubnetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>> {
        T::update_subnet(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_subnet(
        &self,
        req: crate::model::DeleteSubnetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>> {
        T::delete_subnet(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_interconnects(
        &self,
        req: crate::model::ListInterconnectsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListInterconnectsResponse>> {
        T::list_interconnects(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_interconnect(
        &self,
        req: crate::model::GetInterconnectRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Interconnect>> {
        T::get_interconnect(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn diagnose_interconnect(
        &self,
        req: crate::model::DiagnoseInterconnectRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::DiagnoseInterconnectResponse>> {
        T::diagnose_interconnect(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_interconnect_attachments(
        &self,
        req: crate::model::ListInterconnectAttachmentsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListInterconnectAttachmentsResponse>>
    {
        T::list_interconnect_attachments(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_interconnect_attachment(
        &self,
        req: crate::model::GetInterconnectAttachmentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::InterconnectAttachment>> {
        T::get_interconnect_attachment(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_interconnect_attachment(
        &self,
        req: crate::model::CreateInterconnectAttachmentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>> {
        T::create_interconnect_attachment(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_interconnect_attachment(
        &self,
        req: crate::model::DeleteInterconnectAttachmentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>> {
        T::delete_interconnect_attachment(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_routers(
        &self,
        req: crate::model::ListRoutersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListRoutersResponse>> {
        T::list_routers(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_router(
        &self,
        req: crate::model::GetRouterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Router>> {
        T::get_router(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn diagnose_router(
        &self,
        req: crate::model::DiagnoseRouterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::DiagnoseRouterResponse>> {
        T::diagnose_router(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_router(
        &self,
        req: crate::model::CreateRouterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>> {
        T::create_router(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_router(
        &self,
        req: crate::model::UpdateRouterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>> {
        T::update_router(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_router(
        &self,
        req: crate::model::DeleteRouterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>> {
        T::delete_router(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<location::model::ListLocationsResponse>> {
        T::list_locations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<location::model::Location>> {
        T::get_location(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>> {
        T::list_operations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>> {
        T::get_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>> {
        T::delete_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>> {
        T::cancel_operation(self, req, options).await
    }

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        T::get_polling_error_policy(self, options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        T::get_polling_backoff_policy(self, options)
    }
}
