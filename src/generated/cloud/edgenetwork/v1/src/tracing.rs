// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
use crate::Result;

/// Implements a [EdgeNetwork](super::stubs::EdgeNetwork) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct EdgeNetwork<T>
where
    T: super::stubs::EdgeNetwork + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> EdgeNetwork<T>
where
    T: super::stubs::EdgeNetwork + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> super::stubs::EdgeNetwork for EdgeNetwork<T>
where
    T: super::stubs::EdgeNetwork + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn initialize_zone(
        &self,
        req: crate::model::InitializeZoneRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::InitializeZoneResponse> {
        self.inner.initialize_zone(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_zones(
        &self,
        req: crate::model::ListZonesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListZonesResponse> {
        self.inner.list_zones(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_zone(
        &self,
        req: crate::model::GetZoneRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Zone> {
        self.inner.get_zone(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_networks(
        &self,
        req: crate::model::ListNetworksRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListNetworksResponse> {
        self.inner.list_networks(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_network(
        &self,
        req: crate::model::GetNetworkRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Network> {
        self.inner.get_network(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn diagnose_network(
        &self,
        req: crate::model::DiagnoseNetworkRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::DiagnoseNetworkResponse> {
        self.inner.diagnose_network(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_network(
        &self,
        req: crate::model::CreateNetworkRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.create_network(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_network(
        &self,
        req: crate::model::DeleteNetworkRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.delete_network(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_subnets(
        &self,
        req: crate::model::ListSubnetsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListSubnetsResponse> {
        self.inner.list_subnets(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_subnet(
        &self,
        req: crate::model::GetSubnetRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Subnet> {
        self.inner.get_subnet(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_subnet(
        &self,
        req: crate::model::CreateSubnetRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.create_subnet(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_subnet(
        &self,
        req: crate::model::UpdateSubnetRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.update_subnet(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_subnet(
        &self,
        req: crate::model::DeleteSubnetRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.delete_subnet(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_interconnects(
        &self,
        req: crate::model::ListInterconnectsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListInterconnectsResponse> {
        self.inner.list_interconnects(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_interconnect(
        &self,
        req: crate::model::GetInterconnectRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Interconnect> {
        self.inner.get_interconnect(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn diagnose_interconnect(
        &self,
        req: crate::model::DiagnoseInterconnectRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::DiagnoseInterconnectResponse> {
        self.inner.diagnose_interconnect(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_interconnect_attachments(
        &self,
        req: crate::model::ListInterconnectAttachmentsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListInterconnectAttachmentsResponse> {
        self.inner.list_interconnect_attachments(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_interconnect_attachment(
        &self,
        req: crate::model::GetInterconnectAttachmentRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::InterconnectAttachment> {
        self.inner.get_interconnect_attachment(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_interconnect_attachment(
        &self,
        req: crate::model::CreateInterconnectAttachmentRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner
            .create_interconnect_attachment(req, options)
            .await
    }

    #[tracing::instrument(ret)]
    async fn delete_interconnect_attachment(
        &self,
        req: crate::model::DeleteInterconnectAttachmentRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner
            .delete_interconnect_attachment(req, options)
            .await
    }

    #[tracing::instrument(ret)]
    async fn list_routers(
        &self,
        req: crate::model::ListRoutersRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListRoutersResponse> {
        self.inner.list_routers(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_router(
        &self,
        req: crate::model::GetRouterRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Router> {
        self.inner.get_router(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn diagnose_router(
        &self,
        req: crate::model::DiagnoseRouterRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::DiagnoseRouterResponse> {
        self.inner.diagnose_router(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_router(
        &self,
        req: crate::model::CreateRouterRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.create_router(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_router(
        &self,
        req: crate::model::UpdateRouterRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.update_router(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_router(
        &self,
        req: crate::model::DeleteRouterRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.delete_router(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<location::model::ListLocationsResponse> {
        self.inner.list_locations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<location::model::Location> {
        self.inner.get_location(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::ListOperationsResponse> {
        self.inner.list_operations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.get_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<wkt::Empty> {
        self.inner.delete_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<wkt::Empty> {
        self.inner.cancel_operation(req, options).await
    }

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        self.inner.get_polling_error_policy(options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        self.inner.get_polling_backoff_policy(options)
    }
}
