// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Cloud Speech-to-Text API.
///
/// # Service Description
///
/// Enables speech transcription and resource management.
///
/// # Configuration
///
/// `Speech` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Speech` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Speech` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Speech {
    inner: Arc<dyn crate::stubs::dynamic::Speech>,
}

impl Speech {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::Speech + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::Speech>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Speech> {
        crate::transport::Speech::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Speech> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::Speech::new)
    }

    /// Creates a [Recognizer][google.cloud.speech.v2.Recognizer].
    ///
    /// [google.cloud.speech.v2.Recognizer]: crate::model::Recognizer
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_recognizer(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::speech::CreateRecognizer {
        crate::builders::speech::CreateRecognizer::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Lists Recognizers.
    pub fn list_recognizers(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::speech::ListRecognizers {
        crate::builders::speech::ListRecognizers::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Returns the requested
    /// [Recognizer][google.cloud.speech.v2.Recognizer]. Fails with
    /// [NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested Recognizer doesn't
    /// exist.
    ///
    /// [google.cloud.speech.v2.Recognizer]: crate::model::Recognizer
    pub fn get_recognizer(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::speech::GetRecognizer {
        crate::builders::speech::GetRecognizer::new(self.inner.clone()).set_name(name.into())
    }

    /// Updates the [Recognizer][google.cloud.speech.v2.Recognizer].
    ///
    /// [google.cloud.speech.v2.Recognizer]: crate::model::Recognizer
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_recognizer(
        &self,
        recognizer: impl Into<crate::model::Recognizer>,
    ) -> crate::builders::speech::UpdateRecognizer {
        crate::builders::speech::UpdateRecognizer::new(self.inner.clone())
            .set_recognizer(recognizer.into())
    }

    /// Deletes the [Recognizer][google.cloud.speech.v2.Recognizer].
    ///
    /// [google.cloud.speech.v2.Recognizer]: crate::model::Recognizer
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_recognizer(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::speech::DeleteRecognizer {
        crate::builders::speech::DeleteRecognizer::new(self.inner.clone()).set_name(name.into())
    }

    /// Undeletes the [Recognizer][google.cloud.speech.v2.Recognizer].
    ///
    /// [google.cloud.speech.v2.Recognizer]: crate::model::Recognizer
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn undelete_recognizer(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::speech::UndeleteRecognizer {
        crate::builders::speech::UndeleteRecognizer::new(self.inner.clone()).set_name(name.into())
    }

    /// Performs synchronous Speech recognition: receive results after all audio
    /// has been sent and processed.
    pub fn recognize(
        &self,
        recognizer: impl Into<std::string::String>,
    ) -> crate::builders::speech::Recognize {
        crate::builders::speech::Recognize::new(self.inner.clone())
            .set_recognizer(recognizer.into())
    }

    /// Performs batch asynchronous speech recognition: send a request with N
    /// audio files and receive a long running operation that can be polled to see
    /// when the transcriptions are finished.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_recognize(
        &self,
        recognizer: impl Into<std::string::String>,
    ) -> crate::builders::speech::BatchRecognize {
        crate::builders::speech::BatchRecognize::new(self.inner.clone())
            .set_recognizer(recognizer.into())
    }

    /// Returns the requested [Config][google.cloud.speech.v2.Config].
    ///
    /// [google.cloud.speech.v2.Config]: crate::model::Config
    pub fn get_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::speech::GetConfig {
        crate::builders::speech::GetConfig::new(self.inner.clone()).set_name(name.into())
    }

    /// Updates the [Config][google.cloud.speech.v2.Config].
    ///
    /// [google.cloud.speech.v2.Config]: crate::model::Config
    pub fn update_config(
        &self,
        config: impl Into<crate::model::Config>,
    ) -> crate::builders::speech::UpdateConfig {
        crate::builders::speech::UpdateConfig::new(self.inner.clone()).set_config(config.into())
    }

    /// Creates a [CustomClass][google.cloud.speech.v2.CustomClass].
    ///
    /// [google.cloud.speech.v2.CustomClass]: crate::model::CustomClass
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_custom_class(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::speech::CreateCustomClass {
        crate::builders::speech::CreateCustomClass::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists CustomClasses.
    pub fn list_custom_classes(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::speech::ListCustomClasses {
        crate::builders::speech::ListCustomClasses::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns the requested
    /// [CustomClass][google.cloud.speech.v2.CustomClass].
    ///
    /// [google.cloud.speech.v2.CustomClass]: crate::model::CustomClass
    pub fn get_custom_class(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::speech::GetCustomClass {
        crate::builders::speech::GetCustomClass::new(self.inner.clone()).set_name(name.into())
    }

    /// Updates the [CustomClass][google.cloud.speech.v2.CustomClass].
    ///
    /// [google.cloud.speech.v2.CustomClass]: crate::model::CustomClass
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_custom_class(
        &self,
        custom_class: impl Into<crate::model::CustomClass>,
    ) -> crate::builders::speech::UpdateCustomClass {
        crate::builders::speech::UpdateCustomClass::new(self.inner.clone())
            .set_custom_class(custom_class.into())
    }

    /// Deletes the [CustomClass][google.cloud.speech.v2.CustomClass].
    ///
    /// [google.cloud.speech.v2.CustomClass]: crate::model::CustomClass
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_custom_class(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::speech::DeleteCustomClass {
        crate::builders::speech::DeleteCustomClass::new(self.inner.clone()).set_name(name.into())
    }

    /// Undeletes the [CustomClass][google.cloud.speech.v2.CustomClass].
    ///
    /// [google.cloud.speech.v2.CustomClass]: crate::model::CustomClass
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn undelete_custom_class(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::speech::UndeleteCustomClass {
        crate::builders::speech::UndeleteCustomClass::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a [PhraseSet][google.cloud.speech.v2.PhraseSet].
    ///
    /// [google.cloud.speech.v2.PhraseSet]: crate::model::PhraseSet
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_phrase_set(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::speech::CreatePhraseSet {
        crate::builders::speech::CreatePhraseSet::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Lists PhraseSets.
    pub fn list_phrase_sets(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::speech::ListPhraseSets {
        crate::builders::speech::ListPhraseSets::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Returns the requested
    /// [PhraseSet][google.cloud.speech.v2.PhraseSet].
    ///
    /// [google.cloud.speech.v2.PhraseSet]: crate::model::PhraseSet
    pub fn get_phrase_set(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::speech::GetPhraseSet {
        crate::builders::speech::GetPhraseSet::new(self.inner.clone()).set_name(name.into())
    }

    /// Updates the [PhraseSet][google.cloud.speech.v2.PhraseSet].
    ///
    /// [google.cloud.speech.v2.PhraseSet]: crate::model::PhraseSet
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_phrase_set(
        &self,
        phrase_set: impl Into<crate::model::PhraseSet>,
    ) -> crate::builders::speech::UpdatePhraseSet {
        crate::builders::speech::UpdatePhraseSet::new(self.inner.clone())
            .set_phrase_set(phrase_set.into())
    }

    /// Deletes the [PhraseSet][google.cloud.speech.v2.PhraseSet].
    ///
    /// [google.cloud.speech.v2.PhraseSet]: crate::model::PhraseSet
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_phrase_set(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::speech::DeletePhraseSet {
        crate::builders::speech::DeletePhraseSet::new(self.inner.clone()).set_name(name.into())
    }

    /// Undeletes the [PhraseSet][google.cloud.speech.v2.PhraseSet].
    ///
    /// [google.cloud.speech.v2.PhraseSet]: crate::model::PhraseSet
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn undelete_phrase_set(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::speech::UndeletePhraseSet {
        crate::builders::speech::UndeletePhraseSet::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::speech::ListLocations {
        crate::builders::speech::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::speech::GetLocation {
        crate::builders::speech::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::speech::ListOperations {
        crate::builders::speech::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::speech::GetOperation {
        crate::builders::speech::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::speech::DeleteOperation {
        crate::builders::speech::DeleteOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::speech::CancelOperation {
        crate::builders::speech::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}
