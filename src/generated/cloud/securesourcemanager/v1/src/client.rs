// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

/// Implements a client for the Secure Source Manager API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_securesourcemanager_v1::client::SecureSourceManager;
/// let client = SecureSourceManager::builder().build().await?;
/// // use `client` to make requests to the Secure Source Manager API.
/// # gax::client_builder::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// Secure Source Manager API
///
/// Access Secure Source Manager instances, resources, and repositories.
///
/// This API is split across two servers: the Control Plane and the Data Plane.
///
/// Data Plane endpoints are hosted directly by your Secure Source Manager
/// instance, so you must connect to your instance's API hostname to access
/// them. The API hostname looks like the following:
///
/// https://[instance-id]-[project-number]-api.[location].sourcemanager.dev
///
/// For example,
///
/// <https://my-instance-702770452863-api.us-central1.sourcemanager.dev>
///
/// Data Plane endpoints are denoted with **Host: Data Plane**.
///
/// All other endpoints are found in the normal Cloud API location, namely,
/// `securcesourcemanager.googleapis.com`.
///
/// # Configuration
///
/// To configure `SecureSourceManager` use the `with_*` methods in the type returned
/// by [builder()][SecureSourceManager::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://securesourcemanager.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::secure_source_manager::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::secure_source_manager::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `SecureSourceManager` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `SecureSourceManager` in
/// an [Rc](std::rc::Rc) or [Arc](std::sync::Arc) to reuse it, because it
/// already uses an `Arc` internally.
#[derive(Clone, Debug)]
pub struct SecureSourceManager {
    inner: std::sync::Arc<dyn super::stub::dynamic::SecureSourceManager>,
}

impl SecureSourceManager {
    /// Returns a builder for [SecureSourceManager].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_securesourcemanager_v1::client::SecureSourceManager;
    /// let client = SecureSourceManager::builder().build().await?;
    /// # gax::client_builder::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::secure_source_manager::ClientBuilder {
        gax::client_builder::internal::new_builder(
            super::builder::secure_source_manager::client::Factory,
        )
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::SecureSourceManager + 'static,
    {
        Self {
            inner: std::sync::Arc::new(stub),
        }
    }

    pub(crate) async fn new(
        config: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<std::sync::Arc<dyn super::stub::dynamic::SecureSourceManager>>
    {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(std::sync::Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(std::sync::Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<impl super::stub::SecureSourceManager> {
        super::transport::SecureSourceManager::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<impl super::stub::SecureSourceManager> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::SecureSourceManager::new)
    }

    /// Lists Instances in a given project and location.
    pub fn list_instances(&self) -> super::builder::secure_source_manager::ListInstances {
        super::builder::secure_source_manager::ListInstances::new(self.inner.clone())
    }

    /// Gets details of a single instance.
    pub fn get_instance(&self) -> super::builder::secure_source_manager::GetInstance {
        super::builder::secure_source_manager::GetInstance::new(self.inner.clone())
    }

    /// Creates a new instance in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_instance(&self) -> super::builder::secure_source_manager::CreateInstance {
        super::builder::secure_source_manager::CreateInstance::new(self.inner.clone())
    }

    /// Deletes a single instance.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_instance(&self) -> super::builder::secure_source_manager::DeleteInstance {
        super::builder::secure_source_manager::DeleteInstance::new(self.inner.clone())
    }

    /// Lists Repositories in a given project and location.
    ///
    /// **Host: Data Plane**
    pub fn list_repositories(&self) -> super::builder::secure_source_manager::ListRepositories {
        super::builder::secure_source_manager::ListRepositories::new(self.inner.clone())
    }

    /// Gets metadata of a repository.
    ///
    /// **Host: Data Plane**
    pub fn get_repository(&self) -> super::builder::secure_source_manager::GetRepository {
        super::builder::secure_source_manager::GetRepository::new(self.inner.clone())
    }

    /// Creates a new repository in a given project and location.
    ///
    /// **Host: Data Plane**
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_repository(&self) -> super::builder::secure_source_manager::CreateRepository {
        super::builder::secure_source_manager::CreateRepository::new(self.inner.clone())
    }

    /// Deletes a Repository.
    ///
    /// **Host: Data Plane**
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_repository(&self) -> super::builder::secure_source_manager::DeleteRepository {
        super::builder::secure_source_manager::DeleteRepository::new(self.inner.clone())
    }

    /// Get IAM policy for a repository.
    pub fn get_iam_policy_repo(&self) -> super::builder::secure_source_manager::GetIamPolicyRepo {
        super::builder::secure_source_manager::GetIamPolicyRepo::new(self.inner.clone())
    }

    /// Set IAM policy on a repository.
    pub fn set_iam_policy_repo(&self) -> super::builder::secure_source_manager::SetIamPolicyRepo {
        super::builder::secure_source_manager::SetIamPolicyRepo::new(self.inner.clone())
    }

    /// Test IAM permissions on a repository.
    /// IAM permission checks are not required on this method.
    pub fn test_iam_permissions_repo(
        &self,
    ) -> super::builder::secure_source_manager::TestIamPermissionsRepo {
        super::builder::secure_source_manager::TestIamPermissionsRepo::new(self.inner.clone())
    }

    /// CreateBranchRule creates a branch rule in a given repository.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_branch_rule(&self) -> super::builder::secure_source_manager::CreateBranchRule {
        super::builder::secure_source_manager::CreateBranchRule::new(self.inner.clone())
    }

    /// ListBranchRules lists branch rules in a given repository.
    pub fn list_branch_rules(&self) -> super::builder::secure_source_manager::ListBranchRules {
        super::builder::secure_source_manager::ListBranchRules::new(self.inner.clone())
    }

    /// GetBranchRule gets a branch rule.
    pub fn get_branch_rule(&self) -> super::builder::secure_source_manager::GetBranchRule {
        super::builder::secure_source_manager::GetBranchRule::new(self.inner.clone())
    }

    /// UpdateBranchRule updates a branch rule.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_branch_rule(&self) -> super::builder::secure_source_manager::UpdateBranchRule {
        super::builder::secure_source_manager::UpdateBranchRule::new(self.inner.clone())
    }

    /// DeleteBranchRule deletes a branch rule.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_branch_rule(&self) -> super::builder::secure_source_manager::DeleteBranchRule {
        super::builder::secure_source_manager::DeleteBranchRule::new(self.inner.clone())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(&self) -> super::builder::secure_source_manager::ListLocations {
        super::builder::secure_source_manager::ListLocations::new(self.inner.clone())
    }

    /// Gets information about a location.
    pub fn get_location(&self) -> super::builder::secure_source_manager::GetLocation {
        super::builder::secure_source_manager::GetLocation::new(self.inner.clone())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(&self) -> super::builder::secure_source_manager::SetIamPolicy {
        super::builder::secure_source_manager::SetIamPolicy::new(self.inner.clone())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(&self) -> super::builder::secure_source_manager::GetIamPolicy {
        super::builder::secure_source_manager::GetIamPolicy::new(self.inner.clone())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
    ) -> super::builder::secure_source_manager::TestIamPermissions {
        super::builder::secure_source_manager::TestIamPermissions::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(&self) -> super::builder::secure_source_manager::ListOperations {
        super::builder::secure_source_manager::ListOperations::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(&self) -> super::builder::secure_source_manager::GetOperation {
        super::builder::secure_source_manager::GetOperation::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(&self) -> super::builder::secure_source_manager::DeleteOperation {
        super::builder::secure_source_manager::DeleteOperation::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(&self) -> super::builder::secure_source_manager::CancelOperation {
        super::builder::secure_source_manager::CancelOperation::new(self.inner.clone())
    }
}
