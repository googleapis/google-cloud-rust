// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
use crate::Result;

/// Implements a [ContactCenterInsights](super::stub::ContactCenterInsights) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct ContactCenterInsights<T>
where
    T: super::stub::ContactCenterInsights + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> ContactCenterInsights<T>
where
    T: super::stub::ContactCenterInsights + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> super::stub::ContactCenterInsights for ContactCenterInsights<T>
where
    T: super::stub::ContactCenterInsights + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn create_conversation(
        &self,
        req: crate::model::CreateConversationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Conversation> {
        self.inner.create_conversation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn upload_conversation(
        &self,
        req: crate::model::UploadConversationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.upload_conversation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_conversation(
        &self,
        req: crate::model::UpdateConversationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Conversation> {
        self.inner.update_conversation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_conversation(
        &self,
        req: crate::model::GetConversationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Conversation> {
        self.inner.get_conversation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_conversations(
        &self,
        req: crate::model::ListConversationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListConversationsResponse> {
        self.inner.list_conversations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_conversation(
        &self,
        req: crate::model::DeleteConversationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<()> {
        self.inner.delete_conversation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_analysis(
        &self,
        req: crate::model::CreateAnalysisRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.create_analysis(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_analysis(
        &self,
        req: crate::model::GetAnalysisRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Analysis> {
        self.inner.get_analysis(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_analyses(
        &self,
        req: crate::model::ListAnalysesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListAnalysesResponse> {
        self.inner.list_analyses(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_analysis(
        &self,
        req: crate::model::DeleteAnalysisRequest,
        options: gax::options::RequestOptions,
    ) -> Result<()> {
        self.inner.delete_analysis(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn bulk_analyze_conversations(
        &self,
        req: crate::model::BulkAnalyzeConversationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.bulk_analyze_conversations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn bulk_delete_conversations(
        &self,
        req: crate::model::BulkDeleteConversationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.bulk_delete_conversations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn ingest_conversations(
        &self,
        req: crate::model::IngestConversationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.ingest_conversations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn export_insights_data(
        &self,
        req: crate::model::ExportInsightsDataRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.export_insights_data(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_issue_model(
        &self,
        req: crate::model::CreateIssueModelRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.create_issue_model(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_issue_model(
        &self,
        req: crate::model::UpdateIssueModelRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::IssueModel> {
        self.inner.update_issue_model(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_issue_model(
        &self,
        req: crate::model::GetIssueModelRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::IssueModel> {
        self.inner.get_issue_model(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_issue_models(
        &self,
        req: crate::model::ListIssueModelsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListIssueModelsResponse> {
        self.inner.list_issue_models(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_issue_model(
        &self,
        req: crate::model::DeleteIssueModelRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.delete_issue_model(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn deploy_issue_model(
        &self,
        req: crate::model::DeployIssueModelRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.deploy_issue_model(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn undeploy_issue_model(
        &self,
        req: crate::model::UndeployIssueModelRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.undeploy_issue_model(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn export_issue_model(
        &self,
        req: crate::model::ExportIssueModelRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.export_issue_model(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn import_issue_model(
        &self,
        req: crate::model::ImportIssueModelRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.import_issue_model(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_issue(
        &self,
        req: crate::model::GetIssueRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Issue> {
        self.inner.get_issue(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_issues(
        &self,
        req: crate::model::ListIssuesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListIssuesResponse> {
        self.inner.list_issues(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_issue(
        &self,
        req: crate::model::UpdateIssueRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Issue> {
        self.inner.update_issue(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_issue(
        &self,
        req: crate::model::DeleteIssueRequest,
        options: gax::options::RequestOptions,
    ) -> Result<()> {
        self.inner.delete_issue(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn calculate_issue_model_stats(
        &self,
        req: crate::model::CalculateIssueModelStatsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::CalculateIssueModelStatsResponse> {
        self.inner.calculate_issue_model_stats(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_phrase_matcher(
        &self,
        req: crate::model::CreatePhraseMatcherRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::PhraseMatcher> {
        self.inner.create_phrase_matcher(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_phrase_matcher(
        &self,
        req: crate::model::GetPhraseMatcherRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::PhraseMatcher> {
        self.inner.get_phrase_matcher(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_phrase_matchers(
        &self,
        req: crate::model::ListPhraseMatchersRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListPhraseMatchersResponse> {
        self.inner.list_phrase_matchers(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_phrase_matcher(
        &self,
        req: crate::model::DeletePhraseMatcherRequest,
        options: gax::options::RequestOptions,
    ) -> Result<()> {
        self.inner.delete_phrase_matcher(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_phrase_matcher(
        &self,
        req: crate::model::UpdatePhraseMatcherRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::PhraseMatcher> {
        self.inner.update_phrase_matcher(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn calculate_stats(
        &self,
        req: crate::model::CalculateStatsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::CalculateStatsResponse> {
        self.inner.calculate_stats(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_settings(
        &self,
        req: crate::model::GetSettingsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Settings> {
        self.inner.get_settings(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_settings(
        &self,
        req: crate::model::UpdateSettingsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Settings> {
        self.inner.update_settings(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_analysis_rule(
        &self,
        req: crate::model::CreateAnalysisRuleRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::AnalysisRule> {
        self.inner.create_analysis_rule(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_analysis_rule(
        &self,
        req: crate::model::GetAnalysisRuleRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::AnalysisRule> {
        self.inner.get_analysis_rule(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_analysis_rules(
        &self,
        req: crate::model::ListAnalysisRulesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListAnalysisRulesResponse> {
        self.inner.list_analysis_rules(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_analysis_rule(
        &self,
        req: crate::model::UpdateAnalysisRuleRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::AnalysisRule> {
        self.inner.update_analysis_rule(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_analysis_rule(
        &self,
        req: crate::model::DeleteAnalysisRuleRequest,
        options: gax::options::RequestOptions,
    ) -> Result<()> {
        self.inner.delete_analysis_rule(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_encryption_spec(
        &self,
        req: crate::model::GetEncryptionSpecRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::EncryptionSpec> {
        self.inner.get_encryption_spec(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn initialize_encryption_spec(
        &self,
        req: crate::model::InitializeEncryptionSpecRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.initialize_encryption_spec(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_view(
        &self,
        req: crate::model::CreateViewRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::View> {
        self.inner.create_view(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_view(
        &self,
        req: crate::model::GetViewRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::View> {
        self.inner.get_view(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_views(
        &self,
        req: crate::model::ListViewsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListViewsResponse> {
        self.inner.list_views(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_view(
        &self,
        req: crate::model::UpdateViewRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::View> {
        self.inner.update_view(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_view(
        &self,
        req: crate::model::DeleteViewRequest,
        options: gax::options::RequestOptions,
    ) -> Result<()> {
        self.inner.delete_view(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn query_metrics(
        &self,
        req: crate::model::QueryMetricsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.query_metrics(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_qa_question(
        &self,
        req: crate::model::CreateQaQuestionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::QaQuestion> {
        self.inner.create_qa_question(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_qa_question(
        &self,
        req: crate::model::GetQaQuestionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::QaQuestion> {
        self.inner.get_qa_question(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_qa_question(
        &self,
        req: crate::model::UpdateQaQuestionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::QaQuestion> {
        self.inner.update_qa_question(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_qa_question(
        &self,
        req: crate::model::DeleteQaQuestionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<()> {
        self.inner.delete_qa_question(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_qa_questions(
        &self,
        req: crate::model::ListQaQuestionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListQaQuestionsResponse> {
        self.inner.list_qa_questions(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_qa_scorecard(
        &self,
        req: crate::model::CreateQaScorecardRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::QaScorecard> {
        self.inner.create_qa_scorecard(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_qa_scorecard(
        &self,
        req: crate::model::GetQaScorecardRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::QaScorecard> {
        self.inner.get_qa_scorecard(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_qa_scorecard(
        &self,
        req: crate::model::UpdateQaScorecardRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::QaScorecard> {
        self.inner.update_qa_scorecard(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_qa_scorecard(
        &self,
        req: crate::model::DeleteQaScorecardRequest,
        options: gax::options::RequestOptions,
    ) -> Result<()> {
        self.inner.delete_qa_scorecard(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_qa_scorecards(
        &self,
        req: crate::model::ListQaScorecardsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListQaScorecardsResponse> {
        self.inner.list_qa_scorecards(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_qa_scorecard_revision(
        &self,
        req: crate::model::CreateQaScorecardRevisionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::QaScorecardRevision> {
        self.inner.create_qa_scorecard_revision(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_qa_scorecard_revision(
        &self,
        req: crate::model::GetQaScorecardRevisionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::QaScorecardRevision> {
        self.inner.get_qa_scorecard_revision(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn tune_qa_scorecard_revision(
        &self,
        req: crate::model::TuneQaScorecardRevisionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.tune_qa_scorecard_revision(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn deploy_qa_scorecard_revision(
        &self,
        req: crate::model::DeployQaScorecardRevisionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::QaScorecardRevision> {
        self.inner.deploy_qa_scorecard_revision(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn undeploy_qa_scorecard_revision(
        &self,
        req: crate::model::UndeployQaScorecardRevisionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::QaScorecardRevision> {
        self.inner
            .undeploy_qa_scorecard_revision(req, options)
            .await
    }

    #[tracing::instrument(ret)]
    async fn delete_qa_scorecard_revision(
        &self,
        req: crate::model::DeleteQaScorecardRevisionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<()> {
        self.inner.delete_qa_scorecard_revision(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_qa_scorecard_revisions(
        &self,
        req: crate::model::ListQaScorecardRevisionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListQaScorecardRevisionsResponse> {
        self.inner.list_qa_scorecard_revisions(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_feedback_label(
        &self,
        req: crate::model::CreateFeedbackLabelRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::FeedbackLabel> {
        self.inner.create_feedback_label(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_feedback_labels(
        &self,
        req: crate::model::ListFeedbackLabelsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListFeedbackLabelsResponse> {
        self.inner.list_feedback_labels(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_feedback_label(
        &self,
        req: crate::model::GetFeedbackLabelRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::FeedbackLabel> {
        self.inner.get_feedback_label(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_feedback_label(
        &self,
        req: crate::model::UpdateFeedbackLabelRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::FeedbackLabel> {
        self.inner.update_feedback_label(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_feedback_label(
        &self,
        req: crate::model::DeleteFeedbackLabelRequest,
        options: gax::options::RequestOptions,
    ) -> Result<()> {
        self.inner.delete_feedback_label(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_all_feedback_labels(
        &self,
        req: crate::model::ListAllFeedbackLabelsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListAllFeedbackLabelsResponse> {
        self.inner.list_all_feedback_labels(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn bulk_upload_feedback_labels(
        &self,
        req: crate::model::BulkUploadFeedbackLabelsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.bulk_upload_feedback_labels(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn bulk_download_feedback_labels(
        &self,
        req: crate::model::BulkDownloadFeedbackLabelsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.bulk_download_feedback_labels(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::ListOperationsResponse> {
        self.inner.list_operations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.get_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<()> {
        self.inner.cancel_operation(req, options).await
    }

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        self.inner.get_polling_error_policy(options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        self.inner.get_polling_backoff_policy(options)
    }
}
