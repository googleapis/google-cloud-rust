// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Contact Center AI Insights API.
///
/// # Service Description
///
/// An API that lets users analyze and explore their business conversation data.
///
/// # Configuration
///
/// `ContactCenterInsights` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `ContactCenterInsights` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ContactCenterInsights` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct ContactCenterInsights {
    inner: Arc<dyn crate::stubs::dynamic::ContactCenterInsights>,
}

impl ContactCenterInsights {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::ContactCenterInsights + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::ContactCenterInsights>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ContactCenterInsights> {
        crate::transport::ContactCenterInsights::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ContactCenterInsights> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::ContactCenterInsights::new)
    }

    /// Creates a conversation.
    /// Note that this method does not support audio transcription or redaction.
    /// Use `conversations.upload` instead.
    pub fn create_conversation(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::CreateConversation {
        crate::builders::contact_center_insights::CreateConversation::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Create a long-running conversation upload operation. This method differs
    /// from `CreateConversation` by allowing audio transcription and optional DLP
    /// redaction.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn upload_conversation(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::UploadConversation {
        crate::builders::contact_center_insights::UploadConversation::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a conversation.
    pub fn update_conversation(
        &self,
        conversation: impl Into<crate::model::Conversation>,
    ) -> crate::builders::contact_center_insights::UpdateConversation {
        crate::builders::contact_center_insights::UpdateConversation::new(self.inner.clone())
            .set_conversation(conversation.into())
    }

    /// Gets a conversation.
    pub fn get_conversation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::GetConversation {
        crate::builders::contact_center_insights::GetConversation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists conversations.
    pub fn list_conversations(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::ListConversations {
        crate::builders::contact_center_insights::ListConversations::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a conversation.
    pub fn delete_conversation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::DeleteConversation {
        crate::builders::contact_center_insights::DeleteConversation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates an analysis. The long running operation is done when the analysis
    /// has completed.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_analysis(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::CreateAnalysis {
        crate::builders::contact_center_insights::CreateAnalysis::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets an analysis.
    pub fn get_analysis(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::GetAnalysis {
        crate::builders::contact_center_insights::GetAnalysis::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists analyses.
    pub fn list_analyses(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::ListAnalyses {
        crate::builders::contact_center_insights::ListAnalyses::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes an analysis.
    pub fn delete_analysis(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::DeleteAnalysis {
        crate::builders::contact_center_insights::DeleteAnalysis::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Analyzes multiple conversations in a single request.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn bulk_analyze_conversations(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::BulkAnalyzeConversations {
        crate::builders::contact_center_insights::BulkAnalyzeConversations::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes multiple conversations in a single request.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn bulk_delete_conversations(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::BulkDeleteConversations {
        crate::builders::contact_center_insights::BulkDeleteConversations::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Imports conversations and processes them according to the user's
    /// configuration.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn ingest_conversations(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::IngestConversations {
        crate::builders::contact_center_insights::IngestConversations::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Export insights data to a destination defined in the request body.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn export_insights_data(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::ExportInsightsData {
        crate::builders::contact_center_insights::ExportInsightsData::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates an issue model.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_issue_model(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::CreateIssueModel {
        crate::builders::contact_center_insights::CreateIssueModel::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates an issue model.
    pub fn update_issue_model(
        &self,
        issue_model: impl Into<crate::model::IssueModel>,
    ) -> crate::builders::contact_center_insights::UpdateIssueModel {
        crate::builders::contact_center_insights::UpdateIssueModel::new(self.inner.clone())
            .set_issue_model(issue_model.into())
    }

    /// Gets an issue model.
    pub fn get_issue_model(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::GetIssueModel {
        crate::builders::contact_center_insights::GetIssueModel::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists issue models.
    pub fn list_issue_models(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::ListIssueModels {
        crate::builders::contact_center_insights::ListIssueModels::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes an issue model.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_issue_model(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::DeleteIssueModel {
        crate::builders::contact_center_insights::DeleteIssueModel::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deploys an issue model. Returns an error if a model is already deployed.
    /// An issue model can only be used in analysis after it has been deployed.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn deploy_issue_model(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::DeployIssueModel {
        crate::builders::contact_center_insights::DeployIssueModel::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Undeploys an issue model.
    /// An issue model can not be used in analysis after it has been undeployed.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn undeploy_issue_model(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::UndeployIssueModel {
        crate::builders::contact_center_insights::UndeployIssueModel::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Exports an issue model to the provided destination.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn export_issue_model(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::ExportIssueModel {
        crate::builders::contact_center_insights::ExportIssueModel::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Imports an issue model from a Cloud Storage bucket.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn import_issue_model(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::ImportIssueModel {
        crate::builders::contact_center_insights::ImportIssueModel::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets an issue.
    pub fn get_issue(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::GetIssue {
        crate::builders::contact_center_insights::GetIssue::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists issues.
    pub fn list_issues(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::ListIssues {
        crate::builders::contact_center_insights::ListIssues::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates an issue.
    pub fn update_issue(
        &self,
        issue: impl Into<crate::model::Issue>,
    ) -> crate::builders::contact_center_insights::UpdateIssue {
        crate::builders::contact_center_insights::UpdateIssue::new(self.inner.clone())
            .set_issue(issue.into())
    }

    /// Deletes an issue.
    pub fn delete_issue(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::DeleteIssue {
        crate::builders::contact_center_insights::DeleteIssue::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets an issue model's statistics.
    pub fn calculate_issue_model_stats(
        &self,
        issue_model: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::CalculateIssueModelStats {
        crate::builders::contact_center_insights::CalculateIssueModelStats::new(self.inner.clone())
            .set_issue_model(issue_model.into())
    }

    /// Creates a phrase matcher.
    pub fn create_phrase_matcher(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::CreatePhraseMatcher {
        crate::builders::contact_center_insights::CreatePhraseMatcher::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a phrase matcher.
    pub fn get_phrase_matcher(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::GetPhraseMatcher {
        crate::builders::contact_center_insights::GetPhraseMatcher::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists phrase matchers.
    pub fn list_phrase_matchers(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::ListPhraseMatchers {
        crate::builders::contact_center_insights::ListPhraseMatchers::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a phrase matcher.
    pub fn delete_phrase_matcher(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::DeletePhraseMatcher {
        crate::builders::contact_center_insights::DeletePhraseMatcher::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates a phrase matcher.
    pub fn update_phrase_matcher(
        &self,
        phrase_matcher: impl Into<crate::model::PhraseMatcher>,
    ) -> crate::builders::contact_center_insights::UpdatePhraseMatcher {
        crate::builders::contact_center_insights::UpdatePhraseMatcher::new(self.inner.clone())
            .set_phrase_matcher(phrase_matcher.into())
    }

    /// Gets conversation statistics.
    pub fn calculate_stats(
        &self,
        location: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::CalculateStats {
        crate::builders::contact_center_insights::CalculateStats::new(self.inner.clone())
            .set_location(location.into())
    }

    /// Gets project-level settings.
    pub fn get_settings(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::GetSettings {
        crate::builders::contact_center_insights::GetSettings::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates project-level settings.
    pub fn update_settings(
        &self,
        settings: impl Into<crate::model::Settings>,
    ) -> crate::builders::contact_center_insights::UpdateSettings {
        crate::builders::contact_center_insights::UpdateSettings::new(self.inner.clone())
            .set_settings(settings.into())
    }

    /// Creates a analysis rule.
    pub fn create_analysis_rule(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::CreateAnalysisRule {
        crate::builders::contact_center_insights::CreateAnalysisRule::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Get a analysis rule.
    pub fn get_analysis_rule(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::GetAnalysisRule {
        crate::builders::contact_center_insights::GetAnalysisRule::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists analysis rules.
    pub fn list_analysis_rules(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::ListAnalysisRules {
        crate::builders::contact_center_insights::ListAnalysisRules::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a analysis rule.
    pub fn update_analysis_rule(
        &self,
        analysis_rule: impl Into<crate::model::AnalysisRule>,
    ) -> crate::builders::contact_center_insights::UpdateAnalysisRule {
        crate::builders::contact_center_insights::UpdateAnalysisRule::new(self.inner.clone())
            .set_analysis_rule(analysis_rule.into())
    }

    /// Deletes a analysis rule.
    pub fn delete_analysis_rule(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::DeleteAnalysisRule {
        crate::builders::contact_center_insights::DeleteAnalysisRule::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets location-level encryption key specification.
    pub fn get_encryption_spec(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::GetEncryptionSpec {
        crate::builders::contact_center_insights::GetEncryptionSpec::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Initializes a location-level encryption key specification. An error will
    /// result if the location has resources already created before the
    /// initialization. After the encryption specification is initialized at a
    /// location, it is immutable and all newly created resources under the
    /// location will be encrypted with the existing specification.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn initialize_encryption_spec(
        &self,
        encryption_spec: impl Into<crate::model::EncryptionSpec>,
    ) -> crate::builders::contact_center_insights::InitializeEncryptionSpec {
        crate::builders::contact_center_insights::InitializeEncryptionSpec::new(self.inner.clone())
            .set_encryption_spec(encryption_spec.into())
    }

    /// Creates a view.
    pub fn create_view(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::CreateView {
        crate::builders::contact_center_insights::CreateView::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a view.
    pub fn get_view(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::GetView {
        crate::builders::contact_center_insights::GetView::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists views.
    pub fn list_views(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::ListViews {
        crate::builders::contact_center_insights::ListViews::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a view.
    pub fn update_view(
        &self,
        view: impl Into<crate::model::View>,
    ) -> crate::builders::contact_center_insights::UpdateView {
        crate::builders::contact_center_insights::UpdateView::new(self.inner.clone())
            .set_view(view.into())
    }

    /// Deletes a view.
    pub fn delete_view(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::DeleteView {
        crate::builders::contact_center_insights::DeleteView::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Query metrics.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn query_metrics(
        &self,
        location: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::QueryMetrics {
        crate::builders::contact_center_insights::QueryMetrics::new(self.inner.clone())
            .set_location(location.into())
    }

    /// Create a QaQuestion.
    pub fn create_qa_question(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::CreateQaQuestion {
        crate::builders::contact_center_insights::CreateQaQuestion::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a QaQuestion.
    pub fn get_qa_question(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::GetQaQuestion {
        crate::builders::contact_center_insights::GetQaQuestion::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates a QaQuestion.
    pub fn update_qa_question(
        &self,
        qa_question: impl Into<crate::model::QaQuestion>,
    ) -> crate::builders::contact_center_insights::UpdateQaQuestion {
        crate::builders::contact_center_insights::UpdateQaQuestion::new(self.inner.clone())
            .set_qa_question(qa_question.into())
    }

    /// Deletes a QaQuestion.
    pub fn delete_qa_question(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::DeleteQaQuestion {
        crate::builders::contact_center_insights::DeleteQaQuestion::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists QaQuestions.
    pub fn list_qa_questions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::ListQaQuestions {
        crate::builders::contact_center_insights::ListQaQuestions::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Create a QaScorecard.
    pub fn create_qa_scorecard(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::CreateQaScorecard {
        crate::builders::contact_center_insights::CreateQaScorecard::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a QaScorecard.
    pub fn get_qa_scorecard(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::GetQaScorecard {
        crate::builders::contact_center_insights::GetQaScorecard::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates a QaScorecard.
    pub fn update_qa_scorecard(
        &self,
        qa_scorecard: impl Into<crate::model::QaScorecard>,
    ) -> crate::builders::contact_center_insights::UpdateQaScorecard {
        crate::builders::contact_center_insights::UpdateQaScorecard::new(self.inner.clone())
            .set_qa_scorecard(qa_scorecard.into())
    }

    /// Deletes a QaScorecard.
    pub fn delete_qa_scorecard(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::DeleteQaScorecard {
        crate::builders::contact_center_insights::DeleteQaScorecard::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists QaScorecards.
    pub fn list_qa_scorecards(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::ListQaScorecards {
        crate::builders::contact_center_insights::ListQaScorecards::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a QaScorecardRevision.
    pub fn create_qa_scorecard_revision(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::CreateQaScorecardRevision {
        crate::builders::contact_center_insights::CreateQaScorecardRevision::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a QaScorecardRevision.
    pub fn get_qa_scorecard_revision(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::GetQaScorecardRevision {
        crate::builders::contact_center_insights::GetQaScorecardRevision::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Fine tune one or more QaModels.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn tune_qa_scorecard_revision(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::TuneQaScorecardRevision {
        crate::builders::contact_center_insights::TuneQaScorecardRevision::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deploy a QaScorecardRevision.
    pub fn deploy_qa_scorecard_revision(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::DeployQaScorecardRevision {
        crate::builders::contact_center_insights::DeployQaScorecardRevision::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Undeploy a QaScorecardRevision.
    pub fn undeploy_qa_scorecard_revision(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::UndeployQaScorecardRevision {
        crate::builders::contact_center_insights::UndeployQaScorecardRevision::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Deletes a QaScorecardRevision.
    pub fn delete_qa_scorecard_revision(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::DeleteQaScorecardRevision {
        crate::builders::contact_center_insights::DeleteQaScorecardRevision::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists all revisions under the parent QaScorecard.
    pub fn list_qa_scorecard_revisions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::ListQaScorecardRevisions {
        crate::builders::contact_center_insights::ListQaScorecardRevisions::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Create feedback label.
    pub fn create_feedback_label(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::CreateFeedbackLabel {
        crate::builders::contact_center_insights::CreateFeedbackLabel::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// List feedback labels.
    pub fn list_feedback_labels(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::ListFeedbackLabels {
        crate::builders::contact_center_insights::ListFeedbackLabels::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Get feedback label.
    pub fn get_feedback_label(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::GetFeedbackLabel {
        crate::builders::contact_center_insights::GetFeedbackLabel::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Update feedback label.
    pub fn update_feedback_label(
        &self,
        feedback_label: impl Into<crate::model::FeedbackLabel>,
    ) -> crate::builders::contact_center_insights::UpdateFeedbackLabel {
        crate::builders::contact_center_insights::UpdateFeedbackLabel::new(self.inner.clone())
            .set_feedback_label(feedback_label.into())
    }

    /// Delete feedback label.
    pub fn delete_feedback_label(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::DeleteFeedbackLabel {
        crate::builders::contact_center_insights::DeleteFeedbackLabel::new(self.inner.clone())
            .set_name(name.into())
    }

    /// List all feedback labels by project number.
    pub fn list_all_feedback_labels(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::ListAllFeedbackLabels {
        crate::builders::contact_center_insights::ListAllFeedbackLabels::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Upload feedback labels in bulk.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn bulk_upload_feedback_labels(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::BulkUploadFeedbackLabels {
        crate::builders::contact_center_insights::BulkUploadFeedbackLabels::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Download feedback labels in bulk.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn bulk_download_feedback_labels(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::BulkDownloadFeedbackLabels {
        crate::builders::contact_center_insights::BulkDownloadFeedbackLabels::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::ListOperations {
        crate::builders::contact_center_insights::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::GetOperation {
        crate::builders::contact_center_insights::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contact_center_insights::CancelOperation {
        crate::builders::contact_center_insights::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
