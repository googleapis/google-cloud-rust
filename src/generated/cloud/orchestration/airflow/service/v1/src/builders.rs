// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

pub mod environments {
    use crate::Result;
    use std::sync::Arc;

    /// Common implementation for [super::super::client::Environments] request builders.
    #[derive(Clone, Debug)]
    pub struct RequestBuilder<R: std::default::Default> {
        stub: Arc<dyn super::super::stubs::dynamic::Environments>,
        request: R,
        options: gax::options::RequestOptions,
    }

    impl<R> RequestBuilder<R>
    where
        R: std::default::Default,
    {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self {
                stub,
                request: R::default(),
                options: gax::options::RequestOptions::default(),
            }
        }
    }

    /// The request builder for a Environments::create_environment call.
    #[derive(Clone, Debug)]
    pub struct CreateEnvironment(RequestBuilder<crate::model::CreateEnvironmentRequest>);

    impl CreateEnvironment {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CreateEnvironmentRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        ///
        /// # Long running operations
        ///
        /// This starts, but does not poll, a longrunning operation. More information
        /// on [create_environment][super::super::client::Environments::create_environment].
        pub async fn send(self) -> Result<longrunning::model::Operation> {
            (*self.0.stub)
                .create_environment(self.0.request, self.0.options)
                .await
        }

        /// Creates a [Poller][lro::Poller] to work with `create_environment`.
        pub fn poller(
            self,
        ) -> impl lro::Poller<crate::model::Environment, crate::model::OperationMetadata> {
            type Operation =
                lro::Operation<crate::model::Environment, crate::model::OperationMetadata>;
            let polling_policy = self.0.stub.get_polling_policy(&self.0.options);
            let polling_backoff_policy = self.0.stub.get_polling_backoff_policy(&self.0.options);

            let stub = self.0.stub.clone();
            let mut options = self.0.options.clone();
            options.set_retry_policy(gax::retry_policy::NeverRetry);
            let query = move |name| {
                let stub = stub.clone();
                let options = options.clone();
                async {
                    let op = GetOperation::new(stub)
                        .set_name(name)
                        .with_options(options)
                        .send()
                        .await?;
                    Ok(Operation::new(op))
                }
            };

            let start = move || async {
                let op = self.send().await?;
                Ok(Operation::new(op))
            };

            lro::new_poller(polling_policy, polling_backoff_policy, start, query)
        }

        /// Sets the value of [parent][crate::model::CreateEnvironmentRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [environment][crate::model::CreateEnvironmentRequest::environment].
        pub fn set_environment<T: Into<std::option::Option<crate::model::Environment>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.environment = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for CreateEnvironment {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::get_environment call.
    #[derive(Clone, Debug)]
    pub struct GetEnvironment(RequestBuilder<crate::model::GetEnvironmentRequest>);

    impl GetEnvironment {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetEnvironmentRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Environment> {
            (*self.0.stub)
                .get_environment(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::GetEnvironmentRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetEnvironment {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::list_environments call.
    #[derive(Clone, Debug)]
    pub struct ListEnvironments(RequestBuilder<crate::model::ListEnvironmentsRequest>);

    impl ListEnvironments {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListEnvironmentsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListEnvironmentsResponse> {
            (*self.0.stub)
                .list_environments(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        pub async fn paginator(
            self,
        ) -> gax::paginator::Paginator<crate::model::ListEnvironmentsResponse, gax::error::Error>
        {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [parent][crate::model::ListEnvironmentsRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListEnvironmentsRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListEnvironmentsRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ListEnvironments {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::update_environment call.
    #[derive(Clone, Debug)]
    pub struct UpdateEnvironment(RequestBuilder<crate::model::UpdateEnvironmentRequest>);

    impl UpdateEnvironment {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::UpdateEnvironmentRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        ///
        /// # Long running operations
        ///
        /// This starts, but does not poll, a longrunning operation. More information
        /// on [update_environment][super::super::client::Environments::update_environment].
        pub async fn send(self) -> Result<longrunning::model::Operation> {
            (*self.0.stub)
                .update_environment(self.0.request, self.0.options)
                .await
        }

        /// Creates a [Poller][lro::Poller] to work with `update_environment`.
        pub fn poller(
            self,
        ) -> impl lro::Poller<crate::model::Environment, crate::model::OperationMetadata> {
            type Operation =
                lro::Operation<crate::model::Environment, crate::model::OperationMetadata>;
            let polling_policy = self.0.stub.get_polling_policy(&self.0.options);
            let polling_backoff_policy = self.0.stub.get_polling_backoff_policy(&self.0.options);

            let stub = self.0.stub.clone();
            let mut options = self.0.options.clone();
            options.set_retry_policy(gax::retry_policy::NeverRetry);
            let query = move |name| {
                let stub = stub.clone();
                let options = options.clone();
                async {
                    let op = GetOperation::new(stub)
                        .set_name(name)
                        .with_options(options)
                        .send()
                        .await?;
                    Ok(Operation::new(op))
                }
            };

            let start = move || async {
                let op = self.send().await?;
                Ok(Operation::new(op))
            };

            lro::new_poller(polling_policy, polling_backoff_policy, start, query)
        }

        /// Sets the value of [name][crate::model::UpdateEnvironmentRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [environment][crate::model::UpdateEnvironmentRequest::environment].
        pub fn set_environment<T: Into<std::option::Option<crate::model::Environment>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.environment = v.into();
            self
        }

        /// Sets the value of [update_mask][crate::model::UpdateEnvironmentRequest::update_mask].
        pub fn set_update_mask<T: Into<std::option::Option<wkt::FieldMask>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.update_mask = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for UpdateEnvironment {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::delete_environment call.
    #[derive(Clone, Debug)]
    pub struct DeleteEnvironment(RequestBuilder<crate::model::DeleteEnvironmentRequest>);

    impl DeleteEnvironment {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DeleteEnvironmentRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        ///
        /// # Long running operations
        ///
        /// This starts, but does not poll, a longrunning operation. More information
        /// on [delete_environment][super::super::client::Environments::delete_environment].
        pub async fn send(self) -> Result<longrunning::model::Operation> {
            (*self.0.stub)
                .delete_environment(self.0.request, self.0.options)
                .await
        }

        /// Creates a [Poller][lro::Poller] to work with `delete_environment`.
        pub fn poller(self) -> impl lro::Poller<wkt::Empty, crate::model::OperationMetadata> {
            type Operation = lro::Operation<wkt::Empty, crate::model::OperationMetadata>;
            let polling_policy = self.0.stub.get_polling_policy(&self.0.options);
            let polling_backoff_policy = self.0.stub.get_polling_backoff_policy(&self.0.options);

            let stub = self.0.stub.clone();
            let mut options = self.0.options.clone();
            options.set_retry_policy(gax::retry_policy::NeverRetry);
            let query = move |name| {
                let stub = stub.clone();
                let options = options.clone();
                async {
                    let op = GetOperation::new(stub)
                        .set_name(name)
                        .with_options(options)
                        .send()
                        .await?;
                    Ok(Operation::new(op))
                }
            };

            let start = move || async {
                let op = self.send().await?;
                Ok(Operation::new(op))
            };

            lro::new_poller(polling_policy, polling_backoff_policy, start, query)
        }

        /// Sets the value of [name][crate::model::DeleteEnvironmentRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for DeleteEnvironment {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::execute_airflow_command call.
    #[derive(Clone, Debug)]
    pub struct ExecuteAirflowCommand(RequestBuilder<crate::model::ExecuteAirflowCommandRequest>);

    impl ExecuteAirflowCommand {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ExecuteAirflowCommandRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ExecuteAirflowCommandResponse> {
            (*self.0.stub)
                .execute_airflow_command(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [environment][crate::model::ExecuteAirflowCommandRequest::environment].
        pub fn set_environment<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.environment = v.into();
            self
        }

        /// Sets the value of [command][crate::model::ExecuteAirflowCommandRequest::command].
        pub fn set_command<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.command = v.into();
            self
        }

        /// Sets the value of [subcommand][crate::model::ExecuteAirflowCommandRequest::subcommand].
        pub fn set_subcommand<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.subcommand = v.into();
            self
        }

        /// Sets the value of [parameters][crate::model::ExecuteAirflowCommandRequest::parameters].
        pub fn set_parameters<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.0.request.parameters = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl gax::options::RequestBuilder for ExecuteAirflowCommand {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::stop_airflow_command call.
    #[derive(Clone, Debug)]
    pub struct StopAirflowCommand(RequestBuilder<crate::model::StopAirflowCommandRequest>);

    impl StopAirflowCommand {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::StopAirflowCommandRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::StopAirflowCommandResponse> {
            (*self.0.stub)
                .stop_airflow_command(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [environment][crate::model::StopAirflowCommandRequest::environment].
        pub fn set_environment<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.environment = v.into();
            self
        }

        /// Sets the value of [execution_id][crate::model::StopAirflowCommandRequest::execution_id].
        pub fn set_execution_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.execution_id = v.into();
            self
        }

        /// Sets the value of [pod][crate::model::StopAirflowCommandRequest::pod].
        pub fn set_pod<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.pod = v.into();
            self
        }

        /// Sets the value of [pod_namespace][crate::model::StopAirflowCommandRequest::pod_namespace].
        pub fn set_pod_namespace<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.pod_namespace = v.into();
            self
        }

        /// Sets the value of [force][crate::model::StopAirflowCommandRequest::force].
        pub fn set_force<T: Into<bool>>(mut self, v: T) -> Self {
            self.0.request.force = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for StopAirflowCommand {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::poll_airflow_command call.
    #[derive(Clone, Debug)]
    pub struct PollAirflowCommand(RequestBuilder<crate::model::PollAirflowCommandRequest>);

    impl PollAirflowCommand {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::PollAirflowCommandRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::PollAirflowCommandResponse> {
            (*self.0.stub)
                .poll_airflow_command(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [environment][crate::model::PollAirflowCommandRequest::environment].
        pub fn set_environment<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.environment = v.into();
            self
        }

        /// Sets the value of [execution_id][crate::model::PollAirflowCommandRequest::execution_id].
        pub fn set_execution_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.execution_id = v.into();
            self
        }

        /// Sets the value of [pod][crate::model::PollAirflowCommandRequest::pod].
        pub fn set_pod<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.pod = v.into();
            self
        }

        /// Sets the value of [pod_namespace][crate::model::PollAirflowCommandRequest::pod_namespace].
        pub fn set_pod_namespace<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.pod_namespace = v.into();
            self
        }

        /// Sets the value of [next_line_number][crate::model::PollAirflowCommandRequest::next_line_number].
        pub fn set_next_line_number<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.next_line_number = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for PollAirflowCommand {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::list_workloads call.
    #[derive(Clone, Debug)]
    pub struct ListWorkloads(RequestBuilder<crate::model::ListWorkloadsRequest>);

    impl ListWorkloads {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListWorkloadsRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListWorkloadsResponse> {
            (*self.0.stub)
                .list_workloads(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        pub async fn paginator(
            self,
        ) -> gax::paginator::Paginator<crate::model::ListWorkloadsResponse, gax::error::Error>
        {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [parent][crate::model::ListWorkloadsRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListWorkloadsRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListWorkloadsRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }

        /// Sets the value of [filter][crate::model::ListWorkloadsRequest::filter].
        pub fn set_filter<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.filter = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ListWorkloads {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::check_upgrade call.
    #[derive(Clone, Debug)]
    pub struct CheckUpgrade(RequestBuilder<crate::model::CheckUpgradeRequest>);

    impl CheckUpgrade {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CheckUpgradeRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        ///
        /// # Long running operations
        ///
        /// This starts, but does not poll, a longrunning operation. More information
        /// on [check_upgrade][super::super::client::Environments::check_upgrade].
        pub async fn send(self) -> Result<longrunning::model::Operation> {
            (*self.0.stub)
                .check_upgrade(self.0.request, self.0.options)
                .await
        }

        /// Creates a [Poller][lro::Poller] to work with `check_upgrade`.
        pub fn poller(
            self,
        ) -> impl lro::Poller<crate::model::CheckUpgradeResponse, crate::model::OperationMetadata>
        {
            type Operation =
                lro::Operation<crate::model::CheckUpgradeResponse, crate::model::OperationMetadata>;
            let polling_policy = self.0.stub.get_polling_policy(&self.0.options);
            let polling_backoff_policy = self.0.stub.get_polling_backoff_policy(&self.0.options);

            let stub = self.0.stub.clone();
            let mut options = self.0.options.clone();
            options.set_retry_policy(gax::retry_policy::NeverRetry);
            let query = move |name| {
                let stub = stub.clone();
                let options = options.clone();
                async {
                    let op = GetOperation::new(stub)
                        .set_name(name)
                        .with_options(options)
                        .send()
                        .await?;
                    Ok(Operation::new(op))
                }
            };

            let start = move || async {
                let op = self.send().await?;
                Ok(Operation::new(op))
            };

            lro::new_poller(polling_policy, polling_backoff_policy, start, query)
        }

        /// Sets the value of [environment][crate::model::CheckUpgradeRequest::environment].
        pub fn set_environment<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.environment = v.into();
            self
        }

        /// Sets the value of [image_version][crate::model::CheckUpgradeRequest::image_version].
        pub fn set_image_version<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.image_version = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for CheckUpgrade {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::create_user_workloads_secret call.
    #[derive(Clone, Debug)]
    pub struct CreateUserWorkloadsSecret(
        RequestBuilder<crate::model::CreateUserWorkloadsSecretRequest>,
    );

    impl CreateUserWorkloadsSecret {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CreateUserWorkloadsSecretRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::UserWorkloadsSecret> {
            (*self.0.stub)
                .create_user_workloads_secret(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [parent][crate::model::CreateUserWorkloadsSecretRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [user_workloads_secret][crate::model::CreateUserWorkloadsSecretRequest::user_workloads_secret].
        pub fn set_user_workloads_secret<
            T: Into<std::option::Option<crate::model::UserWorkloadsSecret>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.user_workloads_secret = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for CreateUserWorkloadsSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::get_user_workloads_secret call.
    #[derive(Clone, Debug)]
    pub struct GetUserWorkloadsSecret(RequestBuilder<crate::model::GetUserWorkloadsSecretRequest>);

    impl GetUserWorkloadsSecret {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetUserWorkloadsSecretRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::UserWorkloadsSecret> {
            (*self.0.stub)
                .get_user_workloads_secret(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::GetUserWorkloadsSecretRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetUserWorkloadsSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::list_user_workloads_secrets call.
    #[derive(Clone, Debug)]
    pub struct ListUserWorkloadsSecrets(
        RequestBuilder<crate::model::ListUserWorkloadsSecretsRequest>,
    );

    impl ListUserWorkloadsSecrets {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListUserWorkloadsSecretsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListUserWorkloadsSecretsResponse> {
            (*self.0.stub)
                .list_user_workloads_secrets(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        pub async fn paginator(
            self,
        ) -> gax::paginator::Paginator<
            crate::model::ListUserWorkloadsSecretsResponse,
            gax::error::Error,
        > {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [parent][crate::model::ListUserWorkloadsSecretsRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListUserWorkloadsSecretsRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListUserWorkloadsSecretsRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ListUserWorkloadsSecrets {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::update_user_workloads_secret call.
    #[derive(Clone, Debug)]
    pub struct UpdateUserWorkloadsSecret(
        RequestBuilder<crate::model::UpdateUserWorkloadsSecretRequest>,
    );

    impl UpdateUserWorkloadsSecret {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::UpdateUserWorkloadsSecretRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::UserWorkloadsSecret> {
            (*self.0.stub)
                .update_user_workloads_secret(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [user_workloads_secret][crate::model::UpdateUserWorkloadsSecretRequest::user_workloads_secret].
        pub fn set_user_workloads_secret<
            T: Into<std::option::Option<crate::model::UserWorkloadsSecret>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.user_workloads_secret = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for UpdateUserWorkloadsSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::delete_user_workloads_secret call.
    #[derive(Clone, Debug)]
    pub struct DeleteUserWorkloadsSecret(
        RequestBuilder<crate::model::DeleteUserWorkloadsSecretRequest>,
    );

    impl DeleteUserWorkloadsSecret {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DeleteUserWorkloadsSecretRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<wkt::Empty> {
            (*self.0.stub)
                .delete_user_workloads_secret(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::DeleteUserWorkloadsSecretRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for DeleteUserWorkloadsSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::create_user_workloads_config_map call.
    #[derive(Clone, Debug)]
    pub struct CreateUserWorkloadsConfigMap(
        RequestBuilder<crate::model::CreateUserWorkloadsConfigMapRequest>,
    );

    impl CreateUserWorkloadsConfigMap {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CreateUserWorkloadsConfigMapRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::UserWorkloadsConfigMap> {
            (*self.0.stub)
                .create_user_workloads_config_map(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [parent][crate::model::CreateUserWorkloadsConfigMapRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [user_workloads_config_map][crate::model::CreateUserWorkloadsConfigMapRequest::user_workloads_config_map].
        pub fn set_user_workloads_config_map<
            T: Into<std::option::Option<crate::model::UserWorkloadsConfigMap>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.user_workloads_config_map = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for CreateUserWorkloadsConfigMap {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::get_user_workloads_config_map call.
    #[derive(Clone, Debug)]
    pub struct GetUserWorkloadsConfigMap(
        RequestBuilder<crate::model::GetUserWorkloadsConfigMapRequest>,
    );

    impl GetUserWorkloadsConfigMap {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetUserWorkloadsConfigMapRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::UserWorkloadsConfigMap> {
            (*self.0.stub)
                .get_user_workloads_config_map(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::GetUserWorkloadsConfigMapRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetUserWorkloadsConfigMap {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::list_user_workloads_config_maps call.
    #[derive(Clone, Debug)]
    pub struct ListUserWorkloadsConfigMaps(
        RequestBuilder<crate::model::ListUserWorkloadsConfigMapsRequest>,
    );

    impl ListUserWorkloadsConfigMaps {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListUserWorkloadsConfigMapsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListUserWorkloadsConfigMapsResponse> {
            (*self.0.stub)
                .list_user_workloads_config_maps(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        pub async fn paginator(
            self,
        ) -> gax::paginator::Paginator<
            crate::model::ListUserWorkloadsConfigMapsResponse,
            gax::error::Error,
        > {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [parent][crate::model::ListUserWorkloadsConfigMapsRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListUserWorkloadsConfigMapsRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListUserWorkloadsConfigMapsRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ListUserWorkloadsConfigMaps {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::update_user_workloads_config_map call.
    #[derive(Clone, Debug)]
    pub struct UpdateUserWorkloadsConfigMap(
        RequestBuilder<crate::model::UpdateUserWorkloadsConfigMapRequest>,
    );

    impl UpdateUserWorkloadsConfigMap {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::UpdateUserWorkloadsConfigMapRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::UserWorkloadsConfigMap> {
            (*self.0.stub)
                .update_user_workloads_config_map(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [user_workloads_config_map][crate::model::UpdateUserWorkloadsConfigMapRequest::user_workloads_config_map].
        pub fn set_user_workloads_config_map<
            T: Into<std::option::Option<crate::model::UserWorkloadsConfigMap>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.user_workloads_config_map = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for UpdateUserWorkloadsConfigMap {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::delete_user_workloads_config_map call.
    #[derive(Clone, Debug)]
    pub struct DeleteUserWorkloadsConfigMap(
        RequestBuilder<crate::model::DeleteUserWorkloadsConfigMapRequest>,
    );

    impl DeleteUserWorkloadsConfigMap {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DeleteUserWorkloadsConfigMapRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<wkt::Empty> {
            (*self.0.stub)
                .delete_user_workloads_config_map(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::DeleteUserWorkloadsConfigMapRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for DeleteUserWorkloadsConfigMap {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::save_snapshot call.
    #[derive(Clone, Debug)]
    pub struct SaveSnapshot(RequestBuilder<crate::model::SaveSnapshotRequest>);

    impl SaveSnapshot {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::SaveSnapshotRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        ///
        /// # Long running operations
        ///
        /// This starts, but does not poll, a longrunning operation. More information
        /// on [save_snapshot][super::super::client::Environments::save_snapshot].
        pub async fn send(self) -> Result<longrunning::model::Operation> {
            (*self.0.stub)
                .save_snapshot(self.0.request, self.0.options)
                .await
        }

        /// Creates a [Poller][lro::Poller] to work with `save_snapshot`.
        pub fn poller(
            self,
        ) -> impl lro::Poller<crate::model::SaveSnapshotResponse, crate::model::OperationMetadata>
        {
            type Operation =
                lro::Operation<crate::model::SaveSnapshotResponse, crate::model::OperationMetadata>;
            let polling_policy = self.0.stub.get_polling_policy(&self.0.options);
            let polling_backoff_policy = self.0.stub.get_polling_backoff_policy(&self.0.options);

            let stub = self.0.stub.clone();
            let mut options = self.0.options.clone();
            options.set_retry_policy(gax::retry_policy::NeverRetry);
            let query = move |name| {
                let stub = stub.clone();
                let options = options.clone();
                async {
                    let op = GetOperation::new(stub)
                        .set_name(name)
                        .with_options(options)
                        .send()
                        .await?;
                    Ok(Operation::new(op))
                }
            };

            let start = move || async {
                let op = self.send().await?;
                Ok(Operation::new(op))
            };

            lro::new_poller(polling_policy, polling_backoff_policy, start, query)
        }

        /// Sets the value of [environment][crate::model::SaveSnapshotRequest::environment].
        pub fn set_environment<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.environment = v.into();
            self
        }

        /// Sets the value of [snapshot_location][crate::model::SaveSnapshotRequest::snapshot_location].
        pub fn set_snapshot_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.snapshot_location = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for SaveSnapshot {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::load_snapshot call.
    #[derive(Clone, Debug)]
    pub struct LoadSnapshot(RequestBuilder<crate::model::LoadSnapshotRequest>);

    impl LoadSnapshot {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::LoadSnapshotRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        ///
        /// # Long running operations
        ///
        /// This starts, but does not poll, a longrunning operation. More information
        /// on [load_snapshot][super::super::client::Environments::load_snapshot].
        pub async fn send(self) -> Result<longrunning::model::Operation> {
            (*self.0.stub)
                .load_snapshot(self.0.request, self.0.options)
                .await
        }

        /// Creates a [Poller][lro::Poller] to work with `load_snapshot`.
        pub fn poller(
            self,
        ) -> impl lro::Poller<crate::model::LoadSnapshotResponse, crate::model::OperationMetadata>
        {
            type Operation =
                lro::Operation<crate::model::LoadSnapshotResponse, crate::model::OperationMetadata>;
            let polling_policy = self.0.stub.get_polling_policy(&self.0.options);
            let polling_backoff_policy = self.0.stub.get_polling_backoff_policy(&self.0.options);

            let stub = self.0.stub.clone();
            let mut options = self.0.options.clone();
            options.set_retry_policy(gax::retry_policy::NeverRetry);
            let query = move |name| {
                let stub = stub.clone();
                let options = options.clone();
                async {
                    let op = GetOperation::new(stub)
                        .set_name(name)
                        .with_options(options)
                        .send()
                        .await?;
                    Ok(Operation::new(op))
                }
            };

            let start = move || async {
                let op = self.send().await?;
                Ok(Operation::new(op))
            };

            lro::new_poller(polling_policy, polling_backoff_policy, start, query)
        }

        /// Sets the value of [environment][crate::model::LoadSnapshotRequest::environment].
        pub fn set_environment<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.environment = v.into();
            self
        }

        /// Sets the value of [snapshot_path][crate::model::LoadSnapshotRequest::snapshot_path].
        pub fn set_snapshot_path<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.snapshot_path = v.into();
            self
        }

        /// Sets the value of [skip_pypi_packages_installation][crate::model::LoadSnapshotRequest::skip_pypi_packages_installation].
        pub fn set_skip_pypi_packages_installation<T: Into<bool>>(mut self, v: T) -> Self {
            self.0.request.skip_pypi_packages_installation = v.into();
            self
        }

        /// Sets the value of [skip_environment_variables_setting][crate::model::LoadSnapshotRequest::skip_environment_variables_setting].
        pub fn set_skip_environment_variables_setting<T: Into<bool>>(mut self, v: T) -> Self {
            self.0.request.skip_environment_variables_setting = v.into();
            self
        }

        /// Sets the value of [skip_airflow_overrides_setting][crate::model::LoadSnapshotRequest::skip_airflow_overrides_setting].
        pub fn set_skip_airflow_overrides_setting<T: Into<bool>>(mut self, v: T) -> Self {
            self.0.request.skip_airflow_overrides_setting = v.into();
            self
        }

        /// Sets the value of [skip_gcs_data_copying][crate::model::LoadSnapshotRequest::skip_gcs_data_copying].
        pub fn set_skip_gcs_data_copying<T: Into<bool>>(mut self, v: T) -> Self {
            self.0.request.skip_gcs_data_copying = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for LoadSnapshot {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::database_failover call.
    #[derive(Clone, Debug)]
    pub struct DatabaseFailover(RequestBuilder<crate::model::DatabaseFailoverRequest>);

    impl DatabaseFailover {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DatabaseFailoverRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        ///
        /// # Long running operations
        ///
        /// This starts, but does not poll, a longrunning operation. More information
        /// on [database_failover][super::super::client::Environments::database_failover].
        pub async fn send(self) -> Result<longrunning::model::Operation> {
            (*self.0.stub)
                .database_failover(self.0.request, self.0.options)
                .await
        }

        /// Creates a [Poller][lro::Poller] to work with `database_failover`.
        pub fn poller(
            self,
        ) -> impl lro::Poller<crate::model::DatabaseFailoverResponse, crate::model::OperationMetadata>
        {
            type Operation = lro::Operation<
                crate::model::DatabaseFailoverResponse,
                crate::model::OperationMetadata,
            >;
            let polling_policy = self.0.stub.get_polling_policy(&self.0.options);
            let polling_backoff_policy = self.0.stub.get_polling_backoff_policy(&self.0.options);

            let stub = self.0.stub.clone();
            let mut options = self.0.options.clone();
            options.set_retry_policy(gax::retry_policy::NeverRetry);
            let query = move |name| {
                let stub = stub.clone();
                let options = options.clone();
                async {
                    let op = GetOperation::new(stub)
                        .set_name(name)
                        .with_options(options)
                        .send()
                        .await?;
                    Ok(Operation::new(op))
                }
            };

            let start = move || async {
                let op = self.send().await?;
                Ok(Operation::new(op))
            };

            lro::new_poller(polling_policy, polling_backoff_policy, start, query)
        }

        /// Sets the value of [environment][crate::model::DatabaseFailoverRequest::environment].
        pub fn set_environment<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.environment = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for DatabaseFailover {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::fetch_database_properties call.
    #[derive(Clone, Debug)]
    pub struct FetchDatabaseProperties(
        RequestBuilder<crate::model::FetchDatabasePropertiesRequest>,
    );

    impl FetchDatabaseProperties {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::FetchDatabasePropertiesRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::FetchDatabasePropertiesResponse> {
            (*self.0.stub)
                .fetch_database_properties(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [environment][crate::model::FetchDatabasePropertiesRequest::environment].
        pub fn set_environment<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.environment = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for FetchDatabaseProperties {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::list_operations call.
    #[derive(Clone, Debug)]
    pub struct ListOperations(RequestBuilder<longrunning::model::ListOperationsRequest>);

    impl ListOperations {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<longrunning::model::ListOperationsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<longrunning::model::ListOperationsResponse> {
            (*self.0.stub)
                .list_operations(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        pub async fn paginator(
            self,
        ) -> gax::paginator::Paginator<longrunning::model::ListOperationsResponse, gax::error::Error>
        {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [name][longrunning::model::ListOperationsRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [filter][longrunning::model::ListOperationsRequest::filter].
        pub fn set_filter<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.filter = v.into();
            self
        }

        /// Sets the value of [page_size][longrunning::model::ListOperationsRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][longrunning::model::ListOperationsRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ListOperations {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::get_operation call.
    #[derive(Clone, Debug)]
    pub struct GetOperation(RequestBuilder<longrunning::model::GetOperationRequest>);

    impl GetOperation {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<longrunning::model::GetOperationRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<longrunning::model::Operation> {
            (*self.0.stub)
                .get_operation(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][longrunning::model::GetOperationRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetOperation {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Environments::delete_operation call.
    #[derive(Clone, Debug)]
    pub struct DeleteOperation(RequestBuilder<longrunning::model::DeleteOperationRequest>);

    impl DeleteOperation {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::Environments>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<longrunning::model::DeleteOperationRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<wkt::Empty> {
            (*self.0.stub)
                .delete_operation(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][longrunning::model::DeleteOperationRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for DeleteOperation {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }
}

pub mod image_versions {
    use crate::Result;
    use std::sync::Arc;

    /// Common implementation for [super::super::client::ImageVersions] request builders.
    #[derive(Clone, Debug)]
    pub struct RequestBuilder<R: std::default::Default> {
        stub: Arc<dyn super::super::stubs::dynamic::ImageVersions>,
        request: R,
        options: gax::options::RequestOptions,
    }

    impl<R> RequestBuilder<R>
    where
        R: std::default::Default,
    {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::ImageVersions>) -> Self {
            Self {
                stub,
                request: R::default(),
                options: gax::options::RequestOptions::default(),
            }
        }
    }

    /// The request builder for a ImageVersions::list_image_versions call.
    #[derive(Clone, Debug)]
    pub struct ListImageVersions(RequestBuilder<crate::model::ListImageVersionsRequest>);

    impl ListImageVersions {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::ImageVersions>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListImageVersionsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListImageVersionsResponse> {
            (*self.0.stub)
                .list_image_versions(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        pub async fn paginator(
            self,
        ) -> gax::paginator::Paginator<crate::model::ListImageVersionsResponse, gax::error::Error>
        {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [parent][crate::model::ListImageVersionsRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListImageVersionsRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListImageVersionsRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }

        /// Sets the value of [include_past_releases][crate::model::ListImageVersionsRequest::include_past_releases].
        pub fn set_include_past_releases<T: Into<bool>>(mut self, v: T) -> Self {
            self.0.request.include_past_releases = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ListImageVersions {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ImageVersions::list_operations call.
    #[derive(Clone, Debug)]
    pub struct ListOperations(RequestBuilder<longrunning::model::ListOperationsRequest>);

    impl ListOperations {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::ImageVersions>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<longrunning::model::ListOperationsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<longrunning::model::ListOperationsResponse> {
            (*self.0.stub)
                .list_operations(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        pub async fn paginator(
            self,
        ) -> gax::paginator::Paginator<longrunning::model::ListOperationsResponse, gax::error::Error>
        {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [name][longrunning::model::ListOperationsRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [filter][longrunning::model::ListOperationsRequest::filter].
        pub fn set_filter<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.filter = v.into();
            self
        }

        /// Sets the value of [page_size][longrunning::model::ListOperationsRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][longrunning::model::ListOperationsRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ListOperations {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ImageVersions::get_operation call.
    #[derive(Clone, Debug)]
    pub struct GetOperation(RequestBuilder<longrunning::model::GetOperationRequest>);

    impl GetOperation {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::ImageVersions>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<longrunning::model::GetOperationRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<longrunning::model::Operation> {
            (*self.0.stub)
                .get_operation(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][longrunning::model::GetOperationRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetOperation {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ImageVersions::delete_operation call.
    #[derive(Clone, Debug)]
    pub struct DeleteOperation(RequestBuilder<longrunning::model::DeleteOperationRequest>);

    impl DeleteOperation {
        pub(crate) fn new(stub: Arc<dyn super::super::stubs::dynamic::ImageVersions>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<longrunning::model::DeleteOperationRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<wkt::Empty> {
            (*self.0.stub)
                .delete_operation(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][longrunning::model::DeleteOperationRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for DeleteOperation {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }
}
