// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::Environments].
///
/// Application developers may need to implement this trait to mock
/// `client::Environments`.  In other use-cases, application developers only
/// use `client::Environments` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait Environments: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::Environments::create_environment].
    fn create_environment(
        &self,
        _req: crate::model::CreateEnvironmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Environments::get_environment].
    fn get_environment(
        &self,
        _req: crate::model::GetEnvironmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Environment>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Environment>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Environments::list_environments].
    fn list_environments(
        &self,
        _req: crate::model::ListEnvironmentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListEnvironmentsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListEnvironmentsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Environments::update_environment].
    fn update_environment(
        &self,
        _req: crate::model::UpdateEnvironmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Environments::delete_environment].
    fn delete_environment(
        &self,
        _req: crate::model::DeleteEnvironmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Environments::execute_airflow_command].
    fn execute_airflow_command(
        &self,
        _req: crate::model::ExecuteAirflowCommandRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::ExecuteAirflowCommandResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ExecuteAirflowCommandResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Environments::stop_airflow_command].
    fn stop_airflow_command(
        &self,
        _req: crate::model::StopAirflowCommandRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::StopAirflowCommandResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::StopAirflowCommandResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Environments::poll_airflow_command].
    fn poll_airflow_command(
        &self,
        _req: crate::model::PollAirflowCommandRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::PollAirflowCommandResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::PollAirflowCommandResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Environments::list_workloads].
    fn list_workloads(
        &self,
        _req: crate::model::ListWorkloadsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListWorkloadsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListWorkloadsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Environments::check_upgrade].
    fn check_upgrade(
        &self,
        _req: crate::model::CheckUpgradeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Environments::create_user_workloads_secret].
    fn create_user_workloads_secret(
        &self,
        _req: crate::model::CreateUserWorkloadsSecretRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::UserWorkloadsSecret>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::UserWorkloadsSecret>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Environments::get_user_workloads_secret].
    fn get_user_workloads_secret(
        &self,
        _req: crate::model::GetUserWorkloadsSecretRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::UserWorkloadsSecret>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::UserWorkloadsSecret>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Environments::list_user_workloads_secrets].
    fn list_user_workloads_secrets(
        &self,
        _req: crate::model::ListUserWorkloadsSecretsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::ListUserWorkloadsSecretsResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListUserWorkloadsSecretsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Environments::update_user_workloads_secret].
    fn update_user_workloads_secret(
        &self,
        _req: crate::model::UpdateUserWorkloadsSecretRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::UserWorkloadsSecret>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::UserWorkloadsSecret>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Environments::delete_user_workloads_secret].
    fn delete_user_workloads_secret(
        &self,
        _req: crate::model::DeleteUserWorkloadsSecretRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Environments::create_user_workloads_config_map].
    fn create_user_workloads_config_map(
        &self,
        _req: crate::model::CreateUserWorkloadsConfigMapRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::UserWorkloadsConfigMap>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::UserWorkloadsConfigMap>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Environments::get_user_workloads_config_map].
    fn get_user_workloads_config_map(
        &self,
        _req: crate::model::GetUserWorkloadsConfigMapRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::UserWorkloadsConfigMap>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::UserWorkloadsConfigMap>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Environments::list_user_workloads_config_maps].
    fn list_user_workloads_config_maps(
        &self,
        _req: crate::model::ListUserWorkloadsConfigMapsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::ListUserWorkloadsConfigMapsResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<
                gax::response::Response<crate::model::ListUserWorkloadsConfigMapsResponse>,
            >,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Environments::update_user_workloads_config_map].
    fn update_user_workloads_config_map(
        &self,
        _req: crate::model::UpdateUserWorkloadsConfigMapRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::UserWorkloadsConfigMap>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::UserWorkloadsConfigMap>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Environments::delete_user_workloads_config_map].
    fn delete_user_workloads_config_map(
        &self,
        _req: crate::model::DeleteUserWorkloadsConfigMapRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Environments::save_snapshot].
    fn save_snapshot(
        &self,
        _req: crate::model::SaveSnapshotRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Environments::load_snapshot].
    fn load_snapshot(
        &self,
        _req: crate::model::LoadSnapshotRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Environments::database_failover].
    fn database_failover(
        &self,
        _req: crate::model::DatabaseFailoverRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Environments::fetch_database_properties].
    fn fetch_database_properties(
        &self,
        _req: crate::model::FetchDatabasePropertiesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::FetchDatabasePropertiesResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::FetchDatabasePropertiesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Environments::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Environments::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Environments::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Returns the polling error policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_error_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        std::sync::Arc::new(gax::polling_error_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        std::sync::Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}

/// Defines the trait used to implement [super::client::ImageVersions].
///
/// Application developers may need to implement this trait to mock
/// `client::ImageVersions`.  In other use-cases, application developers only
/// use `client::ImageVersions` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait ImageVersions: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::ImageVersions::list_image_versions].
    fn list_image_versions(
        &self,
        _req: crate::model::ListImageVersionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListImageVersionsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListImageVersionsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::ImageVersions::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::ImageVersions::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::ImageVersions::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }
}
