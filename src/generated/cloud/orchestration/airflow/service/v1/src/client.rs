// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Cloud Composer API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_orchestration_airflow_service_v1::client::Environments;
/// let client = Environments::builder().build().await?;
/// // use `client` to make requests to the {Codec.APITitle}}.
/// # gax::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// Managed Apache Airflow Environments.
///
/// # Configuration
///
/// To configure `Environments` use the `with_*` methods in the type returned
/// by [builder()][Environments::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://composer.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::environments::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::environments::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `Environments` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Environments` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Environments {
    inner: Arc<dyn super::stub::dynamic::Environments>,
}

impl Environments {
    /// Returns a builder for [Environments].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_orchestration_airflow_service_v1::client::Environments;
    /// let client = Environments::builder().build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::environments::ClientBuilder {
        gax::client_builder::internal::new_builder(super::builder::environments::client::Factory)
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::Environments + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    pub(crate) async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> Result<Arc<dyn super::stub::dynamic::Environments>> {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::Environments> {
        super::transport::Environments::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::Environments> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::Environments::new)
    }

    /// Create a new environment.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_environment(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::environments::CreateEnvironment {
        super::builder::environments::CreateEnvironment::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Get an existing environment.
    pub fn get_environment(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::environments::GetEnvironment {
        super::builder::environments::GetEnvironment::new(self.inner.clone()).set_name(name.into())
    }

    /// List environments.
    pub fn list_environments(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::environments::ListEnvironments {
        super::builder::environments::ListEnvironments::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Update an environment.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_environment(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::environments::UpdateEnvironment {
        super::builder::environments::UpdateEnvironment::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Delete an environment.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_environment(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::environments::DeleteEnvironment {
        super::builder::environments::DeleteEnvironment::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Executes Airflow CLI command.
    pub fn execute_airflow_command(
        &self,
        environment: impl Into<std::string::String>,
    ) -> super::builder::environments::ExecuteAirflowCommand {
        super::builder::environments::ExecuteAirflowCommand::new(self.inner.clone())
            .set_environment(environment.into())
    }

    /// Stops Airflow CLI command execution.
    pub fn stop_airflow_command(
        &self,
        environment: impl Into<std::string::String>,
    ) -> super::builder::environments::StopAirflowCommand {
        super::builder::environments::StopAirflowCommand::new(self.inner.clone())
            .set_environment(environment.into())
    }

    /// Polls Airflow CLI command execution and fetches logs.
    pub fn poll_airflow_command(
        &self,
        environment: impl Into<std::string::String>,
    ) -> super::builder::environments::PollAirflowCommand {
        super::builder::environments::PollAirflowCommand::new(self.inner.clone())
            .set_environment(environment.into())
    }

    /// Lists workloads in a Cloud Composer environment. Workload is a unit that
    /// runs a single Composer component.
    ///
    /// This method is supported for Cloud Composer environments in versions
    /// composer-2.*.*-airflow-*.*.* and newer.
    pub fn list_workloads(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::environments::ListWorkloads {
        super::builder::environments::ListWorkloads::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Check if an upgrade operation on the environment will succeed.
    ///
    /// In case of problems detailed info can be found in the returned Operation.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn check_upgrade(
        &self,
        environment: impl Into<std::string::String>,
    ) -> super::builder::environments::CheckUpgrade {
        super::builder::environments::CheckUpgrade::new(self.inner.clone())
            .set_environment(environment.into())
    }

    /// Creates a user workloads Secret.
    ///
    /// This method is supported for Cloud Composer environments in versions
    /// composer-3-airflow-*.*.*-build.* and newer.
    pub fn create_user_workloads_secret(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::environments::CreateUserWorkloadsSecret {
        super::builder::environments::CreateUserWorkloadsSecret::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets an existing user workloads Secret.
    /// Values of the "data" field in the response are cleared.
    ///
    /// This method is supported for Cloud Composer environments in versions
    /// composer-3-airflow-*.*.*-build.* and newer.
    pub fn get_user_workloads_secret(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::environments::GetUserWorkloadsSecret {
        super::builder::environments::GetUserWorkloadsSecret::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists user workloads Secrets.
    ///
    /// This method is supported for Cloud Composer environments in versions
    /// composer-3-airflow-*.*.*-build.* and newer.
    pub fn list_user_workloads_secrets(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::environments::ListUserWorkloadsSecrets {
        super::builder::environments::ListUserWorkloadsSecrets::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a user workloads Secret.
    ///
    /// This method is supported for Cloud Composer environments in versions
    /// composer-3-airflow-*.*.*-build.* and newer.
    pub fn update_user_workloads_secret(
        &self,
        user_workloads_secret: impl Into<crate::model::UserWorkloadsSecret>,
    ) -> super::builder::environments::UpdateUserWorkloadsSecret {
        super::builder::environments::UpdateUserWorkloadsSecret::new(self.inner.clone())
            .set_user_workloads_secret(user_workloads_secret.into())
    }

    /// Deletes a user workloads Secret.
    ///
    /// This method is supported for Cloud Composer environments in versions
    /// composer-3-airflow-*.*.*-build.* and newer.
    pub fn delete_user_workloads_secret(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::environments::DeleteUserWorkloadsSecret {
        super::builder::environments::DeleteUserWorkloadsSecret::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a user workloads ConfigMap.
    ///
    /// This method is supported for Cloud Composer environments in versions
    /// composer-3-airflow-*.*.*-build.* and newer.
    pub fn create_user_workloads_config_map(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::environments::CreateUserWorkloadsConfigMap {
        super::builder::environments::CreateUserWorkloadsConfigMap::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets an existing user workloads ConfigMap.
    ///
    /// This method is supported for Cloud Composer environments in versions
    /// composer-3-airflow-*.*.*-build.* and newer.
    pub fn get_user_workloads_config_map(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::environments::GetUserWorkloadsConfigMap {
        super::builder::environments::GetUserWorkloadsConfigMap::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists user workloads ConfigMaps.
    ///
    /// This method is supported for Cloud Composer environments in versions
    /// composer-3-airflow-*.*.*-build.* and newer.
    pub fn list_user_workloads_config_maps(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::environments::ListUserWorkloadsConfigMaps {
        super::builder::environments::ListUserWorkloadsConfigMaps::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a user workloads ConfigMap.
    ///
    /// This method is supported for Cloud Composer environments in versions
    /// composer-3-airflow-*.*.*-build.* and newer.
    pub fn update_user_workloads_config_map(
        &self,
        user_workloads_config_map: impl Into<crate::model::UserWorkloadsConfigMap>,
    ) -> super::builder::environments::UpdateUserWorkloadsConfigMap {
        super::builder::environments::UpdateUserWorkloadsConfigMap::new(self.inner.clone())
            .set_user_workloads_config_map(user_workloads_config_map.into())
    }

    /// Deletes a user workloads ConfigMap.
    ///
    /// This method is supported for Cloud Composer environments in versions
    /// composer-3-airflow-*.*.*-build.* and newer.
    pub fn delete_user_workloads_config_map(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::environments::DeleteUserWorkloadsConfigMap {
        super::builder::environments::DeleteUserWorkloadsConfigMap::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a snapshots of a Cloud Composer environment.
    ///
    /// As a result of this operation, snapshot of environment's state is stored
    /// in a location specified in the SaveSnapshotRequest.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn save_snapshot(
        &self,
        environment: impl Into<std::string::String>,
    ) -> super::builder::environments::SaveSnapshot {
        super::builder::environments::SaveSnapshot::new(self.inner.clone())
            .set_environment(environment.into())
    }

    /// Loads a snapshot of a Cloud Composer environment.
    ///
    /// As a result of this operation, a snapshot of environment's specified in
    /// LoadSnapshotRequest is loaded into the environment.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn load_snapshot(
        &self,
        environment: impl Into<std::string::String>,
    ) -> super::builder::environments::LoadSnapshot {
        super::builder::environments::LoadSnapshot::new(self.inner.clone())
            .set_environment(environment.into())
    }

    /// Triggers database failover (only for highly resilient environments).
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn database_failover(
        &self,
        environment: impl Into<std::string::String>,
    ) -> super::builder::environments::DatabaseFailover {
        super::builder::environments::DatabaseFailover::new(self.inner.clone())
            .set_environment(environment.into())
    }

    /// Fetches database properties.
    pub fn fetch_database_properties(
        &self,
        environment: impl Into<std::string::String>,
    ) -> super::builder::environments::FetchDatabaseProperties {
        super::builder::environments::FetchDatabaseProperties::new(self.inner.clone())
            .set_environment(environment.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::environments::ListOperations {
        super::builder::environments::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::environments::GetOperation {
        super::builder::environments::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::environments::DeleteOperation {
        super::builder::environments::DeleteOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Cloud Composer API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_orchestration_airflow_service_v1::client::ImageVersions;
/// let client = ImageVersions::builder().build().await?;
/// // use `client` to make requests to the {Codec.APITitle}}.
/// # gax::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// Readonly service to query available ImageVersions.
///
/// # Configuration
///
/// To configure `ImageVersions` use the `with_*` methods in the type returned
/// by [builder()][ImageVersions::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://composer.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::image_versions::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::image_versions::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `ImageVersions` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ImageVersions` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct ImageVersions {
    inner: Arc<dyn super::stub::dynamic::ImageVersions>,
}

impl ImageVersions {
    /// Returns a builder for [ImageVersions].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_orchestration_airflow_service_v1::client::ImageVersions;
    /// let client = ImageVersions::builder().build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::image_versions::ClientBuilder {
        gax::client_builder::internal::new_builder(super::builder::image_versions::client::Factory)
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::ImageVersions + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    pub(crate) async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> Result<Arc<dyn super::stub::dynamic::ImageVersions>> {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::ImageVersions> {
        super::transport::ImageVersions::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::ImageVersions> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::ImageVersions::new)
    }

    /// List ImageVersions for provided location.
    pub fn list_image_versions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::image_versions::ListImageVersions {
        super::builder::image_versions::ListImageVersions::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::image_versions::ListOperations {
        super::builder::image_versions::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::image_versions::GetOperation {
        super::builder::image_versions::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::image_versions::DeleteOperation {
        super::builder::image_versions::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
