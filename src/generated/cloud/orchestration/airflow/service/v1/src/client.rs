// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Cloud Composer API.
///
/// # Service Description
///
/// Managed Apache Airflow Environments.
///
/// # Configuration
///
/// `Environments` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Environments` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Environments` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Environments {
    inner: Arc<dyn crate::stubs::dynamic::Environments>,
}

impl Environments {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::Environments + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::Environments>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Environments> {
        crate::transport::Environments::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Environments> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::Environments::new)
    }

    /// Create a new environment.
    ///
    /// # Long running operations
    ///
    /// Calling [poller()] on the resulting builder returns an implementation of
    /// the [lro::Poller] trait. You need to call `Poller::poll` on this
    /// `Poller` at least once to start the LRO. You may periodically poll this
    /// object to find the status of the operation. The poller automatically
    /// extract the final response value and any intermediate metadata values.
    ///
    /// Calling [send()] on the resulting builder starts a LRO (long-Running
    /// Operation). LROs run in the background, and the application may poll
    /// them periodically to find out if they have succeeded, or failed. See
    /// below for instructions on how to manually use the resulting [Operation].
    /// We recommend `poller()` in favor of `send()`.
    ///
    /// ## Polling until completion
    ///
    /// Applications that do not care about intermediate results in a
    /// long-running operation may use the [until_done()] function:
    ///
    /// ```
    /// # use gax::Result;
    /// # use google_cloud_orchestration_airflow_service_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::Environment, model::OperationMetadata>
    /// ) -> Result<model::Environment> {
    ///     poller.until_done().await
    /// }
    /// ```
    ///
    /// This will wait until the LRO completes (successfully or with an error).
    /// Applications can set the [PollingPolicy] and [PollingBackoffPolicy] to
    /// control for how long the function runs.
    ///
    /// ## Polling with detailed metadata updates
    ///
    /// Using the result of [poller()] follows a common pattern:
    ///
    /// ```
    /// # use gax::Result;
    /// # use google_cloud_orchestration_airflow_service_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::Environment, model::OperationMetadata>
    /// ) -> Result<model::Environment> {
    ///     while let Some(p) = poller.poll().await {
    ///         match p {
    ///             lro::PollingResult::Completed(r) => { return r; },
    ///             lro::PollingResult::InProgress(m) => { println!("in progress {m:?}"); },
    ///             lro::PollingResult::PollingError(_) => { /* ignored */ },
    ///         }
    ///         tokio::time::sleep(std::time::Duration::from_secs(1)).await;
    ///     }
    ///     Err(gax::error::Error::other("LRO never completed"))
    /// }
    /// ```
    ///
    /// ## Manually polling long-running operations
    ///
    /// If you call [send()], you need to examine the contents of the resulting
    /// [Operation][longrunning::model::Operation] to determine the result of
    /// the operation.
    ///
    /// If the `done` field is `true`, the operation has completed. The `result`
    /// field contains the final response, this will be a [crate::model::Environment] (as
    /// an [Any]), or the error (as a `Status`).
    ///
    /// If the `done` field is `false`, the operation has not completed.  The
    /// operation may also include a [crate::model::OperationMetadata] value in the `metadata`
    /// field. This value would also be encoded as an [Any]. The metadata may
    /// include information about how much progress the LRO has made.
    ///
    /// To find out if the operation has completed, use the [get_operation]
    /// method and repeat the steps outlined above.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::environments::CreateEnvironment::send
    /// [poller()]: crate::builders::environments::CreateEnvironment::poller
    /// [until_done()]: lro::Poller::until_done
    /// [PollingPolicy]: gax::polling_policy::PollingPolicy
    /// [PollingBackoffPolicy]: gax::polling_backoff_policy::PollingBackoffPolicy
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    /// [Any]: wkt::Any
    pub fn create_environment(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::environments::CreateEnvironment {
        crate::builders::environments::CreateEnvironment::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Get an existing environment.
    pub fn get_environment(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::environments::GetEnvironment {
        crate::builders::environments::GetEnvironment::new(self.inner.clone()).set_name(name.into())
    }

    /// List environments.
    pub fn list_environments(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::environments::ListEnvironments {
        crate::builders::environments::ListEnvironments::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Update an environment.
    ///
    /// # Long running operations
    ///
    /// Calling [poller()] on the resulting builder returns an implementation of
    /// the [lro::Poller] trait. You need to call `Poller::poll` on this
    /// `Poller` at least once to start the LRO. You may periodically poll this
    /// object to find the status of the operation. The poller automatically
    /// extract the final response value and any intermediate metadata values.
    ///
    /// Calling [send()] on the resulting builder starts a LRO (long-Running
    /// Operation). LROs run in the background, and the application may poll
    /// them periodically to find out if they have succeeded, or failed. See
    /// below for instructions on how to manually use the resulting [Operation].
    /// We recommend `poller()` in favor of `send()`.
    ///
    /// ## Polling until completion
    ///
    /// Applications that do not care about intermediate results in a
    /// long-running operation may use the [until_done()] function:
    ///
    /// ```
    /// # use gax::Result;
    /// # use google_cloud_orchestration_airflow_service_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::Environment, model::OperationMetadata>
    /// ) -> Result<model::Environment> {
    ///     poller.until_done().await
    /// }
    /// ```
    ///
    /// This will wait until the LRO completes (successfully or with an error).
    /// Applications can set the [PollingPolicy] and [PollingBackoffPolicy] to
    /// control for how long the function runs.
    ///
    /// ## Polling with detailed metadata updates
    ///
    /// Using the result of [poller()] follows a common pattern:
    ///
    /// ```
    /// # use gax::Result;
    /// # use google_cloud_orchestration_airflow_service_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::Environment, model::OperationMetadata>
    /// ) -> Result<model::Environment> {
    ///     while let Some(p) = poller.poll().await {
    ///         match p {
    ///             lro::PollingResult::Completed(r) => { return r; },
    ///             lro::PollingResult::InProgress(m) => { println!("in progress {m:?}"); },
    ///             lro::PollingResult::PollingError(_) => { /* ignored */ },
    ///         }
    ///         tokio::time::sleep(std::time::Duration::from_secs(1)).await;
    ///     }
    ///     Err(gax::error::Error::other("LRO never completed"))
    /// }
    /// ```
    ///
    /// ## Manually polling long-running operations
    ///
    /// If you call [send()], you need to examine the contents of the resulting
    /// [Operation][longrunning::model::Operation] to determine the result of
    /// the operation.
    ///
    /// If the `done` field is `true`, the operation has completed. The `result`
    /// field contains the final response, this will be a [crate::model::Environment] (as
    /// an [Any]), or the error (as a `Status`).
    ///
    /// If the `done` field is `false`, the operation has not completed.  The
    /// operation may also include a [crate::model::OperationMetadata] value in the `metadata`
    /// field. This value would also be encoded as an [Any]. The metadata may
    /// include information about how much progress the LRO has made.
    ///
    /// To find out if the operation has completed, use the [get_operation]
    /// method and repeat the steps outlined above.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::environments::UpdateEnvironment::send
    /// [poller()]: crate::builders::environments::UpdateEnvironment::poller
    /// [until_done()]: lro::Poller::until_done
    /// [PollingPolicy]: gax::polling_policy::PollingPolicy
    /// [PollingBackoffPolicy]: gax::polling_backoff_policy::PollingBackoffPolicy
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    /// [Any]: wkt::Any
    pub fn update_environment(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::environments::UpdateEnvironment {
        crate::builders::environments::UpdateEnvironment::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Delete an environment.
    ///
    /// # Long running operations
    ///
    /// Calling [poller()] on the resulting builder returns an implementation of
    /// the [lro::Poller] trait. You need to call `Poller::poll` on this
    /// `Poller` at least once to start the LRO. You may periodically poll this
    /// object to find the status of the operation. The poller automatically
    /// extract the final response value and any intermediate metadata values.
    ///
    /// Calling [send()] on the resulting builder starts a LRO (long-Running
    /// Operation). LROs run in the background, and the application may poll
    /// them periodically to find out if they have succeeded, or failed. See
    /// below for instructions on how to manually use the resulting [Operation].
    /// We recommend `poller()` in favor of `send()`.
    ///
    /// ## Polling until completion
    ///
    /// Applications that do not care about intermediate results in a
    /// long-running operation may use the [until_done()] function:
    ///
    /// ```
    /// # use gax::Result;
    /// # use google_cloud_orchestration_airflow_service_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<wkt::Empty, model::OperationMetadata>
    /// ) -> Result<wkt::Empty> {
    ///     poller.until_done().await
    /// }
    /// ```
    ///
    /// This will wait until the LRO completes (successfully or with an error).
    /// Applications can set the [PollingPolicy] and [PollingBackoffPolicy] to
    /// control for how long the function runs.
    ///
    /// ## Polling with detailed metadata updates
    ///
    /// Using the result of [poller()] follows a common pattern:
    ///
    /// ```
    /// # use gax::Result;
    /// # use google_cloud_orchestration_airflow_service_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<wkt::Empty, model::OperationMetadata>
    /// ) -> Result<wkt::Empty> {
    ///     while let Some(p) = poller.poll().await {
    ///         match p {
    ///             lro::PollingResult::Completed(r) => { return r; },
    ///             lro::PollingResult::InProgress(m) => { println!("in progress {m:?}"); },
    ///             lro::PollingResult::PollingError(_) => { /* ignored */ },
    ///         }
    ///         tokio::time::sleep(std::time::Duration::from_secs(1)).await;
    ///     }
    ///     Err(gax::error::Error::other("LRO never completed"))
    /// }
    /// ```
    ///
    /// ## Manually polling long-running operations
    ///
    /// If you call [send()], you need to examine the contents of the resulting
    /// [Operation][longrunning::model::Operation] to determine the result of
    /// the operation.
    ///
    /// If the `done` field is `true`, the operation has completed. The `result`
    /// field contains the final response, this will be a [wkt::Empty] (as
    /// an [Any]), or the error (as a `Status`).
    ///
    /// If the `done` field is `false`, the operation has not completed.  The
    /// operation may also include a [crate::model::OperationMetadata] value in the `metadata`
    /// field. This value would also be encoded as an [Any]. The metadata may
    /// include information about how much progress the LRO has made.
    ///
    /// To find out if the operation has completed, use the [get_operation]
    /// method and repeat the steps outlined above.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::environments::DeleteEnvironment::send
    /// [poller()]: crate::builders::environments::DeleteEnvironment::poller
    /// [until_done()]: lro::Poller::until_done
    /// [PollingPolicy]: gax::polling_policy::PollingPolicy
    /// [PollingBackoffPolicy]: gax::polling_backoff_policy::PollingBackoffPolicy
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    /// [Any]: wkt::Any
    pub fn delete_environment(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::environments::DeleteEnvironment {
        crate::builders::environments::DeleteEnvironment::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Executes Airflow CLI command.
    pub fn execute_airflow_command(
        &self,
        environment: impl Into<std::string::String>,
    ) -> crate::builders::environments::ExecuteAirflowCommand {
        crate::builders::environments::ExecuteAirflowCommand::new(self.inner.clone())
            .set_environment(environment.into())
    }

    /// Stops Airflow CLI command execution.
    pub fn stop_airflow_command(
        &self,
        environment: impl Into<std::string::String>,
    ) -> crate::builders::environments::StopAirflowCommand {
        crate::builders::environments::StopAirflowCommand::new(self.inner.clone())
            .set_environment(environment.into())
    }

    /// Polls Airflow CLI command execution and fetches logs.
    pub fn poll_airflow_command(
        &self,
        environment: impl Into<std::string::String>,
    ) -> crate::builders::environments::PollAirflowCommand {
        crate::builders::environments::PollAirflowCommand::new(self.inner.clone())
            .set_environment(environment.into())
    }

    /// Lists workloads in a Cloud Composer environment. Workload is a unit that
    /// runs a single Composer component.
    ///
    /// This method is supported for Cloud Composer environments in versions
    /// composer-2.*.*-airflow-*.*.* and newer.
    pub fn list_workloads(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::environments::ListWorkloads {
        crate::builders::environments::ListWorkloads::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Check if an upgrade operation on the environment will succeed.
    ///
    /// In case of problems detailed info can be found in the returned Operation.
    ///
    /// # Long running operations
    ///
    /// Calling [poller()] on the resulting builder returns an implementation of
    /// the [lro::Poller] trait. You need to call `Poller::poll` on this
    /// `Poller` at least once to start the LRO. You may periodically poll this
    /// object to find the status of the operation. The poller automatically
    /// extract the final response value and any intermediate metadata values.
    ///
    /// Calling [send()] on the resulting builder starts a LRO (long-Running
    /// Operation). LROs run in the background, and the application may poll
    /// them periodically to find out if they have succeeded, or failed. See
    /// below for instructions on how to manually use the resulting [Operation].
    /// We recommend `poller()` in favor of `send()`.
    ///
    /// ## Polling until completion
    ///
    /// Applications that do not care about intermediate results in a
    /// long-running operation may use the [until_done()] function:
    ///
    /// ```
    /// # use gax::Result;
    /// # use google_cloud_orchestration_airflow_service_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::CheckUpgradeResponse, model::OperationMetadata>
    /// ) -> Result<model::CheckUpgradeResponse> {
    ///     poller.until_done().await
    /// }
    /// ```
    ///
    /// This will wait until the LRO completes (successfully or with an error).
    /// Applications can set the [PollingPolicy] and [PollingBackoffPolicy] to
    /// control for how long the function runs.
    ///
    /// ## Polling with detailed metadata updates
    ///
    /// Using the result of [poller()] follows a common pattern:
    ///
    /// ```
    /// # use gax::Result;
    /// # use google_cloud_orchestration_airflow_service_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::CheckUpgradeResponse, model::OperationMetadata>
    /// ) -> Result<model::CheckUpgradeResponse> {
    ///     while let Some(p) = poller.poll().await {
    ///         match p {
    ///             lro::PollingResult::Completed(r) => { return r; },
    ///             lro::PollingResult::InProgress(m) => { println!("in progress {m:?}"); },
    ///             lro::PollingResult::PollingError(_) => { /* ignored */ },
    ///         }
    ///         tokio::time::sleep(std::time::Duration::from_secs(1)).await;
    ///     }
    ///     Err(gax::error::Error::other("LRO never completed"))
    /// }
    /// ```
    ///
    /// ## Manually polling long-running operations
    ///
    /// If you call [send()], you need to examine the contents of the resulting
    /// [Operation][longrunning::model::Operation] to determine the result of
    /// the operation.
    ///
    /// If the `done` field is `true`, the operation has completed. The `result`
    /// field contains the final response, this will be a [crate::model::CheckUpgradeResponse] (as
    /// an [Any]), or the error (as a `Status`).
    ///
    /// If the `done` field is `false`, the operation has not completed.  The
    /// operation may also include a [crate::model::OperationMetadata] value in the `metadata`
    /// field. This value would also be encoded as an [Any]. The metadata may
    /// include information about how much progress the LRO has made.
    ///
    /// To find out if the operation has completed, use the [get_operation]
    /// method and repeat the steps outlined above.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::environments::CheckUpgrade::send
    /// [poller()]: crate::builders::environments::CheckUpgrade::poller
    /// [until_done()]: lro::Poller::until_done
    /// [PollingPolicy]: gax::polling_policy::PollingPolicy
    /// [PollingBackoffPolicy]: gax::polling_backoff_policy::PollingBackoffPolicy
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    /// [Any]: wkt::Any
    pub fn check_upgrade(
        &self,
        environment: impl Into<std::string::String>,
    ) -> crate::builders::environments::CheckUpgrade {
        crate::builders::environments::CheckUpgrade::new(self.inner.clone())
            .set_environment(environment.into())
    }

    /// Creates a user workloads Secret.
    ///
    /// This method is supported for Cloud Composer environments in versions
    /// composer-3.*.*-airflow-*.*.* and newer.
    pub fn create_user_workloads_secret(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::environments::CreateUserWorkloadsSecret {
        crate::builders::environments::CreateUserWorkloadsSecret::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets an existing user workloads Secret.
    /// Values of the "data" field in the response are cleared.
    ///
    /// This method is supported for Cloud Composer environments in versions
    /// composer-3.*.*-airflow-*.*.* and newer.
    pub fn get_user_workloads_secret(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::environments::GetUserWorkloadsSecret {
        crate::builders::environments::GetUserWorkloadsSecret::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists user workloads Secrets.
    ///
    /// This method is supported for Cloud Composer environments in versions
    /// composer-3.*.*-airflow-*.*.* and newer.
    pub fn list_user_workloads_secrets(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::environments::ListUserWorkloadsSecrets {
        crate::builders::environments::ListUserWorkloadsSecrets::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a user workloads Secret.
    ///
    /// This method is supported for Cloud Composer environments in versions
    /// composer-3.*.*-airflow-*.*.* and newer.
    pub fn update_user_workloads_secret(
        &self,
        user_workloads_secret: impl Into<crate::model::UserWorkloadsSecret>,
    ) -> crate::builders::environments::UpdateUserWorkloadsSecret {
        crate::builders::environments::UpdateUserWorkloadsSecret::new(self.inner.clone())
            .set_user_workloads_secret(user_workloads_secret.into())
    }

    /// Deletes a user workloads Secret.
    ///
    /// This method is supported for Cloud Composer environments in versions
    /// composer-3.*.*-airflow-*.*.* and newer.
    pub fn delete_user_workloads_secret(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::environments::DeleteUserWorkloadsSecret {
        crate::builders::environments::DeleteUserWorkloadsSecret::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a user workloads ConfigMap.
    ///
    /// This method is supported for Cloud Composer environments in versions
    /// composer-3.*.*-airflow-*.*.* and newer.
    pub fn create_user_workloads_config_map(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::environments::CreateUserWorkloadsConfigMap {
        crate::builders::environments::CreateUserWorkloadsConfigMap::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets an existing user workloads ConfigMap.
    ///
    /// This method is supported for Cloud Composer environments in versions
    /// composer-3.*.*-airflow-*.*.* and newer.
    pub fn get_user_workloads_config_map(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::environments::GetUserWorkloadsConfigMap {
        crate::builders::environments::GetUserWorkloadsConfigMap::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists user workloads ConfigMaps.
    ///
    /// This method is supported for Cloud Composer environments in versions
    /// composer-3.*.*-airflow-*.*.* and newer.
    pub fn list_user_workloads_config_maps(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::environments::ListUserWorkloadsConfigMaps {
        crate::builders::environments::ListUserWorkloadsConfigMaps::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a user workloads ConfigMap.
    ///
    /// This method is supported for Cloud Composer environments in versions
    /// composer-3.*.*-airflow-*.*.* and newer.
    pub fn update_user_workloads_config_map(
        &self,
        user_workloads_config_map: impl Into<crate::model::UserWorkloadsConfigMap>,
    ) -> crate::builders::environments::UpdateUserWorkloadsConfigMap {
        crate::builders::environments::UpdateUserWorkloadsConfigMap::new(self.inner.clone())
            .set_user_workloads_config_map(user_workloads_config_map.into())
    }

    /// Deletes a user workloads ConfigMap.
    ///
    /// This method is supported for Cloud Composer environments in versions
    /// composer-3.*.*-airflow-*.*.* and newer.
    pub fn delete_user_workloads_config_map(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::environments::DeleteUserWorkloadsConfigMap {
        crate::builders::environments::DeleteUserWorkloadsConfigMap::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a snapshots of a Cloud Composer environment.
    ///
    /// As a result of this operation, snapshot of environment's state is stored
    /// in a location specified in the SaveSnapshotRequest.
    ///
    /// # Long running operations
    ///
    /// Calling [poller()] on the resulting builder returns an implementation of
    /// the [lro::Poller] trait. You need to call `Poller::poll` on this
    /// `Poller` at least once to start the LRO. You may periodically poll this
    /// object to find the status of the operation. The poller automatically
    /// extract the final response value and any intermediate metadata values.
    ///
    /// Calling [send()] on the resulting builder starts a LRO (long-Running
    /// Operation). LROs run in the background, and the application may poll
    /// them periodically to find out if they have succeeded, or failed. See
    /// below for instructions on how to manually use the resulting [Operation].
    /// We recommend `poller()` in favor of `send()`.
    ///
    /// ## Polling until completion
    ///
    /// Applications that do not care about intermediate results in a
    /// long-running operation may use the [until_done()] function:
    ///
    /// ```
    /// # use gax::Result;
    /// # use google_cloud_orchestration_airflow_service_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::SaveSnapshotResponse, model::OperationMetadata>
    /// ) -> Result<model::SaveSnapshotResponse> {
    ///     poller.until_done().await
    /// }
    /// ```
    ///
    /// This will wait until the LRO completes (successfully or with an error).
    /// Applications can set the [PollingPolicy] and [PollingBackoffPolicy] to
    /// control for how long the function runs.
    ///
    /// ## Polling with detailed metadata updates
    ///
    /// Using the result of [poller()] follows a common pattern:
    ///
    /// ```
    /// # use gax::Result;
    /// # use google_cloud_orchestration_airflow_service_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::SaveSnapshotResponse, model::OperationMetadata>
    /// ) -> Result<model::SaveSnapshotResponse> {
    ///     while let Some(p) = poller.poll().await {
    ///         match p {
    ///             lro::PollingResult::Completed(r) => { return r; },
    ///             lro::PollingResult::InProgress(m) => { println!("in progress {m:?}"); },
    ///             lro::PollingResult::PollingError(_) => { /* ignored */ },
    ///         }
    ///         tokio::time::sleep(std::time::Duration::from_secs(1)).await;
    ///     }
    ///     Err(gax::error::Error::other("LRO never completed"))
    /// }
    /// ```
    ///
    /// ## Manually polling long-running operations
    ///
    /// If you call [send()], you need to examine the contents of the resulting
    /// [Operation][longrunning::model::Operation] to determine the result of
    /// the operation.
    ///
    /// If the `done` field is `true`, the operation has completed. The `result`
    /// field contains the final response, this will be a [crate::model::SaveSnapshotResponse] (as
    /// an [Any]), or the error (as a `Status`).
    ///
    /// If the `done` field is `false`, the operation has not completed.  The
    /// operation may also include a [crate::model::OperationMetadata] value in the `metadata`
    /// field. This value would also be encoded as an [Any]. The metadata may
    /// include information about how much progress the LRO has made.
    ///
    /// To find out if the operation has completed, use the [get_operation]
    /// method and repeat the steps outlined above.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::environments::SaveSnapshot::send
    /// [poller()]: crate::builders::environments::SaveSnapshot::poller
    /// [until_done()]: lro::Poller::until_done
    /// [PollingPolicy]: gax::polling_policy::PollingPolicy
    /// [PollingBackoffPolicy]: gax::polling_backoff_policy::PollingBackoffPolicy
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    /// [Any]: wkt::Any
    pub fn save_snapshot(
        &self,
        environment: impl Into<std::string::String>,
    ) -> crate::builders::environments::SaveSnapshot {
        crate::builders::environments::SaveSnapshot::new(self.inner.clone())
            .set_environment(environment.into())
    }

    /// Loads a snapshot of a Cloud Composer environment.
    ///
    /// As a result of this operation, a snapshot of environment's specified in
    /// LoadSnapshotRequest is loaded into the environment.
    ///
    /// # Long running operations
    ///
    /// Calling [poller()] on the resulting builder returns an implementation of
    /// the [lro::Poller] trait. You need to call `Poller::poll` on this
    /// `Poller` at least once to start the LRO. You may periodically poll this
    /// object to find the status of the operation. The poller automatically
    /// extract the final response value and any intermediate metadata values.
    ///
    /// Calling [send()] on the resulting builder starts a LRO (long-Running
    /// Operation). LROs run in the background, and the application may poll
    /// them periodically to find out if they have succeeded, or failed. See
    /// below for instructions on how to manually use the resulting [Operation].
    /// We recommend `poller()` in favor of `send()`.
    ///
    /// ## Polling until completion
    ///
    /// Applications that do not care about intermediate results in a
    /// long-running operation may use the [until_done()] function:
    ///
    /// ```
    /// # use gax::Result;
    /// # use google_cloud_orchestration_airflow_service_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::LoadSnapshotResponse, model::OperationMetadata>
    /// ) -> Result<model::LoadSnapshotResponse> {
    ///     poller.until_done().await
    /// }
    /// ```
    ///
    /// This will wait until the LRO completes (successfully or with an error).
    /// Applications can set the [PollingPolicy] and [PollingBackoffPolicy] to
    /// control for how long the function runs.
    ///
    /// ## Polling with detailed metadata updates
    ///
    /// Using the result of [poller()] follows a common pattern:
    ///
    /// ```
    /// # use gax::Result;
    /// # use google_cloud_orchestration_airflow_service_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::LoadSnapshotResponse, model::OperationMetadata>
    /// ) -> Result<model::LoadSnapshotResponse> {
    ///     while let Some(p) = poller.poll().await {
    ///         match p {
    ///             lro::PollingResult::Completed(r) => { return r; },
    ///             lro::PollingResult::InProgress(m) => { println!("in progress {m:?}"); },
    ///             lro::PollingResult::PollingError(_) => { /* ignored */ },
    ///         }
    ///         tokio::time::sleep(std::time::Duration::from_secs(1)).await;
    ///     }
    ///     Err(gax::error::Error::other("LRO never completed"))
    /// }
    /// ```
    ///
    /// ## Manually polling long-running operations
    ///
    /// If you call [send()], you need to examine the contents of the resulting
    /// [Operation][longrunning::model::Operation] to determine the result of
    /// the operation.
    ///
    /// If the `done` field is `true`, the operation has completed. The `result`
    /// field contains the final response, this will be a [crate::model::LoadSnapshotResponse] (as
    /// an [Any]), or the error (as a `Status`).
    ///
    /// If the `done` field is `false`, the operation has not completed.  The
    /// operation may also include a [crate::model::OperationMetadata] value in the `metadata`
    /// field. This value would also be encoded as an [Any]. The metadata may
    /// include information about how much progress the LRO has made.
    ///
    /// To find out if the operation has completed, use the [get_operation]
    /// method and repeat the steps outlined above.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::environments::LoadSnapshot::send
    /// [poller()]: crate::builders::environments::LoadSnapshot::poller
    /// [until_done()]: lro::Poller::until_done
    /// [PollingPolicy]: gax::polling_policy::PollingPolicy
    /// [PollingBackoffPolicy]: gax::polling_backoff_policy::PollingBackoffPolicy
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    /// [Any]: wkt::Any
    pub fn load_snapshot(
        &self,
        environment: impl Into<std::string::String>,
    ) -> crate::builders::environments::LoadSnapshot {
        crate::builders::environments::LoadSnapshot::new(self.inner.clone())
            .set_environment(environment.into())
    }

    /// Triggers database failover (only for highly resilient environments).
    ///
    /// # Long running operations
    ///
    /// Calling [poller()] on the resulting builder returns an implementation of
    /// the [lro::Poller] trait. You need to call `Poller::poll` on this
    /// `Poller` at least once to start the LRO. You may periodically poll this
    /// object to find the status of the operation. The poller automatically
    /// extract the final response value and any intermediate metadata values.
    ///
    /// Calling [send()] on the resulting builder starts a LRO (long-Running
    /// Operation). LROs run in the background, and the application may poll
    /// them periodically to find out if they have succeeded, or failed. See
    /// below for instructions on how to manually use the resulting [Operation].
    /// We recommend `poller()` in favor of `send()`.
    ///
    /// ## Polling until completion
    ///
    /// Applications that do not care about intermediate results in a
    /// long-running operation may use the [until_done()] function:
    ///
    /// ```
    /// # use gax::Result;
    /// # use google_cloud_orchestration_airflow_service_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::DatabaseFailoverResponse, model::OperationMetadata>
    /// ) -> Result<model::DatabaseFailoverResponse> {
    ///     poller.until_done().await
    /// }
    /// ```
    ///
    /// This will wait until the LRO completes (successfully or with an error).
    /// Applications can set the [PollingPolicy] and [PollingBackoffPolicy] to
    /// control for how long the function runs.
    ///
    /// ## Polling with detailed metadata updates
    ///
    /// Using the result of [poller()] follows a common pattern:
    ///
    /// ```
    /// # use gax::Result;
    /// # use google_cloud_orchestration_airflow_service_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::DatabaseFailoverResponse, model::OperationMetadata>
    /// ) -> Result<model::DatabaseFailoverResponse> {
    ///     while let Some(p) = poller.poll().await {
    ///         match p {
    ///             lro::PollingResult::Completed(r) => { return r; },
    ///             lro::PollingResult::InProgress(m) => { println!("in progress {m:?}"); },
    ///             lro::PollingResult::PollingError(_) => { /* ignored */ },
    ///         }
    ///         tokio::time::sleep(std::time::Duration::from_secs(1)).await;
    ///     }
    ///     Err(gax::error::Error::other("LRO never completed"))
    /// }
    /// ```
    ///
    /// ## Manually polling long-running operations
    ///
    /// If you call [send()], you need to examine the contents of the resulting
    /// [Operation][longrunning::model::Operation] to determine the result of
    /// the operation.
    ///
    /// If the `done` field is `true`, the operation has completed. The `result`
    /// field contains the final response, this will be a [crate::model::DatabaseFailoverResponse] (as
    /// an [Any]), or the error (as a `Status`).
    ///
    /// If the `done` field is `false`, the operation has not completed.  The
    /// operation may also include a [crate::model::OperationMetadata] value in the `metadata`
    /// field. This value would also be encoded as an [Any]. The metadata may
    /// include information about how much progress the LRO has made.
    ///
    /// To find out if the operation has completed, use the [get_operation]
    /// method and repeat the steps outlined above.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::environments::DatabaseFailover::send
    /// [poller()]: crate::builders::environments::DatabaseFailover::poller
    /// [until_done()]: lro::Poller::until_done
    /// [PollingPolicy]: gax::polling_policy::PollingPolicy
    /// [PollingBackoffPolicy]: gax::polling_backoff_policy::PollingBackoffPolicy
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    /// [Any]: wkt::Any
    pub fn database_failover(
        &self,
        environment: impl Into<std::string::String>,
    ) -> crate::builders::environments::DatabaseFailover {
        crate::builders::environments::DatabaseFailover::new(self.inner.clone())
            .set_environment(environment.into())
    }

    /// Fetches database properties.
    pub fn fetch_database_properties(
        &self,
        environment: impl Into<std::string::String>,
    ) -> crate::builders::environments::FetchDatabaseProperties {
        crate::builders::environments::FetchDatabaseProperties::new(self.inner.clone())
            .set_environment(environment.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::environments::ListOperations {
        crate::builders::environments::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::environments::GetOperation {
        crate::builders::environments::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::environments::DeleteOperation {
        crate::builders::environments::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Cloud Composer API.
///
/// # Service Description
///
/// Readonly service to query available ImageVersions.
///
/// # Configuration
///
/// `ImageVersions` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `ImageVersions` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ImageVersions` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct ImageVersions {
    inner: Arc<dyn crate::stubs::dynamic::ImageVersions>,
}

impl ImageVersions {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::ImageVersions + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::ImageVersions>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ImageVersions> {
        crate::transport::ImageVersions::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ImageVersions> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::ImageVersions::new)
    }

    /// List ImageVersions for provided location.
    pub fn list_image_versions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::image_versions::ListImageVersions {
        crate::builders::image_versions::ListImageVersions::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::image_versions::ListOperations {
        crate::builders::image_versions::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::image_versions::GetOperation {
        crate::builders::image_versions::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::image_versions::DeleteOperation {
        crate::builders::image_versions::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
