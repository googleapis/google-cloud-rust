// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use std::sync::Arc;

/// A dyn-compatible, crate-private version of [super::Folders].
#[async_trait::async_trait]
pub trait Folders: std::fmt::Debug + Send + Sync {
    async fn get_folder(
        &self,
        req: crate::model::GetFolderRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Folder>;

    async fn list_folders(
        &self,
        req: crate::model::ListFoldersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListFoldersResponse>;

    async fn search_folders(
        &self,
        req: crate::model::SearchFoldersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::SearchFoldersResponse>;

    async fn create_folder(
        &self,
        req: crate::model::CreateFolderRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_folder(
        &self,
        req: crate::model::UpdateFolderRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn move_folder(
        &self,
        req: crate::model::MoveFolderRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_folder(
        &self,
        req: crate::model::DeleteFolderRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn undelete_folder(
        &self,
        req: crate::model::UndeleteFolderRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy>;

    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy>;

    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::TestIamPermissionsResponse>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy>;

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}

/// All implementations of [crate::stubs::Folders] also implement [Folders].
#[async_trait::async_trait]
impl<T: crate::stubs::Folders> Folders for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn get_folder(
        &self,
        req: crate::model::GetFolderRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Folder> {
        T::get_folder(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_folders(
        &self,
        req: crate::model::ListFoldersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListFoldersResponse> {
        T::list_folders(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn search_folders(
        &self,
        req: crate::model::SearchFoldersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::SearchFoldersResponse> {
        T::search_folders(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_folder(
        &self,
        req: crate::model::CreateFolderRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_folder(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_folder(
        &self,
        req: crate::model::UpdateFolderRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_folder(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn move_folder(
        &self,
        req: crate::model::MoveFolderRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::move_folder(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_folder(
        &self,
        req: crate::model::DeleteFolderRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_folder(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn undelete_folder(
        &self,
        req: crate::model::UndeleteFolderRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::undelete_folder(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy> {
        T::get_iam_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy> {
        T::set_iam_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::TestIamPermissionsResponse> {
        T::test_iam_permissions(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::get_operation(self, req, options).await
    }

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        T::get_polling_policy(self, options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        T::get_polling_backoff_policy(self, options)
    }
}

/// A dyn-compatible, crate-private version of [super::Organizations].
#[async_trait::async_trait]
pub trait Organizations: std::fmt::Debug + Send + Sync {
    async fn get_organization(
        &self,
        req: crate::model::GetOrganizationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Organization>;

    async fn search_organizations(
        &self,
        req: crate::model::SearchOrganizationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::SearchOrganizationsResponse>;

    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy>;

    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy>;

    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::TestIamPermissionsResponse>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;
}

/// All implementations of [crate::stubs::Organizations] also implement [Organizations].
#[async_trait::async_trait]
impl<T: crate::stubs::Organizations> Organizations for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn get_organization(
        &self,
        req: crate::model::GetOrganizationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Organization> {
        T::get_organization(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn search_organizations(
        &self,
        req: crate::model::SearchOrganizationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::SearchOrganizationsResponse> {
        T::search_organizations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy> {
        T::get_iam_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy> {
        T::set_iam_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::TestIamPermissionsResponse> {
        T::test_iam_permissions(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::get_operation(self, req, options).await
    }
}

/// A dyn-compatible, crate-private version of [super::Projects].
#[async_trait::async_trait]
pub trait Projects: std::fmt::Debug + Send + Sync {
    async fn get_project(
        &self,
        req: crate::model::GetProjectRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Project>;

    async fn list_projects(
        &self,
        req: crate::model::ListProjectsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListProjectsResponse>;

    async fn search_projects(
        &self,
        req: crate::model::SearchProjectsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::SearchProjectsResponse>;

    async fn create_project(
        &self,
        req: crate::model::CreateProjectRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_project(
        &self,
        req: crate::model::UpdateProjectRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn move_project(
        &self,
        req: crate::model::MoveProjectRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_project(
        &self,
        req: crate::model::DeleteProjectRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn undelete_project(
        &self,
        req: crate::model::UndeleteProjectRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy>;

    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy>;

    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::TestIamPermissionsResponse>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy>;

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}

/// All implementations of [crate::stubs::Projects] also implement [Projects].
#[async_trait::async_trait]
impl<T: crate::stubs::Projects> Projects for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn get_project(
        &self,
        req: crate::model::GetProjectRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Project> {
        T::get_project(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_projects(
        &self,
        req: crate::model::ListProjectsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListProjectsResponse> {
        T::list_projects(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn search_projects(
        &self,
        req: crate::model::SearchProjectsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::SearchProjectsResponse> {
        T::search_projects(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_project(
        &self,
        req: crate::model::CreateProjectRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_project(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_project(
        &self,
        req: crate::model::UpdateProjectRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_project(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn move_project(
        &self,
        req: crate::model::MoveProjectRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::move_project(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_project(
        &self,
        req: crate::model::DeleteProjectRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_project(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn undelete_project(
        &self,
        req: crate::model::UndeleteProjectRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::undelete_project(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy> {
        T::get_iam_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy> {
        T::set_iam_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::TestIamPermissionsResponse> {
        T::test_iam_permissions(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::get_operation(self, req, options).await
    }

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        T::get_polling_policy(self, options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        T::get_polling_backoff_policy(self, options)
    }
}

/// A dyn-compatible, crate-private version of [super::TagBindings].
#[async_trait::async_trait]
pub trait TagBindings: std::fmt::Debug + Send + Sync {
    async fn list_tag_bindings(
        &self,
        req: crate::model::ListTagBindingsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListTagBindingsResponse>;

    async fn create_tag_binding(
        &self,
        req: crate::model::CreateTagBindingRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_tag_binding(
        &self,
        req: crate::model::DeleteTagBindingRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_effective_tags(
        &self,
        req: crate::model::ListEffectiveTagsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListEffectiveTagsResponse>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy>;

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}

/// All implementations of [crate::stubs::TagBindings] also implement [TagBindings].
#[async_trait::async_trait]
impl<T: crate::stubs::TagBindings> TagBindings for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn list_tag_bindings(
        &self,
        req: crate::model::ListTagBindingsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListTagBindingsResponse> {
        T::list_tag_bindings(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_tag_binding(
        &self,
        req: crate::model::CreateTagBindingRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_tag_binding(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_tag_binding(
        &self,
        req: crate::model::DeleteTagBindingRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_tag_binding(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_effective_tags(
        &self,
        req: crate::model::ListEffectiveTagsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListEffectiveTagsResponse> {
        T::list_effective_tags(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::get_operation(self, req, options).await
    }

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        T::get_polling_policy(self, options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        T::get_polling_backoff_policy(self, options)
    }
}

/// A dyn-compatible, crate-private version of [super::TagHolds].
#[async_trait::async_trait]
pub trait TagHolds: std::fmt::Debug + Send + Sync {
    async fn create_tag_hold(
        &self,
        req: crate::model::CreateTagHoldRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_tag_hold(
        &self,
        req: crate::model::DeleteTagHoldRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_tag_holds(
        &self,
        req: crate::model::ListTagHoldsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListTagHoldsResponse>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy>;

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}

/// All implementations of [crate::stubs::TagHolds] also implement [TagHolds].
#[async_trait::async_trait]
impl<T: crate::stubs::TagHolds> TagHolds for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn create_tag_hold(
        &self,
        req: crate::model::CreateTagHoldRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_tag_hold(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_tag_hold(
        &self,
        req: crate::model::DeleteTagHoldRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_tag_hold(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_tag_holds(
        &self,
        req: crate::model::ListTagHoldsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListTagHoldsResponse> {
        T::list_tag_holds(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::get_operation(self, req, options).await
    }

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        T::get_polling_policy(self, options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        T::get_polling_backoff_policy(self, options)
    }
}

/// A dyn-compatible, crate-private version of [super::TagKeys].
#[async_trait::async_trait]
pub trait TagKeys: std::fmt::Debug + Send + Sync {
    async fn list_tag_keys(
        &self,
        req: crate::model::ListTagKeysRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListTagKeysResponse>;

    async fn get_tag_key(
        &self,
        req: crate::model::GetTagKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::TagKey>;

    async fn get_namespaced_tag_key(
        &self,
        req: crate::model::GetNamespacedTagKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::TagKey>;

    async fn create_tag_key(
        &self,
        req: crate::model::CreateTagKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_tag_key(
        &self,
        req: crate::model::UpdateTagKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_tag_key(
        &self,
        req: crate::model::DeleteTagKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy>;

    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy>;

    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::TestIamPermissionsResponse>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy>;

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}

/// All implementations of [crate::stubs::TagKeys] also implement [TagKeys].
#[async_trait::async_trait]
impl<T: crate::stubs::TagKeys> TagKeys for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn list_tag_keys(
        &self,
        req: crate::model::ListTagKeysRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListTagKeysResponse> {
        T::list_tag_keys(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_tag_key(
        &self,
        req: crate::model::GetTagKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::TagKey> {
        T::get_tag_key(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_namespaced_tag_key(
        &self,
        req: crate::model::GetNamespacedTagKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::TagKey> {
        T::get_namespaced_tag_key(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_tag_key(
        &self,
        req: crate::model::CreateTagKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_tag_key(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_tag_key(
        &self,
        req: crate::model::UpdateTagKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_tag_key(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_tag_key(
        &self,
        req: crate::model::DeleteTagKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_tag_key(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy> {
        T::get_iam_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy> {
        T::set_iam_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::TestIamPermissionsResponse> {
        T::test_iam_permissions(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::get_operation(self, req, options).await
    }

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        T::get_polling_policy(self, options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        T::get_polling_backoff_policy(self, options)
    }
}

/// A dyn-compatible, crate-private version of [super::TagValues].
#[async_trait::async_trait]
pub trait TagValues: std::fmt::Debug + Send + Sync {
    async fn list_tag_values(
        &self,
        req: crate::model::ListTagValuesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListTagValuesResponse>;

    async fn get_tag_value(
        &self,
        req: crate::model::GetTagValueRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::TagValue>;

    async fn get_namespaced_tag_value(
        &self,
        req: crate::model::GetNamespacedTagValueRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::TagValue>;

    async fn create_tag_value(
        &self,
        req: crate::model::CreateTagValueRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_tag_value(
        &self,
        req: crate::model::UpdateTagValueRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_tag_value(
        &self,
        req: crate::model::DeleteTagValueRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy>;

    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy>;

    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::TestIamPermissionsResponse>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy>;

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}

/// All implementations of [crate::stubs::TagValues] also implement [TagValues].
#[async_trait::async_trait]
impl<T: crate::stubs::TagValues> TagValues for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn list_tag_values(
        &self,
        req: crate::model::ListTagValuesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListTagValuesResponse> {
        T::list_tag_values(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_tag_value(
        &self,
        req: crate::model::GetTagValueRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::TagValue> {
        T::get_tag_value(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_namespaced_tag_value(
        &self,
        req: crate::model::GetNamespacedTagValueRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::TagValue> {
        T::get_namespaced_tag_value(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_tag_value(
        &self,
        req: crate::model::CreateTagValueRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_tag_value(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_tag_value(
        &self,
        req: crate::model::UpdateTagValueRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_tag_value(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_tag_value(
        &self,
        req: crate::model::DeleteTagValueRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_tag_value(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy> {
        T::get_iam_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy> {
        T::set_iam_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::TestIamPermissionsResponse> {
        T::test_iam_permissions(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::get_operation(self, req, options).await
    }

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        T::get_polling_policy(self, options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        T::get_polling_backoff_policy(self, options)
    }
}
