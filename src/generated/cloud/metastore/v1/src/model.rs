// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gtype;
extern crate iam_v1;
extern crate lazy_static;
extern crate location;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// A managed metastore service that serves metadata queries.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Service {
    /// Immutable. The relative resource name of the metastore service, in the
    /// following format:
    ///
    /// `projects/{project_number}/locations/{location_id}/services/{service_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The time when the metastore service was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time when the metastore service was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// User-defined labels for the metastore service.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Immutable. The relative resource name of the VPC network on which the
    /// instance can be accessed. It is specified in the following form:
    ///
    /// `projects/{project_number}/global/networks/{network_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub network: std::string::String,

    /// Output only. The URI of the endpoint used to access the metastore service.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub endpoint_uri: std::string::String,

    /// The TCP port at which the metastore service is reached. Default: 9083.
    pub port: i32,

    /// Output only. The current state of the metastore service.
    pub state: crate::model::service::State,

    /// Output only. Additional information about the current state of the
    /// metastore service, if available.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub state_message: std::string::String,

    /// Output only. A Cloud Storage URI (starting with `gs://`) that specifies
    /// where artifacts related to the metastore service are stored.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub artifact_gcs_uri: std::string::String,

    /// The tier of the service.
    pub tier: crate::model::service::Tier,

    /// The one hour maintenance window of the metastore service. This specifies
    /// when the service can be restarted for maintenance purposes in UTC time.
    /// Maintenance window is not needed for services with the SPANNER
    /// database type.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub maintenance_window: std::option::Option<crate::model::MaintenanceWindow>,

    /// Output only. The globally unique resource identifier of the metastore
    /// service.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uid: std::string::String,

    /// Output only. The metadata management activities of the metastore service.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub metadata_management_activity: std::option::Option<crate::model::MetadataManagementActivity>,

    /// Immutable. The release channel of the service.
    /// If unspecified, defaults to `STABLE`.
    pub release_channel: crate::model::service::ReleaseChannel,

    /// Immutable. Information used to configure the Dataproc Metastore service to
    /// encrypt customer data at rest. Cannot be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub encryption_config: std::option::Option<crate::model::EncryptionConfig>,

    /// The configuration specifying the network settings for the
    /// Dataproc Metastore service.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub network_config: std::option::Option<crate::model::NetworkConfig>,

    /// Immutable. The database type that the Metastore service stores its data.
    pub database_type: crate::model::service::DatabaseType,

    /// The configuration specifying telemetry settings for the Dataproc Metastore
    /// service. If unspecified defaults to `JSON`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub telemetry_config: std::option::Option<crate::model::TelemetryConfig>,

    /// Scaling configuration of the metastore service.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub scaling_config: std::option::Option<crate::model::ScalingConfig>,

    /// Configuration properties specific to the underlying metastore service
    /// technology (the software that serves metastore queries).
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub metastore_config: std::option::Option<crate::model::service::MetastoreConfig>,
}

impl Service {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Service::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Service::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Service::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [network][crate::model::Service::network].
    pub fn set_network<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.network = v.into();
        self
    }

    /// Sets the value of [endpoint_uri][crate::model::Service::endpoint_uri].
    pub fn set_endpoint_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.endpoint_uri = v.into();
        self
    }

    /// Sets the value of [port][crate::model::Service::port].
    pub fn set_port<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.port = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Service::state].
    pub fn set_state<T: std::convert::Into<crate::model::service::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [state_message][crate::model::Service::state_message].
    pub fn set_state_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.state_message = v.into();
        self
    }

    /// Sets the value of [artifact_gcs_uri][crate::model::Service::artifact_gcs_uri].
    pub fn set_artifact_gcs_uri<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.artifact_gcs_uri = v.into();
        self
    }

    /// Sets the value of [tier][crate::model::Service::tier].
    pub fn set_tier<T: std::convert::Into<crate::model::service::Tier>>(mut self, v: T) -> Self {
        self.tier = v.into();
        self
    }

    /// Sets the value of [maintenance_window][crate::model::Service::maintenance_window].
    pub fn set_maintenance_window<
        T: std::convert::Into<std::option::Option<crate::model::MaintenanceWindow>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.maintenance_window = v.into();
        self
    }

    /// Sets the value of [uid][crate::model::Service::uid].
    pub fn set_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uid = v.into();
        self
    }

    /// Sets the value of [metadata_management_activity][crate::model::Service::metadata_management_activity].
    pub fn set_metadata_management_activity<
        T: std::convert::Into<std::option::Option<crate::model::MetadataManagementActivity>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.metadata_management_activity = v.into();
        self
    }

    /// Sets the value of [release_channel][crate::model::Service::release_channel].
    pub fn set_release_channel<T: std::convert::Into<crate::model::service::ReleaseChannel>>(
        mut self,
        v: T,
    ) -> Self {
        self.release_channel = v.into();
        self
    }

    /// Sets the value of [encryption_config][crate::model::Service::encryption_config].
    pub fn set_encryption_config<
        T: std::convert::Into<std::option::Option<crate::model::EncryptionConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.encryption_config = v.into();
        self
    }

    /// Sets the value of [network_config][crate::model::Service::network_config].
    pub fn set_network_config<
        T: std::convert::Into<std::option::Option<crate::model::NetworkConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.network_config = v.into();
        self
    }

    /// Sets the value of [database_type][crate::model::Service::database_type].
    pub fn set_database_type<T: std::convert::Into<crate::model::service::DatabaseType>>(
        mut self,
        v: T,
    ) -> Self {
        self.database_type = v.into();
        self
    }

    /// Sets the value of [telemetry_config][crate::model::Service::telemetry_config].
    pub fn set_telemetry_config<
        T: std::convert::Into<std::option::Option<crate::model::TelemetryConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.telemetry_config = v.into();
        self
    }

    /// Sets the value of [scaling_config][crate::model::Service::scaling_config].
    pub fn set_scaling_config<
        T: std::convert::Into<std::option::Option<crate::model::ScalingConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.scaling_config = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::Service::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of `metastore_config`.
    pub fn set_metastore_config<
        T: std::convert::Into<std::option::Option<crate::model::service::MetastoreConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.metastore_config = v.into();
        self
    }

    /// The value of [metastore_config][crate::model::Service::metastore_config]
    /// if it holds a `HiveMetastoreConfig`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_hive_metastore_config(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::HiveMetastoreConfig>> {
        #[allow(unreachable_patterns)]
        self.metastore_config.as_ref().and_then(|v| match v {
            crate::model::service::MetastoreConfig::HiveMetastoreConfig(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [metastore_config][crate::model::Service::metastore_config]
    /// to hold a `HiveMetastoreConfig`.
    ///
    /// Note that all the setters affecting `metastore_config` are
    /// mutually exclusive.
    pub fn set_hive_metastore_config<
        T: std::convert::Into<std::boxed::Box<crate::model::HiveMetastoreConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.metastore_config = std::option::Option::Some(
            crate::model::service::MetastoreConfig::HiveMetastoreConfig(v.into()),
        );
        self
    }
}

impl wkt::message::Message for Service {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.Service"
    }
}

/// Defines additional types related to Service
pub mod service {
    #[allow(unused_imports)]
    use super::*;

    /// The current state of the metastore service.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// The state of the metastore service is unknown.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// The metastore service is in the process of being created.
        pub const CREATING: State = State::new(1);

        /// The metastore service is running and ready to serve queries.
        pub const ACTIVE: State = State::new(2);

        /// The metastore service is entering suspension. Its query-serving
        /// availability may cease unexpectedly.
        pub const SUSPENDING: State = State::new(3);

        /// The metastore service is suspended and unable to serve queries.
        pub const SUSPENDED: State = State::new(4);

        /// The metastore service is being updated. It remains usable but cannot
        /// accept additional update requests or be deleted at this time.
        pub const UPDATING: State = State::new(5);

        /// The metastore service is undergoing deletion. It cannot be used.
        pub const DELETING: State = State::new(6);

        /// The metastore service has encountered an error and cannot be used. The
        /// metastore service should be deleted.
        pub const ERROR: State = State::new(7);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CREATING"),
                2 => std::borrow::Cow::Borrowed("ACTIVE"),
                3 => std::borrow::Cow::Borrowed("SUSPENDING"),
                4 => std::borrow::Cow::Borrowed("SUSPENDED"),
                5 => std::borrow::Cow::Borrowed("UPDATING"),
                6 => std::borrow::Cow::Borrowed("DELETING"),
                7 => std::borrow::Cow::Borrowed("ERROR"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "CREATING" => std::option::Option::Some(Self::CREATING),
                "ACTIVE" => std::option::Option::Some(Self::ACTIVE),
                "SUSPENDING" => std::option::Option::Some(Self::SUSPENDING),
                "SUSPENDED" => std::option::Option::Some(Self::SUSPENDED),
                "UPDATING" => std::option::Option::Some(Self::UPDATING),
                "DELETING" => std::option::Option::Some(Self::DELETING),
                "ERROR" => std::option::Option::Some(Self::ERROR),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Available service tiers.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Tier(i32);

    impl Tier {
        /// The tier is not set.
        pub const TIER_UNSPECIFIED: Tier = Tier::new(0);

        /// The developer tier provides limited scalability and no fault tolerance.
        /// Good for low-cost proof-of-concept.
        pub const DEVELOPER: Tier = Tier::new(1);

        /// The enterprise tier provides multi-zone high availability, and sufficient
        /// scalability for enterprise-level Dataproc Metastore workloads.
        pub const ENTERPRISE: Tier = Tier::new(3);

        /// Creates a new Tier instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("TIER_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("DEVELOPER"),
                3 => std::borrow::Cow::Borrowed("ENTERPRISE"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "TIER_UNSPECIFIED" => std::option::Option::Some(Self::TIER_UNSPECIFIED),
                "DEVELOPER" => std::option::Option::Some(Self::DEVELOPER),
                "ENTERPRISE" => std::option::Option::Some(Self::ENTERPRISE),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for Tier {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for Tier {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Release channels bundle features of varying levels of stability. Newer
    /// features may be introduced initially into less stable release channels and
    /// can be automatically promoted into more stable release channels.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct ReleaseChannel(i32);

    impl ReleaseChannel {
        /// Release channel is not specified.
        pub const RELEASE_CHANNEL_UNSPECIFIED: ReleaseChannel = ReleaseChannel::new(0);

        /// The `CANARY` release channel contains the newest features, which may be
        /// unstable and subject to unresolved issues with no known workarounds.
        /// Services using the `CANARY` release channel are not subject to any SLAs.
        pub const CANARY: ReleaseChannel = ReleaseChannel::new(1);

        /// The `STABLE` release channel contains features that are considered stable
        /// and have been validated for production use.
        pub const STABLE: ReleaseChannel = ReleaseChannel::new(2);

        /// Creates a new ReleaseChannel instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("RELEASE_CHANNEL_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CANARY"),
                2 => std::borrow::Cow::Borrowed("STABLE"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "RELEASE_CHANNEL_UNSPECIFIED" => {
                    std::option::Option::Some(Self::RELEASE_CHANNEL_UNSPECIFIED)
                }
                "CANARY" => std::option::Option::Some(Self::CANARY),
                "STABLE" => std::option::Option::Some(Self::STABLE),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for ReleaseChannel {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for ReleaseChannel {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// The backend database type for the metastore service.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct DatabaseType(i32);

    impl DatabaseType {
        /// The DATABASE_TYPE is not set.
        pub const DATABASE_TYPE_UNSPECIFIED: DatabaseType = DatabaseType::new(0);

        /// MySQL is used to persist the metastore data.
        pub const MYSQL: DatabaseType = DatabaseType::new(1);

        /// Spanner is used to persist the metastore data.
        pub const SPANNER: DatabaseType = DatabaseType::new(2);

        /// Creates a new DatabaseType instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("DATABASE_TYPE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("MYSQL"),
                2 => std::borrow::Cow::Borrowed("SPANNER"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "DATABASE_TYPE_UNSPECIFIED" => {
                    std::option::Option::Some(Self::DATABASE_TYPE_UNSPECIFIED)
                }
                "MYSQL" => std::option::Option::Some(Self::MYSQL),
                "SPANNER" => std::option::Option::Some(Self::SPANNER),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for DatabaseType {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for DatabaseType {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Configuration properties specific to the underlying metastore service
    /// technology (the software that serves metastore queries).
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum MetastoreConfig {
        /// Configuration information specific to running Hive metastore
        /// software as the metastore service.
        HiveMetastoreConfig(std::boxed::Box<crate::model::HiveMetastoreConfig>),
    }
}

/// Maintenance window. This specifies when Dataproc Metastore
/// may perform system maintenance operation to the service.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MaintenanceWindow {
    /// The hour of day (0-23) when the window starts.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub hour_of_day: std::option::Option<wkt::Int32Value>,

    /// The day of week, when the window starts.
    pub day_of_week: gtype::model::DayOfWeek,
}

impl MaintenanceWindow {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [hour_of_day][crate::model::MaintenanceWindow::hour_of_day].
    pub fn set_hour_of_day<T: std::convert::Into<std::option::Option<wkt::Int32Value>>>(
        mut self,
        v: T,
    ) -> Self {
        self.hour_of_day = v.into();
        self
    }

    /// Sets the value of [day_of_week][crate::model::MaintenanceWindow::day_of_week].
    pub fn set_day_of_week<T: std::convert::Into<gtype::model::DayOfWeek>>(mut self, v: T) -> Self {
        self.day_of_week = v.into();
        self
    }
}

impl wkt::message::Message for MaintenanceWindow {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.MaintenanceWindow"
    }
}

/// Specifies configuration information specific to running Hive metastore
/// software as the metastore service.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct HiveMetastoreConfig {
    /// Immutable. The Hive metastore schema version.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub version: std::string::String,

    /// A mapping of Hive metastore configuration key-value pairs to apply to the
    /// Hive metastore (configured in `hive-site.xml`). The mappings
    /// override system defaults (some keys cannot be overridden). These
    /// overrides are also applied to auxiliary versions and can be further
    /// customized in the auxiliary version's `AuxiliaryVersionConfig`.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub config_overrides: std::collections::HashMap<std::string::String, std::string::String>,

    /// Information used to configure the Hive metastore service as a service
    /// principal in a Kerberos realm. To disable Kerberos, use the `UpdateService`
    /// method and specify this field's path
    /// (`hive_metastore_config.kerberos_config`) in the request's `update_mask`
    /// while omitting this field from the request's `service`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub kerberos_config: std::option::Option<crate::model::KerberosConfig>,

    /// The protocol to use for the metastore service endpoint. If unspecified,
    /// defaults to `THRIFT`.
    pub endpoint_protocol: crate::model::hive_metastore_config::EndpointProtocol,

    /// A mapping of Hive metastore version to the auxiliary version
    /// configuration. When specified, a secondary Hive metastore service is
    /// created along with the primary service. All auxiliary versions must be less
    /// than the service's primary version. The key is the auxiliary service name
    /// and it must match the regular expression [a-z]([-a-z0-9]*[a-z0-9])?. This
    /// means that the first character must be a lowercase letter, and all the
    /// following characters must be hyphens, lowercase letters, or digits, except
    /// the last character, which cannot be a hyphen.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub auxiliary_versions:
        std::collections::HashMap<std::string::String, crate::model::AuxiliaryVersionConfig>,
}

impl HiveMetastoreConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [version][crate::model::HiveMetastoreConfig::version].
    pub fn set_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.version = v.into();
        self
    }

    /// Sets the value of [kerberos_config][crate::model::HiveMetastoreConfig::kerberos_config].
    pub fn set_kerberos_config<
        T: std::convert::Into<std::option::Option<crate::model::KerberosConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.kerberos_config = v.into();
        self
    }

    /// Sets the value of [endpoint_protocol][crate::model::HiveMetastoreConfig::endpoint_protocol].
    pub fn set_endpoint_protocol<
        T: std::convert::Into<crate::model::hive_metastore_config::EndpointProtocol>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.endpoint_protocol = v.into();
        self
    }

    /// Sets the value of [config_overrides][crate::model::HiveMetastoreConfig::config_overrides].
    pub fn set_config_overrides<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.config_overrides = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [auxiliary_versions][crate::model::HiveMetastoreConfig::auxiliary_versions].
    pub fn set_auxiliary_versions<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::AuxiliaryVersionConfig>,
    {
        use std::iter::Iterator;
        self.auxiliary_versions = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for HiveMetastoreConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.HiveMetastoreConfig"
    }
}

/// Defines additional types related to HiveMetastoreConfig
pub mod hive_metastore_config {
    #[allow(unused_imports)]
    use super::*;

    /// Protocols available for serving the metastore service endpoint.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct EndpointProtocol(i32);

    impl EndpointProtocol {
        /// The protocol is not set.
        pub const ENDPOINT_PROTOCOL_UNSPECIFIED: EndpointProtocol = EndpointProtocol::new(0);

        /// Use the legacy Apache Thrift protocol for the metastore service endpoint.
        pub const THRIFT: EndpointProtocol = EndpointProtocol::new(1);

        /// Use the modernized gRPC protocol for the metastore service endpoint.
        pub const GRPC: EndpointProtocol = EndpointProtocol::new(2);

        /// Creates a new EndpointProtocol instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("ENDPOINT_PROTOCOL_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("THRIFT"),
                2 => std::borrow::Cow::Borrowed("GRPC"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "ENDPOINT_PROTOCOL_UNSPECIFIED" => {
                    std::option::Option::Some(Self::ENDPOINT_PROTOCOL_UNSPECIFIED)
                }
                "THRIFT" => std::option::Option::Some(Self::THRIFT),
                "GRPC" => std::option::Option::Some(Self::GRPC),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for EndpointProtocol {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for EndpointProtocol {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Configuration information for a Kerberos principal.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct KerberosConfig {
    /// A Kerberos keytab file that can be used to authenticate a service principal
    /// with a Kerberos Key Distribution Center (KDC).
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub keytab: std::option::Option<crate::model::Secret>,

    /// A Kerberos principal that exists in the both the keytab the KDC
    /// to authenticate as. A typical principal is of the form
    /// `primary/instance@REALM`, but there is no exact format.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub principal: std::string::String,

    /// A Cloud Storage URI that specifies the path to a
    /// krb5.conf file. It is of the form `gs://{bucket_name}/path/to/krb5.conf`,
    /// although the file does not need to be named krb5.conf explicitly.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub krb5_config_gcs_uri: std::string::String,
}

impl KerberosConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [keytab][crate::model::KerberosConfig::keytab].
    pub fn set_keytab<T: std::convert::Into<std::option::Option<crate::model::Secret>>>(
        mut self,
        v: T,
    ) -> Self {
        self.keytab = v.into();
        self
    }

    /// Sets the value of [principal][crate::model::KerberosConfig::principal].
    pub fn set_principal<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.principal = v.into();
        self
    }

    /// Sets the value of [krb5_config_gcs_uri][crate::model::KerberosConfig::krb5_config_gcs_uri].
    pub fn set_krb5_config_gcs_uri<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.krb5_config_gcs_uri = v.into();
        self
    }
}

impl wkt::message::Message for KerberosConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.KerberosConfig"
    }
}

/// A securely stored value.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Secret {
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub value: std::option::Option<crate::model::secret::Value>,
}

impl Secret {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of `value`.
    pub fn set_value<T: std::convert::Into<std::option::Option<crate::model::secret::Value>>>(
        mut self,
        v: T,
    ) -> Self {
        self.value = v.into();
        self
    }

    /// The value of [value][crate::model::Secret::value]
    /// if it holds a `CloudSecret`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_cloud_secret(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.value.as_ref().and_then(|v| match v {
            crate::model::secret::Value::CloudSecret(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [value][crate::model::Secret::value]
    /// to hold a `CloudSecret`.
    ///
    /// Note that all the setters affecting `value` are
    /// mutually exclusive.
    pub fn set_cloud_secret<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.value = std::option::Option::Some(crate::model::secret::Value::CloudSecret(v.into()));
        self
    }
}

impl wkt::message::Message for Secret {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.Secret"
    }
}

/// Defines additional types related to Secret
pub mod secret {
    #[allow(unused_imports)]
    use super::*;

    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Value {
        /// The relative resource name of a Secret Manager secret version, in the
        /// following form:
        ///
        /// `projects/{project_number}/secrets/{secret_id}/versions/{version_id}`.
        CloudSecret(std::string::String),
    }
}

/// Encryption settings for the service.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct EncryptionConfig {
    /// The fully qualified customer provided Cloud KMS key name to use for
    /// customer data encryption, in the following form:
    ///
    /// `projects/{project_number}/locations/{location_id}/keyRings/{key_ring_id}/cryptoKeys/{crypto_key_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub kms_key: std::string::String,
}

impl EncryptionConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [kms_key][crate::model::EncryptionConfig::kms_key].
    pub fn set_kms_key<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.kms_key = v.into();
        self
    }
}

impl wkt::message::Message for EncryptionConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.EncryptionConfig"
    }
}

/// Configuration information for the auxiliary service versions.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AuxiliaryVersionConfig {
    /// The Hive metastore version of the auxiliary service. It must be less
    /// than the primary Hive metastore service's version.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub version: std::string::String,

    /// A mapping of Hive metastore configuration key-value pairs to apply to the
    /// auxiliary Hive metastore (configured in `hive-site.xml`) in addition to
    /// the primary version's overrides. If keys are present in both the auxiliary
    /// version's overrides and the primary version's overrides, the value from
    /// the auxiliary version's overrides takes precedence.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub config_overrides: std::collections::HashMap<std::string::String, std::string::String>,

    /// Output only. The network configuration contains the endpoint URI(s) of the
    /// auxiliary Hive metastore service.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub network_config: std::option::Option<crate::model::NetworkConfig>,
}

impl AuxiliaryVersionConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [version][crate::model::AuxiliaryVersionConfig::version].
    pub fn set_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.version = v.into();
        self
    }

    /// Sets the value of [network_config][crate::model::AuxiliaryVersionConfig::network_config].
    pub fn set_network_config<
        T: std::convert::Into<std::option::Option<crate::model::NetworkConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.network_config = v.into();
        self
    }

    /// Sets the value of [config_overrides][crate::model::AuxiliaryVersionConfig::config_overrides].
    pub fn set_config_overrides<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.config_overrides = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for AuxiliaryVersionConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.AuxiliaryVersionConfig"
    }
}

/// Network configuration for the Dataproc Metastore service.
///
/// Next available ID: 4
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct NetworkConfig {
    /// Immutable. The consumer-side network configuration for the Dataproc
    /// Metastore instance.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub consumers: std::vec::Vec<crate::model::network_config::Consumer>,
}

impl NetworkConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [consumers][crate::model::NetworkConfig::consumers].
    pub fn set_consumers<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::network_config::Consumer>,
    {
        use std::iter::Iterator;
        self.consumers = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for NetworkConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.NetworkConfig"
    }
}

/// Defines additional types related to NetworkConfig
pub mod network_config {
    #[allow(unused_imports)]
    use super::*;

    /// Contains information of the customer's network configurations.
    ///
    /// Next available ID: 5
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Consumer {
        /// Output only. The URI of the endpoint used to access the metastore
        /// service.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub endpoint_uri: std::string::String,

        /// Output only. The location of the endpoint URI. Format:
        /// `projects/{project}/locations/{location}`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub endpoint_location: std::string::String,

        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub vpc_resource: std::option::Option<crate::model::network_config::consumer::VpcResource>,
    }

    impl Consumer {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [endpoint_uri][crate::model::network_config::Consumer::endpoint_uri].
        pub fn set_endpoint_uri<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.endpoint_uri = v.into();
            self
        }

        /// Sets the value of [endpoint_location][crate::model::network_config::Consumer::endpoint_location].
        pub fn set_endpoint_location<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.endpoint_location = v.into();
            self
        }

        /// Sets the value of `vpc_resource`.
        pub fn set_vpc_resource<
            T: std::convert::Into<
                std::option::Option<crate::model::network_config::consumer::VpcResource>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.vpc_resource = v.into();
            self
        }

        /// The value of [vpc_resource][crate::model::network_config::Consumer::vpc_resource]
        /// if it holds a `Subnetwork`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_subnetwork(&self) -> std::option::Option<&std::string::String> {
            #[allow(unreachable_patterns)]
            self.vpc_resource.as_ref().and_then(|v| match v {
                crate::model::network_config::consumer::VpcResource::Subnetwork(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [vpc_resource][crate::model::network_config::Consumer::vpc_resource]
        /// to hold a `Subnetwork`.
        ///
        /// Note that all the setters affecting `vpc_resource` are
        /// mutually exclusive.
        pub fn set_subnetwork<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.vpc_resource = std::option::Option::Some(
                crate::model::network_config::consumer::VpcResource::Subnetwork(v.into()),
            );
            self
        }
    }

    impl wkt::message::Message for Consumer {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.metastore.v1.NetworkConfig.Consumer"
        }
    }

    /// Defines additional types related to Consumer
    pub mod consumer {
        #[allow(unused_imports)]
        use super::*;

        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum VpcResource {
            /// Immutable. The subnetwork of the customer project from which an IP
            /// address is reserved and used as the Dataproc Metastore service's
            /// endpoint. It is accessible to hosts in the subnet and to all
            /// hosts in a subnet in the same region and same network. There must
            /// be at least one IP address available in the subnet's primary range. The
            /// subnet is specified in the following form:
            ///
            /// `projects/{project_number}/regions/{region_id}/subnetworks/{subnetwork_id}`
            Subnetwork(std::string::String),
        }
    }
}

/// Telemetry Configuration for the Dataproc Metastore service.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TelemetryConfig {
    /// The output format of the Dataproc Metastore service's logs.
    pub log_format: crate::model::telemetry_config::LogFormat,
}

impl TelemetryConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [log_format][crate::model::TelemetryConfig::log_format].
    pub fn set_log_format<T: std::convert::Into<crate::model::telemetry_config::LogFormat>>(
        mut self,
        v: T,
    ) -> Self {
        self.log_format = v.into();
        self
    }
}

impl wkt::message::Message for TelemetryConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.TelemetryConfig"
    }
}

/// Defines additional types related to TelemetryConfig
pub mod telemetry_config {
    #[allow(unused_imports)]
    use super::*;

    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct LogFormat(i32);

    impl LogFormat {
        /// The LOG_FORMAT is not set.
        pub const LOG_FORMAT_UNSPECIFIED: LogFormat = LogFormat::new(0);

        /// Logging output uses the legacy `textPayload` format.
        pub const LEGACY: LogFormat = LogFormat::new(1);

        /// Logging output uses the `jsonPayload` format.
        pub const JSON: LogFormat = LogFormat::new(2);

        /// Creates a new LogFormat instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("LOG_FORMAT_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("LEGACY"),
                2 => std::borrow::Cow::Borrowed("JSON"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "LOG_FORMAT_UNSPECIFIED" => std::option::Option::Some(Self::LOG_FORMAT_UNSPECIFIED),
                "LEGACY" => std::option::Option::Some(Self::LEGACY),
                "JSON" => std::option::Option::Some(Self::JSON),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for LogFormat {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for LogFormat {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// The metadata management activities of the metastore service.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MetadataManagementActivity {
    /// Output only. The latest metadata exports of the metastore service.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub metadata_exports: std::vec::Vec<crate::model::MetadataExport>,

    /// Output only. The latest restores of the metastore service.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub restores: std::vec::Vec<crate::model::Restore>,
}

impl MetadataManagementActivity {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [metadata_exports][crate::model::MetadataManagementActivity::metadata_exports].
    pub fn set_metadata_exports<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::MetadataExport>,
    {
        use std::iter::Iterator;
        self.metadata_exports = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [restores][crate::model::MetadataManagementActivity::restores].
    pub fn set_restores<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Restore>,
    {
        use std::iter::Iterator;
        self.restores = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for MetadataManagementActivity {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.MetadataManagementActivity"
    }
}

/// A metastore resource that imports metadata.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MetadataImport {
    /// Immutable. The relative resource name of the metadata import, of the form:
    ///
    /// `projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The description of the metadata import.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Output only. The time when the metadata import was started.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time when the metadata import was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time when the metadata import finished.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The current state of the metadata import.
    pub state: crate::model::metadata_import::State,

    /// The metadata to be imported.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub metadata: std::option::Option<crate::model::metadata_import::Metadata>,
}

impl MetadataImport {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::MetadataImport::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::MetadataImport::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::MetadataImport::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::MetadataImport::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::MetadataImport::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [state][crate::model::MetadataImport::state].
    pub fn set_state<T: std::convert::Into<crate::model::metadata_import::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of `metadata`.
    pub fn set_metadata<
        T: std::convert::Into<std::option::Option<crate::model::metadata_import::Metadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.metadata = v.into();
        self
    }

    /// The value of [metadata][crate::model::MetadataImport::metadata]
    /// if it holds a `DatabaseDump`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_database_dump(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::metadata_import::DatabaseDump>> {
        #[allow(unreachable_patterns)]
        self.metadata.as_ref().and_then(|v| match v {
            crate::model::metadata_import::Metadata::DatabaseDump(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [metadata][crate::model::MetadataImport::metadata]
    /// to hold a `DatabaseDump`.
    ///
    /// Note that all the setters affecting `metadata` are
    /// mutually exclusive.
    pub fn set_database_dump<
        T: std::convert::Into<std::boxed::Box<crate::model::metadata_import::DatabaseDump>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.metadata = std::option::Option::Some(
            crate::model::metadata_import::Metadata::DatabaseDump(v.into()),
        );
        self
    }
}

impl wkt::message::Message for MetadataImport {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.MetadataImport"
    }
}

/// Defines additional types related to MetadataImport
pub mod metadata_import {
    #[allow(unused_imports)]
    use super::*;

    /// A specification of the location of and metadata about a database dump from
    /// a relational database management system.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct DatabaseDump {
        /// The type of the database.
        pub database_type: crate::model::metadata_import::database_dump::DatabaseType,

        /// A Cloud Storage object or folder URI that specifies the source from which
        /// to import metadata. It must begin with `gs://`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub gcs_uri: std::string::String,

        /// The name of the source database.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub source_database: std::string::String,

        /// Optional. The type of the database dump. If unspecified, defaults to
        /// `MYSQL`.
        #[serde(rename = "type")]
        pub r#type: crate::model::database_dump_spec::Type,
    }

    impl DatabaseDump {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [database_type][crate::model::metadata_import::DatabaseDump::database_type].
        pub fn set_database_type<
            T: std::convert::Into<crate::model::metadata_import::database_dump::DatabaseType>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.database_type = v.into();
            self
        }

        /// Sets the value of [gcs_uri][crate::model::metadata_import::DatabaseDump::gcs_uri].
        pub fn set_gcs_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.gcs_uri = v.into();
            self
        }

        /// Sets the value of [source_database][crate::model::metadata_import::DatabaseDump::source_database].
        pub fn set_source_database<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.source_database = v.into();
            self
        }

        /// Sets the value of [r#type][crate::model::metadata_import::DatabaseDump::type].
        pub fn set_type<T: std::convert::Into<crate::model::database_dump_spec::Type>>(
            mut self,
            v: T,
        ) -> Self {
            self.r#type = v.into();
            self
        }
    }

    impl wkt::message::Message for DatabaseDump {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.metastore.v1.MetadataImport.DatabaseDump"
        }
    }

    /// Defines additional types related to DatabaseDump
    pub mod database_dump {
        #[allow(unused_imports)]
        use super::*;

        /// The type of the database.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct DatabaseType(i32);

        impl DatabaseType {
            /// The type of the source database is unknown.
            pub const DATABASE_TYPE_UNSPECIFIED: DatabaseType = DatabaseType::new(0);

            /// The type of the source database is MySQL.
            pub const MYSQL: DatabaseType = DatabaseType::new(1);

            /// Creates a new DatabaseType instance.
            pub(crate) const fn new(value: i32) -> Self {
                Self(value)
            }

            /// Gets the enum value.
            pub fn value(&self) -> i32 {
                self.0
            }

            /// Gets the enum value as a string.
            pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
                match self.0 {
                    0 => std::borrow::Cow::Borrowed("DATABASE_TYPE_UNSPECIFIED"),
                    1 => std::borrow::Cow::Borrowed("MYSQL"),
                    _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
                }
            }

            /// Creates an enum value from the value name.
            pub fn from_str_name(name: &str) -> std::option::Option<Self> {
                match name {
                    "DATABASE_TYPE_UNSPECIFIED" => {
                        std::option::Option::Some(Self::DATABASE_TYPE_UNSPECIFIED)
                    }
                    "MYSQL" => std::option::Option::Some(Self::MYSQL),
                    _ => std::option::Option::None,
                }
            }
        }

        impl std::convert::From<i32> for DatabaseType {
            fn from(value: i32) -> Self {
                Self::new(value)
            }
        }

        impl std::default::Default for DatabaseType {
            fn default() -> Self {
                Self::new(0)
            }
        }
    }

    /// The current state of the metadata import.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// The state of the metadata import is unknown.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// The metadata import is running.
        pub const RUNNING: State = State::new(1);

        /// The metadata import completed successfully.
        pub const SUCCEEDED: State = State::new(2);

        /// The metadata import is being updated.
        pub const UPDATING: State = State::new(3);

        /// The metadata import failed, and attempted metadata changes were rolled
        /// back.
        pub const FAILED: State = State::new(4);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("RUNNING"),
                2 => std::borrow::Cow::Borrowed("SUCCEEDED"),
                3 => std::borrow::Cow::Borrowed("UPDATING"),
                4 => std::borrow::Cow::Borrowed("FAILED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "RUNNING" => std::option::Option::Some(Self::RUNNING),
                "SUCCEEDED" => std::option::Option::Some(Self::SUCCEEDED),
                "UPDATING" => std::option::Option::Some(Self::UPDATING),
                "FAILED" => std::option::Option::Some(Self::FAILED),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// The metadata to be imported.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Metadata {
        /// Immutable. A database dump from a pre-existing metastore's database.
        DatabaseDump(std::boxed::Box<crate::model::metadata_import::DatabaseDump>),
    }
}

/// The details of a metadata export operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MetadataExport {
    /// Output only. The time when the export started.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time when the export ended.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The current state of the export.
    pub state: crate::model::metadata_export::State,

    /// Output only. The type of the database dump.
    pub database_dump_type: crate::model::database_dump_spec::Type,

    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub destination: std::option::Option<crate::model::metadata_export::Destination>,
}

impl MetadataExport {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [start_time][crate::model::MetadataExport::start_time].
    pub fn set_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::MetadataExport::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [state][crate::model::MetadataExport::state].
    pub fn set_state<T: std::convert::Into<crate::model::metadata_export::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [database_dump_type][crate::model::MetadataExport::database_dump_type].
    pub fn set_database_dump_type<T: std::convert::Into<crate::model::database_dump_spec::Type>>(
        mut self,
        v: T,
    ) -> Self {
        self.database_dump_type = v.into();
        self
    }

    /// Sets the value of `destination`.
    pub fn set_destination<
        T: std::convert::Into<std::option::Option<crate::model::metadata_export::Destination>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination = v.into();
        self
    }

    /// The value of [destination][crate::model::MetadataExport::destination]
    /// if it holds a `DestinationGcsUri`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_destination_gcs_uri(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.destination.as_ref().and_then(|v| match v {
            crate::model::metadata_export::Destination::DestinationGcsUri(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [destination][crate::model::MetadataExport::destination]
    /// to hold a `DestinationGcsUri`.
    ///
    /// Note that all the setters affecting `destination` are
    /// mutually exclusive.
    pub fn set_destination_gcs_uri<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.destination = std::option::Option::Some(
            crate::model::metadata_export::Destination::DestinationGcsUri(v.into()),
        );
        self
    }
}

impl wkt::message::Message for MetadataExport {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.MetadataExport"
    }
}

/// Defines additional types related to MetadataExport
pub mod metadata_export {
    #[allow(unused_imports)]
    use super::*;

    /// The current state of the metadata export.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// The state of the metadata export is unknown.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// The metadata export is running.
        pub const RUNNING: State = State::new(1);

        /// The metadata export completed successfully.
        pub const SUCCEEDED: State = State::new(2);

        /// The metadata export failed.
        pub const FAILED: State = State::new(3);

        /// The metadata export is cancelled.
        pub const CANCELLED: State = State::new(4);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("RUNNING"),
                2 => std::borrow::Cow::Borrowed("SUCCEEDED"),
                3 => std::borrow::Cow::Borrowed("FAILED"),
                4 => std::borrow::Cow::Borrowed("CANCELLED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "RUNNING" => std::option::Option::Some(Self::RUNNING),
                "SUCCEEDED" => std::option::Option::Some(Self::SUCCEEDED),
                "FAILED" => std::option::Option::Some(Self::FAILED),
                "CANCELLED" => std::option::Option::Some(Self::CANCELLED),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }

    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Destination {
        /// Output only. A Cloud Storage URI of a folder that metadata are exported
        /// to, in the form of
        /// `gs://<bucket_name>/<path_inside_bucket>/<export_folder>`, where
        /// `<export_folder>` is automatically generated.
        DestinationGcsUri(std::string::String),
    }
}

/// The details of a backup resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Backup {
    /// Immutable. The relative resource name of the backup, in the following form:
    ///
    /// `projects/{project_number}/locations/{location_id}/services/{service_id}/backups/{backup_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The time when the backup was started.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time when the backup finished creating.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The current state of the backup.
    pub state: crate::model::backup::State,

    /// Output only. The revision of the service at the time of backup.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub service_revision: std::option::Option<crate::model::Service>,

    /// The description of the backup.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Output only. Services that are restoring from the backup.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub restoring_services: std::vec::Vec<std::string::String>,
}

impl Backup {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Backup::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Backup::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::Backup::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Backup::state].
    pub fn set_state<T: std::convert::Into<crate::model::backup::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [service_revision][crate::model::Backup::service_revision].
    pub fn set_service_revision<
        T: std::convert::Into<std::option::Option<crate::model::Service>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.service_revision = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Backup::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [restoring_services][crate::model::Backup::restoring_services].
    pub fn set_restoring_services<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.restoring_services = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Backup {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.Backup"
    }
}

/// Defines additional types related to Backup
pub mod backup {
    #[allow(unused_imports)]
    use super::*;

    /// The current state of the backup.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// The state of the backup is unknown.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// The backup is being created.
        pub const CREATING: State = State::new(1);

        /// The backup is being deleted.
        pub const DELETING: State = State::new(2);

        /// The backup is active and ready to use.
        pub const ACTIVE: State = State::new(3);

        /// The backup failed.
        pub const FAILED: State = State::new(4);

        /// The backup is being restored.
        pub const RESTORING: State = State::new(5);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CREATING"),
                2 => std::borrow::Cow::Borrowed("DELETING"),
                3 => std::borrow::Cow::Borrowed("ACTIVE"),
                4 => std::borrow::Cow::Borrowed("FAILED"),
                5 => std::borrow::Cow::Borrowed("RESTORING"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "CREATING" => std::option::Option::Some(Self::CREATING),
                "DELETING" => std::option::Option::Some(Self::DELETING),
                "ACTIVE" => std::option::Option::Some(Self::ACTIVE),
                "FAILED" => std::option::Option::Some(Self::FAILED),
                "RESTORING" => std::option::Option::Some(Self::RESTORING),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// The details of a metadata restore operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Restore {
    /// Output only. The time when the restore started.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time when the restore ended.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The current state of the restore.
    pub state: crate::model::restore::State,

    /// Output only. The relative resource name of the metastore service backup to
    /// restore from, in the following form:
    ///
    /// `projects/{project_id}/locations/{location_id}/services/{service_id}/backups/{backup_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub backup: std::string::String,

    /// Output only. The type of restore.
    #[serde(rename = "type")]
    pub r#type: crate::model::restore::RestoreType,

    /// Output only. The restore details containing the revision of the service to
    /// be restored to, in format of JSON.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub details: std::string::String,
}

impl Restore {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [start_time][crate::model::Restore::start_time].
    pub fn set_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::Restore::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Restore::state].
    pub fn set_state<T: std::convert::Into<crate::model::restore::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [backup][crate::model::Restore::backup].
    pub fn set_backup<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.backup = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::Restore::type].
    pub fn set_type<T: std::convert::Into<crate::model::restore::RestoreType>>(
        mut self,
        v: T,
    ) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [details][crate::model::Restore::details].
    pub fn set_details<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.details = v.into();
        self
    }
}

impl wkt::message::Message for Restore {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.Restore"
    }
}

/// Defines additional types related to Restore
pub mod restore {
    #[allow(unused_imports)]
    use super::*;

    /// The current state of the restore.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// The state of the metadata restore is unknown.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// The metadata restore is running.
        pub const RUNNING: State = State::new(1);

        /// The metadata restore completed successfully.
        pub const SUCCEEDED: State = State::new(2);

        /// The metadata restore failed.
        pub const FAILED: State = State::new(3);

        /// The metadata restore is cancelled.
        pub const CANCELLED: State = State::new(4);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("RUNNING"),
                2 => std::borrow::Cow::Borrowed("SUCCEEDED"),
                3 => std::borrow::Cow::Borrowed("FAILED"),
                4 => std::borrow::Cow::Borrowed("CANCELLED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "RUNNING" => std::option::Option::Some(Self::RUNNING),
                "SUCCEEDED" => std::option::Option::Some(Self::SUCCEEDED),
                "FAILED" => std::option::Option::Some(Self::FAILED),
                "CANCELLED" => std::option::Option::Some(Self::CANCELLED),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// The type of restore. If unspecified, defaults to `METADATA_ONLY`.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct RestoreType(i32);

    impl RestoreType {
        /// The restore type is unknown.
        pub const RESTORE_TYPE_UNSPECIFIED: RestoreType = RestoreType::new(0);

        /// The service's metadata and configuration are restored.
        pub const FULL: RestoreType = RestoreType::new(1);

        /// Only the service's metadata is restored.
        pub const METADATA_ONLY: RestoreType = RestoreType::new(2);

        /// Creates a new RestoreType instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("RESTORE_TYPE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("FULL"),
                2 => std::borrow::Cow::Borrowed("METADATA_ONLY"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "RESTORE_TYPE_UNSPECIFIED" => {
                    std::option::Option::Some(Self::RESTORE_TYPE_UNSPECIFIED)
                }
                "FULL" => std::option::Option::Some(Self::FULL),
                "METADATA_ONLY" => std::option::Option::Some(Self::METADATA_ONLY),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for RestoreType {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for RestoreType {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Represents the scaling configuration of a metastore service.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ScalingConfig {
    /// Represents either a predetermined instance size or a numeric
    /// scaling factor.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub scaling_model: std::option::Option<crate::model::scaling_config::ScalingModel>,
}

impl ScalingConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of `scaling_model`.
    pub fn set_scaling_model<
        T: std::convert::Into<std::option::Option<crate::model::scaling_config::ScalingModel>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.scaling_model = v.into();
        self
    }

    /// The value of [scaling_model][crate::model::ScalingConfig::scaling_model]
    /// if it holds a `InstanceSize`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_instance_size(
        &self,
    ) -> std::option::Option<&crate::model::scaling_config::InstanceSize> {
        #[allow(unreachable_patterns)]
        self.scaling_model.as_ref().and_then(|v| match v {
            crate::model::scaling_config::ScalingModel::InstanceSize(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [scaling_model][crate::model::ScalingConfig::scaling_model]
    /// if it holds a `ScalingFactor`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_scaling_factor(&self) -> std::option::Option<&f32> {
        #[allow(unreachable_patterns)]
        self.scaling_model.as_ref().and_then(|v| match v {
            crate::model::scaling_config::ScalingModel::ScalingFactor(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [scaling_model][crate::model::ScalingConfig::scaling_model]
    /// to hold a `InstanceSize`.
    ///
    /// Note that all the setters affecting `scaling_model` are
    /// mutually exclusive.
    pub fn set_instance_size<T: std::convert::Into<crate::model::scaling_config::InstanceSize>>(
        mut self,
        v: T,
    ) -> Self {
        self.scaling_model = std::option::Option::Some(
            crate::model::scaling_config::ScalingModel::InstanceSize(v.into()),
        );
        self
    }

    /// Sets the value of [scaling_model][crate::model::ScalingConfig::scaling_model]
    /// to hold a `ScalingFactor`.
    ///
    /// Note that all the setters affecting `scaling_model` are
    /// mutually exclusive.
    pub fn set_scaling_factor<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.scaling_model = std::option::Option::Some(
            crate::model::scaling_config::ScalingModel::ScalingFactor(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ScalingConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.ScalingConfig"
    }
}

/// Defines additional types related to ScalingConfig
pub mod scaling_config {
    #[allow(unused_imports)]
    use super::*;

    /// Metastore instance sizes.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct InstanceSize(i32);

    impl InstanceSize {
        /// Unspecified instance size
        pub const INSTANCE_SIZE_UNSPECIFIED: InstanceSize = InstanceSize::new(0);

        /// Extra small instance size, maps to a scaling factor of 0.1.
        pub const EXTRA_SMALL: InstanceSize = InstanceSize::new(1);

        /// Small instance size, maps to a scaling factor of 0.5.
        pub const SMALL: InstanceSize = InstanceSize::new(2);

        /// Medium instance size, maps to a scaling factor of 1.0.
        pub const MEDIUM: InstanceSize = InstanceSize::new(3);

        /// Large instance size, maps to a scaling factor of 3.0.
        pub const LARGE: InstanceSize = InstanceSize::new(4);

        /// Extra large instance size, maps to a scaling factor of 6.0.
        pub const EXTRA_LARGE: InstanceSize = InstanceSize::new(5);

        /// Creates a new InstanceSize instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("INSTANCE_SIZE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("EXTRA_SMALL"),
                2 => std::borrow::Cow::Borrowed("SMALL"),
                3 => std::borrow::Cow::Borrowed("MEDIUM"),
                4 => std::borrow::Cow::Borrowed("LARGE"),
                5 => std::borrow::Cow::Borrowed("EXTRA_LARGE"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "INSTANCE_SIZE_UNSPECIFIED" => {
                    std::option::Option::Some(Self::INSTANCE_SIZE_UNSPECIFIED)
                }
                "EXTRA_SMALL" => std::option::Option::Some(Self::EXTRA_SMALL),
                "SMALL" => std::option::Option::Some(Self::SMALL),
                "MEDIUM" => std::option::Option::Some(Self::MEDIUM),
                "LARGE" => std::option::Option::Some(Self::LARGE),
                "EXTRA_LARGE" => std::option::Option::Some(Self::EXTRA_LARGE),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for InstanceSize {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for InstanceSize {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Represents either a predetermined instance size or a numeric
    /// scaling factor.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum ScalingModel {
        /// An enum of readable instance sizes, with each instance size mapping to a
        /// float value (e.g. InstanceSize.EXTRA_SMALL = scaling_factor(0.1))
        InstanceSize(crate::model::scaling_config::InstanceSize),
        /// Scaling factor, increments of 0.1 for values less than 1.0, and
        /// increments of 1.0 for values greater than 1.0.
        ScalingFactor(f32),
    }
}

/// Request message for
/// [DataprocMetastore.ListServices][google.cloud.metastore.v1.DataprocMetastore.ListServices].
///
/// [google.cloud.metastore.v1.DataprocMetastore.ListServices]: crate::client::DataprocMetastore::list_services
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListServicesRequest {
    /// Required. The relative resource name of the location of metastore services
    /// to list, in the following form:
    ///
    /// `projects/{project_number}/locations/{location_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of services to return. The response may
    /// contain less than the maximum number. If unspecified, no more than 500
    /// services are returned. The maximum value is 1000; values above 1000 are
    /// changed to 1000.
    pub page_size: i32,

    /// Optional. A page token, received from a previous
    /// [DataprocMetastore.ListServices][google.cloud.metastore.v1.DataprocMetastore.ListServices]
    /// call. Provide this token to retrieve the subsequent page.
    ///
    /// To retrieve the first page, supply an empty page token.
    ///
    /// When paginating, other parameters provided to
    /// [DataprocMetastore.ListServices][google.cloud.metastore.v1.DataprocMetastore.ListServices]
    /// must match the call that provided the page token.
    ///
    /// [google.cloud.metastore.v1.DataprocMetastore.ListServices]: crate::client::DataprocMetastore::list_services
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. The filter to apply to list results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. Specify the ordering of results as described in [Sorting
    /// Order](https://cloud.google.com/apis/design/design_patterns#sorting_order).
    /// If not specified, the results will be sorted in the default order.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListServicesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListServicesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListServicesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListServicesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListServicesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListServicesRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListServicesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.ListServicesRequest"
    }
}

/// Response message for
/// [DataprocMetastore.ListServices][google.cloud.metastore.v1.DataprocMetastore.ListServices].
///
/// [google.cloud.metastore.v1.DataprocMetastore.ListServices]: crate::client::DataprocMetastore::list_services
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListServicesResponse {
    /// The services in the specified location.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub services: std::vec::Vec<crate::model::Service>,

    /// A token that can be sent as `page_token` to retrieve the next page. If this
    /// field is omitted, there are no subsequent pages.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListServicesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListServicesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [services][crate::model::ListServicesResponse::services].
    pub fn set_services<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Service>,
    {
        use std::iter::Iterator;
        self.services = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListServicesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListServicesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.ListServicesResponse"
    }
}

impl gax::paginator::PageableResponse for ListServicesResponse {
    type PageItem = crate::model::Service;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.services
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request message for
/// [DataprocMetastore.GetService][google.cloud.metastore.v1.DataprocMetastore.GetService].
///
/// [google.cloud.metastore.v1.DataprocMetastore.GetService]: crate::client::DataprocMetastore::get_service
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetServiceRequest {
    /// Required. The relative resource name of the metastore service to retrieve,
    /// in the following form:
    ///
    /// `projects/{project_number}/locations/{location_id}/services/{service_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetServiceRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetServiceRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetServiceRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.GetServiceRequest"
    }
}

/// Request message for
/// [DataprocMetastore.CreateService][google.cloud.metastore.v1.DataprocMetastore.CreateService].
///
/// [google.cloud.metastore.v1.DataprocMetastore.CreateService]: crate::client::DataprocMetastore::create_service
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateServiceRequest {
    /// Required. The relative resource name of the location in which to create a
    /// metastore service, in the following form:
    ///
    /// `projects/{project_number}/locations/{location_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The ID of the metastore service, which is used as the final
    /// component of the metastore service's name.
    ///
    /// This value must be between 2 and 63 characters long inclusive, begin with a
    /// letter, end with a letter or number, and consist of alpha-numeric
    /// ASCII characters or hyphens.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_id: std::string::String,

    /// Required. The Metastore service to create. The `name` field is
    /// ignored. The ID of the created metastore service must be provided in
    /// the request's `service_id` field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub service: std::option::Option<crate::model::Service>,

    /// Optional. A request ID. Specify a unique request ID to allow the server to
    /// ignore the request if it has completed. The server will ignore subsequent
    /// requests that provide a duplicate request ID for at least 60 minutes after
    /// the first request.
    ///
    /// For example, if an initial request times out, followed by another request
    /// with the same request ID, the server ignores the second request to prevent
    /// the creation of duplicate commitments.
    ///
    /// The request ID must be a valid
    /// [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
    /// A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl CreateServiceRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateServiceRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [service_id][crate::model::CreateServiceRequest::service_id].
    pub fn set_service_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service_id = v.into();
        self
    }

    /// Sets the value of [service][crate::model::CreateServiceRequest::service].
    pub fn set_service<T: std::convert::Into<std::option::Option<crate::model::Service>>>(
        mut self,
        v: T,
    ) -> Self {
        self.service = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateServiceRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateServiceRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.CreateServiceRequest"
    }
}

/// Request message for
/// [DataprocMetastore.UpdateService][google.cloud.metastore.v1.DataprocMetastore.UpdateService].
///
/// [google.cloud.metastore.v1.DataprocMetastore.UpdateService]: crate::client::DataprocMetastore::update_service
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateServiceRequest {
    /// Required. A field mask used to specify the fields to be overwritten in the
    /// metastore service resource by the update.
    /// Fields specified in the `update_mask` are relative to the resource (not
    /// to the full request). A field is overwritten if it is in the mask.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The metastore service to update. The server only merges fields
    /// in the service if they are specified in `update_mask`.
    ///
    /// The metastore service's `name` field is used to identify the metastore
    /// service to be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub service: std::option::Option<crate::model::Service>,

    /// Optional. A request ID. Specify a unique request ID to allow the server to
    /// ignore the request if it has completed. The server will ignore subsequent
    /// requests that provide a duplicate request ID for at least 60 minutes after
    /// the first request.
    ///
    /// For example, if an initial request times out, followed by another request
    /// with the same request ID, the server ignores the second request to prevent
    /// the creation of duplicate commitments.
    ///
    /// The request ID must be a valid
    /// [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
    /// A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl UpdateServiceRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateServiceRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [service][crate::model::UpdateServiceRequest::service].
    pub fn set_service<T: std::convert::Into<std::option::Option<crate::model::Service>>>(
        mut self,
        v: T,
    ) -> Self {
        self.service = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateServiceRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for UpdateServiceRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.UpdateServiceRequest"
    }
}

/// Request message for
/// [DataprocMetastore.DeleteService][google.cloud.metastore.v1.DataprocMetastore.DeleteService].
///
/// [google.cloud.metastore.v1.DataprocMetastore.DeleteService]: crate::client::DataprocMetastore::delete_service
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteServiceRequest {
    /// Required. The relative resource name of the metastore service to delete, in
    /// the following form:
    ///
    /// `projects/{project_number}/locations/{location_id}/services/{service_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. A request ID. Specify a unique request ID to allow the server to
    /// ignore the request if it has completed. The server will ignore subsequent
    /// requests that provide a duplicate request ID for at least 60 minutes after
    /// the first request.
    ///
    /// For example, if an initial request times out, followed by another request
    /// with the same request ID, the server ignores the second request to prevent
    /// the creation of duplicate commitments.
    ///
    /// The request ID must be a valid
    /// [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
    /// A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl DeleteServiceRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteServiceRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteServiceRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for DeleteServiceRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.DeleteServiceRequest"
    }
}

/// Request message for
/// [DataprocMetastore.ListMetadataImports][google.cloud.metastore.v1.DataprocMetastore.ListMetadataImports].
///
/// [google.cloud.metastore.v1.DataprocMetastore.ListMetadataImports]: crate::client::DataprocMetastore::list_metadata_imports
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListMetadataImportsRequest {
    /// Required. The relative resource name of the service whose metadata imports
    /// to list, in the following form:
    ///
    /// `projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of imports to return. The response may contain
    /// less than the maximum number. If unspecified, no more than 500 imports are
    /// returned. The maximum value is 1000; values above 1000 are changed to 1000.
    pub page_size: i32,

    /// Optional. A page token, received from a previous
    /// [DataprocMetastore.ListServices][google.cloud.metastore.v1.DataprocMetastore.ListServices]
    /// call. Provide this token to retrieve the subsequent page.
    ///
    /// To retrieve the first page, supply an empty page token.
    ///
    /// When paginating, other parameters provided to
    /// [DataprocMetastore.ListServices][google.cloud.metastore.v1.DataprocMetastore.ListServices]
    /// must match the call that provided the page token.
    ///
    /// [google.cloud.metastore.v1.DataprocMetastore.ListServices]: crate::client::DataprocMetastore::list_services
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. The filter to apply to list results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. Specify the ordering of results as described in [Sorting
    /// Order](https://cloud.google.com/apis/design/design_patterns#sorting_order).
    /// If not specified, the results will be sorted in the default order.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListMetadataImportsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListMetadataImportsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListMetadataImportsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListMetadataImportsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListMetadataImportsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListMetadataImportsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListMetadataImportsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.ListMetadataImportsRequest"
    }
}

/// Response message for
/// [DataprocMetastore.ListMetadataImports][google.cloud.metastore.v1.DataprocMetastore.ListMetadataImports].
///
/// [google.cloud.metastore.v1.DataprocMetastore.ListMetadataImports]: crate::client::DataprocMetastore::list_metadata_imports
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListMetadataImportsResponse {
    /// The imports in the specified service.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub metadata_imports: std::vec::Vec<crate::model::MetadataImport>,

    /// A token that can be sent as `page_token` to retrieve the next page. If this
    /// field is omitted, there are no subsequent pages.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListMetadataImportsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListMetadataImportsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [metadata_imports][crate::model::ListMetadataImportsResponse::metadata_imports].
    pub fn set_metadata_imports<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::MetadataImport>,
    {
        use std::iter::Iterator;
        self.metadata_imports = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListMetadataImportsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListMetadataImportsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.ListMetadataImportsResponse"
    }
}

impl gax::paginator::PageableResponse for ListMetadataImportsResponse {
    type PageItem = crate::model::MetadataImport;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.metadata_imports
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request message for
/// [DataprocMetastore.GetMetadataImport][google.cloud.metastore.v1.DataprocMetastore.GetMetadataImport].
///
/// [google.cloud.metastore.v1.DataprocMetastore.GetMetadataImport]: crate::client::DataprocMetastore::get_metadata_import
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetMetadataImportRequest {
    /// Required. The relative resource name of the metadata import to retrieve, in
    /// the following form:
    ///
    /// `projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{import_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetMetadataImportRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetMetadataImportRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetMetadataImportRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.GetMetadataImportRequest"
    }
}

/// Request message for
/// [DataprocMetastore.CreateMetadataImport][google.cloud.metastore.v1.DataprocMetastore.CreateMetadataImport].
///
/// [google.cloud.metastore.v1.DataprocMetastore.CreateMetadataImport]: crate::client::DataprocMetastore::create_metadata_import
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateMetadataImportRequest {
    /// Required. The relative resource name of the service in which to create a
    /// metastore import, in the following form:
    ///
    /// `projects/{project_number}/locations/{location_id}/services/{service_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The ID of the metadata import, which is used as the final
    /// component of the metadata import's name.
    ///
    /// This value must be between 1 and 64 characters long, begin with a letter,
    /// end with a letter or number, and consist of alpha-numeric ASCII characters
    /// or hyphens.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub metadata_import_id: std::string::String,

    /// Required. The metadata import to create. The `name` field is ignored. The
    /// ID of the created metadata import must be provided in the request's
    /// `metadata_import_id` field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub metadata_import: std::option::Option<crate::model::MetadataImport>,

    /// Optional. A request ID. Specify a unique request ID to allow the server to
    /// ignore the request if it has completed. The server will ignore subsequent
    /// requests that provide a duplicate request ID for at least 60 minutes after
    /// the first request.
    ///
    /// For example, if an initial request times out, followed by another request
    /// with the same request ID, the server ignores the second request to prevent
    /// the creation of duplicate commitments.
    ///
    /// The request ID must be a valid
    /// [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
    /// A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl CreateMetadataImportRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateMetadataImportRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [metadata_import_id][crate::model::CreateMetadataImportRequest::metadata_import_id].
    pub fn set_metadata_import_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.metadata_import_id = v.into();
        self
    }

    /// Sets the value of [metadata_import][crate::model::CreateMetadataImportRequest::metadata_import].
    pub fn set_metadata_import<
        T: std::convert::Into<std::option::Option<crate::model::MetadataImport>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.metadata_import = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateMetadataImportRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateMetadataImportRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.CreateMetadataImportRequest"
    }
}

/// Request message for
/// [DataprocMetastore.UpdateMetadataImport][google.cloud.metastore.v1.DataprocMetastore.UpdateMetadataImport].
///
/// [google.cloud.metastore.v1.DataprocMetastore.UpdateMetadataImport]: crate::client::DataprocMetastore::update_metadata_import
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateMetadataImportRequest {
    /// Required. A field mask used to specify the fields to be overwritten in the
    /// metadata import resource by the update.
    /// Fields specified in the `update_mask` are relative to the resource (not
    /// to the full request). A field is overwritten if it is in the mask.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The metadata import to update. The server only merges fields
    /// in the import if they are specified in `update_mask`.
    ///
    /// The metadata import's `name` field is used to identify the metastore
    /// import to be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub metadata_import: std::option::Option<crate::model::MetadataImport>,

    /// Optional. A request ID. Specify a unique request ID to allow the server to
    /// ignore the request if it has completed. The server will ignore subsequent
    /// requests that provide a duplicate request ID for at least 60 minutes after
    /// the first request.
    ///
    /// For example, if an initial request times out, followed by another request
    /// with the same request ID, the server ignores the second request to prevent
    /// the creation of duplicate commitments.
    ///
    /// The request ID must be a valid
    /// [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
    /// A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl UpdateMetadataImportRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateMetadataImportRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [metadata_import][crate::model::UpdateMetadataImportRequest::metadata_import].
    pub fn set_metadata_import<
        T: std::convert::Into<std::option::Option<crate::model::MetadataImport>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.metadata_import = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateMetadataImportRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for UpdateMetadataImportRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.UpdateMetadataImportRequest"
    }
}

/// Request message for
/// [DataprocMetastore.ListBackups][google.cloud.metastore.v1.DataprocMetastore.ListBackups].
///
/// [google.cloud.metastore.v1.DataprocMetastore.ListBackups]: crate::client::DataprocMetastore::list_backups
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListBackupsRequest {
    /// Required. The relative resource name of the service whose backups to
    /// list, in the following form:
    ///
    /// `projects/{project_number}/locations/{location_id}/services/{service_id}/backups`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of backups to return. The response may contain
    /// less than the maximum number. If unspecified, no more than 500 backups are
    /// returned. The maximum value is 1000; values above 1000 are changed to 1000.
    pub page_size: i32,

    /// Optional. A page token, received from a previous
    /// [DataprocMetastore.ListBackups][google.cloud.metastore.v1.DataprocMetastore.ListBackups]
    /// call. Provide this token to retrieve the subsequent page.
    ///
    /// To retrieve the first page, supply an empty page token.
    ///
    /// When paginating, other parameters provided to
    /// [DataprocMetastore.ListBackups][google.cloud.metastore.v1.DataprocMetastore.ListBackups]
    /// must match the call that provided the page token.
    ///
    /// [google.cloud.metastore.v1.DataprocMetastore.ListBackups]: crate::client::DataprocMetastore::list_backups
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. The filter to apply to list results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. Specify the ordering of results as described in [Sorting
    /// Order](https://cloud.google.com/apis/design/design_patterns#sorting_order).
    /// If not specified, the results will be sorted in the default order.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListBackupsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListBackupsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListBackupsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListBackupsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListBackupsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListBackupsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListBackupsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.ListBackupsRequest"
    }
}

/// Response message for
/// [DataprocMetastore.ListBackups][google.cloud.metastore.v1.DataprocMetastore.ListBackups].
///
/// [google.cloud.metastore.v1.DataprocMetastore.ListBackups]: crate::client::DataprocMetastore::list_backups
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListBackupsResponse {
    /// The backups of the specified service.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub backups: std::vec::Vec<crate::model::Backup>,

    /// A token that can be sent as `page_token` to retrieve the next page. If this
    /// field is omitted, there are no subsequent pages.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListBackupsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListBackupsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [backups][crate::model::ListBackupsResponse::backups].
    pub fn set_backups<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Backup>,
    {
        use std::iter::Iterator;
        self.backups = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListBackupsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListBackupsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.ListBackupsResponse"
    }
}

impl gax::paginator::PageableResponse for ListBackupsResponse {
    type PageItem = crate::model::Backup;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.backups
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request message for
/// [DataprocMetastore.GetBackup][google.cloud.metastore.v1.DataprocMetastore.GetBackup].
///
/// [google.cloud.metastore.v1.DataprocMetastore.GetBackup]: crate::client::DataprocMetastore::get_backup
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetBackupRequest {
    /// Required. The relative resource name of the backup to retrieve, in the
    /// following form:
    ///
    /// `projects/{project_number}/locations/{location_id}/services/{service_id}/backups/{backup_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetBackupRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetBackupRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetBackupRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.GetBackupRequest"
    }
}

/// Request message for
/// [DataprocMetastore.CreateBackup][google.cloud.metastore.v1.DataprocMetastore.CreateBackup].
///
/// [google.cloud.metastore.v1.DataprocMetastore.CreateBackup]: crate::client::DataprocMetastore::create_backup
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateBackupRequest {
    /// Required. The relative resource name of the service in which to create a
    /// backup of the following form:
    ///
    /// `projects/{project_number}/locations/{location_id}/services/{service_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The ID of the backup, which is used as the final component of the
    /// backup's name.
    ///
    /// This value must be between 1 and 64 characters long, begin with a letter,
    /// end with a letter or number, and consist of alpha-numeric ASCII characters
    /// or hyphens.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub backup_id: std::string::String,

    /// Required. The backup to create. The `name` field is ignored. The ID of the
    /// created backup must be provided in the request's `backup_id` field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub backup: std::option::Option<crate::model::Backup>,

    /// Optional. A request ID. Specify a unique request ID to allow the server to
    /// ignore the request if it has completed. The server will ignore subsequent
    /// requests that provide a duplicate request ID for at least 60 minutes after
    /// the first request.
    ///
    /// For example, if an initial request times out, followed by another request
    /// with the same request ID, the server ignores the second request to prevent
    /// the creation of duplicate commitments.
    ///
    /// The request ID must be a valid
    /// [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
    /// A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl CreateBackupRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateBackupRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [backup_id][crate::model::CreateBackupRequest::backup_id].
    pub fn set_backup_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.backup_id = v.into();
        self
    }

    /// Sets the value of [backup][crate::model::CreateBackupRequest::backup].
    pub fn set_backup<T: std::convert::Into<std::option::Option<crate::model::Backup>>>(
        mut self,
        v: T,
    ) -> Self {
        self.backup = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateBackupRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateBackupRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.CreateBackupRequest"
    }
}

/// Request message for
/// [DataprocMetastore.DeleteBackup][google.cloud.metastore.v1.DataprocMetastore.DeleteBackup].
///
/// [google.cloud.metastore.v1.DataprocMetastore.DeleteBackup]: crate::client::DataprocMetastore::delete_backup
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteBackupRequest {
    /// Required. The relative resource name of the backup to delete, in the
    /// following form:
    ///
    /// `projects/{project_number}/locations/{location_id}/services/{service_id}/backups/{backup_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. A request ID. Specify a unique request ID to allow the server to
    /// ignore the request if it has completed. The server will ignore subsequent
    /// requests that provide a duplicate request ID for at least 60 minutes after
    /// the first request.
    ///
    /// For example, if an initial request times out, followed by another request
    /// with the same request ID, the server ignores the second request to prevent
    /// the creation of duplicate commitments.
    ///
    /// The request ID must be a valid
    /// [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
    /// A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl DeleteBackupRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteBackupRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteBackupRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for DeleteBackupRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.DeleteBackupRequest"
    }
}

/// Request message for
/// [DataprocMetastore.ExportMetadata][google.cloud.metastore.v1.DataprocMetastore.ExportMetadata].
///
/// [google.cloud.metastore.v1.DataprocMetastore.ExportMetadata]: crate::client::DataprocMetastore::export_metadata
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportMetadataRequest {
    /// Required. The relative resource name of the metastore service to run
    /// export, in the following form:
    ///
    /// `projects/{project_id}/locations/{location_id}/services/{service_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service: std::string::String,

    /// Optional. A request ID. Specify a unique request ID to allow the server to
    /// ignore the request if it has completed. The server will ignore subsequent
    /// requests that provide a duplicate request ID for at least 60 minutes after
    /// the first request.
    ///
    /// For example, if an initial request times out, followed by another request
    /// with the same request ID, the server ignores the second request to prevent
    /// the creation of duplicate commitments.
    ///
    /// The request ID must be a valid
    /// [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format).
    /// A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. The type of the database dump. If unspecified, defaults to
    /// `MYSQL`.
    pub database_dump_type: crate::model::database_dump_spec::Type,

    /// Required. Destination that metadata is exported to.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub destination: std::option::Option<crate::model::export_metadata_request::Destination>,
}

impl ExportMetadataRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [service][crate::model::ExportMetadataRequest::service].
    pub fn set_service<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::ExportMetadataRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [database_dump_type][crate::model::ExportMetadataRequest::database_dump_type].
    pub fn set_database_dump_type<T: std::convert::Into<crate::model::database_dump_spec::Type>>(
        mut self,
        v: T,
    ) -> Self {
        self.database_dump_type = v.into();
        self
    }

    /// Sets the value of `destination`.
    pub fn set_destination<
        T: std::convert::Into<std::option::Option<crate::model::export_metadata_request::Destination>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination = v.into();
        self
    }

    /// The value of [destination][crate::model::ExportMetadataRequest::destination]
    /// if it holds a `DestinationGcsFolder`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_destination_gcs_folder(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.destination.as_ref().and_then(|v| match v {
            crate::model::export_metadata_request::Destination::DestinationGcsFolder(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [destination][crate::model::ExportMetadataRequest::destination]
    /// to hold a `DestinationGcsFolder`.
    ///
    /// Note that all the setters affecting `destination` are
    /// mutually exclusive.
    pub fn set_destination_gcs_folder<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.destination = std::option::Option::Some(
            crate::model::export_metadata_request::Destination::DestinationGcsFolder(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ExportMetadataRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.ExportMetadataRequest"
    }
}

/// Defines additional types related to ExportMetadataRequest
pub mod export_metadata_request {
    #[allow(unused_imports)]
    use super::*;

    /// Required. Destination that metadata is exported to.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Destination {
        /// A Cloud Storage URI of a folder, in the format
        /// `gs://<bucket_name>/<path_inside_bucket>`. A sub-folder
        /// `<export_folder>` containing exported files will be created below it.
        DestinationGcsFolder(std::string::String),
    }
}

/// Request message for [DataprocMetastore.Restore][].
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RestoreServiceRequest {
    /// Required. The relative resource name of the metastore service to run
    /// restore, in the following form:
    ///
    /// `projects/{project_id}/locations/{location_id}/services/{service_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service: std::string::String,

    /// Required. The relative resource name of the metastore service backup to
    /// restore from, in the following form:
    ///
    /// `projects/{project_id}/locations/{location_id}/services/{service_id}/backups/{backup_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub backup: std::string::String,

    /// Optional. The type of restore. If unspecified, defaults to `METADATA_ONLY`.
    pub restore_type: crate::model::restore::RestoreType,

    /// Optional. A request ID. Specify a unique request ID to allow the server to
    /// ignore the request if it has completed. The server will ignore subsequent
    /// requests that provide a duplicate request ID for at least 60 minutes after
    /// the first request.
    ///
    /// For example, if an initial request times out, followed by another request
    /// with the same request ID, the server ignores the second request to prevent
    /// the creation of duplicate commitments.
    ///
    /// The request ID must be a valid
    /// [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format).
    /// A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl RestoreServiceRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [service][crate::model::RestoreServiceRequest::service].
    pub fn set_service<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service = v.into();
        self
    }

    /// Sets the value of [backup][crate::model::RestoreServiceRequest::backup].
    pub fn set_backup<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.backup = v.into();
        self
    }

    /// Sets the value of [restore_type][crate::model::RestoreServiceRequest::restore_type].
    pub fn set_restore_type<T: std::convert::Into<crate::model::restore::RestoreType>>(
        mut self,
        v: T,
    ) -> Self {
        self.restore_type = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::RestoreServiceRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for RestoreServiceRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.RestoreServiceRequest"
    }
}

/// Represents the metadata of a long-running operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OperationMetadata {
    /// Output only. The time the operation was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the operation finished running.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Server-defined resource path for the target of the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target: std::string::String,

    /// Output only. Name of the verb executed by the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub verb: std::string::String,

    /// Output only. Human-readable status of the operation, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub status_message: std::string::String,

    /// Output only. Identifies whether the caller has requested cancellation
    /// of the operation. Operations that have successfully been cancelled
    /// have [Operation.error][] value with a
    /// [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
    /// `Code.CANCELLED`.
    ///
    /// [google.rpc.Status.code]: rpc::model::Status::code
    pub requested_cancellation: bool,

    /// Output only. API version used to start the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub api_version: std::string::String,
}

impl OperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [create_time][crate::model::OperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::OperationMetadata::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [target][crate::model::OperationMetadata::target].
    pub fn set_target<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [verb][crate::model::OperationMetadata::verb].
    pub fn set_verb<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.verb = v.into();
        self
    }

    /// Sets the value of [status_message][crate::model::OperationMetadata::status_message].
    pub fn set_status_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.status_message = v.into();
        self
    }

    /// Sets the value of [requested_cancellation][crate::model::OperationMetadata::requested_cancellation].
    pub fn set_requested_cancellation<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.requested_cancellation = v.into();
        self
    }

    /// Sets the value of [api_version][crate::model::OperationMetadata::api_version].
    pub fn set_api_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.api_version = v.into();
        self
    }
}

impl wkt::message::Message for OperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.OperationMetadata"
    }
}

/// Metadata about the service in a location.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct LocationMetadata {
    /// The versions of Hive Metastore that can be used when creating a new
    /// metastore service in this location. The server guarantees that exactly one
    /// `HiveMetastoreVersion` in the list will set `is_default`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub supported_hive_metastore_versions:
        std::vec::Vec<crate::model::location_metadata::HiveMetastoreVersion>,
}

impl LocationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [supported_hive_metastore_versions][crate::model::LocationMetadata::supported_hive_metastore_versions].
    pub fn set_supported_hive_metastore_versions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::location_metadata::HiveMetastoreVersion>,
    {
        use std::iter::Iterator;
        self.supported_hive_metastore_versions = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for LocationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.LocationMetadata"
    }
}

/// Defines additional types related to LocationMetadata
pub mod location_metadata {
    #[allow(unused_imports)]
    use super::*;

    /// A specification of a supported version of the Hive Metastore software.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct HiveMetastoreVersion {
        /// The semantic version of the Hive Metastore software.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub version: std::string::String,

        /// Whether `version` will be chosen by the server if a metastore service is
        /// created with a `HiveMetastoreConfig` that omits the `version`.
        pub is_default: bool,
    }

    impl HiveMetastoreVersion {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [version][crate::model::location_metadata::HiveMetastoreVersion::version].
        pub fn set_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.version = v.into();
            self
        }

        /// Sets the value of [is_default][crate::model::location_metadata::HiveMetastoreVersion::is_default].
        pub fn set_is_default<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.is_default = v.into();
            self
        }
    }

    impl wkt::message::Message for HiveMetastoreVersion {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.metastore.v1.LocationMetadata.HiveMetastoreVersion"
        }
    }
}

/// The specification of database dump to import from or export to.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DatabaseDumpSpec {}

impl DatabaseDumpSpec {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for DatabaseDumpSpec {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.DatabaseDumpSpec"
    }
}

/// Defines additional types related to DatabaseDumpSpec
pub mod database_dump_spec {
    #[allow(unused_imports)]
    use super::*;

    /// The type of the database dump.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Type(i32);

    impl Type {
        /// The type of the database dump is unknown.
        pub const TYPE_UNSPECIFIED: Type = Type::new(0);

        /// Database dump is a MySQL dump file.
        pub const MYSQL: Type = Type::new(1);

        /// Database dump contains Avro files.
        pub const AVRO: Type = Type::new(2);

        /// Creates a new Type instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("TYPE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("MYSQL"),
                2 => std::borrow::Cow::Borrowed("AVRO"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "TYPE_UNSPECIFIED" => std::option::Option::Some(Self::TYPE_UNSPECIFIED),
                "MYSQL" => std::option::Option::Some(Self::MYSQL),
                "AVRO" => std::option::Option::Some(Self::AVRO),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for Type {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for Type {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Request message for
/// [DataprocMetastore.QueryMetadata][google.cloud.metastore.v1.DataprocMetastore.QueryMetadata].
///
/// [google.cloud.metastore.v1.DataprocMetastore.QueryMetadata]: crate::client::DataprocMetastore::query_metadata
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct QueryMetadataRequest {
    /// Required. The relative resource name of the metastore service to query
    /// metadata, in the following format:
    ///
    /// `projects/{project_id}/locations/{location_id}/services/{service_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service: std::string::String,

    /// Required. A read-only SQL query to execute against the metadata database.
    /// The query cannot change or mutate the data.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub query: std::string::String,
}

impl QueryMetadataRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [service][crate::model::QueryMetadataRequest::service].
    pub fn set_service<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service = v.into();
        self
    }

    /// Sets the value of [query][crate::model::QueryMetadataRequest::query].
    pub fn set_query<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.query = v.into();
        self
    }
}

impl wkt::message::Message for QueryMetadataRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.QueryMetadataRequest"
    }
}

/// Response message for
/// [DataprocMetastore.QueryMetadata][google.cloud.metastore.v1.DataprocMetastore.QueryMetadata].
///
/// [google.cloud.metastore.v1.DataprocMetastore.QueryMetadata]: crate::client::DataprocMetastore::query_metadata
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct QueryMetadataResponse {
    /// The manifest URI  is link to a JSON instance in Cloud Storage.
    /// This instance manifests immediately along with QueryMetadataResponse. The
    /// content of the URI is not retriable until the long-running operation query
    /// against the metadata finishes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub result_manifest_uri: std::string::String,
}

impl QueryMetadataResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [result_manifest_uri][crate::model::QueryMetadataResponse::result_manifest_uri].
    pub fn set_result_manifest_uri<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.result_manifest_uri = v.into();
        self
    }
}

impl wkt::message::Message for QueryMetadataResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.QueryMetadataResponse"
    }
}

/// Error details in public error message for
/// [DataprocMetastore.QueryMetadata][google.cloud.metastore.v1.DataprocMetastore.QueryMetadata].
///
/// [google.cloud.metastore.v1.DataprocMetastore.QueryMetadata]: crate::client::DataprocMetastore::query_metadata
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ErrorDetails {
    /// Additional structured details about this error.
    ///
    /// Keys define the failure items.
    /// Value describes the exception or details of the item.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub details: std::collections::HashMap<std::string::String, std::string::String>,
}

impl ErrorDetails {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [details][crate::model::ErrorDetails::details].
    pub fn set_details<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.details = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for ErrorDetails {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.ErrorDetails"
    }
}

/// Request message for
/// [DataprocMetastore.MoveTableToDatabase][google.cloud.metastore.v1.DataprocMetastore.MoveTableToDatabase].
///
/// [google.cloud.metastore.v1.DataprocMetastore.MoveTableToDatabase]: crate::client::DataprocMetastore::move_table_to_database
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MoveTableToDatabaseRequest {
    /// Required. The relative resource name of the metastore service to mutate
    /// metadata, in the following format:
    ///
    /// `projects/{project_id}/locations/{location_id}/services/{service_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service: std::string::String,

    /// Required. The name of the table to be moved.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub table_name: std::string::String,

    /// Required. The name of the database where the table resides.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub db_name: std::string::String,

    /// Required. The name of the database where the table should be moved.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub destination_db_name: std::string::String,
}

impl MoveTableToDatabaseRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [service][crate::model::MoveTableToDatabaseRequest::service].
    pub fn set_service<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service = v.into();
        self
    }

    /// Sets the value of [table_name][crate::model::MoveTableToDatabaseRequest::table_name].
    pub fn set_table_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.table_name = v.into();
        self
    }

    /// Sets the value of [db_name][crate::model::MoveTableToDatabaseRequest::db_name].
    pub fn set_db_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.db_name = v.into();
        self
    }

    /// Sets the value of [destination_db_name][crate::model::MoveTableToDatabaseRequest::destination_db_name].
    pub fn set_destination_db_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.destination_db_name = v.into();
        self
    }
}

impl wkt::message::Message for MoveTableToDatabaseRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.MoveTableToDatabaseRequest"
    }
}

/// Response message for
/// [DataprocMetastore.MoveTableToDatabase][google.cloud.metastore.v1.DataprocMetastore.MoveTableToDatabase].
///
/// [google.cloud.metastore.v1.DataprocMetastore.MoveTableToDatabase]: crate::client::DataprocMetastore::move_table_to_database
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MoveTableToDatabaseResponse {}

impl MoveTableToDatabaseResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for MoveTableToDatabaseResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.MoveTableToDatabaseResponse"
    }
}

/// Request message for
/// [DataprocMetastore.AlterMetadataResourceLocation][google.cloud.metastore.v1.DataprocMetastore.AlterMetadataResourceLocation].
///
/// [google.cloud.metastore.v1.DataprocMetastore.AlterMetadataResourceLocation]: crate::client::DataprocMetastore::alter_metadata_resource_location
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AlterMetadataResourceLocationRequest {
    /// Required. The relative resource name of the metastore service to mutate
    /// metadata, in the following format:
    ///
    /// `projects/{project_id}/locations/{location_id}/services/{service_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service: std::string::String,

    /// Required. The relative metadata resource name in the following format.
    ///
    /// `databases/{database_id}`
    /// or
    /// `databases/{database_id}/tables/{table_id}`
    /// or
    /// `databases/{database_id}/tables/{table_id}/partitions/{partition_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub resource_name: std::string::String,

    /// Required. The new location URI for the metadata resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub location_uri: std::string::String,
}

impl AlterMetadataResourceLocationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [service][crate::model::AlterMetadataResourceLocationRequest::service].
    pub fn set_service<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service = v.into();
        self
    }

    /// Sets the value of [resource_name][crate::model::AlterMetadataResourceLocationRequest::resource_name].
    pub fn set_resource_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.resource_name = v.into();
        self
    }

    /// Sets the value of [location_uri][crate::model::AlterMetadataResourceLocationRequest::location_uri].
    pub fn set_location_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.location_uri = v.into();
        self
    }
}

impl wkt::message::Message for AlterMetadataResourceLocationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.AlterMetadataResourceLocationRequest"
    }
}

/// Response message for
/// [DataprocMetastore.AlterMetadataResourceLocation][google.cloud.metastore.v1.DataprocMetastore.AlterMetadataResourceLocation].
///
/// [google.cloud.metastore.v1.DataprocMetastore.AlterMetadataResourceLocation]: crate::client::DataprocMetastore::alter_metadata_resource_location
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AlterMetadataResourceLocationResponse {}

impl AlterMetadataResourceLocationResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for AlterMetadataResourceLocationResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.AlterMetadataResourceLocationResponse"
    }
}

/// Represents a federation of multiple backend metastores.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Federation {
    /// Immutable. The relative resource name of the federation, of the
    /// form:
    /// projects/{project_number}/locations/{location_id}/federations/{federation_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The time when the metastore federation was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time when the metastore federation was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// User-defined labels for the metastore federation.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Immutable. The Apache Hive metastore version of the federation. All backend
    /// metastore versions must be compatible with the federation version.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub version: std::string::String,

    /// A map from `BackendMetastore` rank to `BackendMetastore`s from which the
    /// federation service serves metadata at query time. The map key represents
    /// the order in which `BackendMetastore`s should be evaluated to resolve
    /// database names at query time and should be greater than or equal to zero. A
    /// `BackendMetastore` with a lower number will be evaluated before a
    /// `BackendMetastore` with a higher number.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub backend_metastores: std::collections::HashMap<i32, crate::model::BackendMetastore>,

    /// Output only. The federation endpoint.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub endpoint_uri: std::string::String,

    /// Output only. The current state of the federation.
    pub state: crate::model::federation::State,

    /// Output only. Additional information about the current state of the
    /// metastore federation, if available.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub state_message: std::string::String,

    /// Output only. The globally unique resource identifier of the metastore
    /// federation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uid: std::string::String,
}

impl Federation {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Federation::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Federation::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Federation::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [version][crate::model::Federation::version].
    pub fn set_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.version = v.into();
        self
    }

    /// Sets the value of [endpoint_uri][crate::model::Federation::endpoint_uri].
    pub fn set_endpoint_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.endpoint_uri = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Federation::state].
    pub fn set_state<T: std::convert::Into<crate::model::federation::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [state_message][crate::model::Federation::state_message].
    pub fn set_state_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.state_message = v.into();
        self
    }

    /// Sets the value of [uid][crate::model::Federation::uid].
    pub fn set_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uid = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::Federation::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [backend_metastores][crate::model::Federation::backend_metastores].
    pub fn set_backend_metastores<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<i32>,
        V: std::convert::Into<crate::model::BackendMetastore>,
    {
        use std::iter::Iterator;
        self.backend_metastores = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Federation {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.Federation"
    }
}

/// Defines additional types related to Federation
pub mod federation {
    #[allow(unused_imports)]
    use super::*;

    /// The current state of the federation.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// The state of the metastore federation is unknown.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// The metastore federation is in the process of being created.
        pub const CREATING: State = State::new(1);

        /// The metastore federation is running and ready to serve queries.
        pub const ACTIVE: State = State::new(2);

        /// The metastore federation is being updated. It remains usable but cannot
        /// accept additional update requests or be deleted at this time.
        pub const UPDATING: State = State::new(3);

        /// The metastore federation is undergoing deletion. It cannot be used.
        pub const DELETING: State = State::new(4);

        /// The metastore federation has encountered an error and cannot be used. The
        /// metastore federation should be deleted.
        pub const ERROR: State = State::new(5);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CREATING"),
                2 => std::borrow::Cow::Borrowed("ACTIVE"),
                3 => std::borrow::Cow::Borrowed("UPDATING"),
                4 => std::borrow::Cow::Borrowed("DELETING"),
                5 => std::borrow::Cow::Borrowed("ERROR"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "CREATING" => std::option::Option::Some(Self::CREATING),
                "ACTIVE" => std::option::Option::Some(Self::ACTIVE),
                "UPDATING" => std::option::Option::Some(Self::UPDATING),
                "DELETING" => std::option::Option::Some(Self::DELETING),
                "ERROR" => std::option::Option::Some(Self::ERROR),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Represents a backend metastore for the federation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BackendMetastore {
    /// The relative resource name of the metastore that is being federated.
    /// The formats of the relative resource names for the currently supported
    /// metastores are listed below:
    ///
    /// * BigQuery
    ///   * `projects/{project_id}`
    /// * Dataproc Metastore
    ///   * `projects/{project_id}/locations/{location}/services/{service_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The type of the backend metastore.
    pub metastore_type: crate::model::backend_metastore::MetastoreType,
}

impl BackendMetastore {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::BackendMetastore::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [metastore_type][crate::model::BackendMetastore::metastore_type].
    pub fn set_metastore_type<
        T: std::convert::Into<crate::model::backend_metastore::MetastoreType>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.metastore_type = v.into();
        self
    }
}

impl wkt::message::Message for BackendMetastore {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.BackendMetastore"
    }
}

/// Defines additional types related to BackendMetastore
pub mod backend_metastore {
    #[allow(unused_imports)]
    use super::*;

    /// The type of the backend metastore.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct MetastoreType(i32);

    impl MetastoreType {
        /// The metastore type is not set.
        pub const METASTORE_TYPE_UNSPECIFIED: MetastoreType = MetastoreType::new(0);

        /// The backend metastore is BigQuery.
        pub const BIGQUERY: MetastoreType = MetastoreType::new(2);

        /// The backend metastore is Dataproc Metastore.
        pub const DATAPROC_METASTORE: MetastoreType = MetastoreType::new(3);

        /// Creates a new MetastoreType instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("METASTORE_TYPE_UNSPECIFIED"),
                2 => std::borrow::Cow::Borrowed("BIGQUERY"),
                3 => std::borrow::Cow::Borrowed("DATAPROC_METASTORE"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "METASTORE_TYPE_UNSPECIFIED" => {
                    std::option::Option::Some(Self::METASTORE_TYPE_UNSPECIFIED)
                }
                "BIGQUERY" => std::option::Option::Some(Self::BIGQUERY),
                "DATAPROC_METASTORE" => std::option::Option::Some(Self::DATAPROC_METASTORE),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for MetastoreType {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for MetastoreType {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Request message for ListFederations.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListFederationsRequest {
    /// Required. The relative resource name of the location of metastore
    /// federations to list, in the following form:
    /// `projects/{project_number}/locations/{location_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of federations to return. The response may
    /// contain less than the maximum number. If unspecified, no more than 500
    /// services are returned. The maximum value is 1000; values above 1000 are
    /// changed to 1000.
    pub page_size: i32,

    /// Optional. A page token, received from a previous ListFederationServices
    /// call. Provide this token to retrieve the subsequent page.
    ///
    /// To retrieve the first page, supply an empty page token.
    ///
    /// When paginating, other parameters provided to
    /// ListFederationServices must match the call that provided the
    /// page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. The filter to apply to list results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. Specify the ordering of results as described in [Sorting
    /// Order](https://cloud.google.com/apis/design/design_patterns#sorting_order).
    /// If not specified, the results will be sorted in the default order.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListFederationsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListFederationsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListFederationsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListFederationsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListFederationsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListFederationsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListFederationsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.ListFederationsRequest"
    }
}

/// Response message for ListFederations
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListFederationsResponse {
    /// The services in the specified location.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub federations: std::vec::Vec<crate::model::Federation>,

    /// A token that can be sent as `page_token` to retrieve the next page. If this
    /// field is omitted, there are no subsequent pages.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListFederationsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListFederationsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [federations][crate::model::ListFederationsResponse::federations].
    pub fn set_federations<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Federation>,
    {
        use std::iter::Iterator;
        self.federations = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListFederationsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListFederationsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.ListFederationsResponse"
    }
}

impl gax::paginator::PageableResponse for ListFederationsResponse {
    type PageItem = crate::model::Federation;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.federations
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request message for GetFederation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetFederationRequest {
    /// Required. The relative resource name of the metastore federation to
    /// retrieve, in the following form:
    ///
    /// `projects/{project_number}/locations/{location_id}/federations/{federation_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetFederationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetFederationRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetFederationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.GetFederationRequest"
    }
}

/// Request message for CreateFederation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateFederationRequest {
    /// Required. The relative resource name of the location in which to create a
    /// federation service, in the following form:
    ///
    /// `projects/{project_number}/locations/{location_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The ID of the metastore federation, which is used as the final
    /// component of the metastore federation's name.
    ///
    /// This value must be between 2 and 63 characters long inclusive, begin with a
    /// letter, end with a letter or number, and consist of alpha-numeric
    /// ASCII characters or hyphens.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub federation_id: std::string::String,

    /// Required. The Metastore Federation to create. The `name` field is
    /// ignored. The ID of the created metastore federation must be
    /// provided in the request's `federation_id` field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub federation: std::option::Option<crate::model::Federation>,

    /// Optional. A request ID. Specify a unique request ID to allow the server to
    /// ignore the request if it has completed. The server will ignore subsequent
    /// requests that provide a duplicate request ID for at least 60 minutes after
    /// the first request.
    ///
    /// For example, if an initial request times out, followed by another request
    /// with the same request ID, the server ignores the second request to prevent
    /// the creation of duplicate commitments.
    ///
    /// The request ID must be a valid
    /// [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
    /// A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl CreateFederationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateFederationRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [federation_id][crate::model::CreateFederationRequest::federation_id].
    pub fn set_federation_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.federation_id = v.into();
        self
    }

    /// Sets the value of [federation][crate::model::CreateFederationRequest::federation].
    pub fn set_federation<T: std::convert::Into<std::option::Option<crate::model::Federation>>>(
        mut self,
        v: T,
    ) -> Self {
        self.federation = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateFederationRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateFederationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.CreateFederationRequest"
    }
}

/// Request message for UpdateFederation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateFederationRequest {
    /// Required. A field mask used to specify the fields to be overwritten in the
    /// metastore federation resource by the update.
    /// Fields specified in the `update_mask` are relative to the resource (not
    /// to the full request). A field is overwritten if it is in the mask.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The metastore federation to update. The server only merges fields
    /// in the service if they are specified in `update_mask`.
    ///
    /// The metastore federation's `name` field is used to identify the
    /// metastore service to be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub federation: std::option::Option<crate::model::Federation>,

    /// Optional. A request ID. Specify a unique request ID to allow the server to
    /// ignore the request if it has completed. The server will ignore subsequent
    /// requests that provide a duplicate request ID for at least 60 minutes after
    /// the first request.
    ///
    /// For example, if an initial request times out, followed by another request
    /// with the same request ID, the server ignores the second request to prevent
    /// the creation of duplicate commitments.
    ///
    /// The request ID must be a valid
    /// [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
    /// A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl UpdateFederationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateFederationRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [federation][crate::model::UpdateFederationRequest::federation].
    pub fn set_federation<T: std::convert::Into<std::option::Option<crate::model::Federation>>>(
        mut self,
        v: T,
    ) -> Self {
        self.federation = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateFederationRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for UpdateFederationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.UpdateFederationRequest"
    }
}

/// Request message for DeleteFederation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteFederationRequest {
    /// Required. The relative resource name of the metastore federation to delete,
    /// in the following form:
    ///
    /// `projects/{project_number}/locations/{location_id}/federations/{federation_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. A request ID. Specify a unique request ID to allow the server to
    /// ignore the request if it has completed. The server will ignore subsequent
    /// requests that provide a duplicate request ID for at least 60 minutes after
    /// the first request.
    ///
    /// For example, if an initial request times out, followed by another request
    /// with the same request ID, the server ignores the second request to prevent
    /// the creation of duplicate commitments.
    ///
    /// The request ID must be a valid
    /// [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
    /// A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl DeleteFederationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteFederationRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteFederationRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for DeleteFederationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.metastore.v1.DeleteFederationRequest"
    }
}
