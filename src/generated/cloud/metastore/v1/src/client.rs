// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Dataproc Metastore API.
///
/// # Service Description
///
/// Configures and manages metastore services.
/// Metastore services are fully managed, highly available, autoscaled,
/// autohealing, OSS-native deployments of technical metadata management
/// software. Each metastore service exposes a network endpoint through which
/// metadata queries are served. Metadata queries can originate from a variety
/// of sources, including Apache Hive, Apache Presto, and Apache Spark.
///
/// The Dataproc Metastore API defines the following resource model:
///
/// * The service works with a collection of Google Cloud projects, named:
///   `/projects/*`
///
/// * Each project has a collection of available locations, named: `/locations/*`
///   (a location must refer to a Google Cloud `region`)
///
/// * Each location has a collection of services, named: `/services/*`
///
/// * Dataproc Metastore services are resources with names of the form:
///
/// * `/projects/{project_number}/locations/{location_id}/services/{service_id}`.
///
///
/// # Configuration
///
/// `DataprocMetastore` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `DataprocMetastore` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `DataprocMetastore` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct DataprocMetastore {
    inner: Arc<dyn crate::stubs::dynamic::DataprocMetastore>,
}

impl DataprocMetastore {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::DataprocMetastore + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::DataprocMetastore>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::DataprocMetastore> {
        crate::transport::DataprocMetastore::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::DataprocMetastore> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::DataprocMetastore::new)
    }

    /// Lists services in a project and location.
    pub fn list_services(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::ListServices {
        crate::builders::dataproc_metastore::ListServices::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets the details of a single service.
    pub fn get_service(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::GetService {
        crate::builders::dataproc_metastore::GetService::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a metastore service in a project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_service(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::CreateService {
        crate::builders::dataproc_metastore::CreateService::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of a single service.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_service(
        &self,
        service: impl Into<crate::model::Service>,
    ) -> crate::builders::dataproc_metastore::UpdateService {
        crate::builders::dataproc_metastore::UpdateService::new(self.inner.clone())
            .set_service(service.into())
    }

    /// Deletes a single service.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_service(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::DeleteService {
        crate::builders::dataproc_metastore::DeleteService::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists imports in a service.
    pub fn list_metadata_imports(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::ListMetadataImports {
        crate::builders::dataproc_metastore::ListMetadataImports::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single import.
    pub fn get_metadata_import(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::GetMetadataImport {
        crate::builders::dataproc_metastore::GetMetadataImport::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new MetadataImport in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_metadata_import(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::CreateMetadataImport {
        crate::builders::dataproc_metastore::CreateMetadataImport::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a single import.
    /// Only the description field of MetadataImport is supported to be updated.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_metadata_import(
        &self,
        metadata_import: impl Into<crate::model::MetadataImport>,
    ) -> crate::builders::dataproc_metastore::UpdateMetadataImport {
        crate::builders::dataproc_metastore::UpdateMetadataImport::new(self.inner.clone())
            .set_metadata_import(metadata_import.into())
    }

    /// Exports metadata from a service.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn export_metadata(
        &self,
        service: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::ExportMetadata {
        crate::builders::dataproc_metastore::ExportMetadata::new(self.inner.clone())
            .set_service(service.into())
    }

    /// Restores a service from a backup.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn restore_service(
        &self,
        service: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::RestoreService {
        crate::builders::dataproc_metastore::RestoreService::new(self.inner.clone())
            .set_service(service.into())
    }

    /// Lists backups in a service.
    pub fn list_backups(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::ListBackups {
        crate::builders::dataproc_metastore::ListBackups::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single backup.
    pub fn get_backup(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::GetBackup {
        crate::builders::dataproc_metastore::GetBackup::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new backup in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_backup(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::CreateBackup {
        crate::builders::dataproc_metastore::CreateBackup::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a single backup.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_backup(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::DeleteBackup {
        crate::builders::dataproc_metastore::DeleteBackup::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Query DPMS metadata.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn query_metadata(
        &self,
        service: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::QueryMetadata {
        crate::builders::dataproc_metastore::QueryMetadata::new(self.inner.clone())
            .set_service(service.into())
    }

    /// Move a table to another database.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn move_table_to_database(
        &self,
        service: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::MoveTableToDatabase {
        crate::builders::dataproc_metastore::MoveTableToDatabase::new(self.inner.clone())
            .set_service(service.into())
    }

    /// Alter metadata resource location. The metadata resource can be a database,
    /// table, or partition. This functionality only updates the parent directory
    /// for the respective metadata resource and does not transfer any existing
    /// data to the new location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn alter_metadata_resource_location(
        &self,
        service: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::AlterMetadataResourceLocation {
        crate::builders::dataproc_metastore::AlterMetadataResourceLocation::new(self.inner.clone())
            .set_service(service.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::ListLocations {
        crate::builders::dataproc_metastore::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::GetLocation {
        crate::builders::dataproc_metastore::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::SetIamPolicy {
        crate::builders::dataproc_metastore::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::GetIamPolicy {
        crate::builders::dataproc_metastore::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::TestIamPermissions {
        crate::builders::dataproc_metastore::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::ListOperations {
        crate::builders::dataproc_metastore::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::GetOperation {
        crate::builders::dataproc_metastore::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::DeleteOperation {
        crate::builders::dataproc_metastore::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore::CancelOperation {
        crate::builders::dataproc_metastore::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Dataproc Metastore API.
///
/// # Service Description
///
/// Configures and manages metastore federation services.
/// Dataproc Metastore Federation Service allows federating a collection of
/// backend metastores like BigQuery, Dataplex Lakes, and other Dataproc
/// Metastores. The Federation Service exposes a gRPC URL through which metadata
/// from the backend metastores are served at query time.
///
/// The Dataproc Metastore Federation API defines the following resource model:
///
/// * The service works with a collection of Google Cloud projects.
/// * Each project has a collection of available locations.
/// * Each location has a collection of federations.
/// * Dataproc Metastore Federations are resources with names of the
///   form:
///   `projects/{project_number}/locations/{location_id}/federations/{federation_id}`.
///
/// # Configuration
///
/// `DataprocMetastoreFederation` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `DataprocMetastoreFederation` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `DataprocMetastoreFederation` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct DataprocMetastoreFederation {
    inner: Arc<dyn crate::stubs::dynamic::DataprocMetastoreFederation>,
}

impl DataprocMetastoreFederation {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::DataprocMetastoreFederation + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::DataprocMetastoreFederation>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::DataprocMetastoreFederation> {
        crate::transport::DataprocMetastoreFederation::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::DataprocMetastoreFederation> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::DataprocMetastoreFederation::new)
    }

    /// Lists federations in a project and location.
    pub fn list_federations(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore_federation::ListFederations {
        crate::builders::dataproc_metastore_federation::ListFederations::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets the details of a single federation.
    pub fn get_federation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore_federation::GetFederation {
        crate::builders::dataproc_metastore_federation::GetFederation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a metastore federation in a project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_federation(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore_federation::CreateFederation {
        crate::builders::dataproc_metastore_federation::CreateFederation::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the fields of a federation.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_federation(
        &self,
        federation: impl Into<crate::model::Federation>,
    ) -> crate::builders::dataproc_metastore_federation::UpdateFederation {
        crate::builders::dataproc_metastore_federation::UpdateFederation::new(self.inner.clone())
            .set_federation(federation.into())
    }

    /// Deletes a single federation.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_federation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore_federation::DeleteFederation {
        crate::builders::dataproc_metastore_federation::DeleteFederation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore_federation::ListLocations {
        crate::builders::dataproc_metastore_federation::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore_federation::GetLocation {
        crate::builders::dataproc_metastore_federation::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore_federation::SetIamPolicy {
        crate::builders::dataproc_metastore_federation::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore_federation::GetIamPolicy {
        crate::builders::dataproc_metastore_federation::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore_federation::TestIamPermissions {
        crate::builders::dataproc_metastore_federation::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore_federation::ListOperations {
        crate::builders::dataproc_metastore_federation::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore_federation::GetOperation {
        crate::builders::dataproc_metastore_federation::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore_federation::DeleteOperation {
        crate::builders::dataproc_metastore_federation::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::dataproc_metastore_federation::CancelOperation {
        crate::builders::dataproc_metastore_federation::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
