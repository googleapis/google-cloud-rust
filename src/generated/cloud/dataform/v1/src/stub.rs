// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::Dataform].
///
/// Application developers may need to implement this trait to mock
/// `client::Dataform`.  In other use-cases, application developers only
/// use `client::Dataform` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait Dataform: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::Dataform::list_repositories].
    fn list_repositories(
        &self,
        _req: crate::model::ListRepositoriesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListRepositoriesResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListRepositoriesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::get_repository].
    fn get_repository(
        &self,
        _req: crate::model::GetRepositoryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Repository>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Repository>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Dataform::create_repository].
    fn create_repository(
        &self,
        _req: crate::model::CreateRepositoryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Repository>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Repository>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Dataform::update_repository].
    fn update_repository(
        &self,
        _req: crate::model::UpdateRepositoryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Repository>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Repository>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Dataform::delete_repository].
    fn delete_repository(
        &self,
        _req: crate::model::DeleteRepositoryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Dataform::commit_repository_changes].
    fn commit_repository_changes(
        &self,
        _req: crate::model::CommitRepositoryChangesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::CommitRepositoryChangesResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::CommitRepositoryChangesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::read_repository_file].
    fn read_repository_file(
        &self,
        _req: crate::model::ReadRepositoryFileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ReadRepositoryFileResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ReadRepositoryFileResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::query_repository_directory_contents].
    fn query_repository_directory_contents(
        &self,
        _req: crate::model::QueryRepositoryDirectoryContentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::QueryRepositoryDirectoryContentsResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<
                gax::response::Response<crate::model::QueryRepositoryDirectoryContentsResponse>,
            >,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::fetch_repository_history].
    fn fetch_repository_history(
        &self,
        _req: crate::model::FetchRepositoryHistoryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::FetchRepositoryHistoryResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::FetchRepositoryHistoryResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::compute_repository_access_token_status].
    fn compute_repository_access_token_status(
        &self,
        _req: crate::model::ComputeRepositoryAccessTokenStatusRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::ComputeRepositoryAccessTokenStatusResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<
                gax::response::Response<crate::model::ComputeRepositoryAccessTokenStatusResponse>,
            >,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::fetch_remote_branches].
    fn fetch_remote_branches(
        &self,
        _req: crate::model::FetchRemoteBranchesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::FetchRemoteBranchesResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::FetchRemoteBranchesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::list_workspaces].
    fn list_workspaces(
        &self,
        _req: crate::model::ListWorkspacesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListWorkspacesResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListWorkspacesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::get_workspace].
    fn get_workspace(
        &self,
        _req: crate::model::GetWorkspaceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Workspace>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Workspace>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Dataform::create_workspace].
    fn create_workspace(
        &self,
        _req: crate::model::CreateWorkspaceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Workspace>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Workspace>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Dataform::delete_workspace].
    fn delete_workspace(
        &self,
        _req: crate::model::DeleteWorkspaceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Dataform::install_npm_packages].
    fn install_npm_packages(
        &self,
        _req: crate::model::InstallNpmPackagesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::InstallNpmPackagesResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::InstallNpmPackagesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::pull_git_commits].
    fn pull_git_commits(
        &self,
        _req: crate::model::PullGitCommitsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::PullGitCommitsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::PullGitCommitsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::push_git_commits].
    fn push_git_commits(
        &self,
        _req: crate::model::PushGitCommitsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::PushGitCommitsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::PushGitCommitsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::fetch_file_git_statuses].
    fn fetch_file_git_statuses(
        &self,
        _req: crate::model::FetchFileGitStatusesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::FetchFileGitStatusesResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::FetchFileGitStatusesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::fetch_git_ahead_behind].
    fn fetch_git_ahead_behind(
        &self,
        _req: crate::model::FetchGitAheadBehindRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::FetchGitAheadBehindResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::FetchGitAheadBehindResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::commit_workspace_changes].
    fn commit_workspace_changes(
        &self,
        _req: crate::model::CommitWorkspaceChangesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::CommitWorkspaceChangesResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::CommitWorkspaceChangesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::reset_workspace_changes].
    fn reset_workspace_changes(
        &self,
        _req: crate::model::ResetWorkspaceChangesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::ResetWorkspaceChangesResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ResetWorkspaceChangesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::fetch_file_diff].
    fn fetch_file_diff(
        &self,
        _req: crate::model::FetchFileDiffRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::FetchFileDiffResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::FetchFileDiffResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::query_directory_contents].
    fn query_directory_contents(
        &self,
        _req: crate::model::QueryDirectoryContentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::QueryDirectoryContentsResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::QueryDirectoryContentsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::search_files].
    fn search_files(
        &self,
        _req: crate::model::SearchFilesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::SearchFilesResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::SearchFilesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::make_directory].
    fn make_directory(
        &self,
        _req: crate::model::MakeDirectoryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::MakeDirectoryResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::MakeDirectoryResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::remove_directory].
    fn remove_directory(
        &self,
        _req: crate::model::RemoveDirectoryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::RemoveDirectoryResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::RemoveDirectoryResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::move_directory].
    fn move_directory(
        &self,
        _req: crate::model::MoveDirectoryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::MoveDirectoryResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::MoveDirectoryResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::read_file].
    fn read_file(
        &self,
        _req: crate::model::ReadFileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ReadFileResponse>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::ReadFileResponse>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Dataform::remove_file].
    fn remove_file(
        &self,
        _req: crate::model::RemoveFileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::RemoveFileResponse>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::RemoveFileResponse>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Dataform::move_file].
    fn move_file(
        &self,
        _req: crate::model::MoveFileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::MoveFileResponse>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::MoveFileResponse>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Dataform::write_file].
    fn write_file(
        &self,
        _req: crate::model::WriteFileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::WriteFileResponse>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::WriteFileResponse>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Dataform::list_release_configs].
    fn list_release_configs(
        &self,
        _req: crate::model::ListReleaseConfigsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListReleaseConfigsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListReleaseConfigsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::get_release_config].
    fn get_release_config(
        &self,
        _req: crate::model::GetReleaseConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ReleaseConfig>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::ReleaseConfig>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Dataform::create_release_config].
    fn create_release_config(
        &self,
        _req: crate::model::CreateReleaseConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ReleaseConfig>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::ReleaseConfig>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Dataform::update_release_config].
    fn update_release_config(
        &self,
        _req: crate::model::UpdateReleaseConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ReleaseConfig>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::ReleaseConfig>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Dataform::delete_release_config].
    fn delete_release_config(
        &self,
        _req: crate::model::DeleteReleaseConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Dataform::list_compilation_results].
    fn list_compilation_results(
        &self,
        _req: crate::model::ListCompilationResultsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::ListCompilationResultsResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListCompilationResultsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::get_compilation_result].
    fn get_compilation_result(
        &self,
        _req: crate::model::GetCompilationResultRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::CompilationResult>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::CompilationResult>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Dataform::create_compilation_result].
    fn create_compilation_result(
        &self,
        _req: crate::model::CreateCompilationResultRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::CompilationResult>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::CompilationResult>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Dataform::query_compilation_result_actions].
    fn query_compilation_result_actions(
        &self,
        _req: crate::model::QueryCompilationResultActionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::QueryCompilationResultActionsResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<
                gax::response::Response<crate::model::QueryCompilationResultActionsResponse>,
            >,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::list_workflow_configs].
    fn list_workflow_configs(
        &self,
        _req: crate::model::ListWorkflowConfigsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListWorkflowConfigsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListWorkflowConfigsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::get_workflow_config].
    fn get_workflow_config(
        &self,
        _req: crate::model::GetWorkflowConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::WorkflowConfig>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::WorkflowConfig>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Dataform::create_workflow_config].
    fn create_workflow_config(
        &self,
        _req: crate::model::CreateWorkflowConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::WorkflowConfig>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::WorkflowConfig>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Dataform::update_workflow_config].
    fn update_workflow_config(
        &self,
        _req: crate::model::UpdateWorkflowConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::WorkflowConfig>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::WorkflowConfig>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Dataform::delete_workflow_config].
    fn delete_workflow_config(
        &self,
        _req: crate::model::DeleteWorkflowConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Dataform::list_workflow_invocations].
    fn list_workflow_invocations(
        &self,
        _req: crate::model::ListWorkflowInvocationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::ListWorkflowInvocationsResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListWorkflowInvocationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::get_workflow_invocation].
    fn get_workflow_invocation(
        &self,
        _req: crate::model::GetWorkflowInvocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::WorkflowInvocation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::WorkflowInvocation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Dataform::create_workflow_invocation].
    fn create_workflow_invocation(
        &self,
        _req: crate::model::CreateWorkflowInvocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::WorkflowInvocation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::WorkflowInvocation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Dataform::delete_workflow_invocation].
    fn delete_workflow_invocation(
        &self,
        _req: crate::model::DeleteWorkflowInvocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Dataform::cancel_workflow_invocation].
    fn cancel_workflow_invocation(
        &self,
        _req: crate::model::CancelWorkflowInvocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::CancelWorkflowInvocationResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::CancelWorkflowInvocationResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::query_workflow_invocation_actions].
    fn query_workflow_invocation_actions(
        &self,
        _req: crate::model::QueryWorkflowInvocationActionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::QueryWorkflowInvocationActionsResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<
                gax::response::Response<crate::model::QueryWorkflowInvocationActionsResponse>,
            >,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::get_config].
    fn get_config(
        &self,
        _req: crate::model::GetConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Config>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Config>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Dataform::update_config].
    fn update_config(
        &self,
        _req: crate::model::UpdateConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Config>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Config>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Dataform::list_locations].
    fn list_locations(
        &self,
        _req: location::model::ListLocationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<location::model::ListLocationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<location::model::ListLocationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Dataform::get_location].
    fn get_location(
        &self,
        _req: location::model::GetLocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<location::model::Location>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<location::model::Location>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Dataform::set_iam_policy].
    fn set_iam_policy(
        &self,
        _req: iam_v1::model::SetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<iam_v1::model::Policy>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<iam_v1::model::Policy>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Dataform::get_iam_policy].
    fn get_iam_policy(
        &self,
        _req: iam_v1::model::GetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<iam_v1::model::Policy>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<iam_v1::model::Policy>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Dataform::test_iam_permissions].
    fn test_iam_permissions(
        &self,
        _req: iam_v1::model::TestIamPermissionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<iam_v1::model::TestIamPermissionsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<iam_v1::model::TestIamPermissionsResponse>>,
        >(Err(Error::other("unimplemented")))
    }
}
