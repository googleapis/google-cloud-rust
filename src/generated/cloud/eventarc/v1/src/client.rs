// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Eventarc API.
///
/// # Service Description
///
/// Eventarc allows users to subscribe to various events that are provided by
/// Google Cloud services and forward them to supported destinations.
///
/// # Configuration
///
/// `Eventarc` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Eventarc` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Eventarc` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Eventarc {
    inner: Arc<dyn crate::stubs::dynamic::Eventarc>,
}

impl Eventarc {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::Eventarc + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::Eventarc>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Eventarc> {
        crate::transport::Eventarc::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Eventarc> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::Eventarc::new)
    }

    /// Get a single trigger.
    pub fn get_trigger(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::GetTrigger {
        crate::builders::eventarc::GetTrigger::new(self.inner.clone()).set_name(name.into())
    }

    /// List triggers.
    pub fn list_triggers(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::ListTriggers {
        crate::builders::eventarc::ListTriggers::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Create a new trigger in a particular project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_trigger(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::CreateTrigger {
        crate::builders::eventarc::CreateTrigger::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Update a single trigger.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_trigger(
        &self,
        trigger: impl Into<crate::model::Trigger>,
    ) -> crate::builders::eventarc::UpdateTrigger {
        crate::builders::eventarc::UpdateTrigger::new(self.inner.clone())
            .set_trigger(trigger.into())
    }

    /// Delete a single trigger.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_trigger(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::DeleteTrigger {
        crate::builders::eventarc::DeleteTrigger::new(self.inner.clone()).set_name(name.into())
    }

    /// Get a single Channel.
    pub fn get_channel(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::GetChannel {
        crate::builders::eventarc::GetChannel::new(self.inner.clone()).set_name(name.into())
    }

    /// List channels.
    pub fn list_channels(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::ListChannels {
        crate::builders::eventarc::ListChannels::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Create a new channel in a particular project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_channel(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::CreateChannel {
        crate::builders::eventarc::CreateChannel::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Update a single channel.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_channel(
        &self,
        channel: impl Into<crate::model::Channel>,
    ) -> crate::builders::eventarc::UpdateChannel {
        crate::builders::eventarc::UpdateChannel::new(self.inner.clone())
            .set_channel(channel.into())
    }

    /// Delete a single channel.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_channel(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::DeleteChannel {
        crate::builders::eventarc::DeleteChannel::new(self.inner.clone()).set_name(name.into())
    }

    /// Get a single Provider.
    pub fn get_provider(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::GetProvider {
        crate::builders::eventarc::GetProvider::new(self.inner.clone()).set_name(name.into())
    }

    /// List providers.
    pub fn list_providers(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::ListProviders {
        crate::builders::eventarc::ListProviders::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Get a single ChannelConnection.
    pub fn get_channel_connection(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::GetChannelConnection {
        crate::builders::eventarc::GetChannelConnection::new(self.inner.clone())
            .set_name(name.into())
    }

    /// List channel connections.
    pub fn list_channel_connections(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::ListChannelConnections {
        crate::builders::eventarc::ListChannelConnections::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Create a new ChannelConnection in a particular project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_channel_connection(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::CreateChannelConnection {
        crate::builders::eventarc::CreateChannelConnection::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Delete a single ChannelConnection.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_channel_connection(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::DeleteChannelConnection {
        crate::builders::eventarc::DeleteChannelConnection::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Get a GoogleChannelConfig
    pub fn get_google_channel_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::GetGoogleChannelConfig {
        crate::builders::eventarc::GetGoogleChannelConfig::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Update a single GoogleChannelConfig
    pub fn update_google_channel_config(
        &self,
        google_channel_config: impl Into<crate::model::GoogleChannelConfig>,
    ) -> crate::builders::eventarc::UpdateGoogleChannelConfig {
        crate::builders::eventarc::UpdateGoogleChannelConfig::new(self.inner.clone())
            .set_google_channel_config(google_channel_config.into())
    }

    /// Get a single MessageBus.
    pub fn get_message_bus(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::GetMessageBus {
        crate::builders::eventarc::GetMessageBus::new(self.inner.clone()).set_name(name.into())
    }

    /// List message buses.
    pub fn list_message_buses(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::ListMessageBuses {
        crate::builders::eventarc::ListMessageBuses::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// List message bus enrollments.
    pub fn list_message_bus_enrollments(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::ListMessageBusEnrollments {
        crate::builders::eventarc::ListMessageBusEnrollments::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Create a new MessageBus in a particular project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_message_bus(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::CreateMessageBus {
        crate::builders::eventarc::CreateMessageBus::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Update a single message bus.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_message_bus(
        &self,
        message_bus: impl Into<crate::model::MessageBus>,
    ) -> crate::builders::eventarc::UpdateMessageBus {
        crate::builders::eventarc::UpdateMessageBus::new(self.inner.clone())
            .set_message_bus(message_bus.into())
    }

    /// Delete a single message bus.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_message_bus(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::DeleteMessageBus {
        crate::builders::eventarc::DeleteMessageBus::new(self.inner.clone()).set_name(name.into())
    }

    /// Get a single Enrollment.
    pub fn get_enrollment(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::GetEnrollment {
        crate::builders::eventarc::GetEnrollment::new(self.inner.clone()).set_name(name.into())
    }

    /// List Enrollments.
    pub fn list_enrollments(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::ListEnrollments {
        crate::builders::eventarc::ListEnrollments::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Create a new Enrollment in a particular project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_enrollment(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::CreateEnrollment {
        crate::builders::eventarc::CreateEnrollment::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Update a single Enrollment.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_enrollment(
        &self,
        enrollment: impl Into<crate::model::Enrollment>,
    ) -> crate::builders::eventarc::UpdateEnrollment {
        crate::builders::eventarc::UpdateEnrollment::new(self.inner.clone())
            .set_enrollment(enrollment.into())
    }

    /// Delete a single Enrollment.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_enrollment(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::DeleteEnrollment {
        crate::builders::eventarc::DeleteEnrollment::new(self.inner.clone()).set_name(name.into())
    }

    /// Get a single Pipeline.
    pub fn get_pipeline(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::GetPipeline {
        crate::builders::eventarc::GetPipeline::new(self.inner.clone()).set_name(name.into())
    }

    /// List pipelines.
    pub fn list_pipelines(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::ListPipelines {
        crate::builders::eventarc::ListPipelines::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Create a new Pipeline in a particular project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_pipeline(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::CreatePipeline {
        crate::builders::eventarc::CreatePipeline::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Update a single pipeline.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_pipeline(
        &self,
        pipeline: impl Into<crate::model::Pipeline>,
    ) -> crate::builders::eventarc::UpdatePipeline {
        crate::builders::eventarc::UpdatePipeline::new(self.inner.clone())
            .set_pipeline(pipeline.into())
    }

    /// Delete a single pipeline.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_pipeline(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::DeletePipeline {
        crate::builders::eventarc::DeletePipeline::new(self.inner.clone()).set_name(name.into())
    }

    /// Get a single GoogleApiSource.
    pub fn get_google_api_source(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::GetGoogleApiSource {
        crate::builders::eventarc::GetGoogleApiSource::new(self.inner.clone()).set_name(name.into())
    }

    /// List GoogleApiSources.
    pub fn list_google_api_sources(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::ListGoogleApiSources {
        crate::builders::eventarc::ListGoogleApiSources::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Create a new GoogleApiSource in a particular project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_google_api_source(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::CreateGoogleApiSource {
        crate::builders::eventarc::CreateGoogleApiSource::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Update a single GoogleApiSource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_google_api_source(
        &self,
        google_api_source: impl Into<crate::model::GoogleApiSource>,
    ) -> crate::builders::eventarc::UpdateGoogleApiSource {
        crate::builders::eventarc::UpdateGoogleApiSource::new(self.inner.clone())
            .set_google_api_source(google_api_source.into())
    }

    /// Delete a single GoogleApiSource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_google_api_source(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::DeleteGoogleApiSource {
        crate::builders::eventarc::DeleteGoogleApiSource::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::ListLocations {
        crate::builders::eventarc::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::GetLocation {
        crate::builders::eventarc::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::SetIamPolicy {
        crate::builders::eventarc::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::GetIamPolicy {
        crate::builders::eventarc::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::TestIamPermissions {
        crate::builders::eventarc::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::ListOperations {
        crate::builders::eventarc::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::GetOperation {
        crate::builders::eventarc::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::DeleteOperation {
        crate::builders::eventarc::DeleteOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::eventarc::CancelOperation {
        crate::builders::eventarc::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}
