// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;
use std::sync::Arc;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::Eventarc].
///
/// Application developers may need to implement this trait to mock
/// `client::Eventarc`.  In other use-cases, application developers only
/// use `client::Eventarc` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait Eventarc: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::Eventarc::get_trigger].
    fn get_trigger(
        &self,
        _req: crate::model::GetTriggerRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Trigger>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Trigger>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Eventarc::list_triggers].
    fn list_triggers(
        &self,
        _req: crate::model::ListTriggersRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListTriggersResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListTriggersResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Eventarc::create_trigger].
    fn create_trigger(
        &self,
        _req: crate::model::CreateTriggerRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Eventarc::update_trigger].
    fn update_trigger(
        &self,
        _req: crate::model::UpdateTriggerRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Eventarc::delete_trigger].
    fn delete_trigger(
        &self,
        _req: crate::model::DeleteTriggerRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Eventarc::get_channel].
    fn get_channel(
        &self,
        _req: crate::model::GetChannelRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Channel>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Channel>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Eventarc::list_channels].
    fn list_channels(
        &self,
        _req: crate::model::ListChannelsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListChannelsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListChannelsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Eventarc::create_channel].
    fn create_channel(
        &self,
        _req: crate::model::CreateChannelRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Eventarc::update_channel].
    fn update_channel(
        &self,
        _req: crate::model::UpdateChannelRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Eventarc::delete_channel].
    fn delete_channel(
        &self,
        _req: crate::model::DeleteChannelRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Eventarc::get_provider].
    fn get_provider(
        &self,
        _req: crate::model::GetProviderRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Provider>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Provider>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Eventarc::list_providers].
    fn list_providers(
        &self,
        _req: crate::model::ListProvidersRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListProvidersResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListProvidersResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Eventarc::get_channel_connection].
    fn get_channel_connection(
        &self,
        _req: crate::model::GetChannelConnectionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ChannelConnection>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::ChannelConnection>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Eventarc::list_channel_connections].
    fn list_channel_connections(
        &self,
        _req: crate::model::ListChannelConnectionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::ListChannelConnectionsResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListChannelConnectionsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Eventarc::create_channel_connection].
    fn create_channel_connection(
        &self,
        _req: crate::model::CreateChannelConnectionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Eventarc::delete_channel_connection].
    fn delete_channel_connection(
        &self,
        _req: crate::model::DeleteChannelConnectionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Eventarc::get_google_channel_config].
    fn get_google_channel_config(
        &self,
        _req: crate::model::GetGoogleChannelConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::GoogleChannelConfig>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::GoogleChannelConfig>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Eventarc::update_google_channel_config].
    fn update_google_channel_config(
        &self,
        _req: crate::model::UpdateGoogleChannelConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::GoogleChannelConfig>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::GoogleChannelConfig>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Eventarc::get_message_bus].
    fn get_message_bus(
        &self,
        _req: crate::model::GetMessageBusRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::MessageBus>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::MessageBus>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Eventarc::list_message_buses].
    fn list_message_buses(
        &self,
        _req: crate::model::ListMessageBusesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListMessageBusesResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListMessageBusesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Eventarc::list_message_bus_enrollments].
    fn list_message_bus_enrollments(
        &self,
        _req: crate::model::ListMessageBusEnrollmentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::ListMessageBusEnrollmentsResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListMessageBusEnrollmentsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Eventarc::create_message_bus].
    fn create_message_bus(
        &self,
        _req: crate::model::CreateMessageBusRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Eventarc::update_message_bus].
    fn update_message_bus(
        &self,
        _req: crate::model::UpdateMessageBusRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Eventarc::delete_message_bus].
    fn delete_message_bus(
        &self,
        _req: crate::model::DeleteMessageBusRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Eventarc::get_enrollment].
    fn get_enrollment(
        &self,
        _req: crate::model::GetEnrollmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Enrollment>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Enrollment>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Eventarc::list_enrollments].
    fn list_enrollments(
        &self,
        _req: crate::model::ListEnrollmentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListEnrollmentsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListEnrollmentsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Eventarc::create_enrollment].
    fn create_enrollment(
        &self,
        _req: crate::model::CreateEnrollmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Eventarc::update_enrollment].
    fn update_enrollment(
        &self,
        _req: crate::model::UpdateEnrollmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Eventarc::delete_enrollment].
    fn delete_enrollment(
        &self,
        _req: crate::model::DeleteEnrollmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Eventarc::get_pipeline].
    fn get_pipeline(
        &self,
        _req: crate::model::GetPipelineRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Pipeline>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Pipeline>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Eventarc::list_pipelines].
    fn list_pipelines(
        &self,
        _req: crate::model::ListPipelinesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListPipelinesResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListPipelinesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Eventarc::create_pipeline].
    fn create_pipeline(
        &self,
        _req: crate::model::CreatePipelineRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Eventarc::update_pipeline].
    fn update_pipeline(
        &self,
        _req: crate::model::UpdatePipelineRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Eventarc::delete_pipeline].
    fn delete_pipeline(
        &self,
        _req: crate::model::DeletePipelineRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Eventarc::get_google_api_source].
    fn get_google_api_source(
        &self,
        _req: crate::model::GetGoogleApiSourceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::GoogleApiSource>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::GoogleApiSource>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Eventarc::list_google_api_sources].
    fn list_google_api_sources(
        &self,
        _req: crate::model::ListGoogleApiSourcesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListGoogleApiSourcesResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListGoogleApiSourcesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Eventarc::create_google_api_source].
    fn create_google_api_source(
        &self,
        _req: crate::model::CreateGoogleApiSourceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Eventarc::update_google_api_source].
    fn update_google_api_source(
        &self,
        _req: crate::model::UpdateGoogleApiSourceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Eventarc::delete_google_api_source].
    fn delete_google_api_source(
        &self,
        _req: crate::model::DeleteGoogleApiSourceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Eventarc::list_locations].
    fn list_locations(
        &self,
        _req: location::model::ListLocationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<location::model::ListLocationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<location::model::ListLocationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Eventarc::get_location].
    fn get_location(
        &self,
        _req: location::model::GetLocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<location::model::Location>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<location::model::Location>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Eventarc::set_iam_policy].
    fn set_iam_policy(
        &self,
        _req: iam_v1::model::SetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<iam_v1::model::Policy>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<iam_v1::model::Policy>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Eventarc::get_iam_policy].
    fn get_iam_policy(
        &self,
        _req: iam_v1::model::GetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<iam_v1::model::Policy>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<iam_v1::model::Policy>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Eventarc::test_iam_permissions].
    fn test_iam_permissions(
        &self,
        _req: iam_v1::model::TestIamPermissionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<iam_v1::model::TestIamPermissionsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<iam_v1::model::TestIamPermissionsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Eventarc::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Eventarc::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Eventarc::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Eventarc::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Returns the polling error policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_error_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        Arc::new(gax::polling_error_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}
