// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use std::sync::Arc;

/// A dyn-compatible, crate-private version of [super::Eventarc].
#[async_trait::async_trait]
pub trait Eventarc: std::fmt::Debug + Send + Sync {
    async fn get_trigger(
        &self,
        req: crate::model::GetTriggerRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Trigger>;

    async fn list_triggers(
        &self,
        req: crate::model::ListTriggersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListTriggersResponse>;

    async fn create_trigger(
        &self,
        req: crate::model::CreateTriggerRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_trigger(
        &self,
        req: crate::model::UpdateTriggerRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_trigger(
        &self,
        req: crate::model::DeleteTriggerRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_channel(
        &self,
        req: crate::model::GetChannelRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Channel>;

    async fn list_channels(
        &self,
        req: crate::model::ListChannelsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListChannelsResponse>;

    async fn create_channel(
        &self,
        req: crate::model::CreateChannelRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_channel(
        &self,
        req: crate::model::UpdateChannelRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_channel(
        &self,
        req: crate::model::DeleteChannelRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_provider(
        &self,
        req: crate::model::GetProviderRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Provider>;

    async fn list_providers(
        &self,
        req: crate::model::ListProvidersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListProvidersResponse>;

    async fn get_channel_connection(
        &self,
        req: crate::model::GetChannelConnectionRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ChannelConnection>;

    async fn list_channel_connections(
        &self,
        req: crate::model::ListChannelConnectionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListChannelConnectionsResponse>;

    async fn create_channel_connection(
        &self,
        req: crate::model::CreateChannelConnectionRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_channel_connection(
        &self,
        req: crate::model::DeleteChannelConnectionRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_google_channel_config(
        &self,
        req: crate::model::GetGoogleChannelConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GoogleChannelConfig>;

    async fn update_google_channel_config(
        &self,
        req: crate::model::UpdateGoogleChannelConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GoogleChannelConfig>;

    async fn get_message_bus(
        &self,
        req: crate::model::GetMessageBusRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::MessageBus>;

    async fn list_message_buses(
        &self,
        req: crate::model::ListMessageBusesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListMessageBusesResponse>;

    async fn list_message_bus_enrollments(
        &self,
        req: crate::model::ListMessageBusEnrollmentsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListMessageBusEnrollmentsResponse>;

    async fn create_message_bus(
        &self,
        req: crate::model::CreateMessageBusRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_message_bus(
        &self,
        req: crate::model::UpdateMessageBusRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_message_bus(
        &self,
        req: crate::model::DeleteMessageBusRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_enrollment(
        &self,
        req: crate::model::GetEnrollmentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Enrollment>;

    async fn list_enrollments(
        &self,
        req: crate::model::ListEnrollmentsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListEnrollmentsResponse>;

    async fn create_enrollment(
        &self,
        req: crate::model::CreateEnrollmentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_enrollment(
        &self,
        req: crate::model::UpdateEnrollmentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_enrollment(
        &self,
        req: crate::model::DeleteEnrollmentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_pipeline(
        &self,
        req: crate::model::GetPipelineRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Pipeline>;

    async fn list_pipelines(
        &self,
        req: crate::model::ListPipelinesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListPipelinesResponse>;

    async fn create_pipeline(
        &self,
        req: crate::model::CreatePipelineRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_pipeline(
        &self,
        req: crate::model::UpdatePipelineRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_pipeline(
        &self,
        req: crate::model::DeletePipelineRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_google_api_source(
        &self,
        req: crate::model::GetGoogleApiSourceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GoogleApiSource>;

    async fn list_google_api_sources(
        &self,
        req: crate::model::ListGoogleApiSourcesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListGoogleApiSourcesResponse>;

    async fn create_google_api_source(
        &self,
        req: crate::model::CreateGoogleApiSourceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_google_api_source(
        &self,
        req: crate::model::UpdateGoogleApiSourceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_google_api_source(
        &self,
        req: crate::model::DeleteGoogleApiSourceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::ListLocationsResponse>;

    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::Location>;

    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy>;

    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy>;

    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::TestIamPermissionsResponse>;

    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy>;

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}

/// All implementations of [super::Eventarc] also implement [Eventarc].
#[async_trait::async_trait]
impl<T: super::Eventarc> Eventarc for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn get_trigger(
        &self,
        req: crate::model::GetTriggerRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Trigger> {
        T::get_trigger(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_triggers(
        &self,
        req: crate::model::ListTriggersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListTriggersResponse> {
        T::list_triggers(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_trigger(
        &self,
        req: crate::model::CreateTriggerRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_trigger(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_trigger(
        &self,
        req: crate::model::UpdateTriggerRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_trigger(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_trigger(
        &self,
        req: crate::model::DeleteTriggerRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_trigger(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_channel(
        &self,
        req: crate::model::GetChannelRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Channel> {
        T::get_channel(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_channels(
        &self,
        req: crate::model::ListChannelsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListChannelsResponse> {
        T::list_channels(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_channel(
        &self,
        req: crate::model::CreateChannelRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_channel(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_channel(
        &self,
        req: crate::model::UpdateChannelRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_channel(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_channel(
        &self,
        req: crate::model::DeleteChannelRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_channel(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_provider(
        &self,
        req: crate::model::GetProviderRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Provider> {
        T::get_provider(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_providers(
        &self,
        req: crate::model::ListProvidersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListProvidersResponse> {
        T::list_providers(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_channel_connection(
        &self,
        req: crate::model::GetChannelConnectionRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ChannelConnection> {
        T::get_channel_connection(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_channel_connections(
        &self,
        req: crate::model::ListChannelConnectionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListChannelConnectionsResponse> {
        T::list_channel_connections(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_channel_connection(
        &self,
        req: crate::model::CreateChannelConnectionRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_channel_connection(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_channel_connection(
        &self,
        req: crate::model::DeleteChannelConnectionRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_channel_connection(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_google_channel_config(
        &self,
        req: crate::model::GetGoogleChannelConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GoogleChannelConfig> {
        T::get_google_channel_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_google_channel_config(
        &self,
        req: crate::model::UpdateGoogleChannelConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GoogleChannelConfig> {
        T::update_google_channel_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_message_bus(
        &self,
        req: crate::model::GetMessageBusRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::MessageBus> {
        T::get_message_bus(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_message_buses(
        &self,
        req: crate::model::ListMessageBusesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListMessageBusesResponse> {
        T::list_message_buses(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_message_bus_enrollments(
        &self,
        req: crate::model::ListMessageBusEnrollmentsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListMessageBusEnrollmentsResponse> {
        T::list_message_bus_enrollments(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_message_bus(
        &self,
        req: crate::model::CreateMessageBusRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_message_bus(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_message_bus(
        &self,
        req: crate::model::UpdateMessageBusRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_message_bus(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_message_bus(
        &self,
        req: crate::model::DeleteMessageBusRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_message_bus(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_enrollment(
        &self,
        req: crate::model::GetEnrollmentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Enrollment> {
        T::get_enrollment(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_enrollments(
        &self,
        req: crate::model::ListEnrollmentsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListEnrollmentsResponse> {
        T::list_enrollments(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_enrollment(
        &self,
        req: crate::model::CreateEnrollmentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_enrollment(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_enrollment(
        &self,
        req: crate::model::UpdateEnrollmentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_enrollment(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_enrollment(
        &self,
        req: crate::model::DeleteEnrollmentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_enrollment(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_pipeline(
        &self,
        req: crate::model::GetPipelineRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Pipeline> {
        T::get_pipeline(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_pipelines(
        &self,
        req: crate::model::ListPipelinesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListPipelinesResponse> {
        T::list_pipelines(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_pipeline(
        &self,
        req: crate::model::CreatePipelineRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_pipeline(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_pipeline(
        &self,
        req: crate::model::UpdatePipelineRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_pipeline(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_pipeline(
        &self,
        req: crate::model::DeletePipelineRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_pipeline(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_google_api_source(
        &self,
        req: crate::model::GetGoogleApiSourceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GoogleApiSource> {
        T::get_google_api_source(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_google_api_sources(
        &self,
        req: crate::model::ListGoogleApiSourcesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListGoogleApiSourcesResponse> {
        T::list_google_api_sources(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_google_api_source(
        &self,
        req: crate::model::CreateGoogleApiSourceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_google_api_source(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_google_api_source(
        &self,
        req: crate::model::UpdateGoogleApiSourceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_google_api_source(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_google_api_source(
        &self,
        req: crate::model::DeleteGoogleApiSourceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_google_api_source(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::ListLocationsResponse> {
        T::list_locations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::Location> {
        T::get_location(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy> {
        T::set_iam_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy> {
        T::get_iam_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::TestIamPermissionsResponse> {
        T::test_iam_permissions(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse> {
        T::list_operations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::get_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::delete_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::cancel_operation(self, req, options).await
    }

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        T::get_polling_policy(self, options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        T::get_polling_backoff_policy(self, options)
    }
}
