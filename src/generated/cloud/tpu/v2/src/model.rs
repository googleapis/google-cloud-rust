// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gaxi;
extern crate gtype;
extern crate lazy_static;
extern crate location;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate rpc;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// A guest attributes.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GuestAttributes {
    /// The path to be queried. This can be the default namespace ('/') or a
    /// nested namespace ('/\<namespace\>/') or a specified key
    /// ('/\<namespace\>/\<key\>')
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub query_path: std::string::String,

    /// The value of the requested queried path.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub query_value: std::option::Option<crate::model::GuestAttributesValue>,
}

impl GuestAttributes {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [query_path][crate::model::GuestAttributes::query_path].
    pub fn set_query_path<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.query_path = v.into();
        self
    }

    /// Sets the value of [query_value][crate::model::GuestAttributes::query_value].
    pub fn set_query_value<
        T: std::convert::Into<std::option::Option<crate::model::GuestAttributesValue>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.query_value = v.into();
        self
    }
}

impl wkt::message::Message for GuestAttributes {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.GuestAttributes"
    }
}

/// Array of guest attribute namespace/key/value tuples.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GuestAttributesValue {
    /// The list of guest attributes entries.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub items: std::vec::Vec<crate::model::GuestAttributesEntry>,
}

impl GuestAttributesValue {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [items][crate::model::GuestAttributesValue::items].
    pub fn set_items<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::GuestAttributesEntry>,
    {
        use std::iter::Iterator;
        self.items = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for GuestAttributesValue {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.GuestAttributesValue"
    }
}

/// A guest attributes namespace/key/value entry.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GuestAttributesEntry {
    /// Namespace for the guest attribute entry.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub namespace: std::string::String,

    /// Key for the guest attribute entry.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub key: std::string::String,

    /// Value for the guest attribute entry.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub value: std::string::String,
}

impl GuestAttributesEntry {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [namespace][crate::model::GuestAttributesEntry::namespace].
    pub fn set_namespace<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.namespace = v.into();
        self
    }

    /// Sets the value of [key][crate::model::GuestAttributesEntry::key].
    pub fn set_key<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.key = v.into();
        self
    }

    /// Sets the value of [value][crate::model::GuestAttributesEntry::value].
    pub fn set_value<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.value = v.into();
        self
    }
}

impl wkt::message::Message for GuestAttributesEntry {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.GuestAttributesEntry"
    }
}

/// A node-attached disk resource.
/// Next ID: 8;
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AttachedDisk {
    /// Specifies the full path to an existing disk.
    /// For example: "projects/my-project/zones/us-central1-c/disks/my-disk".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub source_disk: std::string::String,

    /// The mode in which to attach this disk.
    /// If not specified, the default is READ_WRITE mode.
    /// Only applicable to data_disks.
    pub mode: crate::model::attached_disk::DiskMode,
}

impl AttachedDisk {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [source_disk][crate::model::AttachedDisk::source_disk].
    pub fn set_source_disk<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.source_disk = v.into();
        self
    }

    /// Sets the value of [mode][crate::model::AttachedDisk::mode].
    pub fn set_mode<T: std::convert::Into<crate::model::attached_disk::DiskMode>>(
        mut self,
        v: T,
    ) -> Self {
        self.mode = v.into();
        self
    }
}

impl wkt::message::Message for AttachedDisk {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.AttachedDisk"
    }
}

/// Defines additional types related to AttachedDisk
pub mod attached_disk {
    #[allow(unused_imports)]
    use super::*;

    /// The different mode of the attached disk.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct DiskMode(i32);

    impl DiskMode {
        /// The disk mode is not known/set.
        pub const DISK_MODE_UNSPECIFIED: DiskMode = DiskMode::new(0);

        /// Attaches the disk in read-write mode. Only one TPU node can attach a disk
        /// in read-write mode at a time.
        pub const READ_WRITE: DiskMode = DiskMode::new(1);

        /// Attaches the disk in read-only mode. Multiple TPU nodes can attach
        /// a disk in read-only mode at a time.
        pub const READ_ONLY: DiskMode = DiskMode::new(2);

        /// Creates a new DiskMode instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("DISK_MODE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("READ_WRITE"),
                2 => std::borrow::Cow::Borrowed("READ_ONLY"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "DISK_MODE_UNSPECIFIED" => std::option::Option::Some(Self::DISK_MODE_UNSPECIFIED),
                "READ_WRITE" => std::option::Option::Some(Self::READ_WRITE),
                "READ_ONLY" => std::option::Option::Some(Self::READ_ONLY),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for DiskMode {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for DiskMode {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Sets the scheduling options for this node.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SchedulingConfig {
    /// Defines whether the node is preemptible.
    pub preemptible: bool,

    /// Whether the node is created under a reservation.
    pub reserved: bool,

    /// Optional. Defines whether the node is Spot VM.
    pub spot: bool,
}

impl SchedulingConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [preemptible][crate::model::SchedulingConfig::preemptible].
    pub fn set_preemptible<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.preemptible = v.into();
        self
    }

    /// Sets the value of [reserved][crate::model::SchedulingConfig::reserved].
    pub fn set_reserved<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.reserved = v.into();
        self
    }

    /// Sets the value of [spot][crate::model::SchedulingConfig::spot].
    pub fn set_spot<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.spot = v.into();
        self
    }
}

impl wkt::message::Message for SchedulingConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.SchedulingConfig"
    }
}

/// A network endpoint over which a TPU worker can be reached.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct NetworkEndpoint {
    /// The internal IP address of this network endpoint.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub ip_address: std::string::String,

    /// The port of this network endpoint.
    pub port: i32,

    /// The access config for the TPU worker.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub access_config: std::option::Option<crate::model::AccessConfig>,
}

impl NetworkEndpoint {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [ip_address][crate::model::NetworkEndpoint::ip_address].
    pub fn set_ip_address<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.ip_address = v.into();
        self
    }

    /// Sets the value of [port][crate::model::NetworkEndpoint::port].
    pub fn set_port<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.port = v.into();
        self
    }

    /// Sets the value of [access_config][crate::model::NetworkEndpoint::access_config].
    pub fn set_access_config<
        T: std::convert::Into<std::option::Option<crate::model::AccessConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.access_config = v.into();
        self
    }
}

impl wkt::message::Message for NetworkEndpoint {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.NetworkEndpoint"
    }
}

/// An access config attached to the TPU worker.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AccessConfig {
    /// Output only. An external IP address associated with the TPU worker.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub external_ip: std::string::String,
}

impl AccessConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [external_ip][crate::model::AccessConfig::external_ip].
    pub fn set_external_ip<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.external_ip = v.into();
        self
    }
}

impl wkt::message::Message for AccessConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.AccessConfig"
    }
}

/// Network related configurations.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct NetworkConfig {
    /// The name of the network for the TPU node. It must be a preexisting Google
    /// Compute Engine network. If none is provided, "default" will be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub network: std::string::String,

    /// The name of the subnetwork for the TPU node. It must be a preexisting
    /// Google Compute Engine subnetwork. If none is provided, "default" will be
    /// used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub subnetwork: std::string::String,

    /// Indicates that external IP addresses would be associated with the TPU
    /// workers. If set to false, the specified subnetwork or network should have
    /// Private Google Access enabled.
    pub enable_external_ips: bool,

    /// Allows the TPU node to send and receive packets with non-matching
    /// destination or source IPs. This is required if you plan to use the TPU
    /// workers to forward routes.
    pub can_ip_forward: bool,

    /// Optional. Specifies networking queue count for TPU VM instance's network
    /// interface.
    pub queue_count: i32,
}

impl NetworkConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [network][crate::model::NetworkConfig::network].
    pub fn set_network<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.network = v.into();
        self
    }

    /// Sets the value of [subnetwork][crate::model::NetworkConfig::subnetwork].
    pub fn set_subnetwork<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.subnetwork = v.into();
        self
    }

    /// Sets the value of [enable_external_ips][crate::model::NetworkConfig::enable_external_ips].
    pub fn set_enable_external_ips<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_external_ips = v.into();
        self
    }

    /// Sets the value of [can_ip_forward][crate::model::NetworkConfig::can_ip_forward].
    pub fn set_can_ip_forward<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.can_ip_forward = v.into();
        self
    }

    /// Sets the value of [queue_count][crate::model::NetworkConfig::queue_count].
    pub fn set_queue_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.queue_count = v.into();
        self
    }
}

impl wkt::message::Message for NetworkConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.NetworkConfig"
    }
}

/// A service account.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ServiceAccount {
    /// Email address of the service account. If empty, default Compute service
    /// account will be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub email: std::string::String,

    /// The list of scopes to be made available for this service account. If empty,
    /// access to all Cloud APIs will be allowed.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub scope: std::vec::Vec<std::string::String>,
}

impl ServiceAccount {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [email][crate::model::ServiceAccount::email].
    pub fn set_email<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.email = v.into();
        self
    }

    /// Sets the value of [scope][crate::model::ServiceAccount::scope].
    pub fn set_scope<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.scope = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ServiceAccount {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.ServiceAccount"
    }
}

/// A TPU instance.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Node {
    /// Output only. Immutable. The name of the TPU.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The user-supplied description of the TPU. Maximum of 512 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. The type of hardware accelerators associated with this node.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub accelerator_type: std::string::String,

    /// Output only. The current state for the TPU Node.
    pub state: crate::model::node::State,

    /// Output only. If this field is populated, it contains a description of why
    /// the TPU Node is unhealthy.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub health_description: std::string::String,

    /// Required. The runtime version running in the Node.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub runtime_version: std::string::String,

    /// Network configurations for the TPU node. network_config and network_configs
    /// are mutually exclusive, you can only specify one of them. If both are
    /// specified, an error will be returned.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub network_config: std::option::Option<crate::model::NetworkConfig>,

    /// Optional. Repeated network configurations for the TPU node. This field is
    /// used to specify multiple networks configs for the TPU node. network_config
    /// and network_configs are mutually exclusive, you can only specify one of
    /// them. If both are specified, an error will be returned.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub network_configs: std::vec::Vec<crate::model::NetworkConfig>,

    /// The CIDR block that the TPU node will use when selecting an IP address.
    /// This CIDR block must be a /29 block; the Compute Engine networks API
    /// forbids a smaller block, and using a larger block would be wasteful (a
    /// node can only consume one IP address). Errors will occur if the CIDR block
    /// has already been used for a currently existing TPU node, the CIDR block
    /// conflicts with any subnetworks in the user's provided network, or the
    /// provided network is peered with another network that is using that CIDR
    /// block.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub cidr_block: std::string::String,

    /// The Google Cloud Platform Service Account to be used by the TPU node VMs.
    /// If None is specified, the default compute service account will be used.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub service_account: std::option::Option<crate::model::ServiceAccount>,

    /// Output only. The time when the node was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// The scheduling options for this node.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub scheduling_config: std::option::Option<crate::model::SchedulingConfig>,

    /// Output only. The network endpoints where TPU workers can be accessed and
    /// sent work. It is recommended that runtime clients of the node reach out
    /// to the 0th entry in this map first.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub network_endpoints: std::vec::Vec<crate::model::NetworkEndpoint>,

    /// The health status of the TPU node.
    pub health: crate::model::node::Health,

    /// Resource labels to represent user-provided metadata.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Custom metadata to apply to the TPU Node.
    /// Can set startup-script and shutdown-script
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub metadata: std::collections::HashMap<std::string::String, std::string::String>,

    /// Tags to apply to the TPU Node. Tags are used to identify valid sources or
    /// targets for network firewalls.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub tags: std::vec::Vec<std::string::String>,

    /// Output only. The unique identifier for the TPU Node.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub id: i64,

    /// The additional data disks for the Node.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub data_disks: std::vec::Vec<crate::model::AttachedDisk>,

    /// Output only. The API version that created this Node.
    pub api_version: crate::model::node::ApiVersion,

    /// Output only. The Symptoms that have occurred to the TPU Node.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub symptoms: std::vec::Vec<crate::model::Symptom>,

    /// Shielded Instance options.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub shielded_instance_config: std::option::Option<crate::model::ShieldedInstanceConfig>,

    /// The AccleratorConfig for the TPU Node.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub accelerator_config: std::option::Option<crate::model::AcceleratorConfig>,

    /// Output only. The qualified name of the QueuedResource that requested this
    /// Node.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub queued_resource: std::string::String,

    /// Output only. Whether the Node belongs to a Multislice group.
    pub multislice_node: bool,
}

impl Node {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Node::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Node::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [accelerator_type][crate::model::Node::accelerator_type].
    pub fn set_accelerator_type<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.accelerator_type = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Node::state].
    pub fn set_state<T: std::convert::Into<crate::model::node::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [health_description][crate::model::Node::health_description].
    pub fn set_health_description<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.health_description = v.into();
        self
    }

    /// Sets the value of [runtime_version][crate::model::Node::runtime_version].
    pub fn set_runtime_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.runtime_version = v.into();
        self
    }

    /// Sets the value of [network_config][crate::model::Node::network_config].
    pub fn set_network_config<
        T: std::convert::Into<std::option::Option<crate::model::NetworkConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.network_config = v.into();
        self
    }

    /// Sets the value of [cidr_block][crate::model::Node::cidr_block].
    pub fn set_cidr_block<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.cidr_block = v.into();
        self
    }

    /// Sets the value of [service_account][crate::model::Node::service_account].
    pub fn set_service_account<
        T: std::convert::Into<std::option::Option<crate::model::ServiceAccount>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.service_account = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Node::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [scheduling_config][crate::model::Node::scheduling_config].
    pub fn set_scheduling_config<
        T: std::convert::Into<std::option::Option<crate::model::SchedulingConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.scheduling_config = v.into();
        self
    }

    /// Sets the value of [health][crate::model::Node::health].
    pub fn set_health<T: std::convert::Into<crate::model::node::Health>>(mut self, v: T) -> Self {
        self.health = v.into();
        self
    }

    /// Sets the value of [id][crate::model::Node::id].
    pub fn set_id<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.id = v.into();
        self
    }

    /// Sets the value of [api_version][crate::model::Node::api_version].
    pub fn set_api_version<T: std::convert::Into<crate::model::node::ApiVersion>>(
        mut self,
        v: T,
    ) -> Self {
        self.api_version = v.into();
        self
    }

    /// Sets the value of [shielded_instance_config][crate::model::Node::shielded_instance_config].
    pub fn set_shielded_instance_config<
        T: std::convert::Into<std::option::Option<crate::model::ShieldedInstanceConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.shielded_instance_config = v.into();
        self
    }

    /// Sets the value of [accelerator_config][crate::model::Node::accelerator_config].
    pub fn set_accelerator_config<
        T: std::convert::Into<std::option::Option<crate::model::AcceleratorConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.accelerator_config = v.into();
        self
    }

    /// Sets the value of [queued_resource][crate::model::Node::queued_resource].
    pub fn set_queued_resource<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.queued_resource = v.into();
        self
    }

    /// Sets the value of [multislice_node][crate::model::Node::multislice_node].
    pub fn set_multislice_node<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.multislice_node = v.into();
        self
    }

    /// Sets the value of [network_configs][crate::model::Node::network_configs].
    pub fn set_network_configs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::NetworkConfig>,
    {
        use std::iter::Iterator;
        self.network_configs = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [network_endpoints][crate::model::Node::network_endpoints].
    pub fn set_network_endpoints<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::NetworkEndpoint>,
    {
        use std::iter::Iterator;
        self.network_endpoints = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [tags][crate::model::Node::tags].
    pub fn set_tags<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.tags = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [data_disks][crate::model::Node::data_disks].
    pub fn set_data_disks<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::AttachedDisk>,
    {
        use std::iter::Iterator;
        self.data_disks = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [symptoms][crate::model::Node::symptoms].
    pub fn set_symptoms<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Symptom>,
    {
        use std::iter::Iterator;
        self.symptoms = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [labels][crate::model::Node::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [metadata][crate::model::Node::metadata].
    pub fn set_metadata<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.metadata = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Node {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.Node"
    }
}

/// Defines additional types related to Node
pub mod node {
    #[allow(unused_imports)]
    use super::*;

    /// Represents the different states of a TPU node during its lifecycle.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// TPU node state is not known/set.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// TPU node is being created.
        pub const CREATING: State = State::new(1);

        /// TPU node has been created.
        pub const READY: State = State::new(2);

        /// TPU node is restarting.
        pub const RESTARTING: State = State::new(3);

        /// TPU node is undergoing reimaging.
        pub const REIMAGING: State = State::new(4);

        /// TPU node is being deleted.
        pub const DELETING: State = State::new(5);

        /// TPU node is being repaired and may be unusable. Details can be
        /// found in the 'help_description' field.
        pub const REPAIRING: State = State::new(6);

        /// TPU node is stopped.
        pub const STOPPED: State = State::new(8);

        /// TPU node is currently stopping.
        pub const STOPPING: State = State::new(9);

        /// TPU node is currently starting.
        pub const STARTING: State = State::new(10);

        /// TPU node has been preempted. Only applies to Preemptible TPU Nodes.
        pub const PREEMPTED: State = State::new(11);

        /// TPU node has been terminated due to maintenance or has reached the end of
        /// its life cycle (for preemptible nodes).
        pub const TERMINATED: State = State::new(12);

        /// TPU node is currently hiding.
        pub const HIDING: State = State::new(13);

        /// TPU node has been hidden.
        pub const HIDDEN: State = State::new(14);

        /// TPU node is currently unhiding.
        pub const UNHIDING: State = State::new(15);

        /// TPU node has unknown state after a failed repair.
        pub const UNKNOWN: State = State::new(16);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CREATING"),
                2 => std::borrow::Cow::Borrowed("READY"),
                3 => std::borrow::Cow::Borrowed("RESTARTING"),
                4 => std::borrow::Cow::Borrowed("REIMAGING"),
                5 => std::borrow::Cow::Borrowed("DELETING"),
                6 => std::borrow::Cow::Borrowed("REPAIRING"),
                8 => std::borrow::Cow::Borrowed("STOPPED"),
                9 => std::borrow::Cow::Borrowed("STOPPING"),
                10 => std::borrow::Cow::Borrowed("STARTING"),
                11 => std::borrow::Cow::Borrowed("PREEMPTED"),
                12 => std::borrow::Cow::Borrowed("TERMINATED"),
                13 => std::borrow::Cow::Borrowed("HIDING"),
                14 => std::borrow::Cow::Borrowed("HIDDEN"),
                15 => std::borrow::Cow::Borrowed("UNHIDING"),
                16 => std::borrow::Cow::Borrowed("UNKNOWN"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "CREATING" => std::option::Option::Some(Self::CREATING),
                "READY" => std::option::Option::Some(Self::READY),
                "RESTARTING" => std::option::Option::Some(Self::RESTARTING),
                "REIMAGING" => std::option::Option::Some(Self::REIMAGING),
                "DELETING" => std::option::Option::Some(Self::DELETING),
                "REPAIRING" => std::option::Option::Some(Self::REPAIRING),
                "STOPPED" => std::option::Option::Some(Self::STOPPED),
                "STOPPING" => std::option::Option::Some(Self::STOPPING),
                "STARTING" => std::option::Option::Some(Self::STARTING),
                "PREEMPTED" => std::option::Option::Some(Self::PREEMPTED),
                "TERMINATED" => std::option::Option::Some(Self::TERMINATED),
                "HIDING" => std::option::Option::Some(Self::HIDING),
                "HIDDEN" => std::option::Option::Some(Self::HIDDEN),
                "UNHIDING" => std::option::Option::Some(Self::UNHIDING),
                "UNKNOWN" => std::option::Option::Some(Self::UNKNOWN),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Health defines the status of a TPU node as reported by
    /// Health Monitor.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Health(i32);

    impl Health {
        /// Health status is unknown: not initialized or failed to retrieve.
        pub const HEALTH_UNSPECIFIED: Health = Health::new(0);

        /// The resource is healthy.
        pub const HEALTHY: Health = Health::new(1);

        /// The resource is unresponsive.
        pub const TIMEOUT: Health = Health::new(3);

        /// The in-guest ML stack is unhealthy.
        pub const UNHEALTHY_TENSORFLOW: Health = Health::new(4);

        /// The node is under maintenance/priority boost caused rescheduling and
        /// will resume running once rescheduled.
        pub const UNHEALTHY_MAINTENANCE: Health = Health::new(5);

        /// Creates a new Health instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("HEALTH_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("HEALTHY"),
                3 => std::borrow::Cow::Borrowed("TIMEOUT"),
                4 => std::borrow::Cow::Borrowed("UNHEALTHY_TENSORFLOW"),
                5 => std::borrow::Cow::Borrowed("UNHEALTHY_MAINTENANCE"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "HEALTH_UNSPECIFIED" => std::option::Option::Some(Self::HEALTH_UNSPECIFIED),
                "HEALTHY" => std::option::Option::Some(Self::HEALTHY),
                "TIMEOUT" => std::option::Option::Some(Self::TIMEOUT),
                "UNHEALTHY_TENSORFLOW" => std::option::Option::Some(Self::UNHEALTHY_TENSORFLOW),
                "UNHEALTHY_MAINTENANCE" => std::option::Option::Some(Self::UNHEALTHY_MAINTENANCE),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for Health {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for Health {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// TPU API Version.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct ApiVersion(i32);

    impl ApiVersion {
        /// API version is unknown.
        pub const API_VERSION_UNSPECIFIED: ApiVersion = ApiVersion::new(0);

        /// TPU API V1Alpha1 version.
        pub const V1_ALPHA1: ApiVersion = ApiVersion::new(1);

        /// TPU API V1 version.
        pub const V1: ApiVersion = ApiVersion::new(2);

        /// TPU API V2Alpha1 version.
        pub const V2_ALPHA1: ApiVersion = ApiVersion::new(3);

        /// TPU API V2 version.
        pub const V2: ApiVersion = ApiVersion::new(4);

        /// Creates a new ApiVersion instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("API_VERSION_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("V1_ALPHA1"),
                2 => std::borrow::Cow::Borrowed("V1"),
                3 => std::borrow::Cow::Borrowed("V2_ALPHA1"),
                4 => std::borrow::Cow::Borrowed("V2"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "API_VERSION_UNSPECIFIED" => {
                    std::option::Option::Some(Self::API_VERSION_UNSPECIFIED)
                }
                "V1_ALPHA1" => std::option::Option::Some(Self::V1_ALPHA1),
                "V1" => std::option::Option::Some(Self::V1),
                "V2_ALPHA1" => std::option::Option::Some(Self::V2_ALPHA1),
                "V2" => std::option::Option::Some(Self::V2),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for ApiVersion {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for ApiVersion {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// A QueuedResource represents a request for resources that will be placed
/// in a queue and fulfilled when the necessary resources are available.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct QueuedResource {
    /// Output only. Immutable. The name of the QueuedResource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The time when the QueuedResource was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Optional. The queueing policy of the QueuedRequest.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub queueing_policy: std::option::Option<crate::model::queued_resource::QueueingPolicy>,

    /// Output only. State of the QueuedResource request.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub state: std::option::Option<crate::model::QueuedResourceState>,

    /// Optional. Name of the reservation in which the resource should be
    /// provisioned. Format:
    /// projects/{project}/locations/{zone}/reservations/{reservation}
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub reservation_name: std::string::String,

    /// Resource specification.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub resource: std::option::Option<crate::model::queued_resource::Resource>,

    /// Tier specifies the required tier.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub tier: std::option::Option<crate::model::queued_resource::Tier>,
}

impl QueuedResource {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::QueuedResource::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::QueuedResource::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [queueing_policy][crate::model::QueuedResource::queueing_policy].
    pub fn set_queueing_policy<
        T: std::convert::Into<std::option::Option<crate::model::queued_resource::QueueingPolicy>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.queueing_policy = v.into();
        self
    }

    /// Sets the value of [state][crate::model::QueuedResource::state].
    pub fn set_state<
        T: std::convert::Into<std::option::Option<crate::model::QueuedResourceState>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [reservation_name][crate::model::QueuedResource::reservation_name].
    pub fn set_reservation_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.reservation_name = v.into();
        self
    }

    /// Sets the value of `resource`.
    pub fn set_resource<
        T: std::convert::Into<std::option::Option<crate::model::queued_resource::Resource>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.resource = v.into();
        self
    }

    /// The value of [resource][crate::model::QueuedResource::resource]
    /// if it holds a `Tpu`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_tpu(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::queued_resource::Tpu>> {
        #[allow(unreachable_patterns)]
        self.resource.as_ref().and_then(|v| match v {
            crate::model::queued_resource::Resource::Tpu(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [resource][crate::model::QueuedResource::resource]
    /// to hold a `Tpu`.
    ///
    /// Note that all the setters affecting `resource` are
    /// mutually exclusive.
    pub fn set_tpu<T: std::convert::Into<std::boxed::Box<crate::model::queued_resource::Tpu>>>(
        mut self,
        v: T,
    ) -> Self {
        self.resource =
            std::option::Option::Some(crate::model::queued_resource::Resource::Tpu(v.into()));
        self
    }

    /// Sets the value of `tier`.
    pub fn set_tier<
        T: std::convert::Into<std::option::Option<crate::model::queued_resource::Tier>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.tier = v.into();
        self
    }

    /// The value of [tier][crate::model::QueuedResource::tier]
    /// if it holds a `Spot`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_spot(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::queued_resource::Spot>> {
        #[allow(unreachable_patterns)]
        self.tier.as_ref().and_then(|v| match v {
            crate::model::queued_resource::Tier::Spot(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [tier][crate::model::QueuedResource::tier]
    /// if it holds a `Guaranteed`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_guaranteed(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::queued_resource::Guaranteed>> {
        #[allow(unreachable_patterns)]
        self.tier.as_ref().and_then(|v| match v {
            crate::model::queued_resource::Tier::Guaranteed(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [tier][crate::model::QueuedResource::tier]
    /// to hold a `Spot`.
    ///
    /// Note that all the setters affecting `tier` are
    /// mutually exclusive.
    pub fn set_spot<T: std::convert::Into<std::boxed::Box<crate::model::queued_resource::Spot>>>(
        mut self,
        v: T,
    ) -> Self {
        self.tier = std::option::Option::Some(crate::model::queued_resource::Tier::Spot(v.into()));
        self
    }

    /// Sets the value of [tier][crate::model::QueuedResource::tier]
    /// to hold a `Guaranteed`.
    ///
    /// Note that all the setters affecting `tier` are
    /// mutually exclusive.
    pub fn set_guaranteed<
        T: std::convert::Into<std::boxed::Box<crate::model::queued_resource::Guaranteed>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.tier =
            std::option::Option::Some(crate::model::queued_resource::Tier::Guaranteed(v.into()));
        self
    }
}

impl wkt::message::Message for QueuedResource {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.QueuedResource"
    }
}

/// Defines additional types related to QueuedResource
pub mod queued_resource {
    #[allow(unused_imports)]
    use super::*;

    /// Details of the TPU resource(s) being requested.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Tpu {
        /// Optional. The TPU node(s) being requested.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub node_spec: std::vec::Vec<crate::model::queued_resource::tpu::NodeSpec>,
    }

    impl Tpu {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [node_spec][crate::model::queued_resource::Tpu::node_spec].
        pub fn set_node_spec<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::queued_resource::tpu::NodeSpec>,
        {
            use std::iter::Iterator;
            self.node_spec = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for Tpu {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.tpu.v2.QueuedResource.Tpu"
        }
    }

    /// Defines additional types related to Tpu
    pub mod tpu {
        #[allow(unused_imports)]
        use super::*;

        /// Details of the TPU node(s) being requested. Users can request either a
        /// single node or multiple nodes.
        /// NodeSpec provides the specification for node(s) to be created.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct NodeSpec {
            /// Required. The parent resource name.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub parent: std::string::String,

            /// Required. The node.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub node: std::option::Option<crate::model::Node>,

            /// Either a node_id or multislice_params.
            #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
            pub name_strategy:
                std::option::Option<crate::model::queued_resource::tpu::node_spec::NameStrategy>,
        }

        impl NodeSpec {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [parent][crate::model::queued_resource::tpu::NodeSpec::parent].
            pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.parent = v.into();
                self
            }

            /// Sets the value of [node][crate::model::queued_resource::tpu::NodeSpec::node].
            pub fn set_node<T: std::convert::Into<std::option::Option<crate::model::Node>>>(
                mut self,
                v: T,
            ) -> Self {
                self.node = v.into();
                self
            }

            /// Sets the value of `name_strategy`.
            pub fn set_name_strategy<
                T: std::convert::Into<
                        std::option::Option<
                            crate::model::queued_resource::tpu::node_spec::NameStrategy,
                        >,
                    >,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.name_strategy = v.into();
                self
            }

            /// The value of [name_strategy][crate::model::queued_resource::tpu::NodeSpec::name_strategy]
            /// if it holds a `NodeId`, `None` if the field is not set or
            /// holds a different branch.
            pub fn get_node_id(&self) -> std::option::Option<&std::string::String> {
                #[allow(unreachable_patterns)]
                self.name_strategy.as_ref().and_then(|v| match v {
                    crate::model::queued_resource::tpu::node_spec::NameStrategy::NodeId(v) => {
                        std::option::Option::Some(v)
                    }
                    _ => std::option::Option::None,
                })
            }

            /// The value of [name_strategy][crate::model::queued_resource::tpu::NodeSpec::name_strategy]
            /// if it holds a `MultisliceParams`, `None` if the field is not set or
            /// holds a different branch.
            pub fn get_multislice_params(
                &self,
            ) -> std::option::Option<
                &std::boxed::Box<crate::model::queued_resource::tpu::node_spec::MultisliceParams>,
            > {
                #[allow(unreachable_patterns)]
                self.name_strategy.as_ref().and_then(|v| match v {
                    crate::model::queued_resource::tpu::node_spec::NameStrategy::MultisliceParams(v) => std::option::Option::Some(v),
                    _ => std::option::Option::None,
                })
            }

            /// Sets the value of [name_strategy][crate::model::queued_resource::tpu::NodeSpec::name_strategy]
            /// to hold a `NodeId`.
            ///
            /// Note that all the setters affecting `name_strategy` are
            /// mutually exclusive.
            pub fn set_node_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.name_strategy = std::option::Option::Some(
                    crate::model::queued_resource::tpu::node_spec::NameStrategy::NodeId(v.into()),
                );
                self
            }

            /// Sets the value of [name_strategy][crate::model::queued_resource::tpu::NodeSpec::name_strategy]
            /// to hold a `MultisliceParams`.
            ///
            /// Note that all the setters affecting `name_strategy` are
            /// mutually exclusive.
            pub fn set_multislice_params<
                T: std::convert::Into<
                        std::boxed::Box<
                            crate::model::queued_resource::tpu::node_spec::MultisliceParams,
                        >,
                    >,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.name_strategy = std::option::Option::Some(
                    crate::model::queued_resource::tpu::node_spec::NameStrategy::MultisliceParams(
                        v.into(),
                    ),
                );
                self
            }
        }

        impl wkt::message::Message for NodeSpec {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.tpu.v2.QueuedResource.Tpu.NodeSpec"
            }
        }

        /// Defines additional types related to NodeSpec
        pub mod node_spec {
            #[allow(unused_imports)]
            use super::*;

            /// Parameters to specify for multislice QueuedResource requests. This
            /// message must be populated in case of multislice requests instead of
            /// node_id.
            #[serde_with::serde_as]
            #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
            #[serde(default, rename_all = "camelCase")]
            #[non_exhaustive]
            pub struct MultisliceParams {
                /// Required. Number of nodes with this spec. The system will attempt
                /// to provision "node_count" nodes as part of the request.
                /// This needs to be > 1.
                pub node_count: i32,

                /// Optional. Prefix of node_ids in case of multislice request.
                /// Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format.
                /// If node_count = 3 and node_id_prefix = "np", node ids of nodes
                /// created will be "np-0", "np-1", "np-2". If this field is not
                /// provided we use queued_resource_id as the node_id_prefix.
                #[serde(skip_serializing_if = "std::string::String::is_empty")]
                pub node_id_prefix: std::string::String,
            }

            impl MultisliceParams {
                pub fn new() -> Self {
                    std::default::Default::default()
                }

                /// Sets the value of [node_count][crate::model::queued_resource::tpu::node_spec::MultisliceParams::node_count].
                pub fn set_node_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
                    self.node_count = v.into();
                    self
                }

                /// Sets the value of [node_id_prefix][crate::model::queued_resource::tpu::node_spec::MultisliceParams::node_id_prefix].
                pub fn set_node_id_prefix<T: std::convert::Into<std::string::String>>(
                    mut self,
                    v: T,
                ) -> Self {
                    self.node_id_prefix = v.into();
                    self
                }
            }

            impl wkt::message::Message for MultisliceParams {
                fn typename() -> &'static str {
                    "type.googleapis.com/google.cloud.tpu.v2.QueuedResource.Tpu.NodeSpec.MultisliceParams"
                }
            }

            /// Either a node_id or multislice_params.
            #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
            #[serde(rename_all = "camelCase")]
            #[non_exhaustive]
            pub enum NameStrategy {
                /// Optional. The unqualified resource name. Should follow the
                /// `^[A-Za-z0-9_.~+%-]+$` regex format. This is only specified when
                /// requesting a single node. In case of multislice requests,
                /// multislice_params must be populated instead.
                NodeId(std::string::String),
                /// Optional. Fields to specify in case of multislice request.
                MultisliceParams(
                    std::boxed::Box<
                        crate::model::queued_resource::tpu::node_spec::MultisliceParams,
                    >,
                ),
            }
        }
    }

    /// Spot tier definition.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Spot {}

    impl Spot {
        pub fn new() -> Self {
            std::default::Default::default()
        }
    }

    impl wkt::message::Message for Spot {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.tpu.v2.QueuedResource.Spot"
        }
    }

    /// Guaranteed tier definition.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Guaranteed {
        /// Optional. Defines the minimum duration of the guarantee. If specified,
        /// the requested resources will only be provisioned if they can be
        /// allocated for at least the given duration.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub min_duration: std::option::Option<wkt::Duration>,
    }

    impl Guaranteed {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [min_duration][crate::model::queued_resource::Guaranteed::min_duration].
        pub fn set_min_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.min_duration = v.into();
            self
        }
    }

    impl wkt::message::Message for Guaranteed {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.tpu.v2.QueuedResource.Guaranteed"
        }
    }

    /// Defines the policy of the QueuedRequest.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct QueueingPolicy {
        /// Time flexibility specification.
        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub start_timing_constraints: std::option::Option<
            crate::model::queued_resource::queueing_policy::StartTimingConstraints,
        >,
    }

    impl QueueingPolicy {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of `start_timing_constraints`.
        pub fn set_start_timing_constraints<
            T: std::convert::Into<
                    std::option::Option<
                        crate::model::queued_resource::queueing_policy::StartTimingConstraints,
                    >,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.start_timing_constraints = v.into();
            self
        }

        /// The value of [start_timing_constraints][crate::model::queued_resource::QueueingPolicy::start_timing_constraints]
        /// if it holds a `ValidUntilDuration`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_valid_until_duration(
            &self,
        ) -> std::option::Option<&std::boxed::Box<wkt::Duration>> {
            #[allow(unreachable_patterns)]
            self.start_timing_constraints.as_ref().and_then(|v| match v {
                crate::model::queued_resource::queueing_policy::StartTimingConstraints::ValidUntilDuration(v) => std::option::Option::Some(v),
                _ => std::option::Option::None,
            })
        }

        /// The value of [start_timing_constraints][crate::model::queued_resource::QueueingPolicy::start_timing_constraints]
        /// if it holds a `ValidUntilTime`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_valid_until_time(
            &self,
        ) -> std::option::Option<&std::boxed::Box<wkt::Timestamp>> {
            #[allow(unreachable_patterns)]
            self.start_timing_constraints.as_ref().and_then(|v| match v {
                crate::model::queued_resource::queueing_policy::StartTimingConstraints::ValidUntilTime(v) => std::option::Option::Some(v),
                _ => std::option::Option::None,
            })
        }

        /// The value of [start_timing_constraints][crate::model::queued_resource::QueueingPolicy::start_timing_constraints]
        /// if it holds a `ValidAfterDuration`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_valid_after_duration(
            &self,
        ) -> std::option::Option<&std::boxed::Box<wkt::Duration>> {
            #[allow(unreachable_patterns)]
            self.start_timing_constraints.as_ref().and_then(|v| match v {
                crate::model::queued_resource::queueing_policy::StartTimingConstraints::ValidAfterDuration(v) => std::option::Option::Some(v),
                _ => std::option::Option::None,
            })
        }

        /// The value of [start_timing_constraints][crate::model::queued_resource::QueueingPolicy::start_timing_constraints]
        /// if it holds a `ValidAfterTime`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_valid_after_time(
            &self,
        ) -> std::option::Option<&std::boxed::Box<wkt::Timestamp>> {
            #[allow(unreachable_patterns)]
            self.start_timing_constraints.as_ref().and_then(|v| match v {
                crate::model::queued_resource::queueing_policy::StartTimingConstraints::ValidAfterTime(v) => std::option::Option::Some(v),
                _ => std::option::Option::None,
            })
        }

        /// The value of [start_timing_constraints][crate::model::queued_resource::QueueingPolicy::start_timing_constraints]
        /// if it holds a `ValidInterval`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_valid_interval(
            &self,
        ) -> std::option::Option<&std::boxed::Box<gtype::model::Interval>> {
            #[allow(unreachable_patterns)]
            self.start_timing_constraints.as_ref().and_then(|v| match v {
                crate::model::queued_resource::queueing_policy::StartTimingConstraints::ValidInterval(v) => std::option::Option::Some(v),
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [start_timing_constraints][crate::model::queued_resource::QueueingPolicy::start_timing_constraints]
        /// to hold a `ValidUntilDuration`.
        ///
        /// Note that all the setters affecting `start_timing_constraints` are
        /// mutually exclusive.
        pub fn set_valid_until_duration<T: std::convert::Into<std::boxed::Box<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.start_timing_constraints = std::option::Option::Some(
                crate::model::queued_resource::queueing_policy::StartTimingConstraints::ValidUntilDuration(
                    v.into()
                )
            );
            self
        }

        /// Sets the value of [start_timing_constraints][crate::model::queued_resource::QueueingPolicy::start_timing_constraints]
        /// to hold a `ValidUntilTime`.
        ///
        /// Note that all the setters affecting `start_timing_constraints` are
        /// mutually exclusive.
        pub fn set_valid_until_time<T: std::convert::Into<std::boxed::Box<wkt::Timestamp>>>(
            mut self,
            v: T,
        ) -> Self {
            self.start_timing_constraints = std::option::Option::Some(
                crate::model::queued_resource::queueing_policy::StartTimingConstraints::ValidUntilTime(
                    v.into()
                )
            );
            self
        }

        /// Sets the value of [start_timing_constraints][crate::model::queued_resource::QueueingPolicy::start_timing_constraints]
        /// to hold a `ValidAfterDuration`.
        ///
        /// Note that all the setters affecting `start_timing_constraints` are
        /// mutually exclusive.
        pub fn set_valid_after_duration<T: std::convert::Into<std::boxed::Box<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.start_timing_constraints = std::option::Option::Some(
                crate::model::queued_resource::queueing_policy::StartTimingConstraints::ValidAfterDuration(
                    v.into()
                )
            );
            self
        }

        /// Sets the value of [start_timing_constraints][crate::model::queued_resource::QueueingPolicy::start_timing_constraints]
        /// to hold a `ValidAfterTime`.
        ///
        /// Note that all the setters affecting `start_timing_constraints` are
        /// mutually exclusive.
        pub fn set_valid_after_time<T: std::convert::Into<std::boxed::Box<wkt::Timestamp>>>(
            mut self,
            v: T,
        ) -> Self {
            self.start_timing_constraints = std::option::Option::Some(
                crate::model::queued_resource::queueing_policy::StartTimingConstraints::ValidAfterTime(
                    v.into()
                )
            );
            self
        }

        /// Sets the value of [start_timing_constraints][crate::model::queued_resource::QueueingPolicy::start_timing_constraints]
        /// to hold a `ValidInterval`.
        ///
        /// Note that all the setters affecting `start_timing_constraints` are
        /// mutually exclusive.
        pub fn set_valid_interval<
            T: std::convert::Into<std::boxed::Box<gtype::model::Interval>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.start_timing_constraints = std::option::Option::Some(
                crate::model::queued_resource::queueing_policy::StartTimingConstraints::ValidInterval(
                    v.into()
                )
            );
            self
        }
    }

    impl wkt::message::Message for QueueingPolicy {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.tpu.v2.QueuedResource.QueueingPolicy"
        }
    }

    /// Defines additional types related to QueueingPolicy
    pub mod queueing_policy {
        #[allow(unused_imports)]
        use super::*;

        /// Time flexibility specification.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum StartTimingConstraints {
            /// Optional. A relative time after which resources should not be created.
            /// If the request cannot be fulfilled by this time the request will be
            /// failed.
            ValidUntilDuration(std::boxed::Box<wkt::Duration>),
            /// Optional. An absolute time after which resources should not be created.
            /// If the request cannot be fulfilled by this time the request will be
            /// failed.
            ValidUntilTime(std::boxed::Box<wkt::Timestamp>),
            /// Optional. A relative time after which resources may be created.
            ValidAfterDuration(std::boxed::Box<wkt::Duration>),
            /// Optional. An absolute time after which resources may be created.
            ValidAfterTime(std::boxed::Box<wkt::Timestamp>),
            /// Optional. An absolute time interval within which resources may be
            /// created.
            ValidInterval(std::boxed::Box<gtype::model::Interval>),
        }
    }

    /// Resource specification.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Resource {
        /// Optional. Defines a TPU resource.
        Tpu(std::boxed::Box<crate::model::queued_resource::Tpu>),
    }

    /// Tier specifies the required tier.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Tier {
        /// Optional. The Spot tier.
        Spot(std::boxed::Box<crate::model::queued_resource::Spot>),
        /// Optional. The Guaranteed tier
        Guaranteed(std::boxed::Box<crate::model::queued_resource::Guaranteed>),
    }
}

/// QueuedResourceState defines the details of the QueuedResource request.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct QueuedResourceState {
    /// Output only. State of the QueuedResource request.
    pub state: crate::model::queued_resource_state::State,

    /// Output only. The initiator of the QueuedResources's current state. Used to
    /// indicate whether the SUSPENDING/SUSPENDED state was initiated by the user
    /// or the service.
    pub state_initiator: crate::model::queued_resource_state::StateInitiator,

    /// Further data for the state.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub state_data: std::option::Option<crate::model::queued_resource_state::StateData>,
}

impl QueuedResourceState {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [state][crate::model::QueuedResourceState::state].
    pub fn set_state<T: std::convert::Into<crate::model::queued_resource_state::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [state_initiator][crate::model::QueuedResourceState::state_initiator].
    pub fn set_state_initiator<
        T: std::convert::Into<crate::model::queued_resource_state::StateInitiator>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.state_initiator = v.into();
        self
    }

    /// Sets the value of `state_data`.
    pub fn set_state_data<
        T: std::convert::Into<std::option::Option<crate::model::queued_resource_state::StateData>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.state_data = v.into();
        self
    }

    /// The value of [state_data][crate::model::QueuedResourceState::state_data]
    /// if it holds a `CreatingData`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_creating_data(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::queued_resource_state::CreatingData>>
    {
        #[allow(unreachable_patterns)]
        self.state_data.as_ref().and_then(|v| match v {
            crate::model::queued_resource_state::StateData::CreatingData(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [state_data][crate::model::QueuedResourceState::state_data]
    /// if it holds a `AcceptedData`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_accepted_data(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::queued_resource_state::AcceptedData>>
    {
        #[allow(unreachable_patterns)]
        self.state_data.as_ref().and_then(|v| match v {
            crate::model::queued_resource_state::StateData::AcceptedData(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [state_data][crate::model::QueuedResourceState::state_data]
    /// if it holds a `ProvisioningData`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_provisioning_data(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::queued_resource_state::ProvisioningData>>
    {
        #[allow(unreachable_patterns)]
        self.state_data.as_ref().and_then(|v| match v {
            crate::model::queued_resource_state::StateData::ProvisioningData(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [state_data][crate::model::QueuedResourceState::state_data]
    /// if it holds a `FailedData`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_failed_data(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::queued_resource_state::FailedData>>
    {
        #[allow(unreachable_patterns)]
        self.state_data.as_ref().and_then(|v| match v {
            crate::model::queued_resource_state::StateData::FailedData(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [state_data][crate::model::QueuedResourceState::state_data]
    /// if it holds a `DeletingData`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_deleting_data(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::queued_resource_state::DeletingData>>
    {
        #[allow(unreachable_patterns)]
        self.state_data.as_ref().and_then(|v| match v {
            crate::model::queued_resource_state::StateData::DeletingData(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [state_data][crate::model::QueuedResourceState::state_data]
    /// if it holds a `ActiveData`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_active_data(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::queued_resource_state::ActiveData>>
    {
        #[allow(unreachable_patterns)]
        self.state_data.as_ref().and_then(|v| match v {
            crate::model::queued_resource_state::StateData::ActiveData(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [state_data][crate::model::QueuedResourceState::state_data]
    /// if it holds a `SuspendingData`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_suspending_data(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::queued_resource_state::SuspendingData>>
    {
        #[allow(unreachable_patterns)]
        self.state_data.as_ref().and_then(|v| match v {
            crate::model::queued_resource_state::StateData::SuspendingData(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [state_data][crate::model::QueuedResourceState::state_data]
    /// if it holds a `SuspendedData`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_suspended_data(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::queued_resource_state::SuspendedData>>
    {
        #[allow(unreachable_patterns)]
        self.state_data.as_ref().and_then(|v| match v {
            crate::model::queued_resource_state::StateData::SuspendedData(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [state_data][crate::model::QueuedResourceState::state_data]
    /// to hold a `CreatingData`.
    ///
    /// Note that all the setters affecting `state_data` are
    /// mutually exclusive.
    pub fn set_creating_data<
        T: std::convert::Into<std::boxed::Box<crate::model::queued_resource_state::CreatingData>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.state_data = std::option::Option::Some(
            crate::model::queued_resource_state::StateData::CreatingData(v.into()),
        );
        self
    }

    /// Sets the value of [state_data][crate::model::QueuedResourceState::state_data]
    /// to hold a `AcceptedData`.
    ///
    /// Note that all the setters affecting `state_data` are
    /// mutually exclusive.
    pub fn set_accepted_data<
        T: std::convert::Into<std::boxed::Box<crate::model::queued_resource_state::AcceptedData>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.state_data = std::option::Option::Some(
            crate::model::queued_resource_state::StateData::AcceptedData(v.into()),
        );
        self
    }

    /// Sets the value of [state_data][crate::model::QueuedResourceState::state_data]
    /// to hold a `ProvisioningData`.
    ///
    /// Note that all the setters affecting `state_data` are
    /// mutually exclusive.
    pub fn set_provisioning_data<
        T: std::convert::Into<std::boxed::Box<crate::model::queued_resource_state::ProvisioningData>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.state_data = std::option::Option::Some(
            crate::model::queued_resource_state::StateData::ProvisioningData(v.into()),
        );
        self
    }

    /// Sets the value of [state_data][crate::model::QueuedResourceState::state_data]
    /// to hold a `FailedData`.
    ///
    /// Note that all the setters affecting `state_data` are
    /// mutually exclusive.
    pub fn set_failed_data<
        T: std::convert::Into<std::boxed::Box<crate::model::queued_resource_state::FailedData>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.state_data = std::option::Option::Some(
            crate::model::queued_resource_state::StateData::FailedData(v.into()),
        );
        self
    }

    /// Sets the value of [state_data][crate::model::QueuedResourceState::state_data]
    /// to hold a `DeletingData`.
    ///
    /// Note that all the setters affecting `state_data` are
    /// mutually exclusive.
    pub fn set_deleting_data<
        T: std::convert::Into<std::boxed::Box<crate::model::queued_resource_state::DeletingData>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.state_data = std::option::Option::Some(
            crate::model::queued_resource_state::StateData::DeletingData(v.into()),
        );
        self
    }

    /// Sets the value of [state_data][crate::model::QueuedResourceState::state_data]
    /// to hold a `ActiveData`.
    ///
    /// Note that all the setters affecting `state_data` are
    /// mutually exclusive.
    pub fn set_active_data<
        T: std::convert::Into<std::boxed::Box<crate::model::queued_resource_state::ActiveData>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.state_data = std::option::Option::Some(
            crate::model::queued_resource_state::StateData::ActiveData(v.into()),
        );
        self
    }

    /// Sets the value of [state_data][crate::model::QueuedResourceState::state_data]
    /// to hold a `SuspendingData`.
    ///
    /// Note that all the setters affecting `state_data` are
    /// mutually exclusive.
    pub fn set_suspending_data<
        T: std::convert::Into<std::boxed::Box<crate::model::queued_resource_state::SuspendingData>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.state_data = std::option::Option::Some(
            crate::model::queued_resource_state::StateData::SuspendingData(v.into()),
        );
        self
    }

    /// Sets the value of [state_data][crate::model::QueuedResourceState::state_data]
    /// to hold a `SuspendedData`.
    ///
    /// Note that all the setters affecting `state_data` are
    /// mutually exclusive.
    pub fn set_suspended_data<
        T: std::convert::Into<std::boxed::Box<crate::model::queued_resource_state::SuspendedData>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.state_data = std::option::Option::Some(
            crate::model::queued_resource_state::StateData::SuspendedData(v.into()),
        );
        self
    }
}

impl wkt::message::Message for QueuedResourceState {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.QueuedResourceState"
    }
}

/// Defines additional types related to QueuedResourceState
pub mod queued_resource_state {
    #[allow(unused_imports)]
    use super::*;

    /// Further data for the creating state.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct CreatingData {}

    impl CreatingData {
        pub fn new() -> Self {
            std::default::Default::default()
        }
    }

    impl wkt::message::Message for CreatingData {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.tpu.v2.QueuedResourceState.CreatingData"
        }
    }

    /// Further data for the accepted state.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AcceptedData {}

    impl AcceptedData {
        pub fn new() -> Self {
            std::default::Default::default()
        }
    }

    impl wkt::message::Message for AcceptedData {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.tpu.v2.QueuedResourceState.AcceptedData"
        }
    }

    /// Further data for the provisioning state.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ProvisioningData {}

    impl ProvisioningData {
        pub fn new() -> Self {
            std::default::Default::default()
        }
    }

    impl wkt::message::Message for ProvisioningData {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.tpu.v2.QueuedResourceState.ProvisioningData"
        }
    }

    /// Further data for the failed state.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct FailedData {
        /// Output only. The error that caused the queued resource to enter the
        /// FAILED state.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub error: std::option::Option<rpc::model::Status>,
    }

    impl FailedData {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [error][crate::model::queued_resource_state::FailedData::error].
        pub fn set_error<T: std::convert::Into<std::option::Option<rpc::model::Status>>>(
            mut self,
            v: T,
        ) -> Self {
            self.error = v.into();
            self
        }
    }

    impl wkt::message::Message for FailedData {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.tpu.v2.QueuedResourceState.FailedData"
        }
    }

    /// Further data for the deleting state.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct DeletingData {}

    impl DeletingData {
        pub fn new() -> Self {
            std::default::Default::default()
        }
    }

    impl wkt::message::Message for DeletingData {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.tpu.v2.QueuedResourceState.DeletingData"
        }
    }

    /// Further data for the active state.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ActiveData {}

    impl ActiveData {
        pub fn new() -> Self {
            std::default::Default::default()
        }
    }

    impl wkt::message::Message for ActiveData {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.tpu.v2.QueuedResourceState.ActiveData"
        }
    }

    /// Further data for the suspending state.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SuspendingData {}

    impl SuspendingData {
        pub fn new() -> Self {
            std::default::Default::default()
        }
    }

    impl wkt::message::Message for SuspendingData {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.tpu.v2.QueuedResourceState.SuspendingData"
        }
    }

    /// Further data for the suspended state.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SuspendedData {}

    impl SuspendedData {
        pub fn new() -> Self {
            std::default::Default::default()
        }
    }

    impl wkt::message::Message for SuspendedData {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.tpu.v2.QueuedResourceState.SuspendedData"
        }
    }

    /// Output only state of the request
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// State of the QueuedResource request is not known/set.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// The QueuedResource request has been received. We're still working on
        /// determining if we will be able to honor this request.
        pub const CREATING: State = State::new(1);

        /// The QueuedResource request has passed initial validation/admission
        /// control and has been persisted in the queue.
        pub const ACCEPTED: State = State::new(2);

        /// The QueuedResource request has been selected. The
        /// associated resources are currently being provisioned (or very soon
        /// will begin provisioning).
        pub const PROVISIONING: State = State::new(3);

        /// The request could not be completed. This may be due to some
        /// late-discovered problem with the request itself, or due to
        /// unavailability of resources within the constraints of the request
        /// (e.g., the 'valid until' start timing constraint expired).
        pub const FAILED: State = State::new(4);

        /// The QueuedResource is being deleted.
        pub const DELETING: State = State::new(5);

        /// The resources specified in the QueuedResource request have been
        /// provisioned and are ready for use by the end-user/consumer.
        pub const ACTIVE: State = State::new(6);

        /// The resources specified in the QueuedResource request are being
        /// deleted. This may have been initiated by the user, or
        /// the Cloud TPU service. Inspect the state data for more details.
        pub const SUSPENDING: State = State::new(7);

        /// The resources specified in the QueuedResource request have been
        /// deleted.
        pub const SUSPENDED: State = State::new(8);

        /// The QueuedResource request has passed initial validation and has been
        /// persisted in the queue. It will remain in this state until there are
        /// sufficient free resources to begin provisioning your request. Wait times
        /// will vary significantly depending on demand levels. When demand is high,
        /// not all requests can be immediately provisioned. If you
        /// need more reliable obtainability of TPUs consider purchasing a
        /// reservation. To put a limit on how long you are willing to wait, use
        /// [timing
        /// constraints](https://cloud.google.com/tpu/docs/queued-resources#request_a_queued_resource_before_a_specified_time).
        pub const WAITING_FOR_RESOURCES: State = State::new(9);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CREATING"),
                2 => std::borrow::Cow::Borrowed("ACCEPTED"),
                3 => std::borrow::Cow::Borrowed("PROVISIONING"),
                4 => std::borrow::Cow::Borrowed("FAILED"),
                5 => std::borrow::Cow::Borrowed("DELETING"),
                6 => std::borrow::Cow::Borrowed("ACTIVE"),
                7 => std::borrow::Cow::Borrowed("SUSPENDING"),
                8 => std::borrow::Cow::Borrowed("SUSPENDED"),
                9 => std::borrow::Cow::Borrowed("WAITING_FOR_RESOURCES"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "CREATING" => std::option::Option::Some(Self::CREATING),
                "ACCEPTED" => std::option::Option::Some(Self::ACCEPTED),
                "PROVISIONING" => std::option::Option::Some(Self::PROVISIONING),
                "FAILED" => std::option::Option::Some(Self::FAILED),
                "DELETING" => std::option::Option::Some(Self::DELETING),
                "ACTIVE" => std::option::Option::Some(Self::ACTIVE),
                "SUSPENDING" => std::option::Option::Some(Self::SUSPENDING),
                "SUSPENDED" => std::option::Option::Some(Self::SUSPENDED),
                "WAITING_FOR_RESOURCES" => std::option::Option::Some(Self::WAITING_FOR_RESOURCES),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// The initiator of the QueuedResource's SUSPENDING/SUSPENDED state.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct StateInitiator(i32);

    impl StateInitiator {
        /// The state initiator is unspecified.
        pub const STATE_INITIATOR_UNSPECIFIED: StateInitiator = StateInitiator::new(0);

        /// The current QueuedResource state was initiated by the user.
        pub const USER: StateInitiator = StateInitiator::new(1);

        /// The current QueuedResource state was initiated by the service.
        pub const SERVICE: StateInitiator = StateInitiator::new(2);

        /// Creates a new StateInitiator instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_INITIATOR_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("USER"),
                2 => std::borrow::Cow::Borrowed("SERVICE"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_INITIATOR_UNSPECIFIED" => {
                    std::option::Option::Some(Self::STATE_INITIATOR_UNSPECIFIED)
                }
                "USER" => std::option::Option::Some(Self::USER),
                "SERVICE" => std::option::Option::Some(Self::SERVICE),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for StateInitiator {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for StateInitiator {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Further data for the state.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum StateData {
        /// Output only. Further data for the creating state.
        CreatingData(std::boxed::Box<crate::model::queued_resource_state::CreatingData>),
        /// Output only. Further data for the accepted state.
        AcceptedData(std::boxed::Box<crate::model::queued_resource_state::AcceptedData>),
        /// Output only. Further data for the provisioning state.
        ProvisioningData(std::boxed::Box<crate::model::queued_resource_state::ProvisioningData>),
        /// Output only. Further data for the failed state.
        FailedData(std::boxed::Box<crate::model::queued_resource_state::FailedData>),
        /// Output only. Further data for the deleting state.
        DeletingData(std::boxed::Box<crate::model::queued_resource_state::DeletingData>),
        /// Output only. Further data for the active state.
        ActiveData(std::boxed::Box<crate::model::queued_resource_state::ActiveData>),
        /// Output only. Further data for the suspending state.
        SuspendingData(std::boxed::Box<crate::model::queued_resource_state::SuspendingData>),
        /// Output only. Further data for the suspended state.
        SuspendedData(std::boxed::Box<crate::model::queued_resource_state::SuspendedData>),
    }
}

/// Request for [ListNodes][google.cloud.tpu.v2.Tpu.ListNodes].
///
/// [google.cloud.tpu.v2.Tpu.ListNodes]: crate::client::Tpu::list_nodes
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListNodesRequest {
    /// Required. The parent resource name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return.
    pub page_size: i32,

    /// The next_page_token value returned from a previous List request, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListNodesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListNodesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListNodesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListNodesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListNodesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.ListNodesRequest"
    }
}

/// Response for [ListNodes][google.cloud.tpu.v2.Tpu.ListNodes].
///
/// [google.cloud.tpu.v2.Tpu.ListNodes]: crate::client::Tpu::list_nodes
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListNodesResponse {
    /// The listed nodes.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub nodes: std::vec::Vec<crate::model::Node>,

    /// The next page token or empty if none.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListNodesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListNodesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [nodes][crate::model::ListNodesResponse::nodes].
    pub fn set_nodes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Node>,
    {
        use std::iter::Iterator;
        self.nodes = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListNodesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListNodesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.ListNodesResponse"
    }
}

impl gax::paginator::PageableResponse for ListNodesResponse {
    type PageItem = crate::model::Node;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.nodes
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Request for [GetNode][google.cloud.tpu.v2.Tpu.GetNode].
///
/// [google.cloud.tpu.v2.Tpu.GetNode]: crate::client::Tpu::get_node
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetNodeRequest {
    /// Required. The resource name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetNodeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetNodeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetNodeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.GetNodeRequest"
    }
}

/// Request for [CreateNode][google.cloud.tpu.v2.Tpu.CreateNode].
///
/// [google.cloud.tpu.v2.Tpu.CreateNode]: crate::client::Tpu::create_node
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateNodeRequest {
    /// Required. The parent resource name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The unqualified resource name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub node_id: std::string::String,

    /// Required. The node.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub node: std::option::Option<crate::model::Node>,
}

impl CreateNodeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateNodeRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [node_id][crate::model::CreateNodeRequest::node_id].
    pub fn set_node_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.node_id = v.into();
        self
    }

    /// Sets the value of [node][crate::model::CreateNodeRequest::node].
    pub fn set_node<T: std::convert::Into<std::option::Option<crate::model::Node>>>(
        mut self,
        v: T,
    ) -> Self {
        self.node = v.into();
        self
    }
}

impl wkt::message::Message for CreateNodeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.CreateNodeRequest"
    }
}

/// Request for [DeleteNode][google.cloud.tpu.v2.Tpu.DeleteNode].
///
/// [google.cloud.tpu.v2.Tpu.DeleteNode]: crate::client::Tpu::delete_node
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteNodeRequest {
    /// Required. The resource name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteNodeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteNodeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteNodeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.DeleteNodeRequest"
    }
}

/// Request for [StopNode][google.cloud.tpu.v2.Tpu.StopNode].
///
/// [google.cloud.tpu.v2.Tpu.StopNode]: crate::client::Tpu::stop_node
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct StopNodeRequest {
    /// Required. The resource name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl StopNodeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::StopNodeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for StopNodeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.StopNodeRequest"
    }
}

/// Request for [StartNode][google.cloud.tpu.v2.Tpu.StartNode].
///
/// [google.cloud.tpu.v2.Tpu.StartNode]: crate::client::Tpu::start_node
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct StartNodeRequest {
    /// Required. The resource name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl StartNodeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::StartNodeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for StartNodeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.StartNodeRequest"
    }
}

/// Request for [UpdateNode][google.cloud.tpu.v2.Tpu.UpdateNode].
///
/// [google.cloud.tpu.v2.Tpu.UpdateNode]: crate::client::Tpu::update_node
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateNodeRequest {
    /// Required. Mask of fields from [Node][Tpu.Node] to update.
    /// Supported fields: [description, tags, labels, metadata,
    /// network_config.enable_external_ips].
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The node. Only fields specified in update_mask are updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub node: std::option::Option<crate::model::Node>,
}

impl UpdateNodeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateNodeRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [node][crate::model::UpdateNodeRequest::node].
    pub fn set_node<T: std::convert::Into<std::option::Option<crate::model::Node>>>(
        mut self,
        v: T,
    ) -> Self {
        self.node = v.into();
        self
    }
}

impl wkt::message::Message for UpdateNodeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.UpdateNodeRequest"
    }
}

/// Request for
/// [ListQueuedResources][google.cloud.tpu.v2.Tpu.ListQueuedResources].
///
/// [google.cloud.tpu.v2.Tpu.ListQueuedResources]: crate::client::Tpu::list_queued_resources
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListQueuedResourcesRequest {
    /// Required. The parent resource name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of items to return.
    pub page_size: i32,

    /// Optional. The next_page_token value returned from a previous List request,
    /// if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListQueuedResourcesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListQueuedResourcesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListQueuedResourcesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListQueuedResourcesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListQueuedResourcesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.ListQueuedResourcesRequest"
    }
}

/// Response for
/// [ListQueuedResources][google.cloud.tpu.v2.Tpu.ListQueuedResources].
///
/// [google.cloud.tpu.v2.Tpu.ListQueuedResources]: crate::client::Tpu::list_queued_resources
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListQueuedResourcesResponse {
    /// The listed queued resources.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub queued_resources: std::vec::Vec<crate::model::QueuedResource>,

    /// The next page token or empty if none.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListQueuedResourcesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListQueuedResourcesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [queued_resources][crate::model::ListQueuedResourcesResponse::queued_resources].
    pub fn set_queued_resources<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::QueuedResource>,
    {
        use std::iter::Iterator;
        self.queued_resources = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListQueuedResourcesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListQueuedResourcesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.ListQueuedResourcesResponse"
    }
}

impl gax::paginator::PageableResponse for ListQueuedResourcesResponse {
    type PageItem = crate::model::QueuedResource;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.queued_resources
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Request for [GetQueuedResource][google.cloud.tpu.v2.Tpu.GetQueuedResource]
///
/// [google.cloud.tpu.v2.Tpu.GetQueuedResource]: crate::client::Tpu::get_queued_resource
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetQueuedResourceRequest {
    /// Required. The resource name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetQueuedResourceRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetQueuedResourceRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetQueuedResourceRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.GetQueuedResourceRequest"
    }
}

/// Request for
/// [CreateQueuedResource][google.cloud.tpu.v2.Tpu.CreateQueuedResource].
///
/// [google.cloud.tpu.v2.Tpu.CreateQueuedResource]: crate::client::Tpu::create_queued_resource
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateQueuedResourceRequest {
    /// Required. The parent resource name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The unqualified resource name. Should follow the
    /// `^[A-Za-z0-9_.~+%-]+$` regex format.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub queued_resource_id: std::string::String,

    /// Required. The queued resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub queued_resource: std::option::Option<crate::model::QueuedResource>,

    /// Optional. Idempotent request UUID.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl CreateQueuedResourceRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateQueuedResourceRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [queued_resource_id][crate::model::CreateQueuedResourceRequest::queued_resource_id].
    pub fn set_queued_resource_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.queued_resource_id = v.into();
        self
    }

    /// Sets the value of [queued_resource][crate::model::CreateQueuedResourceRequest::queued_resource].
    pub fn set_queued_resource<
        T: std::convert::Into<std::option::Option<crate::model::QueuedResource>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.queued_resource = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateQueuedResourceRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateQueuedResourceRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.CreateQueuedResourceRequest"
    }
}

/// Request for
/// [DeleteQueuedResource][google.cloud.tpu.v2.Tpu.DeleteQueuedResource].
///
/// [google.cloud.tpu.v2.Tpu.DeleteQueuedResource]: crate::client::Tpu::delete_queued_resource
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteQueuedResourceRequest {
    /// Required. The resource name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. Idempotent request UUID.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set to true, all running nodes belonging to this queued
    /// resource will be deleted first and then the queued resource will be
    /// deleted. Otherwise (i.e. force=false), the queued resource will only be
    /// deleted if its nodes have already been deleted or the queued resource is in
    /// the ACCEPTED, FAILED, or SUSPENDED state.
    pub force: bool,
}

impl DeleteQueuedResourceRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteQueuedResourceRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteQueuedResourceRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [force][crate::model::DeleteQueuedResourceRequest::force].
    pub fn set_force<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.force = v.into();
        self
    }
}

impl wkt::message::Message for DeleteQueuedResourceRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.DeleteQueuedResourceRequest"
    }
}

/// Request for
/// [ResetQueuedResource][google.cloud.tpu.v2.Tpu.ResetQueuedResource].
///
/// [google.cloud.tpu.v2.Tpu.ResetQueuedResource]: crate::client::Tpu::reset_queued_resource
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ResetQueuedResourceRequest {
    /// Required. The name of the queued resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl ResetQueuedResourceRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ResetQueuedResourceRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for ResetQueuedResourceRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.ResetQueuedResourceRequest"
    }
}

/// The per-product per-project service identity for Cloud TPU service.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ServiceIdentity {
    /// The email address of the service identity.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub email: std::string::String,
}

impl ServiceIdentity {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [email][crate::model::ServiceIdentity::email].
    pub fn set_email<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.email = v.into();
        self
    }
}

impl wkt::message::Message for ServiceIdentity {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.ServiceIdentity"
    }
}

/// Request for
/// [GenerateServiceIdentity][google.cloud.tpu.v2.Tpu.GenerateServiceIdentity].
///
/// [google.cloud.tpu.v2.Tpu.GenerateServiceIdentity]: crate::client::Tpu::generate_service_identity
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GenerateServiceIdentityRequest {
    /// Required. The parent resource name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,
}

impl GenerateServiceIdentityRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::GenerateServiceIdentityRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }
}

impl wkt::message::Message for GenerateServiceIdentityRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.GenerateServiceIdentityRequest"
    }
}

/// Response for
/// [GenerateServiceIdentity][google.cloud.tpu.v2.Tpu.GenerateServiceIdentity].
///
/// [google.cloud.tpu.v2.Tpu.GenerateServiceIdentity]: crate::client::Tpu::generate_service_identity
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GenerateServiceIdentityResponse {
    /// ServiceIdentity that was created or retrieved.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub identity: std::option::Option<crate::model::ServiceIdentity>,
}

impl GenerateServiceIdentityResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [identity][crate::model::GenerateServiceIdentityResponse::identity].
    pub fn set_identity<
        T: std::convert::Into<std::option::Option<crate::model::ServiceIdentity>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.identity = v.into();
        self
    }
}

impl wkt::message::Message for GenerateServiceIdentityResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.GenerateServiceIdentityResponse"
    }
}

/// A accelerator type that a Node can be configured with.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AcceleratorType {
    /// The resource name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The accelerator type.
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub r#type: std::string::String,

    /// The accelerator config.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub accelerator_configs: std::vec::Vec<crate::model::AcceleratorConfig>,
}

impl AcceleratorType {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::AcceleratorType::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::AcceleratorType::type].
    pub fn set_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [accelerator_configs][crate::model::AcceleratorType::accelerator_configs].
    pub fn set_accelerator_configs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::AcceleratorConfig>,
    {
        use std::iter::Iterator;
        self.accelerator_configs = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for AcceleratorType {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.AcceleratorType"
    }
}

/// Request for [GetAcceleratorType][google.cloud.tpu.v2.Tpu.GetAcceleratorType].
///
/// [google.cloud.tpu.v2.Tpu.GetAcceleratorType]: crate::client::Tpu::get_accelerator_type
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetAcceleratorTypeRequest {
    /// Required. The resource name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetAcceleratorTypeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetAcceleratorTypeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetAcceleratorTypeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.GetAcceleratorTypeRequest"
    }
}

/// Request for
/// [ListAcceleratorTypes][google.cloud.tpu.v2.Tpu.ListAcceleratorTypes].
///
/// [google.cloud.tpu.v2.Tpu.ListAcceleratorTypes]: crate::client::Tpu::list_accelerator_types
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListAcceleratorTypesRequest {
    /// Required. The parent resource name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return.
    pub page_size: i32,

    /// The next_page_token value returned from a previous List request, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// List filter.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Sort results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListAcceleratorTypesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListAcceleratorTypesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListAcceleratorTypesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListAcceleratorTypesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListAcceleratorTypesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListAcceleratorTypesRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListAcceleratorTypesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.ListAcceleratorTypesRequest"
    }
}

/// Response for
/// [ListAcceleratorTypes][google.cloud.tpu.v2.Tpu.ListAcceleratorTypes].
///
/// [google.cloud.tpu.v2.Tpu.ListAcceleratorTypes]: crate::client::Tpu::list_accelerator_types
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListAcceleratorTypesResponse {
    /// The listed nodes.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub accelerator_types: std::vec::Vec<crate::model::AcceleratorType>,

    /// The next page token or empty if none.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListAcceleratorTypesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListAcceleratorTypesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [accelerator_types][crate::model::ListAcceleratorTypesResponse::accelerator_types].
    pub fn set_accelerator_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::AcceleratorType>,
    {
        use std::iter::Iterator;
        self.accelerator_types = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListAcceleratorTypesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListAcceleratorTypesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.ListAcceleratorTypesResponse"
    }
}

impl gax::paginator::PageableResponse for ListAcceleratorTypesResponse {
    type PageItem = crate::model::AcceleratorType;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.accelerator_types
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// A runtime version that a Node can be configured with.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RuntimeVersion {
    /// The resource name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The runtime version.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub version: std::string::String,
}

impl RuntimeVersion {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::RuntimeVersion::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [version][crate::model::RuntimeVersion::version].
    pub fn set_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.version = v.into();
        self
    }
}

impl wkt::message::Message for RuntimeVersion {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.RuntimeVersion"
    }
}

/// Request for [GetRuntimeVersion][google.cloud.tpu.v2.Tpu.GetRuntimeVersion].
///
/// [google.cloud.tpu.v2.Tpu.GetRuntimeVersion]: crate::client::Tpu::get_runtime_version
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetRuntimeVersionRequest {
    /// Required. The resource name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetRuntimeVersionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetRuntimeVersionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetRuntimeVersionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.GetRuntimeVersionRequest"
    }
}

/// Request for
/// [ListRuntimeVersions][google.cloud.tpu.v2.Tpu.ListRuntimeVersions].
///
/// [google.cloud.tpu.v2.Tpu.ListRuntimeVersions]: crate::client::Tpu::list_runtime_versions
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListRuntimeVersionsRequest {
    /// Required. The parent resource name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return.
    pub page_size: i32,

    /// The next_page_token value returned from a previous List request, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// List filter.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Sort results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListRuntimeVersionsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListRuntimeVersionsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListRuntimeVersionsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListRuntimeVersionsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListRuntimeVersionsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListRuntimeVersionsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListRuntimeVersionsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.ListRuntimeVersionsRequest"
    }
}

/// Response for
/// [ListRuntimeVersions][google.cloud.tpu.v2.Tpu.ListRuntimeVersions].
///
/// [google.cloud.tpu.v2.Tpu.ListRuntimeVersions]: crate::client::Tpu::list_runtime_versions
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListRuntimeVersionsResponse {
    /// The listed nodes.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub runtime_versions: std::vec::Vec<crate::model::RuntimeVersion>,

    /// The next page token or empty if none.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListRuntimeVersionsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListRuntimeVersionsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [runtime_versions][crate::model::ListRuntimeVersionsResponse::runtime_versions].
    pub fn set_runtime_versions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::RuntimeVersion>,
    {
        use std::iter::Iterator;
        self.runtime_versions = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListRuntimeVersionsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListRuntimeVersionsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.ListRuntimeVersionsResponse"
    }
}

impl gax::paginator::PageableResponse for ListRuntimeVersionsResponse {
    type PageItem = crate::model::RuntimeVersion;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.runtime_versions
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Metadata describing an [Operation][google.longrunning.Operation]
///
/// [google.longrunning.Operation]: longrunning::model::Operation
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OperationMetadata {
    /// The time the operation was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// The time the operation finished running.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Target of the operation - for example
    /// projects/project-1/connectivityTests/test-1
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target: std::string::String,

    /// Name of the verb executed by the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub verb: std::string::String,

    /// Human-readable status of the operation, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub status_detail: std::string::String,

    /// Specifies if cancellation was requested for the operation.
    pub cancel_requested: bool,

    /// API version.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub api_version: std::string::String,
}

impl OperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [create_time][crate::model::OperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::OperationMetadata::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [target][crate::model::OperationMetadata::target].
    pub fn set_target<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [verb][crate::model::OperationMetadata::verb].
    pub fn set_verb<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.verb = v.into();
        self
    }

    /// Sets the value of [status_detail][crate::model::OperationMetadata::status_detail].
    pub fn set_status_detail<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.status_detail = v.into();
        self
    }

    /// Sets the value of [cancel_requested][crate::model::OperationMetadata::cancel_requested].
    pub fn set_cancel_requested<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.cancel_requested = v.into();
        self
    }

    /// Sets the value of [api_version][crate::model::OperationMetadata::api_version].
    pub fn set_api_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.api_version = v.into();
        self
    }
}

impl wkt::message::Message for OperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.OperationMetadata"
    }
}

/// A Symptom instance.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Symptom {
    /// Timestamp when the Symptom is created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Type of the Symptom.
    pub symptom_type: crate::model::symptom::SymptomType,

    /// Detailed information of the current Symptom.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub details: std::string::String,

    /// A string used to uniquely distinguish a worker within a TPU node.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub worker_id: std::string::String,
}

impl Symptom {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [create_time][crate::model::Symptom::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [symptom_type][crate::model::Symptom::symptom_type].
    pub fn set_symptom_type<T: std::convert::Into<crate::model::symptom::SymptomType>>(
        mut self,
        v: T,
    ) -> Self {
        self.symptom_type = v.into();
        self
    }

    /// Sets the value of [details][crate::model::Symptom::details].
    pub fn set_details<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.details = v.into();
        self
    }

    /// Sets the value of [worker_id][crate::model::Symptom::worker_id].
    pub fn set_worker_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.worker_id = v.into();
        self
    }
}

impl wkt::message::Message for Symptom {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.Symptom"
    }
}

/// Defines additional types related to Symptom
pub mod symptom {
    #[allow(unused_imports)]
    use super::*;

    /// SymptomType represents the different types of Symptoms that a TPU can be
    /// at.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct SymptomType(i32);

    impl SymptomType {
        /// Unspecified symptom.
        pub const SYMPTOM_TYPE_UNSPECIFIED: SymptomType = SymptomType::new(0);

        /// TPU VM memory is low.
        pub const LOW_MEMORY: SymptomType = SymptomType::new(1);

        /// TPU runtime is out of memory.
        pub const OUT_OF_MEMORY: SymptomType = SymptomType::new(2);

        /// TPU runtime execution has timed out.
        pub const EXECUTE_TIMED_OUT: SymptomType = SymptomType::new(3);

        /// TPU runtime fails to construct a mesh that recognizes each TPU device's
        /// neighbors.
        pub const MESH_BUILD_FAIL: SymptomType = SymptomType::new(4);

        /// TPU HBM is out of memory.
        pub const HBM_OUT_OF_MEMORY: SymptomType = SymptomType::new(5);

        /// Abusive behaviors have been identified on the current project.
        pub const PROJECT_ABUSE: SymptomType = SymptomType::new(6);

        /// Creates a new SymptomType instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("SYMPTOM_TYPE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("LOW_MEMORY"),
                2 => std::borrow::Cow::Borrowed("OUT_OF_MEMORY"),
                3 => std::borrow::Cow::Borrowed("EXECUTE_TIMED_OUT"),
                4 => std::borrow::Cow::Borrowed("MESH_BUILD_FAIL"),
                5 => std::borrow::Cow::Borrowed("HBM_OUT_OF_MEMORY"),
                6 => std::borrow::Cow::Borrowed("PROJECT_ABUSE"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "SYMPTOM_TYPE_UNSPECIFIED" => {
                    std::option::Option::Some(Self::SYMPTOM_TYPE_UNSPECIFIED)
                }
                "LOW_MEMORY" => std::option::Option::Some(Self::LOW_MEMORY),
                "OUT_OF_MEMORY" => std::option::Option::Some(Self::OUT_OF_MEMORY),
                "EXECUTE_TIMED_OUT" => std::option::Option::Some(Self::EXECUTE_TIMED_OUT),
                "MESH_BUILD_FAIL" => std::option::Option::Some(Self::MESH_BUILD_FAIL),
                "HBM_OUT_OF_MEMORY" => std::option::Option::Some(Self::HBM_OUT_OF_MEMORY),
                "PROJECT_ABUSE" => std::option::Option::Some(Self::PROJECT_ABUSE),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for SymptomType {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for SymptomType {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Request for [GetGuestAttributes][google.cloud.tpu.v2.Tpu.GetGuestAttributes].
///
/// [google.cloud.tpu.v2.Tpu.GetGuestAttributes]: crate::client::Tpu::get_guest_attributes
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetGuestAttributesRequest {
    /// Required. The resource name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The guest attributes path to be queried.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub query_path: std::string::String,

    /// The 0-based worker ID. If it is empty, all workers' GuestAttributes will be
    /// returned.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub worker_ids: std::vec::Vec<std::string::String>,
}

impl GetGuestAttributesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetGuestAttributesRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [query_path][crate::model::GetGuestAttributesRequest::query_path].
    pub fn set_query_path<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.query_path = v.into();
        self
    }

    /// Sets the value of [worker_ids][crate::model::GetGuestAttributesRequest::worker_ids].
    pub fn set_worker_ids<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.worker_ids = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for GetGuestAttributesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.GetGuestAttributesRequest"
    }
}

/// Response for
/// [GetGuestAttributes][google.cloud.tpu.v2.Tpu.GetGuestAttributes].
///
/// [google.cloud.tpu.v2.Tpu.GetGuestAttributes]: crate::client::Tpu::get_guest_attributes
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetGuestAttributesResponse {
    /// The guest attributes for the TPU workers.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub guest_attributes: std::vec::Vec<crate::model::GuestAttributes>,
}

impl GetGuestAttributesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [guest_attributes][crate::model::GetGuestAttributesResponse::guest_attributes].
    pub fn set_guest_attributes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::GuestAttributes>,
    {
        use std::iter::Iterator;
        self.guest_attributes = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for GetGuestAttributesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.GetGuestAttributesResponse"
    }
}

/// A TPU accelerator configuration.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AcceleratorConfig {
    /// Required. Type of TPU.
    #[serde(rename = "type")]
    pub r#type: crate::model::accelerator_config::Type,

    /// Required. Topology of TPU in chips.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub topology: std::string::String,
}

impl AcceleratorConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [r#type][crate::model::AcceleratorConfig::type].
    pub fn set_type<T: std::convert::Into<crate::model::accelerator_config::Type>>(
        mut self,
        v: T,
    ) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [topology][crate::model::AcceleratorConfig::topology].
    pub fn set_topology<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.topology = v.into();
        self
    }
}

impl wkt::message::Message for AcceleratorConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.AcceleratorConfig"
    }
}

/// Defines additional types related to AcceleratorConfig
pub mod accelerator_config {
    #[allow(unused_imports)]
    use super::*;

    /// TPU type.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Type(i32);

    impl Type {
        /// Unspecified version.
        pub const TYPE_UNSPECIFIED: Type = Type::new(0);

        /// TPU v2.
        pub const V2: Type = Type::new(2);

        /// TPU v3.
        pub const V3: Type = Type::new(4);

        /// TPU v4.
        pub const V4: Type = Type::new(7);

        /// TPU v5lite pod.
        pub const V5LITE_POD: Type = Type::new(9);

        /// TPU v5p.
        pub const V5P: Type = Type::new(10);

        /// TPU v6e.
        pub const V6E: Type = Type::new(11);

        /// Creates a new Type instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("TYPE_UNSPECIFIED"),
                2 => std::borrow::Cow::Borrowed("V2"),
                4 => std::borrow::Cow::Borrowed("V3"),
                7 => std::borrow::Cow::Borrowed("V4"),
                9 => std::borrow::Cow::Borrowed("V5LITE_POD"),
                10 => std::borrow::Cow::Borrowed("V5P"),
                11 => std::borrow::Cow::Borrowed("V6E"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "TYPE_UNSPECIFIED" => std::option::Option::Some(Self::TYPE_UNSPECIFIED),
                "V2" => std::option::Option::Some(Self::V2),
                "V3" => std::option::Option::Some(Self::V3),
                "V4" => std::option::Option::Some(Self::V4),
                "V5LITE_POD" => std::option::Option::Some(Self::V5LITE_POD),
                "V5P" => std::option::Option::Some(Self::V5P),
                "V6E" => std::option::Option::Some(Self::V6E),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for Type {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for Type {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// A set of Shielded Instance options.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ShieldedInstanceConfig {
    /// Defines whether the instance has Secure Boot enabled.
    pub enable_secure_boot: bool,
}

impl ShieldedInstanceConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [enable_secure_boot][crate::model::ShieldedInstanceConfig::enable_secure_boot].
    pub fn set_enable_secure_boot<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_secure_boot = v.into();
        self
    }
}

impl wkt::message::Message for ShieldedInstanceConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.tpu.v2.ShieldedInstanceConfig"
    }
}
