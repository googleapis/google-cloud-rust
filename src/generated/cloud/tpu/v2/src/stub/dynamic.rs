// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use std::sync::Arc;

/// A dyn-compatible, crate-private version of [super::Tpu].
#[async_trait::async_trait]
pub trait Tpu: std::fmt::Debug + Send + Sync {
    async fn list_nodes(
        &self,
        req: crate::model::ListNodesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListNodesResponse>;

    async fn get_node(
        &self,
        req: crate::model::GetNodeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Node>;

    async fn create_node(
        &self,
        req: crate::model::CreateNodeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_node(
        &self,
        req: crate::model::DeleteNodeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn stop_node(
        &self,
        req: crate::model::StopNodeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn start_node(
        &self,
        req: crate::model::StartNodeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_node(
        &self,
        req: crate::model::UpdateNodeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_queued_resources(
        &self,
        req: crate::model::ListQueuedResourcesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListQueuedResourcesResponse>;

    async fn get_queued_resource(
        &self,
        req: crate::model::GetQueuedResourceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::QueuedResource>;

    async fn create_queued_resource(
        &self,
        req: crate::model::CreateQueuedResourceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_queued_resource(
        &self,
        req: crate::model::DeleteQueuedResourceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn reset_queued_resource(
        &self,
        req: crate::model::ResetQueuedResourceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn generate_service_identity(
        &self,
        req: crate::model::GenerateServiceIdentityRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GenerateServiceIdentityResponse>;

    async fn list_accelerator_types(
        &self,
        req: crate::model::ListAcceleratorTypesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAcceleratorTypesResponse>;

    async fn get_accelerator_type(
        &self,
        req: crate::model::GetAcceleratorTypeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AcceleratorType>;

    async fn list_runtime_versions(
        &self,
        req: crate::model::ListRuntimeVersionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListRuntimeVersionsResponse>;

    async fn get_runtime_version(
        &self,
        req: crate::model::GetRuntimeVersionRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::RuntimeVersion>;

    async fn get_guest_attributes(
        &self,
        req: crate::model::GetGuestAttributesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GetGuestAttributesResponse>;

    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::ListLocationsResponse>;

    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::Location>;

    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<()>;

    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<()>;

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_error_policy::PollingErrorPolicy>;

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}

/// All implementations of [super::Tpu] also implement [Tpu].
#[async_trait::async_trait]
impl<T: super::Tpu> Tpu for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn list_nodes(
        &self,
        req: crate::model::ListNodesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListNodesResponse> {
        T::list_nodes(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_node(
        &self,
        req: crate::model::GetNodeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Node> {
        T::get_node(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_node(
        &self,
        req: crate::model::CreateNodeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_node(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_node(
        &self,
        req: crate::model::DeleteNodeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_node(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn stop_node(
        &self,
        req: crate::model::StopNodeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::stop_node(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn start_node(
        &self,
        req: crate::model::StartNodeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::start_node(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_node(
        &self,
        req: crate::model::UpdateNodeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_node(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_queued_resources(
        &self,
        req: crate::model::ListQueuedResourcesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListQueuedResourcesResponse> {
        T::list_queued_resources(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_queued_resource(
        &self,
        req: crate::model::GetQueuedResourceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::QueuedResource> {
        T::get_queued_resource(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_queued_resource(
        &self,
        req: crate::model::CreateQueuedResourceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_queued_resource(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_queued_resource(
        &self,
        req: crate::model::DeleteQueuedResourceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_queued_resource(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn reset_queued_resource(
        &self,
        req: crate::model::ResetQueuedResourceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::reset_queued_resource(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn generate_service_identity(
        &self,
        req: crate::model::GenerateServiceIdentityRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GenerateServiceIdentityResponse> {
        T::generate_service_identity(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_accelerator_types(
        &self,
        req: crate::model::ListAcceleratorTypesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAcceleratorTypesResponse> {
        T::list_accelerator_types(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_accelerator_type(
        &self,
        req: crate::model::GetAcceleratorTypeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AcceleratorType> {
        T::get_accelerator_type(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_runtime_versions(
        &self,
        req: crate::model::ListRuntimeVersionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListRuntimeVersionsResponse> {
        T::list_runtime_versions(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_runtime_version(
        &self,
        req: crate::model::GetRuntimeVersionRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::RuntimeVersion> {
        T::get_runtime_version(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_guest_attributes(
        &self,
        req: crate::model::GetGuestAttributesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GetGuestAttributesResponse> {
        T::get_guest_attributes(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::ListLocationsResponse> {
        T::list_locations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::Location> {
        T::get_location(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse> {
        T::list_operations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::get_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<()> {
        T::delete_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<()> {
        T::cancel_operation(self, req, options).await
    }

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        T::get_polling_error_policy(self, options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        T::get_polling_backoff_policy(self, options)
    }
}
