// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;
use std::sync::Arc;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::VmwareEngine].
///
/// Application developers may need to implement this trait to mock
/// `client::VmwareEngine`.  In other use-cases, application developers only
/// use `client::VmwareEngine` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait VmwareEngine: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::VmwareEngine::list_private_clouds].
    fn list_private_clouds(
        &self,
        _req: crate::model::ListPrivateCloudsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListPrivateCloudsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListPrivateCloudsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::VmwareEngine::get_private_cloud].
    fn get_private_cloud(
        &self,
        _req: crate::model::GetPrivateCloudRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::PrivateCloud>> + Send {
        std::future::ready::<crate::Result<crate::model::PrivateCloud>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::create_private_cloud].
    fn create_private_cloud(
        &self,
        _req: crate::model::CreatePrivateCloudRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::update_private_cloud].
    fn update_private_cloud(
        &self,
        _req: crate::model::UpdatePrivateCloudRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::delete_private_cloud].
    fn delete_private_cloud(
        &self,
        _req: crate::model::DeletePrivateCloudRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::undelete_private_cloud].
    fn undelete_private_cloud(
        &self,
        _req: crate::model::UndeletePrivateCloudRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::list_clusters].
    fn list_clusters(
        &self,
        _req: crate::model::ListClustersRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListClustersResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListClustersResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::get_cluster].
    fn get_cluster(
        &self,
        _req: crate::model::GetClusterRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Cluster>> + Send {
        std::future::ready::<crate::Result<crate::model::Cluster>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::create_cluster].
    fn create_cluster(
        &self,
        _req: crate::model::CreateClusterRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::update_cluster].
    fn update_cluster(
        &self,
        _req: crate::model::UpdateClusterRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::delete_cluster].
    fn delete_cluster(
        &self,
        _req: crate::model::DeleteClusterRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::list_nodes].
    fn list_nodes(
        &self,
        _req: crate::model::ListNodesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListNodesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListNodesResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::get_node].
    fn get_node(
        &self,
        _req: crate::model::GetNodeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Node>> + Send {
        std::future::ready::<crate::Result<crate::model::Node>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::VmwareEngine::list_external_addresses].
    fn list_external_addresses(
        &self,
        _req: crate::model::ListExternalAddressesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListExternalAddressesResponse>>
           + Send {
        std::future::ready::<crate::Result<crate::model::ListExternalAddressesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::VmwareEngine::fetch_network_policy_external_addresses].
    fn fetch_network_policy_external_addresses(
        &self,
        _req: crate::model::FetchNetworkPolicyExternalAddressesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::FetchNetworkPolicyExternalAddressesResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::FetchNetworkPolicyExternalAddressesResponse>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmwareEngine::get_external_address].
    fn get_external_address(
        &self,
        _req: crate::model::GetExternalAddressRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ExternalAddress>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ExternalAddress>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::create_external_address].
    fn create_external_address(
        &self,
        _req: crate::model::CreateExternalAddressRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::update_external_address].
    fn update_external_address(
        &self,
        _req: crate::model::UpdateExternalAddressRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::delete_external_address].
    fn delete_external_address(
        &self,
        _req: crate::model::DeleteExternalAddressRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::list_subnets].
    fn list_subnets(
        &self,
        _req: crate::model::ListSubnetsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListSubnetsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListSubnetsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::get_subnet].
    fn get_subnet(
        &self,
        _req: crate::model::GetSubnetRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Subnet>> + Send {
        std::future::ready::<crate::Result<crate::model::Subnet>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::update_subnet].
    fn update_subnet(
        &self,
        _req: crate::model::UpdateSubnetRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::list_external_access_rules].
    fn list_external_access_rules(
        &self,
        _req: crate::model::ListExternalAccessRulesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::ListExternalAccessRulesResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::ListExternalAccessRulesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::VmwareEngine::get_external_access_rule].
    fn get_external_access_rule(
        &self,
        _req: crate::model::GetExternalAccessRuleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ExternalAccessRule>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ExternalAccessRule>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::create_external_access_rule].
    fn create_external_access_rule(
        &self,
        _req: crate::model::CreateExternalAccessRuleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::update_external_access_rule].
    fn update_external_access_rule(
        &self,
        _req: crate::model::UpdateExternalAccessRuleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::delete_external_access_rule].
    fn delete_external_access_rule(
        &self,
        _req: crate::model::DeleteExternalAccessRuleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::list_logging_servers].
    fn list_logging_servers(
        &self,
        _req: crate::model::ListLoggingServersRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListLoggingServersResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListLoggingServersResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::VmwareEngine::get_logging_server].
    fn get_logging_server(
        &self,
        _req: crate::model::GetLoggingServerRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::LoggingServer>> + Send {
        std::future::ready::<crate::Result<crate::model::LoggingServer>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::create_logging_server].
    fn create_logging_server(
        &self,
        _req: crate::model::CreateLoggingServerRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::update_logging_server].
    fn update_logging_server(
        &self,
        _req: crate::model::UpdateLoggingServerRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::delete_logging_server].
    fn delete_logging_server(
        &self,
        _req: crate::model::DeleteLoggingServerRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::list_node_types].
    fn list_node_types(
        &self,
        _req: crate::model::ListNodeTypesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListNodeTypesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListNodeTypesResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::get_node_type].
    fn get_node_type(
        &self,
        _req: crate::model::GetNodeTypeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::NodeType>> + Send {
        std::future::ready::<crate::Result<crate::model::NodeType>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::show_nsx_credentials].
    fn show_nsx_credentials(
        &self,
        _req: crate::model::ShowNsxCredentialsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Credentials>> + Send {
        std::future::ready::<crate::Result<crate::model::Credentials>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::show_vcenter_credentials].
    fn show_vcenter_credentials(
        &self,
        _req: crate::model::ShowVcenterCredentialsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Credentials>> + Send {
        std::future::ready::<crate::Result<crate::model::Credentials>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::reset_nsx_credentials].
    fn reset_nsx_credentials(
        &self,
        _req: crate::model::ResetNsxCredentialsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::reset_vcenter_credentials].
    fn reset_vcenter_credentials(
        &self,
        _req: crate::model::ResetVcenterCredentialsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::get_dns_forwarding].
    fn get_dns_forwarding(
        &self,
        _req: crate::model::GetDnsForwardingRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::DnsForwarding>> + Send {
        std::future::ready::<crate::Result<crate::model::DnsForwarding>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::update_dns_forwarding].
    fn update_dns_forwarding(
        &self,
        _req: crate::model::UpdateDnsForwardingRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::get_network_peering].
    fn get_network_peering(
        &self,
        _req: crate::model::GetNetworkPeeringRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::NetworkPeering>> + Send {
        std::future::ready::<crate::Result<crate::model::NetworkPeering>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::list_network_peerings].
    fn list_network_peerings(
        &self,
        _req: crate::model::ListNetworkPeeringsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListNetworkPeeringsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListNetworkPeeringsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::VmwareEngine::create_network_peering].
    fn create_network_peering(
        &self,
        _req: crate::model::CreateNetworkPeeringRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::delete_network_peering].
    fn delete_network_peering(
        &self,
        _req: crate::model::DeleteNetworkPeeringRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::update_network_peering].
    fn update_network_peering(
        &self,
        _req: crate::model::UpdateNetworkPeeringRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::list_peering_routes].
    fn list_peering_routes(
        &self,
        _req: crate::model::ListPeeringRoutesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListPeeringRoutesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListPeeringRoutesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::VmwareEngine::create_hcx_activation_key].
    fn create_hcx_activation_key(
        &self,
        _req: crate::model::CreateHcxActivationKeyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::list_hcx_activation_keys].
    fn list_hcx_activation_keys(
        &self,
        _req: crate::model::ListHcxActivationKeysRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListHcxActivationKeysResponse>>
           + Send {
        std::future::ready::<crate::Result<crate::model::ListHcxActivationKeysResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::VmwareEngine::get_hcx_activation_key].
    fn get_hcx_activation_key(
        &self,
        _req: crate::model::GetHcxActivationKeyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::HcxActivationKey>> + Send
    {
        std::future::ready::<crate::Result<crate::model::HcxActivationKey>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::get_network_policy].
    fn get_network_policy(
        &self,
        _req: crate::model::GetNetworkPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::NetworkPolicy>> + Send {
        std::future::ready::<crate::Result<crate::model::NetworkPolicy>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::list_network_policies].
    fn list_network_policies(
        &self,
        _req: crate::model::ListNetworkPoliciesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListNetworkPoliciesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListNetworkPoliciesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::VmwareEngine::create_network_policy].
    fn create_network_policy(
        &self,
        _req: crate::model::CreateNetworkPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::update_network_policy].
    fn update_network_policy(
        &self,
        _req: crate::model::UpdateNetworkPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::delete_network_policy].
    fn delete_network_policy(
        &self,
        _req: crate::model::DeleteNetworkPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::list_management_dns_zone_bindings].
    fn list_management_dns_zone_bindings(
        &self,
        _req: crate::model::ListManagementDnsZoneBindingsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::ListManagementDnsZoneBindingsResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::ListManagementDnsZoneBindingsResponse>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmwareEngine::get_management_dns_zone_binding].
    fn get_management_dns_zone_binding(
        &self,
        _req: crate::model::GetManagementDnsZoneBindingRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ManagementDnsZoneBinding>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ManagementDnsZoneBinding>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::VmwareEngine::create_management_dns_zone_binding].
    fn create_management_dns_zone_binding(
        &self,
        _req: crate::model::CreateManagementDnsZoneBindingRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::update_management_dns_zone_binding].
    fn update_management_dns_zone_binding(
        &self,
        _req: crate::model::UpdateManagementDnsZoneBindingRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::delete_management_dns_zone_binding].
    fn delete_management_dns_zone_binding(
        &self,
        _req: crate::model::DeleteManagementDnsZoneBindingRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::repair_management_dns_zone_binding].
    fn repair_management_dns_zone_binding(
        &self,
        _req: crate::model::RepairManagementDnsZoneBindingRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::create_vmware_engine_network].
    fn create_vmware_engine_network(
        &self,
        _req: crate::model::CreateVmwareEngineNetworkRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::update_vmware_engine_network].
    fn update_vmware_engine_network(
        &self,
        _req: crate::model::UpdateVmwareEngineNetworkRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::delete_vmware_engine_network].
    fn delete_vmware_engine_network(
        &self,
        _req: crate::model::DeleteVmwareEngineNetworkRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::get_vmware_engine_network].
    fn get_vmware_engine_network(
        &self,
        _req: crate::model::GetVmwareEngineNetworkRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::VmwareEngineNetwork>> + Send
    {
        std::future::ready::<crate::Result<crate::model::VmwareEngineNetwork>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::list_vmware_engine_networks].
    fn list_vmware_engine_networks(
        &self,
        _req: crate::model::ListVmwareEngineNetworksRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::ListVmwareEngineNetworksResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::ListVmwareEngineNetworksResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::VmwareEngine::create_private_connection].
    fn create_private_connection(
        &self,
        _req: crate::model::CreatePrivateConnectionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::get_private_connection].
    fn get_private_connection(
        &self,
        _req: crate::model::GetPrivateConnectionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::PrivateConnection>> + Send
    {
        std::future::ready::<crate::Result<crate::model::PrivateConnection>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::list_private_connections].
    fn list_private_connections(
        &self,
        _req: crate::model::ListPrivateConnectionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListPrivateConnectionsResponse>>
           + Send {
        std::future::ready::<crate::Result<crate::model::ListPrivateConnectionsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::VmwareEngine::update_private_connection].
    fn update_private_connection(
        &self,
        _req: crate::model::UpdatePrivateConnectionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::delete_private_connection].
    fn delete_private_connection(
        &self,
        _req: crate::model::DeletePrivateConnectionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::list_private_connection_peering_routes].
    fn list_private_connection_peering_routes(
        &self,
        _req: crate::model::ListPrivateConnectionPeeringRoutesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::ListPrivateConnectionPeeringRoutesResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::ListPrivateConnectionPeeringRoutesResponse>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::VmwareEngine::grant_dns_bind_permission].
    fn grant_dns_bind_permission(
        &self,
        _req: crate::model::GrantDnsBindPermissionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::get_dns_bind_permission].
    fn get_dns_bind_permission(
        &self,
        _req: crate::model::GetDnsBindPermissionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::DnsBindPermission>> + Send
    {
        std::future::ready::<crate::Result<crate::model::DnsBindPermission>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::revoke_dns_bind_permission].
    fn revoke_dns_bind_permission(
        &self,
        _req: crate::model::RevokeDnsBindPermissionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::list_locations].
    fn list_locations(
        &self,
        _req: location::model::ListLocationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::ListLocationsResponse>> + Send
    {
        std::future::ready::<crate::Result<location::model::ListLocationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::VmwareEngine::get_location].
    fn get_location(
        &self,
        _req: location::model::GetLocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::Location>> + Send {
        std::future::ready::<crate::Result<location::model::Location>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::set_iam_policy].
    fn set_iam_policy(
        &self,
        _req: iam_v1::model::SetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<iam_v1::model::Policy>> + Send {
        std::future::ready::<crate::Result<iam_v1::model::Policy>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::get_iam_policy].
    fn get_iam_policy(
        &self,
        _req: iam_v1::model::GetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<iam_v1::model::Policy>> + Send {
        std::future::ready::<crate::Result<iam_v1::model::Policy>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::test_iam_permissions].
    fn test_iam_permissions(
        &self,
        _req: iam_v1::model::TestIamPermissionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<iam_v1::model::TestIamPermissionsResponse>> + Send
    {
        std::future::ready::<crate::Result<iam_v1::model::TestIamPermissionsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::VmwareEngine::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::ListOperationsResponse>>
           + Send {
        std::future::ready::<crate::Result<longrunning::model::ListOperationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::VmwareEngine::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VmwareEngine::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Returns the polling policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        Arc::new(gax::polling_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}
