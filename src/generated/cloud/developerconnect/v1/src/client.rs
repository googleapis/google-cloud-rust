// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Developer Connect API.
///
/// # Service Description
///
/// Service describing handlers for resources
///
/// # Configuration
///
/// `DeveloperConnect` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `DeveloperConnect` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `DeveloperConnect` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct DeveloperConnect {
    inner: Arc<dyn crate::stubs::dynamic::DeveloperConnect>,
}

impl DeveloperConnect {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::DeveloperConnect + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::DeveloperConnect>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::DeveloperConnect> {
        crate::transport::DeveloperConnect::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::DeveloperConnect> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::DeveloperConnect::new)
    }

    /// Lists Connections in a given project and location.
    pub fn list_connections(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::developer_connect::ListConnections {
        crate::builders::developer_connect::ListConnections::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single Connection.
    pub fn get_connection(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::developer_connect::GetConnection {
        crate::builders::developer_connect::GetConnection::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new Connection in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_connection(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::developer_connect::CreateConnection {
        crate::builders::developer_connect::CreateConnection::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of a single Connection.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_connection(
        &self,
        connection: impl Into<crate::model::Connection>,
    ) -> crate::builders::developer_connect::UpdateConnection {
        crate::builders::developer_connect::UpdateConnection::new(self.inner.clone())
            .set_connection(connection.into())
    }

    /// Deletes a single Connection.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_connection(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::developer_connect::DeleteConnection {
        crate::builders::developer_connect::DeleteConnection::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a GitRepositoryLink. Upon linking a Git Repository, Developer
    /// Connect will configure the Git Repository to send webhook events to
    /// Developer Connect. Connections that use Firebase GitHub Application will
    /// have events forwarded to the Firebase service. All other Connections will
    /// have events forwarded to Cloud Build.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_git_repository_link(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::developer_connect::CreateGitRepositoryLink {
        crate::builders::developer_connect::CreateGitRepositoryLink::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a single GitRepositoryLink.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_git_repository_link(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::developer_connect::DeleteGitRepositoryLink {
        crate::builders::developer_connect::DeleteGitRepositoryLink::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists GitRepositoryLinks in a given project, location, and connection.
    pub fn list_git_repository_links(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::developer_connect::ListGitRepositoryLinks {
        crate::builders::developer_connect::ListGitRepositoryLinks::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single GitRepositoryLink.
    pub fn get_git_repository_link(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::developer_connect::GetGitRepositoryLink {
        crate::builders::developer_connect::GetGitRepositoryLink::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Fetches read/write token of a given gitRepositoryLink.
    pub fn fetch_read_write_token(
        &self,
        git_repository_link: impl Into<std::string::String>,
    ) -> crate::builders::developer_connect::FetchReadWriteToken {
        crate::builders::developer_connect::FetchReadWriteToken::new(self.inner.clone())
            .set_git_repository_link(git_repository_link.into())
    }

    /// Fetches read token of a given gitRepositoryLink.
    pub fn fetch_read_token(
        &self,
        git_repository_link: impl Into<std::string::String>,
    ) -> crate::builders::developer_connect::FetchReadToken {
        crate::builders::developer_connect::FetchReadToken::new(self.inner.clone())
            .set_git_repository_link(git_repository_link.into())
    }

    /// FetchLinkableGitRepositories returns a list of git repositories from an SCM
    /// that are available to be added to a Connection.
    pub fn fetch_linkable_git_repositories(
        &self,
        connection: impl Into<std::string::String>,
    ) -> crate::builders::developer_connect::FetchLinkableGitRepositories {
        crate::builders::developer_connect::FetchLinkableGitRepositories::new(self.inner.clone())
            .set_connection(connection.into())
    }

    /// FetchGitHubInstallations returns the list of GitHub Installations that
    /// are available to be added to a Connection.
    /// For github.com, only installations accessible to the authorizer token
    /// are returned. For GitHub Enterprise, all installations are returned.
    pub fn fetch_git_hub_installations(
        &self,
        connection: impl Into<std::string::String>,
    ) -> crate::builders::developer_connect::FetchGitHubInstallations {
        crate::builders::developer_connect::FetchGitHubInstallations::new(self.inner.clone())
            .set_connection(connection.into())
    }

    /// Fetch the list of branches or tags for a given repository.
    pub fn fetch_git_refs(
        &self,
        git_repository_link: impl Into<std::string::String>,
    ) -> crate::builders::developer_connect::FetchGitRefs {
        crate::builders::developer_connect::FetchGitRefs::new(self.inner.clone())
            .set_git_repository_link(git_repository_link.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::developer_connect::ListLocations {
        crate::builders::developer_connect::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::developer_connect::GetLocation {
        crate::builders::developer_connect::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::developer_connect::ListOperations {
        crate::builders::developer_connect::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::developer_connect::GetOperation {
        crate::builders::developer_connect::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::developer_connect::DeleteOperation {
        crate::builders::developer_connect::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::developer_connect::CancelOperation {
        crate::builders::developer_connect::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
