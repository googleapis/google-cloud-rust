// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use std::sync::Arc;

/// A dyn-compatible, crate-private version of [super::LicenseManager].
#[async_trait::async_trait]
pub trait LicenseManager: std::fmt::Debug + Send + Sync {
    async fn list_configurations(
        &self,
        req: crate::model::ListConfigurationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListConfigurationsResponse>;

    async fn get_configuration(
        &self,
        req: crate::model::GetConfigurationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Configuration>;

    async fn create_configuration(
        &self,
        req: crate::model::CreateConfigurationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_configuration(
        &self,
        req: crate::model::UpdateConfigurationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_configuration(
        &self,
        req: crate::model::DeleteConfigurationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_instances(
        &self,
        req: crate::model::ListInstancesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListInstancesResponse>;

    async fn get_instance(
        &self,
        req: crate::model::GetInstanceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Instance>;

    async fn deactivate_configuration(
        &self,
        req: crate::model::DeactivateConfigurationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn reactivate_configuration(
        &self,
        req: crate::model::ReactivateConfigurationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn query_configuration_license_usage(
        &self,
        req: crate::model::QueryConfigurationLicenseUsageRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::QueryConfigurationLicenseUsageResponse>;

    async fn aggregate_usage(
        &self,
        req: crate::model::AggregateUsageRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AggregateUsageResponse>;

    async fn list_products(
        &self,
        req: crate::model::ListProductsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListProductsResponse>;

    async fn get_product(
        &self,
        req: crate::model::GetProductRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Product>;

    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::ListLocationsResponse>;

    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::Location>;

    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<()>;

    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<()>;

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_error_policy::PollingErrorPolicy>;

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}

/// All implementations of [super::LicenseManager] also implement [LicenseManager].
#[async_trait::async_trait]
impl<T: super::LicenseManager> LicenseManager for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn list_configurations(
        &self,
        req: crate::model::ListConfigurationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListConfigurationsResponse> {
        T::list_configurations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_configuration(
        &self,
        req: crate::model::GetConfigurationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Configuration> {
        T::get_configuration(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_configuration(
        &self,
        req: crate::model::CreateConfigurationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_configuration(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_configuration(
        &self,
        req: crate::model::UpdateConfigurationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_configuration(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_configuration(
        &self,
        req: crate::model::DeleteConfigurationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_configuration(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_instances(
        &self,
        req: crate::model::ListInstancesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListInstancesResponse> {
        T::list_instances(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_instance(
        &self,
        req: crate::model::GetInstanceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Instance> {
        T::get_instance(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn deactivate_configuration(
        &self,
        req: crate::model::DeactivateConfigurationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::deactivate_configuration(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn reactivate_configuration(
        &self,
        req: crate::model::ReactivateConfigurationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::reactivate_configuration(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn query_configuration_license_usage(
        &self,
        req: crate::model::QueryConfigurationLicenseUsageRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::QueryConfigurationLicenseUsageResponse> {
        T::query_configuration_license_usage(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn aggregate_usage(
        &self,
        req: crate::model::AggregateUsageRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AggregateUsageResponse> {
        T::aggregate_usage(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_products(
        &self,
        req: crate::model::ListProductsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListProductsResponse> {
        T::list_products(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_product(
        &self,
        req: crate::model::GetProductRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Product> {
        T::get_product(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::ListLocationsResponse> {
        T::list_locations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::Location> {
        T::get_location(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse> {
        T::list_operations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::get_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<()> {
        T::delete_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<()> {
        T::cancel_operation(self, req, options).await
    }

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        T::get_polling_error_policy(self, options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        T::get_polling_backoff_policy(self, options)
    }
}
