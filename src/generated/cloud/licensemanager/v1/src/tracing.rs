// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
use crate::Result;

/// Implements a [LicenseManager](super::stub::LicenseManager) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct LicenseManager<T>
where
    T: super::stub::LicenseManager + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> LicenseManager<T>
where
    T: super::stub::LicenseManager + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> super::stub::LicenseManager for LicenseManager<T>
where
    T: super::stub::LicenseManager + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn list_configurations(
        &self,
        req: crate::model::ListConfigurationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListConfigurationsResponse> {
        self.inner.list_configurations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_configuration(
        &self,
        req: crate::model::GetConfigurationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Configuration> {
        self.inner.get_configuration(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_configuration(
        &self,
        req: crate::model::CreateConfigurationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.create_configuration(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_configuration(
        &self,
        req: crate::model::UpdateConfigurationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.update_configuration(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_configuration(
        &self,
        req: crate::model::DeleteConfigurationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.delete_configuration(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_instances(
        &self,
        req: crate::model::ListInstancesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListInstancesResponse> {
        self.inner.list_instances(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_instance(
        &self,
        req: crate::model::GetInstanceRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Instance> {
        self.inner.get_instance(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn deactivate_configuration(
        &self,
        req: crate::model::DeactivateConfigurationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.deactivate_configuration(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn reactivate_configuration(
        &self,
        req: crate::model::ReactivateConfigurationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.reactivate_configuration(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn query_configuration_license_usage(
        &self,
        req: crate::model::QueryConfigurationLicenseUsageRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::QueryConfigurationLicenseUsageResponse> {
        self.inner
            .query_configuration_license_usage(req, options)
            .await
    }

    #[tracing::instrument(ret)]
    async fn aggregate_usage(
        &self,
        req: crate::model::AggregateUsageRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::AggregateUsageResponse> {
        self.inner.aggregate_usage(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_products(
        &self,
        req: crate::model::ListProductsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListProductsResponse> {
        self.inner.list_products(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_product(
        &self,
        req: crate::model::GetProductRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Product> {
        self.inner.get_product(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<location::model::ListLocationsResponse> {
        self.inner.list_locations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<location::model::Location> {
        self.inner.get_location(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::ListOperationsResponse> {
        self.inner.list_operations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.get_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<()> {
        self.inner.delete_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<()> {
        self.inner.cancel_operation(req, options).await
    }

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        self.inner.get_polling_error_policy(options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        self.inner.get_polling_backoff_policy(options)
    }
}
