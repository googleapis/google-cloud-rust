// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use crate::Result;
#[allow(unused_imports)]
use gax::error::Error;

/// Secret Manager Service
///
/// Manages secrets and operations using those secrets. Implements a REST
/// model with the following objects:
///
/// * [Secret][google.cloud.secretmanager.v1.Secret]
/// * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion]
#[derive(Clone)]
pub struct SecretManagerService {
    inner: gax::http_client::ReqwestClient,
}

impl std::fmt::Debug for SecretManagerService {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        f.debug_struct("SecretManagerService")
            .field("inner", &self.inner)
            .finish()
    }
}

impl SecretManagerService {
    pub async fn new(config: gax::http_client::ClientConfig) -> Result<Self> {
        let inner = gax::http_client::ReqwestClient::new(config, crate::DEFAULT_HOST).await?;
        Ok(Self { inner })
    }
}

impl crate::traits::SecretManagerService for SecretManagerService {
    /// Lists [Secrets][google.cloud.secretmanager.v1.Secret].
    async fn list_secrets(
        &self,
        req: crate::model::ListSecretsRequest,
    ) -> Result<crate::model::ListSecretsResponse> {
        let builder = self
            .inner
            .builder(reqwest::Method::GET, format!("/v1/{}/secrets", req.parent))
            .query(&[("alt", "json")]);
        let builder =
            gax::query_parameter::add(builder, "pageSize", &req.page_size).map_err(Error::other)?;
        let builder = gax::query_parameter::add(builder, "pageToken", &req.page_token)
            .map_err(Error::other)?;
        let builder =
            gax::query_parameter::add(builder, "filter", &req.filter).map_err(Error::other)?;
        self.inner
            .execute(builder, None::<gax::http_client::NoBody>)
            .await
    }

    /// Creates a new [Secret][google.cloud.secretmanager.v1.Secret] containing no
    /// [SecretVersions][google.cloud.secretmanager.v1.SecretVersion].
    async fn create_secret(
        &self,
        req: crate::model::CreateSecretRequest,
    ) -> Result<crate::model::Secret> {
        let builder = self
            .inner
            .builder(reqwest::Method::POST, format!("/v1/{}/secrets", req.parent))
            .query(&[("alt", "json")]);
        let builder =
            gax::query_parameter::add(builder, "secretId", &req.secret_id).map_err(Error::other)?;
        self.inner.execute(builder, Some(req.secret)).await
    }

    /// Creates a new [SecretVersion][google.cloud.secretmanager.v1.SecretVersion]
    /// containing secret data and attaches it to an existing
    /// [Secret][google.cloud.secretmanager.v1.Secret].
    async fn add_secret_version(
        &self,
        req: crate::model::AddSecretVersionRequest,
    ) -> Result<crate::model::SecretVersion> {
        let builder = self
            .inner
            .builder(
                reqwest::Method::POST,
                format!("/v1/{}:addVersion", req.parent),
            )
            .query(&[("alt", "json")]);
        self.inner.execute(builder, Some(req)).await
    }

    /// Gets metadata for a given [Secret][google.cloud.secretmanager.v1.Secret].
    async fn get_secret(
        &self,
        req: crate::model::GetSecretRequest,
    ) -> Result<crate::model::Secret> {
        let builder = self
            .inner
            .builder(reqwest::Method::GET, format!("/v1/{}", req.name))
            .query(&[("alt", "json")]);
        self.inner
            .execute(builder, None::<gax::http_client::NoBody>)
            .await
    }

    /// Updates metadata of an existing
    /// [Secret][google.cloud.secretmanager.v1.Secret].
    async fn update_secret(
        &self,
        req: crate::model::UpdateSecretRequest,
    ) -> Result<crate::model::Secret> {
        let builder = self
            .inner
            .builder(
                reqwest::Method::PATCH,
                format!(
                    "/v1/{}",
                    gax::path_parameter::PathParameter::required(&req.secret, "secret")
                        .map_err(Error::other)?
                        .name
                ),
            )
            .query(&[("alt", "json")]);
        let builder = gax::query_parameter::add(
            builder,
            "updateMask",
            &serde_json::to_value(&req.update_mask).map_err(Error::serde)?,
        )
        .map_err(Error::other)?;
        self.inner.execute(builder, Some(req.secret)).await
    }

    /// Deletes a [Secret][google.cloud.secretmanager.v1.Secret].
    async fn delete_secret(&self, req: crate::model::DeleteSecretRequest) -> Result<wkt::Empty> {
        let builder = self
            .inner
            .builder(reqwest::Method::DELETE, format!("/v1/{}", req.name))
            .query(&[("alt", "json")]);
        let builder =
            gax::query_parameter::add(builder, "etag", &req.etag).map_err(Error::other)?;
        self.inner
            .execute(builder, None::<gax::http_client::NoBody>)
            .await
    }

    /// Lists [SecretVersions][google.cloud.secretmanager.v1.SecretVersion]. This
    /// call does not return secret data.
    async fn list_secret_versions(
        &self,
        req: crate::model::ListSecretVersionsRequest,
    ) -> Result<crate::model::ListSecretVersionsResponse> {
        let builder = self
            .inner
            .builder(reqwest::Method::GET, format!("/v1/{}/versions", req.parent))
            .query(&[("alt", "json")]);
        let builder =
            gax::query_parameter::add(builder, "pageSize", &req.page_size).map_err(Error::other)?;
        let builder = gax::query_parameter::add(builder, "pageToken", &req.page_token)
            .map_err(Error::other)?;
        let builder =
            gax::query_parameter::add(builder, "filter", &req.filter).map_err(Error::other)?;
        self.inner
            .execute(builder, None::<gax::http_client::NoBody>)
            .await
    }

    /// Gets metadata for a
    /// [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
    ///
    /// `projects/*/secrets/*/versions/latest` is an alias to the most recently
    /// created [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
    async fn get_secret_version(
        &self,
        req: crate::model::GetSecretVersionRequest,
    ) -> Result<crate::model::SecretVersion> {
        let builder = self
            .inner
            .builder(reqwest::Method::GET, format!("/v1/{}", req.name))
            .query(&[("alt", "json")]);
        self.inner
            .execute(builder, None::<gax::http_client::NoBody>)
            .await
    }

    /// Accesses a [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
    /// This call returns the secret data.
    ///
    /// `projects/*/secrets/*/versions/latest` is an alias to the most recently
    /// created [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
    async fn access_secret_version(
        &self,
        req: crate::model::AccessSecretVersionRequest,
    ) -> Result<crate::model::AccessSecretVersionResponse> {
        let builder = self
            .inner
            .builder(reqwest::Method::GET, format!("/v1/{}:access", req.name))
            .query(&[("alt", "json")]);
        self.inner
            .execute(builder, None::<gax::http_client::NoBody>)
            .await
    }

    /// Disables a [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
    ///
    /// Sets the [state][google.cloud.secretmanager.v1.SecretVersion.state] of the
    /// [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] to
    /// [DISABLED][google.cloud.secretmanager.v1.SecretVersion.State.DISABLED].
    async fn disable_secret_version(
        &self,
        req: crate::model::DisableSecretVersionRequest,
    ) -> Result<crate::model::SecretVersion> {
        let builder = self
            .inner
            .builder(reqwest::Method::POST, format!("/v1/{}:disable", req.name))
            .query(&[("alt", "json")]);
        self.inner.execute(builder, Some(req)).await
    }

    /// Enables a [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
    ///
    /// Sets the [state][google.cloud.secretmanager.v1.SecretVersion.state] of the
    /// [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] to
    /// [ENABLED][google.cloud.secretmanager.v1.SecretVersion.State.ENABLED].
    async fn enable_secret_version(
        &self,
        req: crate::model::EnableSecretVersionRequest,
    ) -> Result<crate::model::SecretVersion> {
        let builder = self
            .inner
            .builder(reqwest::Method::POST, format!("/v1/{}:enable", req.name))
            .query(&[("alt", "json")]);
        self.inner.execute(builder, Some(req)).await
    }

    /// Destroys a [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
    ///
    /// Sets the [state][google.cloud.secretmanager.v1.SecretVersion.state] of the
    /// [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] to
    /// [DESTROYED][google.cloud.secretmanager.v1.SecretVersion.State.DESTROYED]
    /// and irrevocably destroys the secret data.
    async fn destroy_secret_version(
        &self,
        req: crate::model::DestroySecretVersionRequest,
    ) -> Result<crate::model::SecretVersion> {
        let builder = self
            .inner
            .builder(reqwest::Method::POST, format!("/v1/{}:destroy", req.name))
            .query(&[("alt", "json")]);
        self.inner.execute(builder, Some(req)).await
    }

    /// Sets the access control policy on the specified secret. Replaces any
    /// existing policy.
    ///
    /// Permissions on
    /// [SecretVersions][google.cloud.secretmanager.v1.SecretVersion] are enforced
    /// according to the policy set on the associated
    /// [Secret][google.cloud.secretmanager.v1.Secret].
    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
    ) -> Result<iam_v1::model::Policy> {
        let builder = self
            .inner
            .builder(
                reqwest::Method::POST,
                format!("/v1/{}:setIamPolicy", req.resource),
            )
            .query(&[("alt", "json")]);
        self.inner.execute(builder, Some(req)).await
    }

    /// Gets the access control policy for a secret.
    /// Returns empty policy if the secret exists and does not have a policy set.
    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
    ) -> Result<iam_v1::model::Policy> {
        let builder = self
            .inner
            .builder(
                reqwest::Method::GET,
                format!("/v1/{}:getIamPolicy", req.resource),
            )
            .query(&[("alt", "json")]);
        let builder = gax::query_parameter::add(
            builder,
            "options",
            &serde_json::to_value(&req.options).map_err(Error::serde)?,
        )
        .map_err(Error::other)?;
        self.inner
            .execute(builder, None::<gax::http_client::NoBody>)
            .await
    }

    /// Returns permissions that a caller has for the specified secret.
    /// If the secret does not exist, this call returns an empty set of
    /// permissions, not a NOT_FOUND error.
    ///
    /// Note: This operation is designed to be used for building permission-aware
    /// UIs and command-line tools, not for authorization checking. This operation
    /// may "fail open" without warning.
    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
    ) -> Result<iam_v1::model::TestIamPermissionsResponse> {
        let builder = self
            .inner
            .builder(
                reqwest::Method::POST,
                format!("/v1/{}:testIamPermissions", req.resource),
            )
            .query(&[("alt", "json")]);
        self.inner.execute(builder, Some(req)).await
    }
}

/// Manages location-related information with an API service.
#[derive(Clone)]
pub struct Locations {
    inner: gax::http_client::ReqwestClient,
}

impl std::fmt::Debug for Locations {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        f.debug_struct("Locations")
            .field("inner", &self.inner)
            .finish()
    }
}

impl Locations {
    pub async fn new(config: gax::http_client::ClientConfig) -> Result<Self> {
        let inner = gax::http_client::ReqwestClient::new(config, crate::DEFAULT_HOST).await?;
        Ok(Self { inner })
    }
}

impl crate::traits::Locations for Locations {
    /// Lists information about the supported locations for this service.
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
    ) -> Result<location::model::ListLocationsResponse> {
        let builder = self
            .inner
            .builder(reqwest::Method::GET, format!("/v1/{}/locations", req.name))
            .query(&[("alt", "json")]);
        let builder =
            gax::query_parameter::add(builder, "filter", &req.filter).map_err(Error::other)?;
        let builder =
            gax::query_parameter::add(builder, "pageSize", &req.page_size).map_err(Error::other)?;
        let builder = gax::query_parameter::add(builder, "pageToken", &req.page_token)
            .map_err(Error::other)?;
        self.inner
            .execute(builder, None::<gax::http_client::NoBody>)
            .await
    }

    /// Gets information about a location.
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
    ) -> Result<location::model::Location> {
        let builder = self
            .inner
            .builder(reqwest::Method::GET, format!("/v1/{}", req.name))
            .query(&[("alt", "json")]);
        self.inner
            .execute(builder, None::<gax::http_client::NoBody>)
            .await
    }
}
