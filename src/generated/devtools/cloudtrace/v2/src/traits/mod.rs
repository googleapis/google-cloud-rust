// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use gax::error::Error;

pub(crate) mod dyntraits;

/// Service for collecting and viewing traces and spans within a trace.
///
/// A trace is a collection of spans corresponding to a single
/// operation or a set of operations in an application.
///
/// A span is an individual timed event which forms a node of the trace tree.
/// A single trace can contain spans from multiple services.
///
/// # Mocking
///
/// Application developers may use this trait to mock the cloudtrace clients.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation for each method. These implementations return an error.
pub trait TraceService: std::fmt::Debug + Send + Sync {
    /// Batch writes new spans to new or existing traces. You cannot update
    /// existing spans.
    fn batch_write_spans(
        &self,
        _req: crate::model::BatchWriteSpansRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Creates a new span.
    fn create_span(
        &self,
        _req: crate::model::Span,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Span>> + Send {
        std::future::ready::<crate::Result<crate::model::Span>>(Err(Error::other("unimplemented")))
    }
}
