// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

pub mod trace_service {
    use crate::Result;
    use std::sync::Arc;

    /// Common implementation for [crate::client::TraceService] request builders.
    #[derive(Clone, Debug)]
    pub struct RequestBuilder<R: std::default::Default> {
        stub: Arc<dyn crate::traits::dyntraits::TraceService>,
        request: R,
        options: gax::options::RequestOptions,
    }

    impl<R> RequestBuilder<R>
    where
        R: std::default::Default,
    {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::TraceService>) -> Self {
            Self {
                stub,
                request: R::default(),
                options: gax::options::RequestOptions::default(),
            }
        }
    }

    /// The request builder for a TraceService::batch_write_spans call.
    #[derive(Clone, Debug)]
    pub struct BatchWriteSpans(RequestBuilder<crate::model::BatchWriteSpansRequest>);

    impl BatchWriteSpans {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::TraceService>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::BatchWriteSpansRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<wkt::Empty> {
            (*self.0.stub)
                .batch_write_spans(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of `name`.
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of `spans`.
        pub fn set_spans<T: Into<std::vec::Vec<crate::model::Span>>>(mut self, v: T) -> Self {
            self.0.request.spans = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for BatchWriteSpans {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a TraceService::create_span call.
    #[derive(Clone, Debug)]
    pub struct CreateSpan(RequestBuilder<crate::model::Span>);

    impl CreateSpan {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::TraceService>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::Span>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Span> {
            (*self.0.stub)
                .create_span(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of `name`.
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of `span_id`.
        pub fn set_span_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.span_id = v.into();
            self
        }

        /// Sets the value of `parent_span_id`.
        pub fn set_parent_span_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent_span_id = v.into();
            self
        }

        /// Sets the value of `display_name`.
        pub fn set_display_name<T: Into<std::option::Option<crate::model::TruncatableString>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.display_name = v.into();
            self
        }

        /// Sets the value of `start_time`.
        pub fn set_start_time<T: Into<std::option::Option<wkt::Timestamp>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.start_time = v.into();
            self
        }

        /// Sets the value of `end_time`.
        pub fn set_end_time<T: Into<std::option::Option<wkt::Timestamp>>>(mut self, v: T) -> Self {
            self.0.request.end_time = v.into();
            self
        }

        /// Sets the value of `attributes`.
        pub fn set_attributes<T: Into<std::option::Option<crate::model::span::Attributes>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.attributes = v.into();
            self
        }

        /// Sets the value of `stack_trace`.
        pub fn set_stack_trace<T: Into<std::option::Option<crate::model::StackTrace>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.stack_trace = v.into();
            self
        }

        /// Sets the value of `time_events`.
        pub fn set_time_events<T: Into<std::option::Option<crate::model::span::TimeEvents>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.time_events = v.into();
            self
        }

        /// Sets the value of `links`.
        pub fn set_links<T: Into<std::option::Option<crate::model::span::Links>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.links = v.into();
            self
        }

        /// Sets the value of `status`.
        pub fn set_status<T: Into<std::option::Option<rpc::model::Status>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.status = v.into();
            self
        }

        /// Sets the value of `same_process_as_parent_span`.
        pub fn set_same_process_as_parent_span<T: Into<std::option::Option<wkt::BoolValue>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.same_process_as_parent_span = v.into();
            self
        }

        /// Sets the value of `child_span_count`.
        pub fn set_child_span_count<T: Into<std::option::Option<wkt::Int32Value>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.child_span_count = v.into();
            self
        }

        /// Sets the value of `span_kind`.
        pub fn set_span_kind<T: Into<crate::model::span::SpanKind>>(mut self, v: T) -> Self {
            self.0.request.span_kind = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for CreateSpan {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }
}
