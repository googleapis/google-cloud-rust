// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;
use std::sync::Arc;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::CloudBuild].
///
/// Application developers may need to implement this trait to mock
/// `client::CloudBuild`.  In other use-cases, application developers only
/// use `client::CloudBuild` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait CloudBuild: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::CloudBuild::create_build].
    fn create_build(
        &self,
        _req: crate::model::CreateBuildRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudBuild::get_build].
    fn get_build(
        &self,
        _req: crate::model::GetBuildRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Build>> + Send {
        std::future::ready::<crate::Result<crate::model::Build>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CloudBuild::list_builds].
    fn list_builds(
        &self,
        _req: crate::model::ListBuildsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListBuildsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListBuildsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudBuild::cancel_build].
    fn cancel_build(
        &self,
        _req: crate::model::CancelBuildRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Build>> + Send {
        std::future::ready::<crate::Result<crate::model::Build>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CloudBuild::retry_build].
    fn retry_build(
        &self,
        _req: crate::model::RetryBuildRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudBuild::approve_build].
    fn approve_build(
        &self,
        _req: crate::model::ApproveBuildRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudBuild::create_build_trigger].
    fn create_build_trigger(
        &self,
        _req: crate::model::CreateBuildTriggerRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::BuildTrigger>> + Send {
        std::future::ready::<crate::Result<crate::model::BuildTrigger>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudBuild::get_build_trigger].
    fn get_build_trigger(
        &self,
        _req: crate::model::GetBuildTriggerRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::BuildTrigger>> + Send {
        std::future::ready::<crate::Result<crate::model::BuildTrigger>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudBuild::list_build_triggers].
    fn list_build_triggers(
        &self,
        _req: crate::model::ListBuildTriggersRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListBuildTriggersResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListBuildTriggersResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::CloudBuild::delete_build_trigger].
    fn delete_build_trigger(
        &self,
        _req: crate::model::DeleteBuildTriggerRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<()>> + Send {
        std::future::ready::<crate::Result<()>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CloudBuild::update_build_trigger].
    fn update_build_trigger(
        &self,
        _req: crate::model::UpdateBuildTriggerRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::BuildTrigger>> + Send {
        std::future::ready::<crate::Result<crate::model::BuildTrigger>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudBuild::run_build_trigger].
    fn run_build_trigger(
        &self,
        _req: crate::model::RunBuildTriggerRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudBuild::receive_trigger_webhook].
    fn receive_trigger_webhook(
        &self,
        _req: crate::model::ReceiveTriggerWebhookRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::ReceiveTriggerWebhookResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::ReceiveTriggerWebhookResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::CloudBuild::create_worker_pool].
    fn create_worker_pool(
        &self,
        _req: crate::model::CreateWorkerPoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudBuild::get_worker_pool].
    fn get_worker_pool(
        &self,
        _req: crate::model::GetWorkerPoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::WorkerPool>> + Send {
        std::future::ready::<crate::Result<crate::model::WorkerPool>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudBuild::delete_worker_pool].
    fn delete_worker_pool(
        &self,
        _req: crate::model::DeleteWorkerPoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudBuild::update_worker_pool].
    fn update_worker_pool(
        &self,
        _req: crate::model::UpdateWorkerPoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudBuild::list_worker_pools].
    fn list_worker_pools(
        &self,
        _req: crate::model::ListWorkerPoolsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListWorkerPoolsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListWorkerPoolsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::CloudBuild::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudBuild::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<()>> + Send {
        std::future::ready::<crate::Result<()>>(Err(Error::other("unimplemented")))
    }

    /// Returns the polling error policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_error_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        Arc::new(gax::polling_error_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}
