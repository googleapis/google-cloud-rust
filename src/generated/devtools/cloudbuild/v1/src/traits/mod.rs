// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dyntraits;

/// Creates and manages builds on Google Cloud Platform.
///
/// The main concept used by this API is a `Build`, which describes the location
/// of the source to build, how to build the source, and where to store the
/// built artifacts, if any.
///
/// A user can list previously-requested builds or get builds by their ID to
/// determine the status of the build.
///
/// # Mocking
///
/// Application developers may use this trait to mock the cloudbuild clients.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation for each method. These implementations return an error.
pub trait CloudBuild: std::fmt::Debug + Send + Sync {
    /// Starts a build with the specified configuration.
    ///
    /// This method returns a long-running `Operation`, which includes the build
    /// ID. Pass the build ID to `GetBuild` to determine the build status (such as
    /// `SUCCESS` or `FAILURE`).
    fn create_build(
        &self,
        _req: crate::model::CreateBuildRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Returns information about a previously requested build.
    ///
    /// The `Build` that is returned includes its status (such as `SUCCESS`,
    /// `FAILURE`, or `WORKING`), and timing information.
    fn get_build(
        &self,
        _req: crate::model::GetBuildRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Build>> + Send {
        std::future::ready::<crate::Result<crate::model::Build>>(Err(Error::other("unimplemented")))
    }

    /// Lists previously requested builds.
    ///
    /// Previously requested builds may still be in-progress, or may have finished
    /// successfully or unsuccessfully.
    fn list_builds(
        &self,
        _req: crate::model::ListBuildsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListBuildsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListBuildsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Cancels a build in progress.
    fn cancel_build(
        &self,
        _req: crate::model::CancelBuildRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Build>> + Send {
        std::future::ready::<crate::Result<crate::model::Build>>(Err(Error::other("unimplemented")))
    }

    /// Creates a new build based on the specified build.
    ///
    /// This method creates a new build using the original build request, which may
    /// or may not result in an identical build.
    ///
    /// For triggered builds:
    ///
    /// * Triggered builds resolve to a precise revision; therefore a retry of a
    ///   triggered build will result in a build that uses the same revision.
    ///
    /// For non-triggered builds that specify `RepoSource`:
    ///
    /// * If the original build built from the tip of a branch, the retried build
    ///   will build from the tip of that branch, which may not be the same revision
    ///   as the original build.
    /// * If the original build specified a commit sha or revision ID, the retried
    ///   build will use the identical source.
    ///
    /// For builds that specify `StorageSource`:
    ///
    /// * If the original build pulled source from Cloud Storage without
    ///   specifying the generation of the object, the new build will use the current
    ///   object, which may be different from the original build source.
    /// * If the original build pulled source from Cloud Storage and specified the
    ///   generation of the object, the new build will attempt to use the same
    ///   object, which may or may not be available depending on the bucket's
    ///   lifecycle management settings.
    fn retry_build(
        &self,
        _req: crate::model::RetryBuildRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Approves or rejects a pending build.
    ///
    /// If approved, the returned LRO will be analogous to the LRO returned from
    /// a CreateBuild call.
    ///
    /// If rejected, the returned LRO will be immediately done.
    fn approve_build(
        &self,
        _req: crate::model::ApproveBuildRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Creates a new `BuildTrigger`.
    ///
    /// This API is experimental.
    fn create_build_trigger(
        &self,
        _req: crate::model::CreateBuildTriggerRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::BuildTrigger>> + Send {
        std::future::ready::<crate::Result<crate::model::BuildTrigger>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Returns information about a `BuildTrigger`.
    ///
    /// This API is experimental.
    fn get_build_trigger(
        &self,
        _req: crate::model::GetBuildTriggerRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::BuildTrigger>> + Send {
        std::future::ready::<crate::Result<crate::model::BuildTrigger>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Lists existing `BuildTrigger`s.
    ///
    /// This API is experimental.
    fn list_build_triggers(
        &self,
        _req: crate::model::ListBuildTriggersRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListBuildTriggersResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListBuildTriggersResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Deletes a `BuildTrigger` by its project ID and trigger ID.
    ///
    /// This API is experimental.
    fn delete_build_trigger(
        &self,
        _req: crate::model::DeleteBuildTriggerRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Updates a `BuildTrigger` by its project ID and trigger ID.
    ///
    /// This API is experimental.
    fn update_build_trigger(
        &self,
        _req: crate::model::UpdateBuildTriggerRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::BuildTrigger>> + Send {
        std::future::ready::<crate::Result<crate::model::BuildTrigger>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Runs a `BuildTrigger` at a particular source revision.
    ///
    /// To run a regional or global trigger, use the POST request
    /// that includes the location endpoint in the path (ex.
    /// v1/projects/{projectId}/locations/{region}/triggers/{triggerId}:run). The
    /// POST request that does not include the location endpoint in the path can
    /// only be used when running global triggers.
    fn run_build_trigger(
        &self,
        _req: crate::model::RunBuildTriggerRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// ReceiveTriggerWebhook [Experimental] is called when the API receives a
    /// webhook request targeted at a specific trigger.
    fn receive_trigger_webhook(
        &self,
        _req: crate::model::ReceiveTriggerWebhookRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ReceiveTriggerWebhookResponse>>
           + Send {
        std::future::ready::<crate::Result<crate::model::ReceiveTriggerWebhookResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Creates a `WorkerPool`.
    fn create_worker_pool(
        &self,
        _req: crate::model::CreateWorkerPoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Returns details of a `WorkerPool`.
    fn get_worker_pool(
        &self,
        _req: crate::model::GetWorkerPoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::WorkerPool>> + Send {
        std::future::ready::<crate::Result<crate::model::WorkerPool>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Deletes a `WorkerPool`.
    fn delete_worker_pool(
        &self,
        _req: crate::model::DeleteWorkerPoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Updates a `WorkerPool`.
    fn update_worker_pool(
        &self,
        _req: crate::model::UpdateWorkerPoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Lists `WorkerPool`s.
    fn list_worker_pools(
        &self,
        _req: crate::model::ListWorkerPoolsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListWorkerPoolsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListWorkerPoolsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Returns the polling policy.
    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_policy::PollingPolicy>;

    /// Returns the polling backoff policy.
    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}
