// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Cloud Build API.
///
/// # Service Description
///
/// Creates and manages builds on Google Cloud Platform.
///
/// The main concept used by this API is a `Build`, which describes the location
/// of the source to build, how to build the source, and where to store the
/// built artifacts, if any.
///
/// A user can list previously-requested builds or get builds by their ID to
/// determine the status of the build.
///
/// # Configuration
///
/// `CloudBuild` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `CloudBuild` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `CloudBuild` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct CloudBuild {
    inner: Arc<dyn crate::stubs::dynamic::CloudBuild>,
}

impl CloudBuild {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::CloudBuild + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::CloudBuild>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::CloudBuild> {
        crate::transport::CloudBuild::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::CloudBuild> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::CloudBuild::new)
    }

    /// Starts a build with the specified configuration.
    ///
    /// This method returns a long-running `Operation`, which includes the build
    /// ID. Pass the build ID to `GetBuild` to determine the build status (such as
    /// `SUCCESS` or `FAILURE`).
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_build(
        &self,
        project_id: impl Into<std::string::String>,
    ) -> crate::builders::cloud_build::CreateBuild {
        crate::builders::cloud_build::CreateBuild::new(self.inner.clone())
            .set_project_id(project_id.into())
    }

    /// Returns information about a previously requested build.
    ///
    /// The `Build` that is returned includes its status (such as `SUCCESS`,
    /// `FAILURE`, or `WORKING`), and timing information.
    pub fn get_build(
        &self,
        project_id: impl Into<std::string::String>,
        id: impl Into<std::string::String>,
    ) -> crate::builders::cloud_build::GetBuild {
        crate::builders::cloud_build::GetBuild::new(self.inner.clone())
            .set_project_id(project_id.into())
            .set_id(id.into())
    }

    /// Lists previously requested builds.
    ///
    /// Previously requested builds may still be in-progress, or may have finished
    /// successfully or unsuccessfully.
    pub fn list_builds(
        &self,
        project_id: impl Into<std::string::String>,
    ) -> crate::builders::cloud_build::ListBuilds {
        crate::builders::cloud_build::ListBuilds::new(self.inner.clone())
            .set_project_id(project_id.into())
    }

    /// Cancels a build in progress.
    pub fn cancel_build(
        &self,
        project_id: impl Into<std::string::String>,
        id: impl Into<std::string::String>,
    ) -> crate::builders::cloud_build::CancelBuild {
        crate::builders::cloud_build::CancelBuild::new(self.inner.clone())
            .set_project_id(project_id.into())
            .set_id(id.into())
    }

    /// Creates a new build based on the specified build.
    ///
    /// This method creates a new build using the original build request, which may
    /// or may not result in an identical build.
    ///
    /// For triggered builds:
    ///
    /// * Triggered builds resolve to a precise revision; therefore a retry of a
    ///   triggered build will result in a build that uses the same revision.
    ///
    /// For non-triggered builds that specify `RepoSource`:
    ///
    /// * If the original build built from the tip of a branch, the retried build
    ///   will build from the tip of that branch, which may not be the same revision
    ///   as the original build.
    /// * If the original build specified a commit sha or revision ID, the retried
    ///   build will use the identical source.
    ///
    /// For builds that specify `StorageSource`:
    ///
    /// * If the original build pulled source from Cloud Storage without
    ///   specifying the generation of the object, the new build will use the current
    ///   object, which may be different from the original build source.
    /// * If the original build pulled source from Cloud Storage and specified the
    ///   generation of the object, the new build will attempt to use the same
    ///   object, which may or may not be available depending on the bucket's
    ///   lifecycle management settings.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn retry_build(
        &self,
        project_id: impl Into<std::string::String>,
        id: impl Into<std::string::String>,
    ) -> crate::builders::cloud_build::RetryBuild {
        crate::builders::cloud_build::RetryBuild::new(self.inner.clone())
            .set_project_id(project_id.into())
            .set_id(id.into())
    }

    /// Approves or rejects a pending build.
    ///
    /// If approved, the returned LRO will be analogous to the LRO returned from
    /// a CreateBuild call.
    ///
    /// If rejected, the returned LRO will be immediately done.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn approve_build(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_build::ApproveBuild {
        crate::builders::cloud_build::ApproveBuild::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a new `BuildTrigger`.
    ///
    /// This API is experimental.
    pub fn create_build_trigger(
        &self,
        project_id: impl Into<std::string::String>,
    ) -> crate::builders::cloud_build::CreateBuildTrigger {
        crate::builders::cloud_build::CreateBuildTrigger::new(self.inner.clone())
            .set_project_id(project_id.into())
    }

    /// Returns information about a `BuildTrigger`.
    ///
    /// This API is experimental.
    pub fn get_build_trigger(
        &self,
        project_id: impl Into<std::string::String>,
        trigger_id: impl Into<std::string::String>,
    ) -> crate::builders::cloud_build::GetBuildTrigger {
        crate::builders::cloud_build::GetBuildTrigger::new(self.inner.clone())
            .set_project_id(project_id.into())
            .set_trigger_id(trigger_id.into())
    }

    /// Lists existing `BuildTrigger`s.
    ///
    /// This API is experimental.
    pub fn list_build_triggers(
        &self,
        project_id: impl Into<std::string::String>,
    ) -> crate::builders::cloud_build::ListBuildTriggers {
        crate::builders::cloud_build::ListBuildTriggers::new(self.inner.clone())
            .set_project_id(project_id.into())
    }

    /// Deletes a `BuildTrigger` by its project ID and trigger ID.
    ///
    /// This API is experimental.
    pub fn delete_build_trigger(
        &self,
        project_id: impl Into<std::string::String>,
        trigger_id: impl Into<std::string::String>,
    ) -> crate::builders::cloud_build::DeleteBuildTrigger {
        crate::builders::cloud_build::DeleteBuildTrigger::new(self.inner.clone())
            .set_project_id(project_id.into())
            .set_trigger_id(trigger_id.into())
    }

    /// Updates a `BuildTrigger` by its project ID and trigger ID.
    ///
    /// This API is experimental.
    pub fn update_build_trigger(
        &self,
        project_id: impl Into<std::string::String>,
        trigger_id: impl Into<std::string::String>,
    ) -> crate::builders::cloud_build::UpdateBuildTrigger {
        crate::builders::cloud_build::UpdateBuildTrigger::new(self.inner.clone())
            .set_project_id(project_id.into())
            .set_trigger_id(trigger_id.into())
    }

    /// Runs a `BuildTrigger` at a particular source revision.
    ///
    /// To run a regional or global trigger, use the POST request
    /// that includes the location endpoint in the path (ex.
    /// v1/projects/{projectId}/locations/{region}/triggers/{triggerId}:run). The
    /// POST request that does not include the location endpoint in the path can
    /// only be used when running global triggers.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn run_build_trigger(
        &self,
        project_id: impl Into<std::string::String>,
        trigger_id: impl Into<std::string::String>,
    ) -> crate::builders::cloud_build::RunBuildTrigger {
        crate::builders::cloud_build::RunBuildTrigger::new(self.inner.clone())
            .set_project_id(project_id.into())
            .set_trigger_id(trigger_id.into())
    }

    /// ReceiveTriggerWebhook [Experimental] is called when the API receives a
    /// webhook request targeted at a specific trigger.
    pub fn receive_trigger_webhook(
        &self,
        project_id: impl Into<std::string::String>,
        trigger: impl Into<std::string::String>,
    ) -> crate::builders::cloud_build::ReceiveTriggerWebhook {
        crate::builders::cloud_build::ReceiveTriggerWebhook::new(self.inner.clone())
            .set_project_id(project_id.into())
            .set_trigger(trigger.into())
    }

    /// Creates a `WorkerPool`.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_worker_pool(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::cloud_build::CreateWorkerPool {
        crate::builders::cloud_build::CreateWorkerPool::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns details of a `WorkerPool`.
    pub fn get_worker_pool(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_build::GetWorkerPool {
        crate::builders::cloud_build::GetWorkerPool::new(self.inner.clone()).set_name(name.into())
    }

    /// Deletes a `WorkerPool`.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_worker_pool(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_build::DeleteWorkerPool {
        crate::builders::cloud_build::DeleteWorkerPool::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates a `WorkerPool`.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_worker_pool(
        &self,
        worker_pool: impl Into<crate::model::WorkerPool>,
    ) -> crate::builders::cloud_build::UpdateWorkerPool {
        crate::builders::cloud_build::UpdateWorkerPool::new(self.inner.clone())
            .set_worker_pool(worker_pool.into())
    }

    /// Lists `WorkerPool`s.
    pub fn list_worker_pools(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::cloud_build::ListWorkerPools {
        crate::builders::cloud_build::ListWorkerPools::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_build::GetOperation {
        crate::builders::cloud_build::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_build::CancelOperation {
        crate::builders::cloud_build::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}
