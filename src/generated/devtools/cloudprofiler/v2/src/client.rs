// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Cloud Profiler API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_profiler_v2::client::ProfilerService;
/// let client = ProfilerService::builder().build().await?;
/// // use `client` to make requests to the {Codec.APITitle}}.
/// # gax::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// Manage the collection of continuous profiling data provided by profiling
/// agents running in the cloud or by an offline provider of profiling data.
///
/// __The APIs listed in this service are intended for use within our profiler
/// agents only.__
///
/// # Configuration
///
/// To configure `ProfilerService` use the `with_*` methods in the type returned
/// by [builder()][ProfilerService::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://cloudprofiler.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::profiler_service::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::profiler_service::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `ProfilerService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ProfilerService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct ProfilerService {
    inner: Arc<dyn super::stub::dynamic::ProfilerService>,
}

impl ProfilerService {
    /// Returns a builder for [ProfilerService].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_profiler_v2::client::ProfilerService;
    /// let client = ProfilerService::builder().build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::profiler_service::ClientBuilder {
        gax::client_builder::internal::new_builder(
            super::builder::profiler_service::client::Factory,
        )
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::ProfilerService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    pub(crate) async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stub::dynamic::ProfilerService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stub::ProfilerService> {
        super::transport::ProfilerService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stub::ProfilerService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::ProfilerService::new)
    }

    /// CreateProfile creates a new profile resource in the online mode.
    ///
    /// _Direct use of this API is discouraged, please use a [supported
    /// profiler
    /// agent](https://cloud.google.com/profiler/docs/about-profiler#profiling_agent)
    /// instead for profile collection._
    ///
    /// The server ensures that the new profiles are created at a constant rate per
    /// deployment, so the creation request may hang for some time until the next
    /// profile session is available.
    ///
    /// The request may fail with ABORTED error if the creation is not available
    /// within ~1m, the response will indicate the duration of the backoff the
    /// client should take before attempting creating a profile again. The backoff
    /// duration is returned in google.rpc.RetryInfo extension on the response
    /// status. To a gRPC client, the extension will be return as a
    /// binary-serialized proto in the trailing metadata item named
    /// "google.rpc.retryinfo-bin".
    pub fn create_profile(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::profiler_service::CreateProfile {
        super::builder::profiler_service::CreateProfile::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// CreateOfflineProfile creates a new profile resource in the offline
    /// mode. The client provides the profile to create along with the profile
    /// bytes, the server records it.
    ///
    /// _Direct use of this API is discouraged, please use a [supported
    /// profiler
    /// agent](https://cloud.google.com/profiler/docs/about-profiler#profiling_agent)
    /// instead for profile collection._
    pub fn create_offline_profile(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::profiler_service::CreateOfflineProfile {
        super::builder::profiler_service::CreateOfflineProfile::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// UpdateProfile updates the profile bytes and labels on the profile resource
    /// created in the online mode. Updating the bytes for profiles created in the
    /// offline mode is currently not supported: the profile content must be
    /// provided at the time of the profile creation.
    ///
    /// _Direct use of this API is discouraged, please use a [supported
    /// profiler
    /// agent](https://cloud.google.com/profiler/docs/about-profiler#profiling_agent)
    /// instead for profile collection._
    pub fn update_profile(
        &self,
        profile: impl Into<crate::model::Profile>,
    ) -> super::builder::profiler_service::UpdateProfile {
        super::builder::profiler_service::UpdateProfile::new(self.inner.clone())
            .set_profile(profile.into())
    }
}

/// Implements a client for the Cloud Profiler API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_profiler_v2::client::ExportService;
/// let client = ExportService::builder().build().await?;
/// // use `client` to make requests to the {Codec.APITitle}}.
/// # gax::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// Service allows existing Cloud Profiler customers to export their profile data
/// out of Google Cloud.
///
/// # Configuration
///
/// To configure `ExportService` use the `with_*` methods in the type returned
/// by [builder()][ExportService::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://cloudprofiler.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::export_service::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::export_service::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `ExportService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ExportService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct ExportService {
    inner: Arc<dyn super::stub::dynamic::ExportService>,
}

impl ExportService {
    /// Returns a builder for [ExportService].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_profiler_v2::client::ExportService;
    /// let client = ExportService::builder().build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::export_service::ClientBuilder {
        gax::client_builder::internal::new_builder(super::builder::export_service::client::Factory)
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::ExportService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    pub(crate) async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stub::dynamic::ExportService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stub::ExportService> {
        super::transport::ExportService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stub::ExportService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::ExportService::new)
    }

    /// Lists profiles which have been collected so far and for which the caller
    /// has permission to view.
    pub fn list_profiles(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::export_service::ListProfiles {
        super::builder::export_service::ListProfiles::new(self.inner.clone())
            .set_parent(parent.into())
    }
}
