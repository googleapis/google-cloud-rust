// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;
use std::sync::Arc;

pub(crate) mod dynamic;

/// Defines the trait used to implement [crate::client::ArtifactRegistry].
///
/// Application developers may need to implement this trait to mock
/// `client::ArtifactRegistry`.  In other use-cases, application developers only
/// use `client::ArtifactRegistry` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait ArtifactRegistry: std::fmt::Debug + Send + Sync {
    /// Implements [crate::client::ArtifactRegistry::list_docker_images].
    fn list_docker_images(
        &self,
        _req: crate::model::ListDockerImagesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListDockerImagesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListDockerImagesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::ArtifactRegistry::get_docker_image].
    fn get_docker_image(
        &self,
        _req: crate::model::GetDockerImageRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::DockerImage>> + Send {
        std::future::ready::<crate::Result<crate::model::DockerImage>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::list_maven_artifacts].
    fn list_maven_artifacts(
        &self,
        _req: crate::model::ListMavenArtifactsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListMavenArtifactsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListMavenArtifactsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::ArtifactRegistry::get_maven_artifact].
    fn get_maven_artifact(
        &self,
        _req: crate::model::GetMavenArtifactRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::MavenArtifact>> + Send {
        std::future::ready::<crate::Result<crate::model::MavenArtifact>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::list_npm_packages].
    fn list_npm_packages(
        &self,
        _req: crate::model::ListNpmPackagesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListNpmPackagesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListNpmPackagesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::ArtifactRegistry::get_npm_package].
    fn get_npm_package(
        &self,
        _req: crate::model::GetNpmPackageRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::NpmPackage>> + Send {
        std::future::ready::<crate::Result<crate::model::NpmPackage>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::list_python_packages].
    fn list_python_packages(
        &self,
        _req: crate::model::ListPythonPackagesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListPythonPackagesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListPythonPackagesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::ArtifactRegistry::get_python_package].
    fn get_python_package(
        &self,
        _req: crate::model::GetPythonPackageRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::PythonPackage>> + Send {
        std::future::ready::<crate::Result<crate::model::PythonPackage>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::import_apt_artifacts].
    fn import_apt_artifacts(
        &self,
        _req: crate::model::ImportAptArtifactsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::import_yum_artifacts].
    fn import_yum_artifacts(
        &self,
        _req: crate::model::ImportYumArtifactsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::list_repositories].
    fn list_repositories(
        &self,
        _req: crate::model::ListRepositoriesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListRepositoriesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListRepositoriesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::ArtifactRegistry::get_repository].
    fn get_repository(
        &self,
        _req: crate::model::GetRepositoryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Repository>> + Send {
        std::future::ready::<crate::Result<crate::model::Repository>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::create_repository].
    fn create_repository(
        &self,
        _req: crate::model::CreateRepositoryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::update_repository].
    fn update_repository(
        &self,
        _req: crate::model::UpdateRepositoryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Repository>> + Send {
        std::future::ready::<crate::Result<crate::model::Repository>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::delete_repository].
    fn delete_repository(
        &self,
        _req: crate::model::DeleteRepositoryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::list_packages].
    fn list_packages(
        &self,
        _req: crate::model::ListPackagesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListPackagesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListPackagesResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::get_package].
    fn get_package(
        &self,
        _req: crate::model::GetPackageRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Package>> + Send {
        std::future::ready::<crate::Result<crate::model::Package>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::delete_package].
    fn delete_package(
        &self,
        _req: crate::model::DeletePackageRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::list_versions].
    fn list_versions(
        &self,
        _req: crate::model::ListVersionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListVersionsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListVersionsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::get_version].
    fn get_version(
        &self,
        _req: crate::model::GetVersionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Version>> + Send {
        std::future::ready::<crate::Result<crate::model::Version>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::delete_version].
    fn delete_version(
        &self,
        _req: crate::model::DeleteVersionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::batch_delete_versions].
    fn batch_delete_versions(
        &self,
        _req: crate::model::BatchDeleteVersionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::update_version].
    fn update_version(
        &self,
        _req: crate::model::UpdateVersionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Version>> + Send {
        std::future::ready::<crate::Result<crate::model::Version>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::list_files].
    fn list_files(
        &self,
        _req: crate::model::ListFilesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListFilesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListFilesResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::get_file].
    fn get_file(
        &self,
        _req: crate::model::GetFileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::File>> + Send {
        std::future::ready::<crate::Result<crate::model::File>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ArtifactRegistry::delete_file].
    fn delete_file(
        &self,
        _req: crate::model::DeleteFileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::update_file].
    fn update_file(
        &self,
        _req: crate::model::UpdateFileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::File>> + Send {
        std::future::ready::<crate::Result<crate::model::File>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ArtifactRegistry::list_tags].
    fn list_tags(
        &self,
        _req: crate::model::ListTagsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListTagsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListTagsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::get_tag].
    fn get_tag(
        &self,
        _req: crate::model::GetTagRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Tag>> + Send {
        std::future::ready::<crate::Result<crate::model::Tag>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ArtifactRegistry::create_tag].
    fn create_tag(
        &self,
        _req: crate::model::CreateTagRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Tag>> + Send {
        std::future::ready::<crate::Result<crate::model::Tag>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ArtifactRegistry::update_tag].
    fn update_tag(
        &self,
        _req: crate::model::UpdateTagRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Tag>> + Send {
        std::future::ready::<crate::Result<crate::model::Tag>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ArtifactRegistry::delete_tag].
    fn delete_tag(
        &self,
        _req: crate::model::DeleteTagRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ArtifactRegistry::create_rule].
    fn create_rule(
        &self,
        _req: crate::model::CreateRuleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Rule>> + Send {
        std::future::ready::<crate::Result<crate::model::Rule>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ArtifactRegistry::list_rules].
    fn list_rules(
        &self,
        _req: crate::model::ListRulesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListRulesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListRulesResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::get_rule].
    fn get_rule(
        &self,
        _req: crate::model::GetRuleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Rule>> + Send {
        std::future::ready::<crate::Result<crate::model::Rule>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ArtifactRegistry::update_rule].
    fn update_rule(
        &self,
        _req: crate::model::UpdateRuleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Rule>> + Send {
        std::future::ready::<crate::Result<crate::model::Rule>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ArtifactRegistry::delete_rule].
    fn delete_rule(
        &self,
        _req: crate::model::DeleteRuleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ArtifactRegistry::set_iam_policy].
    fn set_iam_policy(
        &self,
        _req: iam_v1::model::SetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<iam_v1::model::Policy>> + Send {
        std::future::ready::<crate::Result<iam_v1::model::Policy>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::get_iam_policy].
    fn get_iam_policy(
        &self,
        _req: iam_v1::model::GetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<iam_v1::model::Policy>> + Send {
        std::future::ready::<crate::Result<iam_v1::model::Policy>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::test_iam_permissions].
    fn test_iam_permissions(
        &self,
        _req: iam_v1::model::TestIamPermissionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<iam_v1::model::TestIamPermissionsResponse>> + Send
    {
        std::future::ready::<crate::Result<iam_v1::model::TestIamPermissionsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::ArtifactRegistry::get_project_settings].
    fn get_project_settings(
        &self,
        _req: crate::model::GetProjectSettingsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ProjectSettings>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ProjectSettings>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::update_project_settings].
    fn update_project_settings(
        &self,
        _req: crate::model::UpdateProjectSettingsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ProjectSettings>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ProjectSettings>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::get_vpcsc_config].
    fn get_vpcsc_config(
        &self,
        _req: crate::model::GetVPCSCConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::VPCSCConfig>> + Send {
        std::future::ready::<crate::Result<crate::model::VPCSCConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::update_vpcsc_config].
    fn update_vpcsc_config(
        &self,
        _req: crate::model::UpdateVPCSCConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::VPCSCConfig>> + Send {
        std::future::ready::<crate::Result<crate::model::VPCSCConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::update_package].
    fn update_package(
        &self,
        _req: crate::model::UpdatePackageRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Package>> + Send {
        std::future::ready::<crate::Result<crate::model::Package>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::list_attachments].
    fn list_attachments(
        &self,
        _req: crate::model::ListAttachmentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListAttachmentsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListAttachmentsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::ArtifactRegistry::get_attachment].
    fn get_attachment(
        &self,
        _req: crate::model::GetAttachmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Attachment>> + Send {
        std::future::ready::<crate::Result<crate::model::Attachment>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::create_attachment].
    fn create_attachment(
        &self,
        _req: crate::model::CreateAttachmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::delete_attachment].
    fn delete_attachment(
        &self,
        _req: crate::model::DeleteAttachmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::list_locations].
    fn list_locations(
        &self,
        _req: location::model::ListLocationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::ListLocationsResponse>> + Send
    {
        std::future::ready::<crate::Result<location::model::ListLocationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::ArtifactRegistry::get_location].
    fn get_location(
        &self,
        _req: location::model::GetLocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::Location>> + Send {
        std::future::ready::<crate::Result<location::model::Location>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ArtifactRegistry::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Returns the polling policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        Arc::new(gax::polling_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}
