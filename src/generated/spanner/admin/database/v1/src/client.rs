// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Cloud Spanner API.
///
/// # Service Description
///
/// Cloud Spanner Database Admin API
///
/// The Cloud Spanner Database Admin API can be used to:
///
/// * create, drop, and list databases
/// * update the schema of pre-existing databases
/// * create, delete, copy and list backups for a database
/// * restore a database from an existing backup
///
/// # Configuration
///
/// `DatabaseAdmin` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `DatabaseAdmin` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `DatabaseAdmin` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct DatabaseAdmin {
    inner: Arc<dyn crate::stubs::dynamic::DatabaseAdmin>,
}

impl DatabaseAdmin {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::DatabaseAdmin + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::DatabaseAdmin>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::DatabaseAdmin> {
        crate::transport::DatabaseAdmin::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::DatabaseAdmin> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::DatabaseAdmin::new)
    }

    /// Lists Cloud Spanner databases.
    pub fn list_databases(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::ListDatabases {
        crate::builders::database_admin::ListDatabases::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a new Cloud Spanner database and starts to prepare it for serving.
    /// The returned [long-running operation][google.longrunning.Operation] will
    /// have a name of the format `<database_name>/operations/<operation_id>` and
    /// can be used to track preparation of the database. The
    /// [metadata][google.longrunning.Operation.metadata] field type is
    /// [CreateDatabaseMetadata][google.spanner.admin.database.v1.CreateDatabaseMetadata].
    /// The [response][google.longrunning.Operation.response] field type is
    /// [Database][google.spanner.admin.database.v1.Database], if successful.
    ///
    /// [google.longrunning.Operation]: longrunning::model::Operation
    /// [google.longrunning.Operation.metadata]: longrunning::model::Operation::metadata
    /// [google.longrunning.Operation.response]: longrunning::model::Operation::result
    /// [google.spanner.admin.database.v1.CreateDatabaseMetadata]: crate::model::CreateDatabaseMetadata
    /// [google.spanner.admin.database.v1.Database]: crate::model::Database
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_database(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::CreateDatabase {
        crate::builders::database_admin::CreateDatabase::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets the state of a Cloud Spanner database.
    pub fn get_database(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::GetDatabase {
        crate::builders::database_admin::GetDatabase::new(self.inner.clone()).set_name(name.into())
    }

    /// Updates a Cloud Spanner database. The returned
    /// [long-running operation][google.longrunning.Operation] can be used to track
    /// the progress of updating the database. If the named database does not
    /// exist, returns `NOT_FOUND`.
    ///
    /// While the operation is pending:
    ///
    /// * The database's
    ///   [reconciling][google.spanner.admin.database.v1.Database.reconciling]
    ///   field is set to true.
    /// * Cancelling the operation is best-effort. If the cancellation succeeds,
    ///   the operation metadata's
    ///   [cancel_time][google.spanner.admin.database.v1.UpdateDatabaseMetadata.cancel_time]
    ///   is set, the updates are reverted, and the operation terminates with a
    ///   `CANCELLED` status.
    /// * New UpdateDatabase requests will return a `FAILED_PRECONDITION` error
    ///   until the pending operation is done (returns successfully or with
    ///   error).
    /// * Reading the database via the API continues to give the pre-request
    ///   values.
    ///
    /// Upon completion of the returned operation:
    ///
    /// * The new values are in effect and readable via the API.
    /// * The database's
    ///   [reconciling][google.spanner.admin.database.v1.Database.reconciling]
    ///   field becomes false.
    ///
    /// The returned [long-running operation][google.longrunning.Operation] will
    /// have a name of the format
    /// `projects/<project>/instances/<instance>/databases/<database>/operations/<operation_id>`
    /// and can be used to track the database modification. The
    /// [metadata][google.longrunning.Operation.metadata] field type is
    /// [UpdateDatabaseMetadata][google.spanner.admin.database.v1.UpdateDatabaseMetadata].
    /// The [response][google.longrunning.Operation.response] field type is
    /// [Database][google.spanner.admin.database.v1.Database], if successful.
    ///
    /// [google.longrunning.Operation]: longrunning::model::Operation
    /// [google.longrunning.Operation.metadata]: longrunning::model::Operation::metadata
    /// [google.longrunning.Operation.response]: longrunning::model::Operation::result
    /// [google.spanner.admin.database.v1.Database]: crate::model::Database
    /// [google.spanner.admin.database.v1.Database.reconciling]: crate::model::Database::reconciling
    /// [google.spanner.admin.database.v1.UpdateDatabaseMetadata]: crate::model::UpdateDatabaseMetadata
    /// [google.spanner.admin.database.v1.UpdateDatabaseMetadata.cancel_time]: crate::model::UpdateDatabaseMetadata::cancel_time
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_database(
        &self,
        database: impl Into<crate::model::Database>,
    ) -> crate::builders::database_admin::UpdateDatabase {
        crate::builders::database_admin::UpdateDatabase::new(self.inner.clone())
            .set_database(database.into())
    }

    /// Updates the schema of a Cloud Spanner database by
    /// creating/altering/dropping tables, columns, indexes, etc. The returned
    /// [long-running operation][google.longrunning.Operation] will have a name of
    /// the format `<database_name>/operations/<operation_id>` and can be used to
    /// track execution of the schema change(s). The
    /// [metadata][google.longrunning.Operation.metadata] field type is
    /// [UpdateDatabaseDdlMetadata][google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata].
    /// The operation has no response.
    ///
    /// [google.longrunning.Operation]: longrunning::model::Operation
    /// [google.longrunning.Operation.metadata]: longrunning::model::Operation::metadata
    /// [google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata]: crate::model::UpdateDatabaseDdlMetadata
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_database_ddl(
        &self,
        database: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::UpdateDatabaseDdl {
        crate::builders::database_admin::UpdateDatabaseDdl::new(self.inner.clone())
            .set_database(database.into())
    }

    /// Drops (aka deletes) a Cloud Spanner database.
    /// Completed backups for the database will be retained according to their
    /// `expire_time`.
    /// Note: Cloud Spanner might continue to accept requests for a few seconds
    /// after the database has been deleted.
    pub fn drop_database(
        &self,
        database: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::DropDatabase {
        crate::builders::database_admin::DropDatabase::new(self.inner.clone())
            .set_database(database.into())
    }

    /// Returns the schema of a Cloud Spanner database as a list of formatted
    /// DDL statements. This method does not show pending schema updates, those may
    /// be queried using the [Operations][google.longrunning.Operations] API.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_database_ddl(
        &self,
        database: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::GetDatabaseDdl {
        crate::builders::database_admin::GetDatabaseDdl::new(self.inner.clone())
            .set_database(database.into())
    }

    /// Sets the access control policy on a database or backup resource.
    /// Replaces any existing policy.
    ///
    /// Authorization requires `spanner.databases.setIamPolicy`
    /// permission on [resource][google.iam.v1.SetIamPolicyRequest.resource].
    /// For backups, authorization requires `spanner.backups.setIamPolicy`
    /// permission on [resource][google.iam.v1.SetIamPolicyRequest.resource].
    ///
    /// [google.iam.v1.SetIamPolicyRequest.resource]: iam_v1::model::SetIamPolicyRequest::resource
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::SetIamPolicy {
        crate::builders::database_admin::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a database or backup resource.
    /// Returns an empty policy if a database or backup exists but does not have a
    /// policy set.
    ///
    /// Authorization requires `spanner.databases.getIamPolicy` permission on
    /// [resource][google.iam.v1.GetIamPolicyRequest.resource].
    /// For backups, authorization requires `spanner.backups.getIamPolicy`
    /// permission on [resource][google.iam.v1.GetIamPolicyRequest.resource].
    ///
    /// [google.iam.v1.GetIamPolicyRequest.resource]: iam_v1::model::GetIamPolicyRequest::resource
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::GetIamPolicy {
        crate::builders::database_admin::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that the caller has on the specified database or backup
    /// resource.
    ///
    /// Attempting this RPC on a non-existent Cloud Spanner database will
    /// result in a NOT_FOUND error if the user has
    /// `spanner.databases.list` permission on the containing Cloud
    /// Spanner instance. Otherwise returns an empty set of permissions.
    /// Calling this method on a backup that does not exist will
    /// result in a NOT_FOUND error if the user has
    /// `spanner.backups.list` permission on the containing instance.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::TestIamPermissions {
        crate::builders::database_admin::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Starts creating a new Cloud Spanner Backup.
    /// The returned backup [long-running operation][google.longrunning.Operation]
    /// will have a name of the format
    /// `projects/<project>/instances/<instance>/backups/<backup>/operations/<operation_id>`
    /// and can be used to track creation of the backup. The
    /// [metadata][google.longrunning.Operation.metadata] field type is
    /// [CreateBackupMetadata][google.spanner.admin.database.v1.CreateBackupMetadata].
    /// The [response][google.longrunning.Operation.response] field type is
    /// [Backup][google.spanner.admin.database.v1.Backup], if successful.
    /// Cancelling the returned operation will stop the creation and delete the
    /// backup. There can be only one pending backup creation per database. Backup
    /// creation of different databases can run concurrently.
    ///
    /// [google.longrunning.Operation]: longrunning::model::Operation
    /// [google.longrunning.Operation.metadata]: longrunning::model::Operation::metadata
    /// [google.longrunning.Operation.response]: longrunning::model::Operation::result
    /// [google.spanner.admin.database.v1.Backup]: crate::model::Backup
    /// [google.spanner.admin.database.v1.CreateBackupMetadata]: crate::model::CreateBackupMetadata
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_backup(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::CreateBackup {
        crate::builders::database_admin::CreateBackup::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Starts copying a Cloud Spanner Backup.
    /// The returned backup [long-running operation][google.longrunning.Operation]
    /// will have a name of the format
    /// `projects/<project>/instances/<instance>/backups/<backup>/operations/<operation_id>`
    /// and can be used to track copying of the backup. The operation is associated
    /// with the destination backup.
    /// The [metadata][google.longrunning.Operation.metadata] field type is
    /// [CopyBackupMetadata][google.spanner.admin.database.v1.CopyBackupMetadata].
    /// The [response][google.longrunning.Operation.response] field type is
    /// [Backup][google.spanner.admin.database.v1.Backup], if successful.
    /// Cancelling the returned operation will stop the copying and delete the
    /// destination backup. Concurrent CopyBackup requests can run on the same
    /// source backup.
    ///
    /// [google.longrunning.Operation]: longrunning::model::Operation
    /// [google.longrunning.Operation.metadata]: longrunning::model::Operation::metadata
    /// [google.longrunning.Operation.response]: longrunning::model::Operation::result
    /// [google.spanner.admin.database.v1.Backup]: crate::model::Backup
    /// [google.spanner.admin.database.v1.CopyBackupMetadata]: crate::model::CopyBackupMetadata
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn copy_backup(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::CopyBackup {
        crate::builders::database_admin::CopyBackup::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets metadata on a pending or completed
    /// [Backup][google.spanner.admin.database.v1.Backup].
    ///
    /// [google.spanner.admin.database.v1.Backup]: crate::model::Backup
    pub fn get_backup(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::GetBackup {
        crate::builders::database_admin::GetBackup::new(self.inner.clone()).set_name(name.into())
    }

    /// Updates a pending or completed
    /// [Backup][google.spanner.admin.database.v1.Backup].
    ///
    /// [google.spanner.admin.database.v1.Backup]: crate::model::Backup
    pub fn update_backup(
        &self,
        backup: impl Into<crate::model::Backup>,
    ) -> crate::builders::database_admin::UpdateBackup {
        crate::builders::database_admin::UpdateBackup::new(self.inner.clone())
            .set_backup(backup.into())
    }

    /// Deletes a pending or completed
    /// [Backup][google.spanner.admin.database.v1.Backup].
    ///
    /// [google.spanner.admin.database.v1.Backup]: crate::model::Backup
    pub fn delete_backup(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::DeleteBackup {
        crate::builders::database_admin::DeleteBackup::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists completed and pending backups.
    /// Backups returned are ordered by `create_time` in descending order,
    /// starting from the most recent `create_time`.
    pub fn list_backups(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::ListBackups {
        crate::builders::database_admin::ListBackups::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Create a new database by restoring from a completed backup. The new
    /// database must be in the same project and in an instance with the same
    /// instance configuration as the instance containing
    /// the backup. The returned database [long-running
    /// operation][google.longrunning.Operation] has a name of the format
    /// `projects/<project>/instances/<instance>/databases/<database>/operations/<operation_id>`,
    /// and can be used to track the progress of the operation, and to cancel it.
    /// The [metadata][google.longrunning.Operation.metadata] field type is
    /// [RestoreDatabaseMetadata][google.spanner.admin.database.v1.RestoreDatabaseMetadata].
    /// The [response][google.longrunning.Operation.response] type
    /// is [Database][google.spanner.admin.database.v1.Database], if
    /// successful. Cancelling the returned operation will stop the restore and
    /// delete the database.
    /// There can be only one database being restored into an instance at a time.
    /// Once the restore operation completes, a new restore operation can be
    /// initiated, without waiting for the optimize operation associated with the
    /// first restore to complete.
    ///
    /// [google.longrunning.Operation]: longrunning::model::Operation
    /// [google.longrunning.Operation.metadata]: longrunning::model::Operation::metadata
    /// [google.longrunning.Operation.response]: longrunning::model::Operation::result
    /// [google.spanner.admin.database.v1.Database]: crate::model::Database
    /// [google.spanner.admin.database.v1.RestoreDatabaseMetadata]: crate::model::RestoreDatabaseMetadata
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn restore_database(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::RestoreDatabase {
        crate::builders::database_admin::RestoreDatabase::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists database [longrunning-operations][google.longrunning.Operation].
    /// A database operation has a name of the form
    /// `projects/<project>/instances/<instance>/databases/<database>/operations/<operation>`.
    /// The long-running operation
    /// [metadata][google.longrunning.Operation.metadata] field type
    /// `metadata.type_url` describes the type of the metadata. Operations returned
    /// include those that have completed/failed/canceled within the last 7 days,
    /// and pending operations.
    ///
    /// [google.longrunning.Operation]: longrunning::model::Operation
    /// [google.longrunning.Operation.metadata]: longrunning::model::Operation::metadata
    pub fn list_database_operations(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::ListDatabaseOperations {
        crate::builders::database_admin::ListDatabaseOperations::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists the backup [long-running operations][google.longrunning.Operation] in
    /// the given instance. A backup operation has a name of the form
    /// `projects/<project>/instances/<instance>/backups/<backup>/operations/<operation>`.
    /// The long-running operation
    /// [metadata][google.longrunning.Operation.metadata] field type
    /// `metadata.type_url` describes the type of the metadata. Operations returned
    /// include those that have completed/failed/canceled within the last 7 days,
    /// and pending operations. Operations returned are ordered by
    /// `operation.metadata.value.progress.start_time` in descending order starting
    /// from the most recently started operation.
    ///
    /// [google.longrunning.Operation]: longrunning::model::Operation
    /// [google.longrunning.Operation.metadata]: longrunning::model::Operation::metadata
    pub fn list_backup_operations(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::ListBackupOperations {
        crate::builders::database_admin::ListBackupOperations::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists Cloud Spanner database roles.
    pub fn list_database_roles(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::ListDatabaseRoles {
        crate::builders::database_admin::ListDatabaseRoles::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Adds split points to specified tables, indexes of a database.
    pub fn add_split_points(
        &self,
        database: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::AddSplitPoints {
        crate::builders::database_admin::AddSplitPoints::new(self.inner.clone())
            .set_database(database.into())
    }

    /// Creates a new backup schedule.
    pub fn create_backup_schedule(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::CreateBackupSchedule {
        crate::builders::database_admin::CreateBackupSchedule::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets backup schedule for the input schedule name.
    pub fn get_backup_schedule(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::GetBackupSchedule {
        crate::builders::database_admin::GetBackupSchedule::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates a backup schedule.
    pub fn update_backup_schedule(
        &self,
        backup_schedule: impl Into<crate::model::BackupSchedule>,
    ) -> crate::builders::database_admin::UpdateBackupSchedule {
        crate::builders::database_admin::UpdateBackupSchedule::new(self.inner.clone())
            .set_backup_schedule(backup_schedule.into())
    }

    /// Deletes a backup schedule.
    pub fn delete_backup_schedule(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::DeleteBackupSchedule {
        crate::builders::database_admin::DeleteBackupSchedule::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists all the backup schedules for the database.
    pub fn list_backup_schedules(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::ListBackupSchedules {
        crate::builders::database_admin::ListBackupSchedules::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::ListOperations {
        crate::builders::database_admin::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::GetOperation {
        crate::builders::database_admin::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::DeleteOperation {
        crate::builders::database_admin::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::database_admin::CancelOperation {
        crate::builders::database_admin::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
