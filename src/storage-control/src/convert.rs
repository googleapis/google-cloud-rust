// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Contains integration tests for the generated `Convert` implementations.
//!
//! For generated code, we write hand-crafted integration tests *once* in the
//! project. The generated implementations for
//! `gaxi::prost::{FromProto, ToProto}` usually reference a type generated by
//! Protobuf, and these are `pub(crate)`. Therefore, the tests must be part of
//! the crate that contains them, and cannot be a separate integration tests
//! crate, or a file in the `tests/` directory.
//!
//! This fixture tests conversions of `google::longrunning::Operation`s.
//!
//! Other tests are found in `src/firestore/src/convert.rs`.

use crate::google;
use gaxi::prost::{ConvertError, FromProto, ToProto};

impl ToProto<google::rpc::Status> for rpc::model::Status {
    type Output = google::rpc::Status;
    fn to_proto(self) -> std::result::Result<google::rpc::Status, ConvertError> {
        Ok(google::rpc::Status {
            code: self.code.to_proto()?,
            message: self.message.to_proto()?,
            // TODO(#1699) - deal with the error details
            ..Default::default()
        })
    }
}

impl FromProto<rpc::model::Status> for google::rpc::Status {
    fn cnv(self) -> std::result::Result<rpc::model::Status, ConvertError> {
        Ok(
            rpc::model::Status::new()
                .set_code(self.code)
                .set_message(self.message),
            // TODO(#1699) - deal with the error details
            // .set_details(self.details.into_iter().filter_map(any_from_prost))
        )
    }
}

// TODO(#2037) - The generator should control this code.
impl ToProto<google::longrunning::Operation> for longrunning::model::Operation {
    type Output = google::longrunning::Operation;
    fn to_proto(self) -> std::result::Result<google::longrunning::Operation, ConvertError> {
        Err(ConvertError::Unimplemented)
    }
}

// TODO(#2037) - The generator should control this code.
impl FromProto<longrunning::model::Operation> for google::longrunning::Operation {
    fn cnv(self) -> std::result::Result<longrunning::model::Operation, ConvertError> {
        Err(ConvertError::Unimplemented)
    }
}

// TODO(#2037) - The generator should control this code.
#[allow(dead_code)]
/// Convert from our `wkt::Any` to a `prost_types::Any`
///
/// The encoded types considered for conversion are either metadata or result
/// types for LROs in this service.
fn lro_any_to_prost(
    value: wkt::Any,
) -> std::result::Result<prost_types::Any, gaxi::prost::ConvertError> {
    use gaxi::prost::ToProto;
    match value.type_url().unwrap_or_default() {
        "" => Ok(prost_types::Any::default()),
        "type.googleapis.com/google.storage.control.v2.RenameFolderMetadata" => value
            .try_into_message::<crate::model::RenameFolderMetadata>()
            .map_err(ConvertError::other)?
            .to_proto()
            .and_then(|prost_msg| {
                prost_types::Any::from_msg(&prost_msg).map_err(ConvertError::other)
            }),
        "type.googleapis.com/google.storage.control.v2.CreateAnywhereCacheMetadata" => value
            .try_into_message::<crate::model::CreateAnywhereCacheMetadata>()
            .map_err(ConvertError::other)?
            .to_proto()
            .and_then(|prost_msg| {
                prost_types::Any::from_msg(&prost_msg).map_err(ConvertError::other)
            }),
        "type.googleapis.com/google.storage.control.v2.UpdateAnywhereCacheMetadata" => value
            .try_into_message::<crate::model::UpdateAnywhereCacheMetadata>()
            .map_err(ConvertError::other)?
            .to_proto()
            .and_then(|prost_msg| {
                prost_types::Any::from_msg(&prost_msg).map_err(ConvertError::other)
            }),
        "type.googleapis.com/google.storage.control.v2.Folder" => value
            .try_into_message::<crate::model::Folder>()
            .map_err(ConvertError::other)?
            .to_proto()
            .and_then(|prost_msg| {
                prost_types::Any::from_msg(&prost_msg).map_err(ConvertError::other)
            }),
        "type.googleapis.com/google.storage.control.v2.AnywhereCache" => value
            .try_into_message::<crate::model::AnywhereCache>()
            .map_err(ConvertError::other)?
            .to_proto()
            .and_then(|prost_msg| {
                prost_types::Any::from_msg(&prost_msg).map_err(ConvertError::other)
            }),
        type_url => Err(ConvertError::UnexpectedTypeUrl(type_url.to_string())),
    }
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn lro_any_to_prost_empty() -> anyhow::Result<()> {
        let wkt = wkt::Any::default();
        let prost = lro_any_to_prost(wkt)?;
        assert_eq!(prost, prost_types::Any::default());
        Ok(())
    }

    #[test]
    fn lro_any_to_prost_known_type() -> anyhow::Result<()> {
        let expected = {
            let folder = crate::google::storage::control::v2::Folder {
                name: "test-name".to_string(),
                metageneration: 42,
                ..Default::default()
            };
            prost_types::Any::from_msg(&folder)?
        };
        let wkt = {
            let folder = crate::model::Folder::new()
                .set_name("test-name")
                .set_metageneration(42);
            wkt::Any::try_from(&folder)?
        };
        let prost = lro_any_to_prost(wkt)?;
        assert_eq!(prost, expected);

        let expected = {
            let md = crate::google::storage::control::v2::CreateAnywhereCacheMetadata {
                zone: Some("test-zone".to_string()),
                ..Default::default()
            };
            prost_types::Any::from_msg(&md)?
        };
        let wkt = {
            let md =
                crate::model::CreateAnywhereCacheMetadata::new().set_zone("test-zone".to_string());
            wkt::Any::try_from(&md)?
        };
        let prost = lro_any_to_prost(wkt)?;
        assert_eq!(prost, expected);

        Ok(())
    }

    #[test]
    fn lro_any_to_prost_unknown_type() -> anyhow::Result<()> {
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        struct TestMessage {}
        impl wkt::message::Message for TestMessage {
            fn typename() -> &'static str {
                "type.googleapis.com/my.custom.TestMessage"
            }
        }

        let wkt = wkt::Any::try_from(&TestMessage::default())?;
        let prost = lro_any_to_prost(wkt);
        assert!(matches!(prost, Err(ConvertError::UnexpectedTypeUrl(_))));

        Ok(())
    }
}
