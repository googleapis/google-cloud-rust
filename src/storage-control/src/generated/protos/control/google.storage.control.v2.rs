// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PendingRenameInfo {
    #[prost(string, tag = "1")]
    pub operation: ::prost::alloc::string::String,
}
impl ::prost::Name for PendingRenameInfo {
    const NAME: &'static str = "PendingRenameInfo";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.PendingRenameInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.PendingRenameInfo".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Folder {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub metageneration: i64,
    #[prost(message, optional, tag = "4")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "5")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "7")]
    pub pending_rename_info: ::core::option::Option<PendingRenameInfo>,
}
impl ::prost::Name for Folder {
    const NAME: &'static str = "Folder";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.Folder".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.Folder".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFolderRequest {
    #[prost(string, tag = "6")]
    pub name: ::prost::alloc::string::String,
    #[prost(int64, optional, tag = "3")]
    pub if_metageneration_match: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "4")]
    pub if_metageneration_not_match: ::core::option::Option<i64>,
    #[prost(string, tag = "5")]
    pub request_id: ::prost::alloc::string::String,
}
impl ::prost::Name for GetFolderRequest {
    const NAME: &'static str = "GetFolderRequest";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.GetFolderRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.GetFolderRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateFolderRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub folder: ::core::option::Option<Folder>,
    #[prost(string, tag = "3")]
    pub folder_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub recursive: bool,
    #[prost(string, tag = "5")]
    pub request_id: ::prost::alloc::string::String,
}
impl ::prost::Name for CreateFolderRequest {
    const NAME: &'static str = "CreateFolderRequest";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.CreateFolderRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.CreateFolderRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteFolderRequest {
    #[prost(string, tag = "6")]
    pub name: ::prost::alloc::string::String,
    #[prost(int64, optional, tag = "3")]
    pub if_metageneration_match: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "4")]
    pub if_metageneration_not_match: ::core::option::Option<i64>,
    #[prost(string, tag = "5")]
    pub request_id: ::prost::alloc::string::String,
}
impl ::prost::Name for DeleteFolderRequest {
    const NAME: &'static str = "DeleteFolderRequest";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.DeleteFolderRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.DeleteFolderRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListFoldersRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub prefix: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub delimiter: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub lexicographic_start: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub lexicographic_end: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub request_id: ::prost::alloc::string::String,
}
impl ::prost::Name for ListFoldersRequest {
    const NAME: &'static str = "ListFoldersRequest";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.ListFoldersRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.ListFoldersRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListFoldersResponse {
    #[prost(message, repeated, tag = "1")]
    pub folders: ::prost::alloc::vec::Vec<Folder>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
impl ::prost::Name for ListFoldersResponse {
    const NAME: &'static str = "ListFoldersResponse";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.ListFoldersResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.ListFoldersResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RenameFolderRequest {
    #[prost(string, tag = "7")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub destination_folder_id: ::prost::alloc::string::String,
    #[prost(int64, optional, tag = "4")]
    pub if_metageneration_match: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "5")]
    pub if_metageneration_not_match: ::core::option::Option<i64>,
    #[prost(string, tag = "6")]
    pub request_id: ::prost::alloc::string::String,
}
impl ::prost::Name for RenameFolderRequest {
    const NAME: &'static str = "RenameFolderRequest";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.RenameFolderRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.RenameFolderRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommonLongRunningOperationMetadata {
    #[prost(message, optional, tag = "1")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "2")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "3")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "4")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(bool, tag = "5")]
    pub requested_cancellation: bool,
    #[prost(int32, tag = "6")]
    pub progress_percent: i32,
}
impl ::prost::Name for CommonLongRunningOperationMetadata {
    const NAME: &'static str = "CommonLongRunningOperationMetadata";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.CommonLongRunningOperationMetadata".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.CommonLongRunningOperationMetadata"
            .into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RenameFolderMetadata {
    #[prost(message, optional, tag = "1")]
    pub common_metadata: ::core::option::Option<CommonLongRunningOperationMetadata>,
    #[prost(string, tag = "2")]
    pub source_folder_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub destination_folder_id: ::prost::alloc::string::String,
}
impl ::prost::Name for RenameFolderMetadata {
    const NAME: &'static str = "RenameFolderMetadata";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.RenameFolderMetadata".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.RenameFolderMetadata".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StorageLayout {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub location: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub location_type: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub custom_placement_config: ::core::option::Option<
        storage_layout::CustomPlacementConfig,
    >,
    #[prost(message, optional, tag = "5")]
    pub hierarchical_namespace: ::core::option::Option<
        storage_layout::HierarchicalNamespace,
    >,
}
/// Nested message and enum types in `StorageLayout`.
pub mod storage_layout {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct CustomPlacementConfig {
        #[prost(string, repeated, tag = "1")]
        pub data_locations: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    }
    impl ::prost::Name for CustomPlacementConfig {
        const NAME: &'static str = "CustomPlacementConfig";
        const PACKAGE: &'static str = "google.storage.control.v2";
        fn full_name() -> ::prost::alloc::string::String {
            "google.storage.control.v2.StorageLayout.CustomPlacementConfig".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "type.googleapis.com/google.storage.control.v2.StorageLayout.CustomPlacementConfig"
                .into()
        }
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct HierarchicalNamespace {
        #[prost(bool, tag = "1")]
        pub enabled: bool,
    }
    impl ::prost::Name for HierarchicalNamespace {
        const NAME: &'static str = "HierarchicalNamespace";
        const PACKAGE: &'static str = "google.storage.control.v2";
        fn full_name() -> ::prost::alloc::string::String {
            "google.storage.control.v2.StorageLayout.HierarchicalNamespace".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "type.googleapis.com/google.storage.control.v2.StorageLayout.HierarchicalNamespace"
                .into()
        }
    }
}
impl ::prost::Name for StorageLayout {
    const NAME: &'static str = "StorageLayout";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.StorageLayout".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.StorageLayout".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStorageLayoutRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub prefix: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
}
impl ::prost::Name for GetStorageLayoutRequest {
    const NAME: &'static str = "GetStorageLayoutRequest";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.GetStorageLayoutRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.GetStorageLayoutRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ManagedFolder {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub metageneration: i64,
    #[prost(message, optional, tag = "4")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "5")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
}
impl ::prost::Name for ManagedFolder {
    const NAME: &'static str = "ManagedFolder";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.ManagedFolder".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.ManagedFolder".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetManagedFolderRequest {
    #[prost(string, tag = "6")]
    pub name: ::prost::alloc::string::String,
    #[prost(int64, optional, tag = "3")]
    pub if_metageneration_match: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "4")]
    pub if_metageneration_not_match: ::core::option::Option<i64>,
    #[prost(string, tag = "5")]
    pub request_id: ::prost::alloc::string::String,
}
impl ::prost::Name for GetManagedFolderRequest {
    const NAME: &'static str = "GetManagedFolderRequest";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.GetManagedFolderRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.GetManagedFolderRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateManagedFolderRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub managed_folder: ::core::option::Option<ManagedFolder>,
    #[prost(string, tag = "3")]
    pub managed_folder_id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
}
impl ::prost::Name for CreateManagedFolderRequest {
    const NAME: &'static str = "CreateManagedFolderRequest";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.CreateManagedFolderRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.CreateManagedFolderRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteManagedFolderRequest {
    #[prost(string, tag = "7")]
    pub name: ::prost::alloc::string::String,
    #[prost(int64, optional, tag = "3")]
    pub if_metageneration_match: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "4")]
    pub if_metageneration_not_match: ::core::option::Option<i64>,
    #[prost(bool, tag = "5")]
    pub allow_non_empty: bool,
    #[prost(string, tag = "6")]
    pub request_id: ::prost::alloc::string::String,
}
impl ::prost::Name for DeleteManagedFolderRequest {
    const NAME: &'static str = "DeleteManagedFolderRequest";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.DeleteManagedFolderRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.DeleteManagedFolderRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListManagedFoldersRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub prefix: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub request_id: ::prost::alloc::string::String,
}
impl ::prost::Name for ListManagedFoldersRequest {
    const NAME: &'static str = "ListManagedFoldersRequest";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.ListManagedFoldersRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.ListManagedFoldersRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListManagedFoldersResponse {
    #[prost(message, repeated, tag = "1")]
    pub managed_folders: ::prost::alloc::vec::Vec<ManagedFolder>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
impl ::prost::Name for ListManagedFoldersResponse {
    const NAME: &'static str = "ListManagedFoldersResponse";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.ListManagedFoldersResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.ListManagedFoldersResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateAnywhereCacheMetadata {
    #[prost(message, optional, tag = "1")]
    pub common_metadata: ::core::option::Option<CommonLongRunningOperationMetadata>,
    #[prost(string, optional, tag = "2")]
    pub anywhere_cache_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub zone: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub ttl: ::core::option::Option<::prost_types::Duration>,
    #[prost(string, optional, tag = "5")]
    pub admission_policy: ::core::option::Option<::prost::alloc::string::String>,
}
impl ::prost::Name for CreateAnywhereCacheMetadata {
    const NAME: &'static str = "CreateAnywhereCacheMetadata";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.CreateAnywhereCacheMetadata".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.CreateAnywhereCacheMetadata"
            .into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateAnywhereCacheMetadata {
    #[prost(message, optional, tag = "1")]
    pub common_metadata: ::core::option::Option<CommonLongRunningOperationMetadata>,
    #[prost(string, optional, tag = "2")]
    pub anywhere_cache_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub zone: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub ttl: ::core::option::Option<::prost_types::Duration>,
    #[prost(string, optional, tag = "4")]
    pub admission_policy: ::core::option::Option<::prost::alloc::string::String>,
}
impl ::prost::Name for UpdateAnywhereCacheMetadata {
    const NAME: &'static str = "UpdateAnywhereCacheMetadata";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.UpdateAnywhereCacheMetadata".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.UpdateAnywhereCacheMetadata"
            .into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnywhereCache {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub zone: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub ttl: ::core::option::Option<::prost_types::Duration>,
    #[prost(string, tag = "9")]
    pub admission_policy: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub state: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "6")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "7")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(bool, tag = "8")]
    pub pending_update: bool,
}
impl ::prost::Name for AnywhereCache {
    const NAME: &'static str = "AnywhereCache";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.AnywhereCache".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.AnywhereCache".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateAnywhereCacheRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub anywhere_cache: ::core::option::Option<AnywhereCache>,
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
}
impl ::prost::Name for CreateAnywhereCacheRequest {
    const NAME: &'static str = "CreateAnywhereCacheRequest";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.CreateAnywhereCacheRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.CreateAnywhereCacheRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateAnywhereCacheRequest {
    #[prost(message, optional, tag = "1")]
    pub anywhere_cache: ::core::option::Option<AnywhereCache>,
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
}
impl ::prost::Name for UpdateAnywhereCacheRequest {
    const NAME: &'static str = "UpdateAnywhereCacheRequest";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.UpdateAnywhereCacheRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.UpdateAnywhereCacheRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DisableAnywhereCacheRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
}
impl ::prost::Name for DisableAnywhereCacheRequest {
    const NAME: &'static str = "DisableAnywhereCacheRequest";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.DisableAnywhereCacheRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.DisableAnywhereCacheRequest"
            .into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PauseAnywhereCacheRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
}
impl ::prost::Name for PauseAnywhereCacheRequest {
    const NAME: &'static str = "PauseAnywhereCacheRequest";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.PauseAnywhereCacheRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.PauseAnywhereCacheRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResumeAnywhereCacheRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
}
impl ::prost::Name for ResumeAnywhereCacheRequest {
    const NAME: &'static str = "ResumeAnywhereCacheRequest";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.ResumeAnywhereCacheRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.ResumeAnywhereCacheRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAnywhereCacheRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
}
impl ::prost::Name for GetAnywhereCacheRequest {
    const NAME: &'static str = "GetAnywhereCacheRequest";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.GetAnywhereCacheRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.GetAnywhereCacheRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAnywhereCachesRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
}
impl ::prost::Name for ListAnywhereCachesRequest {
    const NAME: &'static str = "ListAnywhereCachesRequest";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.ListAnywhereCachesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.ListAnywhereCachesRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAnywhereCachesResponse {
    #[prost(message, repeated, tag = "1")]
    pub anywhere_caches: ::prost::alloc::vec::Vec<AnywhereCache>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
impl ::prost::Name for ListAnywhereCachesResponse {
    const NAME: &'static str = "ListAnywhereCachesResponse";
    const PACKAGE: &'static str = "google.storage.control.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "google.storage.control.v2.ListAnywhereCachesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "type.googleapis.com/google.storage.control.v2.ListAnywhereCachesResponse".into()
    }
}
