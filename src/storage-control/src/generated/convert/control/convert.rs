// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

impl gaxi::prost::ToProto<PendingRenameInfo> for crate::generated::gapic_control::model::PendingRenameInfo {
    type Output = PendingRenameInfo;
    fn to_proto(self) -> std::result::Result<PendingRenameInfo, gaxi::prost::ConvertError> {
        Ok(Self::Output {
            operation: self.operation.to_proto()?,
        })
    }
}

impl gaxi::prost::FromProto<crate::generated::gapic_control::model::PendingRenameInfo> for PendingRenameInfo {
    fn cnv(self) -> crate::generated::gapic_control::model::PendingRenameInfo {
        crate::generated::gapic_control::model::PendingRenameInfo::new()
            .set_operation(self.operation)
    }
}

impl gaxi::prost::ToProto<Folder> for crate::generated::gapic_control::model::Folder {
    type Output = Folder;
    fn to_proto(self) -> std::result::Result<Folder, gaxi::prost::ConvertError> {
        Ok(Self::Output {
            name: self.name.to_proto()?,
            metageneration: self.metageneration.to_proto()?,
            create_time: self.create_time.map(|v| v.to_proto()).transpose()?,
            update_time: self.update_time.map(|v| v.to_proto()).transpose()?,
            pending_rename_info: self.pending_rename_info.map(|v| v.to_proto()).transpose()?,
        })
    }
}

impl gaxi::prost::FromProto<crate::generated::gapic_control::model::Folder> for Folder {
    fn cnv(self) -> crate::generated::gapic_control::model::Folder {
        crate::generated::gapic_control::model::Folder::new()
            .set_name(self.name)
            .set_metageneration(self.metageneration)
            .set_create_time(self.create_time.map(|v| v.cnv()))
            .set_update_time(self.update_time.map(|v| v.cnv()))
            .set_pending_rename_info(self.pending_rename_info.map(|v| v.cnv()))
    }
}

impl gaxi::prost::ToProto<GetFolderRequest> for crate::generated::gapic_control::model::GetFolderRequest {
    type Output = GetFolderRequest;
    fn to_proto(self) -> std::result::Result<GetFolderRequest, gaxi::prost::ConvertError> {
        Ok(Self::Output {
            name: self.name.to_proto()?,
            if_metageneration_match: self.if_metageneration_match.map(|v| v.to_proto()).transpose()?,
            if_metageneration_not_match: self.if_metageneration_not_match.map(|v| v.to_proto()).transpose()?,
            request_id: self.request_id.to_proto()?,
        })
    }
}

impl gaxi::prost::FromProto<crate::generated::gapic_control::model::GetFolderRequest> for GetFolderRequest {
    fn cnv(self) -> crate::generated::gapic_control::model::GetFolderRequest {
        crate::generated::gapic_control::model::GetFolderRequest::new()
            .set_name(self.name)
            .set_if_metageneration_match(self.if_metageneration_match.map(|v| v.cnv()))
            .set_if_metageneration_not_match(self.if_metageneration_not_match.map(|v| v.cnv()))
            .set_request_id(self.request_id)
    }
}

impl gaxi::prost::ToProto<CreateFolderRequest> for crate::generated::gapic_control::model::CreateFolderRequest {
    type Output = CreateFolderRequest;
    fn to_proto(self) -> std::result::Result<CreateFolderRequest, gaxi::prost::ConvertError> {
        Ok(Self::Output {
            parent: self.parent.to_proto()?,
            folder: self.folder.map(|v| v.to_proto()).transpose()?,
            folder_id: self.folder_id.to_proto()?,
            recursive: self.recursive.to_proto()?,
            request_id: self.request_id.to_proto()?,
        })
    }
}

impl gaxi::prost::FromProto<crate::generated::gapic_control::model::CreateFolderRequest> for CreateFolderRequest {
    fn cnv(self) -> crate::generated::gapic_control::model::CreateFolderRequest {
        crate::generated::gapic_control::model::CreateFolderRequest::new()
            .set_parent(self.parent)
            .set_folder(self.folder.map(|v| v.cnv()))
            .set_folder_id(self.folder_id)
            .set_recursive(self.recursive)
            .set_request_id(self.request_id)
    }
}

impl gaxi::prost::ToProto<DeleteFolderRequest> for crate::generated::gapic_control::model::DeleteFolderRequest {
    type Output = DeleteFolderRequest;
    fn to_proto(self) -> std::result::Result<DeleteFolderRequest, gaxi::prost::ConvertError> {
        Ok(Self::Output {
            name: self.name.to_proto()?,
            if_metageneration_match: self.if_metageneration_match.map(|v| v.to_proto()).transpose()?,
            if_metageneration_not_match: self.if_metageneration_not_match.map(|v| v.to_proto()).transpose()?,
            request_id: self.request_id.to_proto()?,
        })
    }
}

impl gaxi::prost::FromProto<crate::generated::gapic_control::model::DeleteFolderRequest> for DeleteFolderRequest {
    fn cnv(self) -> crate::generated::gapic_control::model::DeleteFolderRequest {
        crate::generated::gapic_control::model::DeleteFolderRequest::new()
            .set_name(self.name)
            .set_if_metageneration_match(self.if_metageneration_match.map(|v| v.cnv()))
            .set_if_metageneration_not_match(self.if_metageneration_not_match.map(|v| v.cnv()))
            .set_request_id(self.request_id)
    }
}

impl gaxi::prost::ToProto<ListFoldersRequest> for crate::generated::gapic_control::model::ListFoldersRequest {
    type Output = ListFoldersRequest;
    fn to_proto(self) -> std::result::Result<ListFoldersRequest, gaxi::prost::ConvertError> {
        Ok(Self::Output {
            parent: self.parent.to_proto()?,
            page_size: self.page_size.to_proto()?,
            page_token: self.page_token.to_proto()?,
            prefix: self.prefix.to_proto()?,
            delimiter: self.delimiter.to_proto()?,
            lexicographic_start: self.lexicographic_start.to_proto()?,
            lexicographic_end: self.lexicographic_end.to_proto()?,
            request_id: self.request_id.to_proto()?,
        })
    }
}

impl gaxi::prost::FromProto<crate::generated::gapic_control::model::ListFoldersRequest> for ListFoldersRequest {
    fn cnv(self) -> crate::generated::gapic_control::model::ListFoldersRequest {
        crate::generated::gapic_control::model::ListFoldersRequest::new()
            .set_parent(self.parent)
            .set_page_size(self.page_size)
            .set_page_token(self.page_token)
            .set_prefix(self.prefix)
            .set_delimiter(self.delimiter)
            .set_lexicographic_start(self.lexicographic_start)
            .set_lexicographic_end(self.lexicographic_end)
            .set_request_id(self.request_id)
    }
}

impl gaxi::prost::ToProto<ListFoldersResponse> for crate::generated::gapic_control::model::ListFoldersResponse {
    type Output = ListFoldersResponse;
    fn to_proto(self) -> std::result::Result<ListFoldersResponse, gaxi::prost::ConvertError> {
        Ok(Self::Output {
            folders: self.folders
                .into_iter()
                .map(|v| v.to_proto())
                .collect::<std::result::Result<std::vec::Vec<_>, _>>()?,
            next_page_token: self.next_page_token.to_proto()?,
        })
    }
}

impl gaxi::prost::FromProto<crate::generated::gapic_control::model::ListFoldersResponse> for ListFoldersResponse {
    fn cnv(self) -> crate::generated::gapic_control::model::ListFoldersResponse {
        crate::generated::gapic_control::model::ListFoldersResponse::new()
            .set_folders(self.folders.into_iter().map(|v| v.cnv()))
            .set_next_page_token(self.next_page_token)
    }
}

impl gaxi::prost::ToProto<RenameFolderRequest> for crate::generated::gapic_control::model::RenameFolderRequest {
    type Output = RenameFolderRequest;
    fn to_proto(self) -> std::result::Result<RenameFolderRequest, gaxi::prost::ConvertError> {
        Ok(Self::Output {
            name: self.name.to_proto()?,
            destination_folder_id: self.destination_folder_id.to_proto()?,
            if_metageneration_match: self.if_metageneration_match.map(|v| v.to_proto()).transpose()?,
            if_metageneration_not_match: self.if_metageneration_not_match.map(|v| v.to_proto()).transpose()?,
            request_id: self.request_id.to_proto()?,
        })
    }
}

impl gaxi::prost::FromProto<crate::generated::gapic_control::model::RenameFolderRequest> for RenameFolderRequest {
    fn cnv(self) -> crate::generated::gapic_control::model::RenameFolderRequest {
        crate::generated::gapic_control::model::RenameFolderRequest::new()
            .set_name(self.name)
            .set_destination_folder_id(self.destination_folder_id)
            .set_if_metageneration_match(self.if_metageneration_match.map(|v| v.cnv()))
            .set_if_metageneration_not_match(self.if_metageneration_not_match.map(|v| v.cnv()))
            .set_request_id(self.request_id)
    }
}

impl gaxi::prost::ToProto<CommonLongRunningOperationMetadata> for crate::generated::gapic_control::model::CommonLongRunningOperationMetadata {
    type Output = CommonLongRunningOperationMetadata;
    fn to_proto(self) -> std::result::Result<CommonLongRunningOperationMetadata, gaxi::prost::ConvertError> {
        Ok(Self::Output {
            create_time: self.create_time.map(|v| v.to_proto()).transpose()?,
            end_time: self.end_time.map(|v| v.to_proto()).transpose()?,
            update_time: self.update_time.map(|v| v.to_proto()).transpose()?,
            r#type: self.r#type.to_proto()?,
            requested_cancellation: self.requested_cancellation.to_proto()?,
            progress_percent: self.progress_percent.to_proto()?,
        })
    }
}

impl gaxi::prost::FromProto<crate::generated::gapic_control::model::CommonLongRunningOperationMetadata> for CommonLongRunningOperationMetadata {
    fn cnv(self) -> crate::generated::gapic_control::model::CommonLongRunningOperationMetadata {
        crate::generated::gapic_control::model::CommonLongRunningOperationMetadata::new()
            .set_create_time(self.create_time.map(|v| v.cnv()))
            .set_end_time(self.end_time.map(|v| v.cnv()))
            .set_update_time(self.update_time.map(|v| v.cnv()))
            .set_type(self.r#type)
            .set_requested_cancellation(self.requested_cancellation)
            .set_progress_percent(self.progress_percent)
    }
}

impl gaxi::prost::ToProto<RenameFolderMetadata> for crate::generated::gapic_control::model::RenameFolderMetadata {
    type Output = RenameFolderMetadata;
    fn to_proto(self) -> std::result::Result<RenameFolderMetadata, gaxi::prost::ConvertError> {
        Ok(Self::Output {
            common_metadata: self.common_metadata.map(|v| v.to_proto()).transpose()?,
            source_folder_id: self.source_folder_id.to_proto()?,
            destination_folder_id: self.destination_folder_id.to_proto()?,
        })
    }
}

impl gaxi::prost::FromProto<crate::generated::gapic_control::model::RenameFolderMetadata> for RenameFolderMetadata {
    fn cnv(self) -> crate::generated::gapic_control::model::RenameFolderMetadata {
        crate::generated::gapic_control::model::RenameFolderMetadata::new()
            .set_common_metadata(self.common_metadata.map(|v| v.cnv()))
            .set_source_folder_id(self.source_folder_id)
            .set_destination_folder_id(self.destination_folder_id)
    }
}

impl gaxi::prost::ToProto<storage_layout::CustomPlacementConfig> for crate::generated::gapic_control::model::storage_layout::CustomPlacementConfig {
    type Output = storage_layout::CustomPlacementConfig;
    fn to_proto(self) -> std::result::Result<storage_layout::CustomPlacementConfig, gaxi::prost::ConvertError> {
        Ok(Self::Output {
            data_locations: self.data_locations
                .into_iter()
                .map(|v| v.to_proto())
                .collect::<std::result::Result<std::vec::Vec<_>, _>>()?,
        })
    }
}

impl gaxi::prost::FromProto<crate::generated::gapic_control::model::storage_layout::CustomPlacementConfig> for storage_layout::CustomPlacementConfig {
    fn cnv(self) -> crate::generated::gapic_control::model::storage_layout::CustomPlacementConfig {
        crate::generated::gapic_control::model::storage_layout::CustomPlacementConfig::new()
            .set_data_locations(self.data_locations.into_iter().map(|v| v.cnv()))
    }
}

impl gaxi::prost::ToProto<storage_layout::HierarchicalNamespace> for crate::generated::gapic_control::model::storage_layout::HierarchicalNamespace {
    type Output = storage_layout::HierarchicalNamespace;
    fn to_proto(self) -> std::result::Result<storage_layout::HierarchicalNamespace, gaxi::prost::ConvertError> {
        Ok(Self::Output {
            enabled: self.enabled.to_proto()?,
        })
    }
}

impl gaxi::prost::FromProto<crate::generated::gapic_control::model::storage_layout::HierarchicalNamespace> for storage_layout::HierarchicalNamespace {
    fn cnv(self) -> crate::generated::gapic_control::model::storage_layout::HierarchicalNamespace {
        crate::generated::gapic_control::model::storage_layout::HierarchicalNamespace::new()
            .set_enabled(self.enabled)
    }
}

impl gaxi::prost::ToProto<StorageLayout> for crate::generated::gapic_control::model::StorageLayout {
    type Output = StorageLayout;
    fn to_proto(self) -> std::result::Result<StorageLayout, gaxi::prost::ConvertError> {
        Ok(Self::Output {
            name: self.name.to_proto()?,
            location: self.location.to_proto()?,
            location_type: self.location_type.to_proto()?,
            custom_placement_config: self.custom_placement_config.map(|v| v.to_proto()).transpose()?,
            hierarchical_namespace: self.hierarchical_namespace.map(|v| v.to_proto()).transpose()?,
        })
    }
}

impl gaxi::prost::FromProto<crate::generated::gapic_control::model::StorageLayout> for StorageLayout {
    fn cnv(self) -> crate::generated::gapic_control::model::StorageLayout {
        crate::generated::gapic_control::model::StorageLayout::new()
            .set_name(self.name)
            .set_location(self.location)
            .set_location_type(self.location_type)
            .set_custom_placement_config(self.custom_placement_config.map(|v| v.cnv()))
            .set_hierarchical_namespace(self.hierarchical_namespace.map(|v| v.cnv()))
    }
}

impl gaxi::prost::ToProto<GetStorageLayoutRequest> for crate::generated::gapic_control::model::GetStorageLayoutRequest {
    type Output = GetStorageLayoutRequest;
    fn to_proto(self) -> std::result::Result<GetStorageLayoutRequest, gaxi::prost::ConvertError> {
        Ok(Self::Output {
            name: self.name.to_proto()?,
            prefix: self.prefix.to_proto()?,
            request_id: self.request_id.to_proto()?,
        })
    }
}

impl gaxi::prost::FromProto<crate::generated::gapic_control::model::GetStorageLayoutRequest> for GetStorageLayoutRequest {
    fn cnv(self) -> crate::generated::gapic_control::model::GetStorageLayoutRequest {
        crate::generated::gapic_control::model::GetStorageLayoutRequest::new()
            .set_name(self.name)
            .set_prefix(self.prefix)
            .set_request_id(self.request_id)
    }
}

impl gaxi::prost::ToProto<ManagedFolder> for crate::generated::gapic_control::model::ManagedFolder {
    type Output = ManagedFolder;
    fn to_proto(self) -> std::result::Result<ManagedFolder, gaxi::prost::ConvertError> {
        Ok(Self::Output {
            name: self.name.to_proto()?,
            metageneration: self.metageneration.to_proto()?,
            create_time: self.create_time.map(|v| v.to_proto()).transpose()?,
            update_time: self.update_time.map(|v| v.to_proto()).transpose()?,
        })
    }
}

impl gaxi::prost::FromProto<crate::generated::gapic_control::model::ManagedFolder> for ManagedFolder {
    fn cnv(self) -> crate::generated::gapic_control::model::ManagedFolder {
        crate::generated::gapic_control::model::ManagedFolder::new()
            .set_name(self.name)
            .set_metageneration(self.metageneration)
            .set_create_time(self.create_time.map(|v| v.cnv()))
            .set_update_time(self.update_time.map(|v| v.cnv()))
    }
}

impl gaxi::prost::ToProto<GetManagedFolderRequest> for crate::generated::gapic_control::model::GetManagedFolderRequest {
    type Output = GetManagedFolderRequest;
    fn to_proto(self) -> std::result::Result<GetManagedFolderRequest, gaxi::prost::ConvertError> {
        Ok(Self::Output {
            name: self.name.to_proto()?,
            if_metageneration_match: self.if_metageneration_match.map(|v| v.to_proto()).transpose()?,
            if_metageneration_not_match: self.if_metageneration_not_match.map(|v| v.to_proto()).transpose()?,
            request_id: self.request_id.to_proto()?,
        })
    }
}

impl gaxi::prost::FromProto<crate::generated::gapic_control::model::GetManagedFolderRequest> for GetManagedFolderRequest {
    fn cnv(self) -> crate::generated::gapic_control::model::GetManagedFolderRequest {
        crate::generated::gapic_control::model::GetManagedFolderRequest::new()
            .set_name(self.name)
            .set_if_metageneration_match(self.if_metageneration_match.map(|v| v.cnv()))
            .set_if_metageneration_not_match(self.if_metageneration_not_match.map(|v| v.cnv()))
            .set_request_id(self.request_id)
    }
}

impl gaxi::prost::ToProto<CreateManagedFolderRequest> for crate::generated::gapic_control::model::CreateManagedFolderRequest {
    type Output = CreateManagedFolderRequest;
    fn to_proto(self) -> std::result::Result<CreateManagedFolderRequest, gaxi::prost::ConvertError> {
        Ok(Self::Output {
            parent: self.parent.to_proto()?,
            managed_folder: self.managed_folder.map(|v| v.to_proto()).transpose()?,
            managed_folder_id: self.managed_folder_id.to_proto()?,
            request_id: self.request_id.to_proto()?,
        })
    }
}

impl gaxi::prost::FromProto<crate::generated::gapic_control::model::CreateManagedFolderRequest> for CreateManagedFolderRequest {
    fn cnv(self) -> crate::generated::gapic_control::model::CreateManagedFolderRequest {
        crate::generated::gapic_control::model::CreateManagedFolderRequest::new()
            .set_parent(self.parent)
            .set_managed_folder(self.managed_folder.map(|v| v.cnv()))
            .set_managed_folder_id(self.managed_folder_id)
            .set_request_id(self.request_id)
    }
}

impl gaxi::prost::ToProto<DeleteManagedFolderRequest> for crate::generated::gapic_control::model::DeleteManagedFolderRequest {
    type Output = DeleteManagedFolderRequest;
    fn to_proto(self) -> std::result::Result<DeleteManagedFolderRequest, gaxi::prost::ConvertError> {
        Ok(Self::Output {
            name: self.name.to_proto()?,
            if_metageneration_match: self.if_metageneration_match.map(|v| v.to_proto()).transpose()?,
            if_metageneration_not_match: self.if_metageneration_not_match.map(|v| v.to_proto()).transpose()?,
            allow_non_empty: self.allow_non_empty.to_proto()?,
            request_id: self.request_id.to_proto()?,
        })
    }
}

impl gaxi::prost::FromProto<crate::generated::gapic_control::model::DeleteManagedFolderRequest> for DeleteManagedFolderRequest {
    fn cnv(self) -> crate::generated::gapic_control::model::DeleteManagedFolderRequest {
        crate::generated::gapic_control::model::DeleteManagedFolderRequest::new()
            .set_name(self.name)
            .set_if_metageneration_match(self.if_metageneration_match.map(|v| v.cnv()))
            .set_if_metageneration_not_match(self.if_metageneration_not_match.map(|v| v.cnv()))
            .set_allow_non_empty(self.allow_non_empty)
            .set_request_id(self.request_id)
    }
}

impl gaxi::prost::ToProto<ListManagedFoldersRequest> for crate::generated::gapic_control::model::ListManagedFoldersRequest {
    type Output = ListManagedFoldersRequest;
    fn to_proto(self) -> std::result::Result<ListManagedFoldersRequest, gaxi::prost::ConvertError> {
        Ok(Self::Output {
            parent: self.parent.to_proto()?,
            page_size: self.page_size.to_proto()?,
            page_token: self.page_token.to_proto()?,
            prefix: self.prefix.to_proto()?,
            request_id: self.request_id.to_proto()?,
        })
    }
}

impl gaxi::prost::FromProto<crate::generated::gapic_control::model::ListManagedFoldersRequest> for ListManagedFoldersRequest {
    fn cnv(self) -> crate::generated::gapic_control::model::ListManagedFoldersRequest {
        crate::generated::gapic_control::model::ListManagedFoldersRequest::new()
            .set_parent(self.parent)
            .set_page_size(self.page_size)
            .set_page_token(self.page_token)
            .set_prefix(self.prefix)
            .set_request_id(self.request_id)
    }
}

impl gaxi::prost::ToProto<ListManagedFoldersResponse> for crate::generated::gapic_control::model::ListManagedFoldersResponse {
    type Output = ListManagedFoldersResponse;
    fn to_proto(self) -> std::result::Result<ListManagedFoldersResponse, gaxi::prost::ConvertError> {
        Ok(Self::Output {
            managed_folders: self.managed_folders
                .into_iter()
                .map(|v| v.to_proto())
                .collect::<std::result::Result<std::vec::Vec<_>, _>>()?,
            next_page_token: self.next_page_token.to_proto()?,
        })
    }
}

impl gaxi::prost::FromProto<crate::generated::gapic_control::model::ListManagedFoldersResponse> for ListManagedFoldersResponse {
    fn cnv(self) -> crate::generated::gapic_control::model::ListManagedFoldersResponse {
        crate::generated::gapic_control::model::ListManagedFoldersResponse::new()
            .set_managed_folders(self.managed_folders.into_iter().map(|v| v.cnv()))
            .set_next_page_token(self.next_page_token)
    }
}
