// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use crate::Result;
#[allow(unused_imports)]
use gax::error::Error;

const DEFAULT_HOST: &str = "https://storage.googleapis.com";

mod info {
    const NAME: &str = env!("CARGO_PKG_NAME");
    const VERSION: &str = env!("CARGO_PKG_VERSION");
    lazy_static::lazy_static! {
        pub(crate) static ref X_GOOG_API_CLIENT_HEADER: String = {
            let ac = gaxi::api_header::XGoogApiClient{
                name:          NAME,
                version:       VERSION,
                library_type:  gaxi::api_header::GAPIC,
            };
            ac.header_value()
        };
    }
}

/// Implements [StorageControl](super::stub::StorageControl) using a Tonic-generated client.
#[derive(Clone)]
pub struct StorageControl {
    inner: gaxi::grpc::Client,
}

impl std::fmt::Debug for StorageControl {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        f.debug_struct("StorageControl")
            .field("inner", &self.inner)
            .finish()
    }
}

impl StorageControl {
    pub async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = gaxi::grpc::Client::new(config, DEFAULT_HOST).await?;
        Ok(Self { inner })
    }
}

impl super::stub::StorageControl for StorageControl {
    async fn create_folder(
        &self,
        req: crate::model::CreateFolderRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Folder>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(options, false);
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new(
                "google.storage.control.v2.StorageControl",
                "CreateFolder",
            ));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.storage.control.v2.StorageControl/CreateFolder",
        );
        let x_goog_request_params = {
            use gaxi::routing_parameter::Segment;
            gaxi::routing_parameter::format(&[gaxi::routing_parameter::value(
                Some(&req).map(|v| v.parent.as_str()),
                &[],
                &[Segment::MultiWildcard],
                &[],
            )
            .map(|v| ("bucket", v))])
        };

        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::other)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .map(
                gaxi::grpc::to_gax_response::<
                    crate::google::storage::control::v2::Folder,
                    crate::model::Folder,
                >,
            )
    }

    async fn delete_folder(
        &self,
        req: crate::model::DeleteFolderRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(options, false);
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new(
                "google.storage.control.v2.StorageControl",
                "DeleteFolder",
            ));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.storage.control.v2.StorageControl/DeleteFolder",
        );
        let x_goog_request_params = {
            use gaxi::routing_parameter::Segment;
            gaxi::routing_parameter::format(&[gaxi::routing_parameter::value(
                Some(&req).map(|v| v.name.as_str()),
                &[],
                &[
                    Segment::Literal("projects"),
                    Segment::Literal("/"),
                    Segment::SingleWildcard,
                    Segment::Literal("/"),
                    Segment::Literal("buckets"),
                    Segment::Literal("/"),
                    Segment::SingleWildcard,
                ],
                &[Segment::MultiWildcard],
            )
            .map(|v| ("bucket", v))])
        };

        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::other)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .map(gaxi::grpc::to_gax_response::<(), ()>)
    }

    async fn get_folder(
        &self,
        req: crate::model::GetFolderRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Folder>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(options, false);
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new(
                "google.storage.control.v2.StorageControl",
                "GetFolder",
            ));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.storage.control.v2.StorageControl/GetFolder",
        );
        let x_goog_request_params = {
            use gaxi::routing_parameter::Segment;
            gaxi::routing_parameter::format(&[gaxi::routing_parameter::value(
                Some(&req).map(|v| v.name.as_str()),
                &[],
                &[
                    Segment::Literal("projects"),
                    Segment::Literal("/"),
                    Segment::SingleWildcard,
                    Segment::Literal("/"),
                    Segment::Literal("buckets"),
                    Segment::Literal("/"),
                    Segment::SingleWildcard,
                ],
                &[Segment::MultiWildcard],
            )
            .map(|v| ("bucket", v))])
        };

        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::other)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .map(
                gaxi::grpc::to_gax_response::<
                    crate::google::storage::control::v2::Folder,
                    crate::model::Folder,
                >,
            )
    }

    async fn list_folders(
        &self,
        req: crate::model::ListFoldersRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListFoldersResponse>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(options, false);
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new(
                "google.storage.control.v2.StorageControl",
                "ListFolders",
            ));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.storage.control.v2.StorageControl/ListFolders",
        );
        let x_goog_request_params = {
            use gaxi::routing_parameter::Segment;
            gaxi::routing_parameter::format(&[gaxi::routing_parameter::value(
                Some(&req).map(|v| v.parent.as_str()),
                &[],
                &[Segment::MultiWildcard],
                &[],
            )
            .map(|v| ("bucket", v))])
        };

        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::other)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .map(
                gaxi::grpc::to_gax_response::<
                    crate::google::storage::control::v2::ListFoldersResponse,
                    crate::model::ListFoldersResponse,
                >,
            )
    }

    async fn get_storage_layout(
        &self,
        req: crate::model::GetStorageLayoutRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::StorageLayout>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(options, false);
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new(
                "google.storage.control.v2.StorageControl",
                "GetStorageLayout",
            ));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.storage.control.v2.StorageControl/GetStorageLayout",
        );
        let x_goog_request_params = {
            use gaxi::routing_parameter::Segment;
            gaxi::routing_parameter::format(&[gaxi::routing_parameter::value(
                Some(&req).map(|v| v.name.as_str()),
                &[],
                &[
                    Segment::Literal("projects"),
                    Segment::Literal("/"),
                    Segment::SingleWildcard,
                    Segment::Literal("/"),
                    Segment::Literal("buckets"),
                    Segment::Literal("/"),
                    Segment::SingleWildcard,
                ],
                &[Segment::MultiWildcard],
            )
            .map(|v| ("bucket", v))])
        };

        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::other)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .map(
                gaxi::grpc::to_gax_response::<
                    crate::google::storage::control::v2::StorageLayout,
                    crate::model::StorageLayout,
                >,
            )
    }

    async fn create_managed_folder(
        &self,
        req: crate::model::CreateManagedFolderRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ManagedFolder>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(options, false);
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new(
                "google.storage.control.v2.StorageControl",
                "CreateManagedFolder",
            ));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.storage.control.v2.StorageControl/CreateManagedFolder",
        );
        let x_goog_request_params = {
            use gaxi::routing_parameter::Segment;
            gaxi::routing_parameter::format(&[gaxi::routing_parameter::value(
                Some(&req).map(|v| v.parent.as_str()),
                &[],
                &[Segment::MultiWildcard],
                &[],
            )
            .map(|v| ("bucket", v))])
        };

        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::other)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .map(
                gaxi::grpc::to_gax_response::<
                    crate::google::storage::control::v2::ManagedFolder,
                    crate::model::ManagedFolder,
                >,
            )
    }

    async fn delete_managed_folder(
        &self,
        req: crate::model::DeleteManagedFolderRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(options, false);
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new(
                "google.storage.control.v2.StorageControl",
                "DeleteManagedFolder",
            ));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.storage.control.v2.StorageControl/DeleteManagedFolder",
        );
        let x_goog_request_params = {
            use gaxi::routing_parameter::Segment;
            gaxi::routing_parameter::format(&[gaxi::routing_parameter::value(
                Some(&req).map(|v| v.name.as_str()),
                &[],
                &[
                    Segment::Literal("projects"),
                    Segment::Literal("/"),
                    Segment::SingleWildcard,
                    Segment::Literal("/"),
                    Segment::Literal("buckets"),
                    Segment::Literal("/"),
                    Segment::SingleWildcard,
                ],
                &[Segment::MultiWildcard],
            )
            .map(|v| ("bucket", v))])
        };

        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::other)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .map(gaxi::grpc::to_gax_response::<(), ()>)
    }

    async fn get_managed_folder(
        &self,
        req: crate::model::GetManagedFolderRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ManagedFolder>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(options, false);
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new(
                "google.storage.control.v2.StorageControl",
                "GetManagedFolder",
            ));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.storage.control.v2.StorageControl/GetManagedFolder",
        );
        let x_goog_request_params = {
            use gaxi::routing_parameter::Segment;
            gaxi::routing_parameter::format(&[gaxi::routing_parameter::value(
                Some(&req).map(|v| v.name.as_str()),
                &[],
                &[
                    Segment::Literal("projects"),
                    Segment::Literal("/"),
                    Segment::SingleWildcard,
                    Segment::Literal("/"),
                    Segment::Literal("buckets"),
                    Segment::Literal("/"),
                    Segment::SingleWildcard,
                ],
                &[Segment::MultiWildcard],
            )
            .map(|v| ("bucket", v))])
        };

        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::other)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .map(
                gaxi::grpc::to_gax_response::<
                    crate::google::storage::control::v2::ManagedFolder,
                    crate::model::ManagedFolder,
                >,
            )
    }

    async fn list_managed_folders(
        &self,
        req: crate::model::ListManagedFoldersRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListManagedFoldersResponse>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(options, false);
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new(
                "google.storage.control.v2.StorageControl",
                "ListManagedFolders",
            ));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.storage.control.v2.StorageControl/ListManagedFolders",
        );
        let x_goog_request_params = {
            use gaxi::routing_parameter::Segment;
            gaxi::routing_parameter::format(&[gaxi::routing_parameter::value(
                Some(&req).map(|v| v.parent.as_str()),
                &[],
                &[Segment::MultiWildcard],
                &[],
            )
            .map(|v| ("bucket", v))])
        };

        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::other)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .map(
                gaxi::grpc::to_gax_response::<
                    crate::google::storage::control::v2::ListManagedFoldersResponse,
                    crate::model::ListManagedFoldersResponse,
                >,
            )
    }
}
