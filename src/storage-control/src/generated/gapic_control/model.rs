// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::invalid_html_tags)]
#![allow(rustdoc::redundant_explicit_links)]

/// Contains information about a pending rename operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PendingRenameInfo {
    /// Output only. The name of the rename operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub operation: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl PendingRenameInfo {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [operation][crate::model::PendingRenameInfo::operation].
    pub fn set_operation<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.operation = v.into();
        self
    }
}

impl wkt::message::Message for PendingRenameInfo {
    fn typename() -> &'static str {
        "type.googleapis.com/google.storage.control.v2.PendingRenameInfo"
    }
}

/// A folder resource. This resource can only exist in a hierarchical namespace
/// enabled bucket.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Folder {
    /// Identifier. The name of this folder.
    /// Format: `projects/{project}/buckets/{bucket}/folders/{folder}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The version of the metadata for this folder. Used for
    /// preconditions and for detecting changes in metadata.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub metageneration: i64,

    /// Output only. The creation time of the folder.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The modification time of the folder.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Only present if the folder is part of an ongoing RenameFolder
    /// operation. Contains information which can be used to query the operation
    /// status. The presence of this field also indicates all write operations are
    /// blocked for this folder, including folder, managed folder, and object
    /// operations.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub pending_rename_info: std::option::Option<crate::model::PendingRenameInfo>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Folder {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Folder::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [metageneration][crate::model::Folder::metageneration].
    pub fn set_metageneration<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.metageneration = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Folder::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Folder::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [pending_rename_info][crate::model::Folder::pending_rename_info].
    pub fn set_pending_rename_info<
        T: std::convert::Into<std::option::Option<crate::model::PendingRenameInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.pending_rename_info = v.into();
        self
    }
}

impl wkt::message::Message for Folder {
    fn typename() -> &'static str {
        "type.googleapis.com/google.storage.control.v2.Folder"
    }
}

/// Request message for GetFolder. This operation is only applicable to a
/// hierarchical namespace enabled bucket.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetFolderRequest {
    /// Required. Name of the folder.
    /// Format: `projects/{project}/buckets/{bucket}/folders/{folder}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Makes the operation only succeed conditional on whether the folder's
    /// current metageneration matches the given value.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<serde_with::DisplayFromStr>")]
    pub if_metageneration_match: std::option::Option<i64>,

    /// Makes the operation only succeed conditional on whether the folder's
    /// current metageneration does not match the given value.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<serde_with::DisplayFromStr>")]
    pub if_metageneration_not_match: std::option::Option<i64>,

    /// Optional. A unique identifier for this request. UUID is the recommended
    /// format, but other formats are still accepted.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetFolderRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetFolderRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [if_metageneration_match][crate::model::GetFolderRequest::if_metageneration_match].
    pub fn set_if_metageneration_match<T: std::convert::Into<std::option::Option<i64>>>(
        mut self,
        v: T,
    ) -> Self {
        self.if_metageneration_match = v.into();
        self
    }

    /// Sets the value of [if_metageneration_not_match][crate::model::GetFolderRequest::if_metageneration_not_match].
    pub fn set_if_metageneration_not_match<T: std::convert::Into<std::option::Option<i64>>>(
        mut self,
        v: T,
    ) -> Self {
        self.if_metageneration_not_match = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::GetFolderRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for GetFolderRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.storage.control.v2.GetFolderRequest"
    }
}

/// Request message for CreateFolder. This operation is only applicable to a
/// hierarchical namespace enabled bucket.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateFolderRequest {
    /// Required. Name of the bucket in which the folder will reside. The bucket
    /// must be a hierarchical namespace enabled bucket.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Properties of the new folder being created.
    /// The bucket and name of the folder are specified in the parent and folder_id
    /// fields, respectively. Populating those fields in `folder` will result in an
    /// error.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub folder: std::option::Option<crate::model::Folder>,

    /// Required. The full name of a folder, including all its parent folders.
    /// Folders use single '/' characters as a delimiter.
    /// The folder_id must end with a slash.
    /// For example, the folder_id of "books/biographies/" would create a new
    /// "biographies/" folder under the "books/" folder.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub folder_id: std::string::String,

    /// Optional. If true, parent folder doesn't have to be present and all missing
    /// ancestor folders will be created atomically.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub recursive: bool,

    /// Optional. A unique identifier for this request. UUID is the recommended
    /// format, but other formats are still accepted.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateFolderRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateFolderRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [folder][crate::model::CreateFolderRequest::folder].
    pub fn set_folder<T: std::convert::Into<std::option::Option<crate::model::Folder>>>(
        mut self,
        v: T,
    ) -> Self {
        self.folder = v.into();
        self
    }

    /// Sets the value of [folder_id][crate::model::CreateFolderRequest::folder_id].
    pub fn set_folder_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.folder_id = v.into();
        self
    }

    /// Sets the value of [recursive][crate::model::CreateFolderRequest::recursive].
    pub fn set_recursive<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.recursive = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateFolderRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateFolderRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.storage.control.v2.CreateFolderRequest"
    }
}

/// Request message for DeleteFolder. This operation is only applicable to a
/// hierarchical namespace enabled bucket.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteFolderRequest {
    /// Required. Name of the folder.
    /// Format: `projects/{project}/buckets/{bucket}/folders/{folder}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Makes the operation only succeed conditional on whether the folder's
    /// current metageneration matches the given value.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<serde_with::DisplayFromStr>")]
    pub if_metageneration_match: std::option::Option<i64>,

    /// Makes the operation only succeed conditional on whether the folder's
    /// current metageneration does not match the given value.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<serde_with::DisplayFromStr>")]
    pub if_metageneration_not_match: std::option::Option<i64>,

    /// Optional. A unique identifier for this request. UUID is the recommended
    /// format, but other formats are still accepted.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteFolderRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteFolderRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [if_metageneration_match][crate::model::DeleteFolderRequest::if_metageneration_match].
    pub fn set_if_metageneration_match<T: std::convert::Into<std::option::Option<i64>>>(
        mut self,
        v: T,
    ) -> Self {
        self.if_metageneration_match = v.into();
        self
    }

    /// Sets the value of [if_metageneration_not_match][crate::model::DeleteFolderRequest::if_metageneration_not_match].
    pub fn set_if_metageneration_not_match<T: std::convert::Into<std::option::Option<i64>>>(
        mut self,
        v: T,
    ) -> Self {
        self.if_metageneration_not_match = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteFolderRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for DeleteFolderRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.storage.control.v2.DeleteFolderRequest"
    }
}

/// Request message for ListFolders. This operation is only applicable to a
/// hierarchical namespace enabled bucket.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListFoldersRequest {
    /// Required. Name of the bucket in which to look for folders. The bucket must
    /// be a hierarchical namespace enabled bucket.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. Maximum number of folders to return in a single response. The
    /// service will use this parameter or 1,000 items, whichever is smaller.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// Optional. A previously-returned page token representing part of the larger
    /// set of results to view.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. Filter results to folders whose names begin with this prefix.
    /// If set, the value must either be an empty string or end with a '/'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub prefix: std::string::String,

    /// Optional. If set, returns results in a directory-like mode. The results
    /// will only include folders that either exactly match the above prefix, or
    /// are one level below the prefix. The only supported value is '/'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub delimiter: std::string::String,

    /// Optional. Filter results to folders whose names are lexicographically equal
    /// to or after lexicographic_start. If lexicographic_end is also set, the
    /// folders listed have names between lexicographic_start (inclusive) and
    /// lexicographic_end (exclusive).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub lexicographic_start: std::string::String,

    /// Optional. Filter results to folders whose names are lexicographically
    /// before lexicographic_end. If lexicographic_start is also set, the folders
    /// listed have names between lexicographic_start (inclusive) and
    /// lexicographic_end (exclusive).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub lexicographic_end: std::string::String,

    /// Optional. A unique identifier for this request. UUID is the recommended
    /// format, but other formats are still accepted.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListFoldersRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListFoldersRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListFoldersRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListFoldersRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [prefix][crate::model::ListFoldersRequest::prefix].
    pub fn set_prefix<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.prefix = v.into();
        self
    }

    /// Sets the value of [delimiter][crate::model::ListFoldersRequest::delimiter].
    pub fn set_delimiter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.delimiter = v.into();
        self
    }

    /// Sets the value of [lexicographic_start][crate::model::ListFoldersRequest::lexicographic_start].
    pub fn set_lexicographic_start<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.lexicographic_start = v.into();
        self
    }

    /// Sets the value of [lexicographic_end][crate::model::ListFoldersRequest::lexicographic_end].
    pub fn set_lexicographic_end<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.lexicographic_end = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::ListFoldersRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for ListFoldersRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.storage.control.v2.ListFoldersRequest"
    }
}

/// Response message for ListFolders.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListFoldersResponse {
    /// The list of child folders
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub folders: std::vec::Vec<crate::model::Folder>,

    /// The continuation token, used to page through large result sets. Provide
    /// this value in a subsequent request to return the next page of results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListFoldersResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [folders][crate::model::ListFoldersResponse::folders].
    pub fn set_folders<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Folder>,
    {
        use std::iter::Iterator;
        self.folders = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [next_page_token][crate::model::ListFoldersResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListFoldersResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.storage.control.v2.ListFoldersResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListFoldersResponse {
    type PageItem = crate::model::Folder;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.folders
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Request message for RenameFolder. This operation is only applicable to a
/// hierarchical namespace enabled bucket.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RenameFolderRequest {
    /// Required. Name of the source folder being renamed.
    /// Format: `projects/{project}/buckets/{bucket}/folders/{folder}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The destination folder ID, e.g. `foo/bar/`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub destination_folder_id: std::string::String,

    /// Makes the operation only succeed conditional on whether the source
    /// folder's current metageneration matches the given value.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<serde_with::DisplayFromStr>")]
    pub if_metageneration_match: std::option::Option<i64>,

    /// Makes the operation only succeed conditional on whether the source
    /// folder's current metageneration does not match the given value.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<serde_with::DisplayFromStr>")]
    pub if_metageneration_not_match: std::option::Option<i64>,

    /// Optional. A unique identifier for this request. UUID is the recommended
    /// format, but other formats are still accepted. This request is only
    /// idempotent if a `request_id` is provided.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RenameFolderRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::RenameFolderRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [destination_folder_id][crate::model::RenameFolderRequest::destination_folder_id].
    pub fn set_destination_folder_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.destination_folder_id = v.into();
        self
    }

    /// Sets the value of [if_metageneration_match][crate::model::RenameFolderRequest::if_metageneration_match].
    pub fn set_if_metageneration_match<T: std::convert::Into<std::option::Option<i64>>>(
        mut self,
        v: T,
    ) -> Self {
        self.if_metageneration_match = v.into();
        self
    }

    /// Sets the value of [if_metageneration_not_match][crate::model::RenameFolderRequest::if_metageneration_not_match].
    pub fn set_if_metageneration_not_match<T: std::convert::Into<std::option::Option<i64>>>(
        mut self,
        v: T,
    ) -> Self {
        self.if_metageneration_not_match = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::RenameFolderRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for RenameFolderRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.storage.control.v2.RenameFolderRequest"
    }
}

/// The message contains metadata that is common to all Storage Control
/// long-running operations, present in its `google.longrunning.Operation`
/// messages, and accessible via `metadata.common_metadata`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CommonLongRunningOperationMetadata {
    /// Output only. The time the operation was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the operation finished running.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the operation was last modified.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The type of operation invoked.
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub r#type: std::string::String,

    /// Output only. Identifies whether the user has requested cancellation.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub requested_cancellation: bool,

    /// Output only. The estimated progress of the operation in percentage [0,
    /// 100]. The value -1 means the progress is unknown.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub progress_percent: i32,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CommonLongRunningOperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [create_time][crate::model::CommonLongRunningOperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::CommonLongRunningOperationMetadata::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::CommonLongRunningOperationMetadata::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::CommonLongRunningOperationMetadata::type].
    pub fn set_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [requested_cancellation][crate::model::CommonLongRunningOperationMetadata::requested_cancellation].
    pub fn set_requested_cancellation<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.requested_cancellation = v.into();
        self
    }

    /// Sets the value of [progress_percent][crate::model::CommonLongRunningOperationMetadata::progress_percent].
    pub fn set_progress_percent<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.progress_percent = v.into();
        self
    }
}

impl wkt::message::Message for CommonLongRunningOperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.storage.control.v2.CommonLongRunningOperationMetadata"
    }
}

/// Message returned in the metadata field of the Operation resource for
/// RenameFolder operations.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RenameFolderMetadata {
    /// Generic metadata for the long running operation.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub common_metadata: std::option::Option<crate::model::CommonLongRunningOperationMetadata>,

    /// The path of the source folder.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub source_folder_id: std::string::String,

    /// The path of the destination folder.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub destination_folder_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RenameFolderMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [common_metadata][crate::model::RenameFolderMetadata::common_metadata].
    pub fn set_common_metadata<
        T: std::convert::Into<std::option::Option<crate::model::CommonLongRunningOperationMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.common_metadata = v.into();
        self
    }

    /// Sets the value of [source_folder_id][crate::model::RenameFolderMetadata::source_folder_id].
    pub fn set_source_folder_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.source_folder_id = v.into();
        self
    }

    /// Sets the value of [destination_folder_id][crate::model::RenameFolderMetadata::destination_folder_id].
    pub fn set_destination_folder_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.destination_folder_id = v.into();
        self
    }
}

impl wkt::message::Message for RenameFolderMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.storage.control.v2.RenameFolderMetadata"
    }
}

/// The storage layout configuration of a bucket.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct StorageLayout {
    /// Output only. The name of the StorageLayout resource.
    /// Format: `projects/{project}/buckets/{bucket}/storageLayout`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The location of the bucket.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub location: std::string::String,

    /// Output only. The location type of the bucket (region, dual-region,
    /// multi-region, etc).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub location_type: std::string::String,

    /// Output only. The data placement configuration for custom dual region. If
    /// there is no configuration, this is not a custom dual region bucket.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub custom_placement_config:
        std::option::Option<crate::model::storage_layout::CustomPlacementConfig>,

    /// Output only. The bucket's hierarchical namespace configuration. If there is
    /// no configuration, the hierarchical namespace is disabled.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub hierarchical_namespace:
        std::option::Option<crate::model::storage_layout::HierarchicalNamespace>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl StorageLayout {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::StorageLayout::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [location][crate::model::StorageLayout::location].
    pub fn set_location<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.location = v.into();
        self
    }

    /// Sets the value of [location_type][crate::model::StorageLayout::location_type].
    pub fn set_location_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.location_type = v.into();
        self
    }

    /// Sets the value of [custom_placement_config][crate::model::StorageLayout::custom_placement_config].
    pub fn set_custom_placement_config<
        T: std::convert::Into<
                std::option::Option<crate::model::storage_layout::CustomPlacementConfig>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.custom_placement_config = v.into();
        self
    }

    /// Sets the value of [hierarchical_namespace][crate::model::StorageLayout::hierarchical_namespace].
    pub fn set_hierarchical_namespace<
        T: std::convert::Into<
                std::option::Option<crate::model::storage_layout::HierarchicalNamespace>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.hierarchical_namespace = v.into();
        self
    }
}

impl wkt::message::Message for StorageLayout {
    fn typename() -> &'static str {
        "type.googleapis.com/google.storage.control.v2.StorageLayout"
    }
}

/// Defines additional types related to [StorageLayout].
pub mod storage_layout {
    #[allow(unused_imports)]
    use super::*;

    /// Configuration for Custom Dual Regions.  It should specify precisely two
    /// eligible regions within the same Multiregion. More information on regions
    /// may be found [<https://cloud.google.com/storage/docs/locations>][here].
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct CustomPlacementConfig {
        /// List of locations to use for data placement.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub data_locations: std::vec::Vec<std::string::String>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl CustomPlacementConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [data_locations][crate::model::storage_layout::CustomPlacementConfig::data_locations].
        pub fn set_data_locations<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.data_locations = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for CustomPlacementConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.storage.control.v2.StorageLayout.CustomPlacementConfig"
        }
    }

    /// Configuration for a bucket's hierarchical namespace feature.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct HierarchicalNamespace {
        /// Enables the hierarchical namespace feature.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub enabled: bool,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl HierarchicalNamespace {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [enabled][crate::model::storage_layout::HierarchicalNamespace::enabled].
        pub fn set_enabled<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.enabled = v.into();
            self
        }
    }

    impl wkt::message::Message for HierarchicalNamespace {
        fn typename() -> &'static str {
            "type.googleapis.com/google.storage.control.v2.StorageLayout.HierarchicalNamespace"
        }
    }
}

/// Request message for GetStorageLayout.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetStorageLayoutRequest {
    /// Required. The name of the StorageLayout resource.
    /// Format: `projects/{project}/buckets/{bucket}/storageLayout`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// An optional prefix used for permission check. It is useful when the caller
    /// only has limited permissions under a specific prefix.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub prefix: std::string::String,

    /// Optional. A unique identifier for this request. UUID is the recommended
    /// format, but other formats are still accepted.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetStorageLayoutRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetStorageLayoutRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [prefix][crate::model::GetStorageLayoutRequest::prefix].
    pub fn set_prefix<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.prefix = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::GetStorageLayoutRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for GetStorageLayoutRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.storage.control.v2.GetStorageLayoutRequest"
    }
}

/// A managed folder.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ManagedFolder {
    /// Identifier. The name of this managed folder.
    /// Format:
    /// `projects/{project}/buckets/{bucket}/managedFolders/{managedFolder}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The metadata version of this managed folder. It increases
    /// whenever the metadata is updated. Used for preconditions and for detecting
    /// changes in metadata. Managed folders don't have a generation number.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub metageneration: i64,

    /// Output only. The creation time of the managed folder.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The modification time of the managed folder.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ManagedFolder {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ManagedFolder::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [metageneration][crate::model::ManagedFolder::metageneration].
    pub fn set_metageneration<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.metageneration = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::ManagedFolder::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::ManagedFolder::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }
}

impl wkt::message::Message for ManagedFolder {
    fn typename() -> &'static str {
        "type.googleapis.com/google.storage.control.v2.ManagedFolder"
    }
}

/// Request message for GetManagedFolder.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetManagedFolderRequest {
    /// Required. Name of the managed folder.
    /// Format:
    /// `projects/{project}/buckets/{bucket}/managedFolders/{managedFolder}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The operation succeeds conditional on the managed folder's current
    /// metageneration matching the value here specified.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<serde_with::DisplayFromStr>")]
    pub if_metageneration_match: std::option::Option<i64>,

    /// The operation succeeds conditional on the managed folder's current
    /// metageneration NOT matching the value here specified.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<serde_with::DisplayFromStr>")]
    pub if_metageneration_not_match: std::option::Option<i64>,

    /// Optional. A unique identifier for this request. UUID is the recommended
    /// format, but other formats are still accepted.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetManagedFolderRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetManagedFolderRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [if_metageneration_match][crate::model::GetManagedFolderRequest::if_metageneration_match].
    pub fn set_if_metageneration_match<T: std::convert::Into<std::option::Option<i64>>>(
        mut self,
        v: T,
    ) -> Self {
        self.if_metageneration_match = v.into();
        self
    }

    /// Sets the value of [if_metageneration_not_match][crate::model::GetManagedFolderRequest::if_metageneration_not_match].
    pub fn set_if_metageneration_not_match<T: std::convert::Into<std::option::Option<i64>>>(
        mut self,
        v: T,
    ) -> Self {
        self.if_metageneration_not_match = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::GetManagedFolderRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for GetManagedFolderRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.storage.control.v2.GetManagedFolderRequest"
    }
}

/// Request message for CreateManagedFolder.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateManagedFolderRequest {
    /// Required. Name of the bucket this managed folder belongs to.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Properties of the managed folder being created.
    /// The bucket and managed folder names are specified in the `parent` and
    /// `managed_folder_id` fields. Populating these fields in `managed_folder`
    /// will result in an error.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub managed_folder: std::option::Option<crate::model::ManagedFolder>,

    /// Required. The name of the managed folder. It uses a single `/` as delimiter
    /// and leading and trailing `/` are allowed.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub managed_folder_id: std::string::String,

    /// Optional. A unique identifier for this request. UUID is the recommended
    /// format, but other formats are still accepted.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateManagedFolderRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateManagedFolderRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [managed_folder][crate::model::CreateManagedFolderRequest::managed_folder].
    pub fn set_managed_folder<
        T: std::convert::Into<std::option::Option<crate::model::ManagedFolder>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.managed_folder = v.into();
        self
    }

    /// Sets the value of [managed_folder_id][crate::model::CreateManagedFolderRequest::managed_folder_id].
    pub fn set_managed_folder_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.managed_folder_id = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateManagedFolderRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateManagedFolderRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.storage.control.v2.CreateManagedFolderRequest"
    }
}

/// DeleteManagedFolder RPC request message.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteManagedFolderRequest {
    /// Required. Name of the managed folder.
    /// Format:
    /// `projects/{project}/buckets/{bucket}/managedFolders/{managedFolder}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The operation succeeds conditional on the managed folder's current
    /// metageneration matching the value here specified.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<serde_with::DisplayFromStr>")]
    pub if_metageneration_match: std::option::Option<i64>,

    /// The operation succeeds conditional on the managed folder's current
    /// metageneration NOT matching the value here specified.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<serde_with::DisplayFromStr>")]
    pub if_metageneration_not_match: std::option::Option<i64>,

    /// Allows deletion of a managed folder even if it is not empty.
    /// A managed folder is empty if it manages no child managed folders or
    /// objects. Caller must have permission for
    /// storage.managedFolders.setIamPolicy.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub allow_non_empty: bool,

    /// Optional. A unique identifier for this request. UUID is the recommended
    /// format, but other formats are still accepted.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteManagedFolderRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteManagedFolderRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [if_metageneration_match][crate::model::DeleteManagedFolderRequest::if_metageneration_match].
    pub fn set_if_metageneration_match<T: std::convert::Into<std::option::Option<i64>>>(
        mut self,
        v: T,
    ) -> Self {
        self.if_metageneration_match = v.into();
        self
    }

    /// Sets the value of [if_metageneration_not_match][crate::model::DeleteManagedFolderRequest::if_metageneration_not_match].
    pub fn set_if_metageneration_not_match<T: std::convert::Into<std::option::Option<i64>>>(
        mut self,
        v: T,
    ) -> Self {
        self.if_metageneration_not_match = v.into();
        self
    }

    /// Sets the value of [allow_non_empty][crate::model::DeleteManagedFolderRequest::allow_non_empty].
    pub fn set_allow_non_empty<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.allow_non_empty = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteManagedFolderRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for DeleteManagedFolderRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.storage.control.v2.DeleteManagedFolderRequest"
    }
}

/// Request message for ListManagedFolders.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListManagedFoldersRequest {
    /// Required. Name of the bucket this managed folder belongs to.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. Maximum number of managed folders to return in a single response.
    /// The service will use this parameter or 1,000 items, whichever is smaller.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// Optional. A previously-returned page token representing part of the larger
    /// set of results to view.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. Filter results to match managed folders with name starting with
    /// this prefix.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub prefix: std::string::String,

    /// Optional. A unique identifier for this request. UUID is the recommended
    /// format, but other formats are still accepted.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListManagedFoldersRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListManagedFoldersRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListManagedFoldersRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListManagedFoldersRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [prefix][crate::model::ListManagedFoldersRequest::prefix].
    pub fn set_prefix<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.prefix = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::ListManagedFoldersRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for ListManagedFoldersRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.storage.control.v2.ListManagedFoldersRequest"
    }
}

/// Response message for ListManagedFolders.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListManagedFoldersResponse {
    /// The list of matching managed folders
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub managed_folders: std::vec::Vec<crate::model::ManagedFolder>,

    /// The continuation token, used to page through large result sets. Provide
    /// this value in a subsequent request to return the next page of results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListManagedFoldersResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [managed_folders][crate::model::ListManagedFoldersResponse::managed_folders].
    pub fn set_managed_folders<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ManagedFolder>,
    {
        use std::iter::Iterator;
        self.managed_folders = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [next_page_token][crate::model::ListManagedFoldersResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListManagedFoldersResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.storage.control.v2.ListManagedFoldersResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListManagedFoldersResponse {
    type PageItem = crate::model::ManagedFolder;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.managed_folders
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}
