// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

pub mod storage_control {
    use crate::Result;

    /// Common implementation for [super::super::client::StorageControl] request builders.
    #[derive(Clone, Debug)]
    pub(crate) struct RequestBuilder<R: std::default::Default> {
        stub: std::sync::Arc<dyn super::super::stub::dynamic::StorageControl>,
        request: R,
        options: gax::options::RequestOptions,
    }

    impl<R> RequestBuilder<R>
    where
        R: std::default::Default,
    {
        pub(crate) fn new(
            stub: std::sync::Arc<dyn super::super::stub::dynamic::StorageControl>,
        ) -> Self {
            Self {
                stub,
                request: R::default(),
                options: gax::options::RequestOptions::default(),
            }
        }
    }

    #[derive(Clone, Debug)]
    pub struct CreateFolder(RequestBuilder<crate::model::CreateFolderRequest>);

    impl CreateFolder {
        pub(crate) fn new(
            stub: std::sync::Arc<dyn super::super::stub::dynamic::StorageControl>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CreateFolderRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Folder> {
            (*self.0.stub)
                .create_folder(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Sets the value of [parent][crate::model::CreateFolderRequest::parent].
        ///
        /// This is a **required** field for requests.
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [folder][crate::model::CreateFolderRequest::folder].
        ///
        /// This is a **required** field for requests.
        pub fn set_folder<T: Into<std::option::Option<crate::model::Folder>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.folder = v.into();
            self
        }

        /// Sets the value of [folder_id][crate::model::CreateFolderRequest::folder_id].
        ///
        /// This is a **required** field for requests.
        pub fn set_folder_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.folder_id = v.into();
            self
        }

        /// Sets the value of [recursive][crate::model::CreateFolderRequest::recursive].
        pub fn set_recursive<T: Into<bool>>(mut self, v: T) -> Self {
            self.0.request.recursive = v.into();
            self
        }

        /// Sets the value of [request_id][crate::model::CreateFolderRequest::request_id].
        pub fn set_request_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.request_id = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for CreateFolder {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    #[derive(Clone, Debug)]
    pub struct DeleteFolder(RequestBuilder<crate::model::DeleteFolderRequest>);

    impl DeleteFolder {
        pub(crate) fn new(
            stub: std::sync::Arc<dyn super::super::stub::dynamic::StorageControl>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DeleteFolderRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<()> {
            (*self.0.stub)
                .delete_folder(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Sets the value of [name][crate::model::DeleteFolderRequest::name].
        ///
        /// This is a **required** field for requests.
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [if_metageneration_match][crate::model::DeleteFolderRequest::if_metageneration_match].
        pub fn set_if_metageneration_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_match = v.into();
            self
        }

        /// Sets the value of [if_metageneration_not_match][crate::model::DeleteFolderRequest::if_metageneration_not_match].
        pub fn set_if_metageneration_not_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_not_match = v.into();
            self
        }

        /// Sets the value of [request_id][crate::model::DeleteFolderRequest::request_id].
        pub fn set_request_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.request_id = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for DeleteFolder {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    #[derive(Clone, Debug)]
    pub struct GetFolder(RequestBuilder<crate::model::GetFolderRequest>);

    impl GetFolder {
        pub(crate) fn new(
            stub: std::sync::Arc<dyn super::super::stub::dynamic::StorageControl>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetFolderRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Folder> {
            (*self.0.stub)
                .get_folder(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Sets the value of [name][crate::model::GetFolderRequest::name].
        ///
        /// This is a **required** field for requests.
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [if_metageneration_match][crate::model::GetFolderRequest::if_metageneration_match].
        pub fn set_if_metageneration_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_match = v.into();
            self
        }

        /// Sets the value of [if_metageneration_not_match][crate::model::GetFolderRequest::if_metageneration_not_match].
        pub fn set_if_metageneration_not_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_not_match = v.into();
            self
        }

        /// Sets the value of [request_id][crate::model::GetFolderRequest::request_id].
        pub fn set_request_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.request_id = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for GetFolder {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    #[derive(Clone, Debug)]
    pub struct ListFolders(RequestBuilder<crate::model::ListFoldersRequest>);

    impl ListFolders {
        pub(crate) fn new(
            stub: std::sync::Arc<dyn super::super::stub::dynamic::StorageControl>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListFoldersRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListFoldersResponse> {
            (*self.0.stub)
                .list_folders(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Streams each page in the collection.
        pub fn by_page(
            self,
        ) -> impl gax::paginator::Paginator<crate::model::ListFoldersResponse, gax::error::Error>
        {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::internal::new_paginator(token, execute)
        }

        /// Streams each item in the collection.
        pub fn by_item(
            self,
        ) -> impl gax::paginator::ItemPaginator<crate::model::ListFoldersResponse, gax::error::Error>
        {
            use gax::paginator::Paginator;
            self.by_page().items()
        }

        /// Sets the value of [parent][crate::model::ListFoldersRequest::parent].
        ///
        /// This is a **required** field for requests.
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListFoldersRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListFoldersRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }

        /// Sets the value of [prefix][crate::model::ListFoldersRequest::prefix].
        pub fn set_prefix<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.prefix = v.into();
            self
        }

        /// Sets the value of [delimiter][crate::model::ListFoldersRequest::delimiter].
        pub fn set_delimiter<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.delimiter = v.into();
            self
        }

        /// Sets the value of [lexicographic_start][crate::model::ListFoldersRequest::lexicographic_start].
        pub fn set_lexicographic_start<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.lexicographic_start = v.into();
            self
        }

        /// Sets the value of [lexicographic_end][crate::model::ListFoldersRequest::lexicographic_end].
        pub fn set_lexicographic_end<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.lexicographic_end = v.into();
            self
        }

        /// Sets the value of [request_id][crate::model::ListFoldersRequest::request_id].
        pub fn set_request_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.request_id = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for ListFolders {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    #[derive(Clone, Debug)]
    pub struct GetStorageLayout(RequestBuilder<crate::model::GetStorageLayoutRequest>);

    impl GetStorageLayout {
        pub(crate) fn new(
            stub: std::sync::Arc<dyn super::super::stub::dynamic::StorageControl>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetStorageLayoutRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::StorageLayout> {
            (*self.0.stub)
                .get_storage_layout(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Sets the value of [name][crate::model::GetStorageLayoutRequest::name].
        ///
        /// This is a **required** field for requests.
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [prefix][crate::model::GetStorageLayoutRequest::prefix].
        pub fn set_prefix<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.prefix = v.into();
            self
        }

        /// Sets the value of [request_id][crate::model::GetStorageLayoutRequest::request_id].
        pub fn set_request_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.request_id = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for GetStorageLayout {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    #[derive(Clone, Debug)]
    pub struct CreateManagedFolder(RequestBuilder<crate::model::CreateManagedFolderRequest>);

    impl CreateManagedFolder {
        pub(crate) fn new(
            stub: std::sync::Arc<dyn super::super::stub::dynamic::StorageControl>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CreateManagedFolderRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ManagedFolder> {
            (*self.0.stub)
                .create_managed_folder(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Sets the value of [parent][crate::model::CreateManagedFolderRequest::parent].
        ///
        /// This is a **required** field for requests.
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [managed_folder][crate::model::CreateManagedFolderRequest::managed_folder].
        ///
        /// This is a **required** field for requests.
        pub fn set_managed_folder<T: Into<std::option::Option<crate::model::ManagedFolder>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.managed_folder = v.into();
            self
        }

        /// Sets the value of [managed_folder_id][crate::model::CreateManagedFolderRequest::managed_folder_id].
        ///
        /// This is a **required** field for requests.
        pub fn set_managed_folder_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.managed_folder_id = v.into();
            self
        }

        /// Sets the value of [request_id][crate::model::CreateManagedFolderRequest::request_id].
        pub fn set_request_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.request_id = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for CreateManagedFolder {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    #[derive(Clone, Debug)]
    pub struct DeleteManagedFolder(RequestBuilder<crate::model::DeleteManagedFolderRequest>);

    impl DeleteManagedFolder {
        pub(crate) fn new(
            stub: std::sync::Arc<dyn super::super::stub::dynamic::StorageControl>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DeleteManagedFolderRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<()> {
            (*self.0.stub)
                .delete_managed_folder(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Sets the value of [name][crate::model::DeleteManagedFolderRequest::name].
        ///
        /// This is a **required** field for requests.
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [if_metageneration_match][crate::model::DeleteManagedFolderRequest::if_metageneration_match].
        pub fn set_if_metageneration_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_match = v.into();
            self
        }

        /// Sets the value of [if_metageneration_not_match][crate::model::DeleteManagedFolderRequest::if_metageneration_not_match].
        pub fn set_if_metageneration_not_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_not_match = v.into();
            self
        }

        /// Sets the value of [allow_non_empty][crate::model::DeleteManagedFolderRequest::allow_non_empty].
        pub fn set_allow_non_empty<T: Into<bool>>(mut self, v: T) -> Self {
            self.0.request.allow_non_empty = v.into();
            self
        }

        /// Sets the value of [request_id][crate::model::DeleteManagedFolderRequest::request_id].
        pub fn set_request_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.request_id = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for DeleteManagedFolder {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    #[derive(Clone, Debug)]
    pub struct GetManagedFolder(RequestBuilder<crate::model::GetManagedFolderRequest>);

    impl GetManagedFolder {
        pub(crate) fn new(
            stub: std::sync::Arc<dyn super::super::stub::dynamic::StorageControl>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetManagedFolderRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ManagedFolder> {
            (*self.0.stub)
                .get_managed_folder(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Sets the value of [name][crate::model::GetManagedFolderRequest::name].
        ///
        /// This is a **required** field for requests.
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [if_metageneration_match][crate::model::GetManagedFolderRequest::if_metageneration_match].
        pub fn set_if_metageneration_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_match = v.into();
            self
        }

        /// Sets the value of [if_metageneration_not_match][crate::model::GetManagedFolderRequest::if_metageneration_not_match].
        pub fn set_if_metageneration_not_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_not_match = v.into();
            self
        }

        /// Sets the value of [request_id][crate::model::GetManagedFolderRequest::request_id].
        pub fn set_request_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.request_id = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for GetManagedFolder {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    #[derive(Clone, Debug)]
    pub struct ListManagedFolders(RequestBuilder<crate::model::ListManagedFoldersRequest>);

    impl ListManagedFolders {
        pub(crate) fn new(
            stub: std::sync::Arc<dyn super::super::stub::dynamic::StorageControl>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListManagedFoldersRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListManagedFoldersResponse> {
            (*self.0.stub)
                .list_managed_folders(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Streams each page in the collection.
        pub fn by_page(
            self,
        ) -> impl gax::paginator::Paginator<crate::model::ListManagedFoldersResponse, gax::error::Error>
        {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::internal::new_paginator(token, execute)
        }

        /// Streams each item in the collection.
        pub fn by_item(
            self,
        ) -> impl gax::paginator::ItemPaginator<
            crate::model::ListManagedFoldersResponse,
            gax::error::Error,
        > {
            use gax::paginator::Paginator;
            self.by_page().items()
        }

        /// Sets the value of [parent][crate::model::ListManagedFoldersRequest::parent].
        ///
        /// This is a **required** field for requests.
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListManagedFoldersRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListManagedFoldersRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }

        /// Sets the value of [prefix][crate::model::ListManagedFoldersRequest::prefix].
        pub fn set_prefix<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.prefix = v.into();
            self
        }

        /// Sets the value of [request_id][crate::model::ListManagedFoldersRequest::request_id].
        pub fn set_request_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.request_id = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for ListManagedFolders {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }
}
