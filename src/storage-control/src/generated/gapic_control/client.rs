// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;

/// Implements a client for the Storage Control API.
#[derive(Clone, Debug)]
pub struct StorageControl {
    inner: std::sync::Arc<dyn super::stub::dynamic::StorageControl>,
}

impl StorageControl {
    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::StorageControl + 'static,
    {
        Self {
            inner: std::sync::Arc::new(stub),
        }
    }

    pub(crate) async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> Result<std::sync::Arc<dyn super::stub::dynamic::StorageControl>> {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(std::sync::Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(std::sync::Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::StorageControl> {
        super::transport::StorageControl::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::StorageControl> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::StorageControl::new)
    }

    /// Creates a new folder. This operation is only applicable to a hierarchical
    /// namespace enabled bucket.
    pub fn create_folder(&self) -> super::builder::storage_control::CreateFolder {
        super::builder::storage_control::CreateFolder::new(self.inner.clone())
    }

    /// Permanently deletes an empty folder. This operation is only applicable to a
    /// hierarchical namespace enabled bucket.
    pub fn delete_folder(&self) -> super::builder::storage_control::DeleteFolder {
        super::builder::storage_control::DeleteFolder::new(self.inner.clone())
    }

    /// Returns metadata for the specified folder. This operation is only
    /// applicable to a hierarchical namespace enabled bucket.
    pub fn get_folder(&self) -> super::builder::storage_control::GetFolder {
        super::builder::storage_control::GetFolder::new(self.inner.clone())
    }

    /// Retrieves a list of folders. This operation is only applicable to a
    /// hierarchical namespace enabled bucket.
    pub fn list_folders(&self) -> super::builder::storage_control::ListFolders {
        super::builder::storage_control::ListFolders::new(self.inner.clone())
    }

    /// Returns the storage layout configuration for a given bucket.
    pub fn get_storage_layout(&self) -> super::builder::storage_control::GetStorageLayout {
        super::builder::storage_control::GetStorageLayout::new(self.inner.clone())
    }

    /// Creates a new managed folder.
    pub fn create_managed_folder(&self) -> super::builder::storage_control::CreateManagedFolder {
        super::builder::storage_control::CreateManagedFolder::new(self.inner.clone())
    }

    /// Permanently deletes an empty managed folder.
    pub fn delete_managed_folder(&self) -> super::builder::storage_control::DeleteManagedFolder {
        super::builder::storage_control::DeleteManagedFolder::new(self.inner.clone())
    }

    /// Returns metadata for the specified managed folder.
    pub fn get_managed_folder(&self) -> super::builder::storage_control::GetManagedFolder {
        super::builder::storage_control::GetManagedFolder::new(self.inner.clone())
    }

    /// Retrieves a list of managed folders for a given bucket.
    pub fn list_managed_folders(&self) -> super::builder::storage_control::ListManagedFolders {
        super::builder::storage_control::ListManagedFolders::new(self.inner.clone())
    }
}
