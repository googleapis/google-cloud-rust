// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

pub mod storage {
    use crate::Result;

    pub type ClientBuilder =
        gax::client_builder::ClientBuilder<client::Factory, gaxi::options::Credentials>;

    pub(crate) mod client {
        use super::super::super::client::Storage;
        pub struct Factory;
        impl gax::client_builder::internal::ClientFactory for Factory {
            type Client = Storage;
            type Credentials = gaxi::options::Credentials;
            async fn build(self, config: gaxi::options::ClientConfig) -> gax::Result<Self::Client> {
                Self::Client::new(config).await
            }
        }
    }

    /// Common implementation for [super::super::client::Storage] request builders.
    #[derive(Clone, Debug)]
    pub(crate) struct RequestBuilder<R: std::default::Default> {
        stub: std::sync::Arc<dyn super::super::stub::dynamic::Storage>,
        request: R,
        options: gax::options::RequestOptions,
    }

    impl<R> RequestBuilder<R>
    where
        R: std::default::Default,
    {
        pub(crate) fn new(stub: std::sync::Arc<dyn super::super::stub::dynamic::Storage>) -> Self {
            Self {
                stub,
                request: R::default(),
                options: gax::options::RequestOptions::default(),
            }
        }
    }

    #[derive(Clone, Debug)]
    pub struct DeleteBucket(RequestBuilder<crate::model::DeleteBucketRequest>);

    impl DeleteBucket {
        pub(crate) fn new(stub: std::sync::Arc<dyn super::super::stub::dynamic::Storage>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DeleteBucketRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<()> {
            (*self.0.stub)
                .delete_bucket(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Sets the value of [name][crate::model::DeleteBucketRequest::name].
        ///
        /// This is a **required** field for requests.
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [if_metageneration_match][crate::model::DeleteBucketRequest::if_metageneration_match].
        pub fn set_if_metageneration_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_match = v.into();
            self
        }

        /// Sets the value of [if_metageneration_not_match][crate::model::DeleteBucketRequest::if_metageneration_not_match].
        pub fn set_if_metageneration_not_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_not_match = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for DeleteBucket {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    #[derive(Clone, Debug)]
    pub struct GetBucket(RequestBuilder<crate::model::GetBucketRequest>);

    impl GetBucket {
        pub(crate) fn new(stub: std::sync::Arc<dyn super::super::stub::dynamic::Storage>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetBucketRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Bucket> {
            (*self.0.stub)
                .get_bucket(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Sets the value of [name][crate::model::GetBucketRequest::name].
        ///
        /// This is a **required** field for requests.
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [if_metageneration_match][crate::model::GetBucketRequest::if_metageneration_match].
        pub fn set_if_metageneration_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_match = v.into();
            self
        }

        /// Sets the value of [if_metageneration_not_match][crate::model::GetBucketRequest::if_metageneration_not_match].
        pub fn set_if_metageneration_not_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_not_match = v.into();
            self
        }

        /// Sets the value of [read_mask][crate::model::GetBucketRequest::read_mask].
        pub fn set_read_mask<T: Into<std::option::Option<wkt::FieldMask>>>(mut self, v: T) -> Self {
            self.0.request.read_mask = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for GetBucket {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    #[derive(Clone, Debug)]
    pub struct CreateBucket(RequestBuilder<crate::model::CreateBucketRequest>);

    impl CreateBucket {
        pub(crate) fn new(stub: std::sync::Arc<dyn super::super::stub::dynamic::Storage>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CreateBucketRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Bucket> {
            (*self.0.stub)
                .create_bucket(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Sets the value of [parent][crate::model::CreateBucketRequest::parent].
        ///
        /// This is a **required** field for requests.
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [bucket][crate::model::CreateBucketRequest::bucket].
        pub fn set_bucket<T: Into<std::option::Option<crate::model::Bucket>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.bucket = v.into();
            self
        }

        /// Sets the value of [bucket_id][crate::model::CreateBucketRequest::bucket_id].
        ///
        /// This is a **required** field for requests.
        pub fn set_bucket_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.bucket_id = v.into();
            self
        }

        /// Sets the value of [predefined_acl][crate::model::CreateBucketRequest::predefined_acl].
        pub fn set_predefined_acl<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.predefined_acl = v.into();
            self
        }

        /// Sets the value of [predefined_default_object_acl][crate::model::CreateBucketRequest::predefined_default_object_acl].
        pub fn set_predefined_default_object_acl<T: Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.predefined_default_object_acl = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for CreateBucket {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    #[derive(Clone, Debug)]
    pub struct ListBuckets(RequestBuilder<crate::model::ListBucketsRequest>);

    impl ListBuckets {
        pub(crate) fn new(stub: std::sync::Arc<dyn super::super::stub::dynamic::Storage>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListBucketsRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListBucketsResponse> {
            (*self.0.stub)
                .list_buckets(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Streams the responses back.
        pub async fn paginator(
            self,
        ) -> impl gax::paginator::Paginator<crate::model::ListBucketsResponse, gax::error::Error>
        {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::internal::new_paginator(token, execute)
        }

        /// Sets the value of [parent][crate::model::ListBucketsRequest::parent].
        ///
        /// This is a **required** field for requests.
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListBucketsRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListBucketsRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }

        /// Sets the value of [prefix][crate::model::ListBucketsRequest::prefix].
        pub fn set_prefix<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.prefix = v.into();
            self
        }

        /// Sets the value of [read_mask][crate::model::ListBucketsRequest::read_mask].
        pub fn set_read_mask<T: Into<std::option::Option<wkt::FieldMask>>>(mut self, v: T) -> Self {
            self.0.request.read_mask = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for ListBuckets {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    #[derive(Clone, Debug)]
    pub struct LockBucketRetentionPolicy(
        RequestBuilder<crate::model::LockBucketRetentionPolicyRequest>,
    );

    impl LockBucketRetentionPolicy {
        pub(crate) fn new(stub: std::sync::Arc<dyn super::super::stub::dynamic::Storage>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::LockBucketRetentionPolicyRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Bucket> {
            (*self.0.stub)
                .lock_bucket_retention_policy(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Sets the value of [bucket][crate::model::LockBucketRetentionPolicyRequest::bucket].
        ///
        /// This is a **required** field for requests.
        pub fn set_bucket<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.bucket = v.into();
            self
        }

        /// Sets the value of [if_metageneration_match][crate::model::LockBucketRetentionPolicyRequest::if_metageneration_match].
        ///
        /// This is a **required** field for requests.
        pub fn set_if_metageneration_match<T: Into<i64>>(mut self, v: T) -> Self {
            self.0.request.if_metageneration_match = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for LockBucketRetentionPolicy {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    #[derive(Clone, Debug)]
    pub struct GetIamPolicy(RequestBuilder<iam_v1::model::GetIamPolicyRequest>);

    impl GetIamPolicy {
        pub(crate) fn new(stub: std::sync::Arc<dyn super::super::stub::dynamic::Storage>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<iam_v1::model::GetIamPolicyRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<iam_v1::model::Policy> {
            (*self.0.stub)
                .get_iam_policy(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Sets the value of [resource][iam_v1::model::GetIamPolicyRequest::resource].
        ///
        /// This is a **required** field for requests.
        pub fn set_resource<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.resource = v.into();
            self
        }

        /// Sets the value of [options][iam_v1::model::GetIamPolicyRequest::options].
        pub fn set_options<T: Into<std::option::Option<iam_v1::model::GetPolicyOptions>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.options = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for GetIamPolicy {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    #[derive(Clone, Debug)]
    pub struct SetIamPolicy(RequestBuilder<iam_v1::model::SetIamPolicyRequest>);

    impl SetIamPolicy {
        pub(crate) fn new(stub: std::sync::Arc<dyn super::super::stub::dynamic::Storage>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<iam_v1::model::SetIamPolicyRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<iam_v1::model::Policy> {
            (*self.0.stub)
                .set_iam_policy(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Sets the value of [resource][iam_v1::model::SetIamPolicyRequest::resource].
        ///
        /// This is a **required** field for requests.
        pub fn set_resource<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.resource = v.into();
            self
        }

        /// Sets the value of [policy][iam_v1::model::SetIamPolicyRequest::policy].
        ///
        /// This is a **required** field for requests.
        pub fn set_policy<T: Into<std::option::Option<iam_v1::model::Policy>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.policy = v.into();
            self
        }

        /// Sets the value of [update_mask][iam_v1::model::SetIamPolicyRequest::update_mask].
        pub fn set_update_mask<T: Into<std::option::Option<wkt::FieldMask>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.update_mask = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for SetIamPolicy {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    #[derive(Clone, Debug)]
    pub struct TestIamPermissions(RequestBuilder<iam_v1::model::TestIamPermissionsRequest>);

    impl TestIamPermissions {
        pub(crate) fn new(stub: std::sync::Arc<dyn super::super::stub::dynamic::Storage>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<iam_v1::model::TestIamPermissionsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<iam_v1::model::TestIamPermissionsResponse> {
            (*self.0.stub)
                .test_iam_permissions(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Sets the value of [resource][iam_v1::model::TestIamPermissionsRequest::resource].
        ///
        /// This is a **required** field for requests.
        pub fn set_resource<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.resource = v.into();
            self
        }

        /// Sets the value of [permissions][iam_v1::model::TestIamPermissionsRequest::permissions].
        ///
        /// This is a **required** field for requests.
        pub fn set_permissions<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.0.request.permissions = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for TestIamPermissions {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    #[derive(Clone, Debug)]
    pub struct UpdateBucket(RequestBuilder<crate::model::UpdateBucketRequest>);

    impl UpdateBucket {
        pub(crate) fn new(stub: std::sync::Arc<dyn super::super::stub::dynamic::Storage>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::UpdateBucketRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Bucket> {
            (*self.0.stub)
                .update_bucket(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Sets the value of [bucket][crate::model::UpdateBucketRequest::bucket].
        ///
        /// This is a **required** field for requests.
        pub fn set_bucket<T: Into<std::option::Option<crate::model::Bucket>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.bucket = v.into();
            self
        }

        /// Sets the value of [if_metageneration_match][crate::model::UpdateBucketRequest::if_metageneration_match].
        pub fn set_if_metageneration_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_match = v.into();
            self
        }

        /// Sets the value of [if_metageneration_not_match][crate::model::UpdateBucketRequest::if_metageneration_not_match].
        pub fn set_if_metageneration_not_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_not_match = v.into();
            self
        }

        /// Sets the value of [predefined_acl][crate::model::UpdateBucketRequest::predefined_acl].
        pub fn set_predefined_acl<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.predefined_acl = v.into();
            self
        }

        /// Sets the value of [predefined_default_object_acl][crate::model::UpdateBucketRequest::predefined_default_object_acl].
        pub fn set_predefined_default_object_acl<T: Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.predefined_default_object_acl = v.into();
            self
        }

        /// Sets the value of [update_mask][crate::model::UpdateBucketRequest::update_mask].
        ///
        /// This is a **required** field for requests.
        pub fn set_update_mask<T: Into<std::option::Option<wkt::FieldMask>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.update_mask = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for UpdateBucket {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    #[derive(Clone, Debug)]
    pub struct ComposeObject(RequestBuilder<crate::model::ComposeObjectRequest>);

    impl ComposeObject {
        pub(crate) fn new(stub: std::sync::Arc<dyn super::super::stub::dynamic::Storage>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ComposeObjectRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Object> {
            (*self.0.stub)
                .compose_object(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Sets the value of [destination][crate::model::ComposeObjectRequest::destination].
        ///
        /// This is a **required** field for requests.
        pub fn set_destination<T: Into<std::option::Option<crate::model::Object>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.destination = v.into();
            self
        }

        /// Sets the value of [source_objects][crate::model::ComposeObjectRequest::source_objects].
        pub fn set_source_objects<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::compose_object_request::SourceObject>,
        {
            use std::iter::Iterator;
            self.0.request.source_objects = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [destination_predefined_acl][crate::model::ComposeObjectRequest::destination_predefined_acl].
        pub fn set_destination_predefined_acl<T: Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.destination_predefined_acl = v.into();
            self
        }

        /// Sets the value of [if_generation_match][crate::model::ComposeObjectRequest::if_generation_match].
        pub fn set_if_generation_match<T: Into<std::option::Option<i64>>>(mut self, v: T) -> Self {
            self.0.request.if_generation_match = v.into();
            self
        }

        /// Sets the value of [if_metageneration_match][crate::model::ComposeObjectRequest::if_metageneration_match].
        pub fn set_if_metageneration_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_match = v.into();
            self
        }

        /// Sets the value of [kms_key][crate::model::ComposeObjectRequest::kms_key].
        pub fn set_kms_key<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.kms_key = v.into();
            self
        }

        /// Sets the value of [common_object_request_params][crate::model::ComposeObjectRequest::common_object_request_params].
        pub fn set_common_object_request_params<
            T: Into<std::option::Option<crate::model::CommonObjectRequestParams>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.common_object_request_params = v.into();
            self
        }

        /// Sets the value of [object_checksums][crate::model::ComposeObjectRequest::object_checksums].
        pub fn set_object_checksums<T: Into<std::option::Option<crate::model::ObjectChecksums>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.object_checksums = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for ComposeObject {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    #[derive(Clone, Debug)]
    pub struct DeleteObject(RequestBuilder<crate::model::DeleteObjectRequest>);

    impl DeleteObject {
        pub(crate) fn new(stub: std::sync::Arc<dyn super::super::stub::dynamic::Storage>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DeleteObjectRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<()> {
            (*self.0.stub)
                .delete_object(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Sets the value of [bucket][crate::model::DeleteObjectRequest::bucket].
        ///
        /// This is a **required** field for requests.
        pub fn set_bucket<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.bucket = v.into();
            self
        }

        /// Sets the value of [object][crate::model::DeleteObjectRequest::object].
        ///
        /// This is a **required** field for requests.
        pub fn set_object<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.object = v.into();
            self
        }

        /// Sets the value of [generation][crate::model::DeleteObjectRequest::generation].
        pub fn set_generation<T: Into<i64>>(mut self, v: T) -> Self {
            self.0.request.generation = v.into();
            self
        }

        /// Sets the value of [if_generation_match][crate::model::DeleteObjectRequest::if_generation_match].
        pub fn set_if_generation_match<T: Into<std::option::Option<i64>>>(mut self, v: T) -> Self {
            self.0.request.if_generation_match = v.into();
            self
        }

        /// Sets the value of [if_generation_not_match][crate::model::DeleteObjectRequest::if_generation_not_match].
        pub fn set_if_generation_not_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_generation_not_match = v.into();
            self
        }

        /// Sets the value of [if_metageneration_match][crate::model::DeleteObjectRequest::if_metageneration_match].
        pub fn set_if_metageneration_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_match = v.into();
            self
        }

        /// Sets the value of [if_metageneration_not_match][crate::model::DeleteObjectRequest::if_metageneration_not_match].
        pub fn set_if_metageneration_not_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_not_match = v.into();
            self
        }

        /// Sets the value of [common_object_request_params][crate::model::DeleteObjectRequest::common_object_request_params].
        pub fn set_common_object_request_params<
            T: Into<std::option::Option<crate::model::CommonObjectRequestParams>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.common_object_request_params = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for DeleteObject {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    #[derive(Clone, Debug)]
    pub struct RestoreObject(RequestBuilder<crate::model::RestoreObjectRequest>);

    impl RestoreObject {
        pub(crate) fn new(stub: std::sync::Arc<dyn super::super::stub::dynamic::Storage>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::RestoreObjectRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Object> {
            (*self.0.stub)
                .restore_object(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Sets the value of [bucket][crate::model::RestoreObjectRequest::bucket].
        ///
        /// This is a **required** field for requests.
        pub fn set_bucket<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.bucket = v.into();
            self
        }

        /// Sets the value of [object][crate::model::RestoreObjectRequest::object].
        ///
        /// This is a **required** field for requests.
        pub fn set_object<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.object = v.into();
            self
        }

        /// Sets the value of [generation][crate::model::RestoreObjectRequest::generation].
        ///
        /// This is a **required** field for requests.
        pub fn set_generation<T: Into<i64>>(mut self, v: T) -> Self {
            self.0.request.generation = v.into();
            self
        }

        /// Sets the value of [restore_token][crate::model::RestoreObjectRequest::restore_token].
        pub fn set_restore_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.restore_token = v.into();
            self
        }

        /// Sets the value of [if_generation_match][crate::model::RestoreObjectRequest::if_generation_match].
        pub fn set_if_generation_match<T: Into<std::option::Option<i64>>>(mut self, v: T) -> Self {
            self.0.request.if_generation_match = v.into();
            self
        }

        /// Sets the value of [if_generation_not_match][crate::model::RestoreObjectRequest::if_generation_not_match].
        pub fn set_if_generation_not_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_generation_not_match = v.into();
            self
        }

        /// Sets the value of [if_metageneration_match][crate::model::RestoreObjectRequest::if_metageneration_match].
        pub fn set_if_metageneration_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_match = v.into();
            self
        }

        /// Sets the value of [if_metageneration_not_match][crate::model::RestoreObjectRequest::if_metageneration_not_match].
        pub fn set_if_metageneration_not_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_not_match = v.into();
            self
        }

        /// Sets the value of [copy_source_acl][crate::model::RestoreObjectRequest::copy_source_acl].
        pub fn set_copy_source_acl<T: Into<std::option::Option<bool>>>(mut self, v: T) -> Self {
            self.0.request.copy_source_acl = v.into();
            self
        }

        /// Sets the value of [common_object_request_params][crate::model::RestoreObjectRequest::common_object_request_params].
        pub fn set_common_object_request_params<
            T: Into<std::option::Option<crate::model::CommonObjectRequestParams>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.common_object_request_params = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for RestoreObject {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    #[derive(Clone, Debug)]
    pub struct GetObject(RequestBuilder<crate::model::GetObjectRequest>);

    impl GetObject {
        pub(crate) fn new(stub: std::sync::Arc<dyn super::super::stub::dynamic::Storage>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetObjectRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Object> {
            (*self.0.stub)
                .get_object(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Sets the value of [bucket][crate::model::GetObjectRequest::bucket].
        ///
        /// This is a **required** field for requests.
        pub fn set_bucket<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.bucket = v.into();
            self
        }

        /// Sets the value of [object][crate::model::GetObjectRequest::object].
        ///
        /// This is a **required** field for requests.
        pub fn set_object<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.object = v.into();
            self
        }

        /// Sets the value of [generation][crate::model::GetObjectRequest::generation].
        pub fn set_generation<T: Into<i64>>(mut self, v: T) -> Self {
            self.0.request.generation = v.into();
            self
        }

        /// Sets the value of [soft_deleted][crate::model::GetObjectRequest::soft_deleted].
        pub fn set_soft_deleted<T: Into<std::option::Option<bool>>>(mut self, v: T) -> Self {
            self.0.request.soft_deleted = v.into();
            self
        }

        /// Sets the value of [if_generation_match][crate::model::GetObjectRequest::if_generation_match].
        pub fn set_if_generation_match<T: Into<std::option::Option<i64>>>(mut self, v: T) -> Self {
            self.0.request.if_generation_match = v.into();
            self
        }

        /// Sets the value of [if_generation_not_match][crate::model::GetObjectRequest::if_generation_not_match].
        pub fn set_if_generation_not_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_generation_not_match = v.into();
            self
        }

        /// Sets the value of [if_metageneration_match][crate::model::GetObjectRequest::if_metageneration_match].
        pub fn set_if_metageneration_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_match = v.into();
            self
        }

        /// Sets the value of [if_metageneration_not_match][crate::model::GetObjectRequest::if_metageneration_not_match].
        pub fn set_if_metageneration_not_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_not_match = v.into();
            self
        }

        /// Sets the value of [common_object_request_params][crate::model::GetObjectRequest::common_object_request_params].
        pub fn set_common_object_request_params<
            T: Into<std::option::Option<crate::model::CommonObjectRequestParams>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.common_object_request_params = v.into();
            self
        }

        /// Sets the value of [read_mask][crate::model::GetObjectRequest::read_mask].
        pub fn set_read_mask<T: Into<std::option::Option<wkt::FieldMask>>>(mut self, v: T) -> Self {
            self.0.request.read_mask = v.into();
            self
        }

        /// Sets the value of [restore_token][crate::model::GetObjectRequest::restore_token].
        pub fn set_restore_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.restore_token = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for GetObject {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    #[derive(Clone, Debug)]
    pub struct UpdateObject(RequestBuilder<crate::model::UpdateObjectRequest>);

    impl UpdateObject {
        pub(crate) fn new(stub: std::sync::Arc<dyn super::super::stub::dynamic::Storage>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::UpdateObjectRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Object> {
            (*self.0.stub)
                .update_object(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Sets the value of [object][crate::model::UpdateObjectRequest::object].
        ///
        /// This is a **required** field for requests.
        pub fn set_object<T: Into<std::option::Option<crate::model::Object>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.object = v.into();
            self
        }

        /// Sets the value of [if_generation_match][crate::model::UpdateObjectRequest::if_generation_match].
        pub fn set_if_generation_match<T: Into<std::option::Option<i64>>>(mut self, v: T) -> Self {
            self.0.request.if_generation_match = v.into();
            self
        }

        /// Sets the value of [if_generation_not_match][crate::model::UpdateObjectRequest::if_generation_not_match].
        pub fn set_if_generation_not_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_generation_not_match = v.into();
            self
        }

        /// Sets the value of [if_metageneration_match][crate::model::UpdateObjectRequest::if_metageneration_match].
        pub fn set_if_metageneration_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_match = v.into();
            self
        }

        /// Sets the value of [if_metageneration_not_match][crate::model::UpdateObjectRequest::if_metageneration_not_match].
        pub fn set_if_metageneration_not_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_not_match = v.into();
            self
        }

        /// Sets the value of [predefined_acl][crate::model::UpdateObjectRequest::predefined_acl].
        pub fn set_predefined_acl<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.predefined_acl = v.into();
            self
        }

        /// Sets the value of [update_mask][crate::model::UpdateObjectRequest::update_mask].
        ///
        /// This is a **required** field for requests.
        pub fn set_update_mask<T: Into<std::option::Option<wkt::FieldMask>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.update_mask = v.into();
            self
        }

        /// Sets the value of [common_object_request_params][crate::model::UpdateObjectRequest::common_object_request_params].
        pub fn set_common_object_request_params<
            T: Into<std::option::Option<crate::model::CommonObjectRequestParams>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.common_object_request_params = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for UpdateObject {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    #[derive(Clone, Debug)]
    pub struct ListObjects(RequestBuilder<crate::model::ListObjectsRequest>);

    impl ListObjects {
        pub(crate) fn new(stub: std::sync::Arc<dyn super::super::stub::dynamic::Storage>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListObjectsRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListObjectsResponse> {
            (*self.0.stub)
                .list_objects(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Streams the responses back.
        pub async fn paginator(
            self,
        ) -> impl gax::paginator::Paginator<crate::model::ListObjectsResponse, gax::error::Error>
        {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::internal::new_paginator(token, execute)
        }

        /// Sets the value of [parent][crate::model::ListObjectsRequest::parent].
        ///
        /// This is a **required** field for requests.
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListObjectsRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListObjectsRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }

        /// Sets the value of [delimiter][crate::model::ListObjectsRequest::delimiter].
        pub fn set_delimiter<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.delimiter = v.into();
            self
        }

        /// Sets the value of [include_trailing_delimiter][crate::model::ListObjectsRequest::include_trailing_delimiter].
        pub fn set_include_trailing_delimiter<T: Into<bool>>(mut self, v: T) -> Self {
            self.0.request.include_trailing_delimiter = v.into();
            self
        }

        /// Sets the value of [prefix][crate::model::ListObjectsRequest::prefix].
        pub fn set_prefix<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.prefix = v.into();
            self
        }

        /// Sets the value of [versions][crate::model::ListObjectsRequest::versions].
        pub fn set_versions<T: Into<bool>>(mut self, v: T) -> Self {
            self.0.request.versions = v.into();
            self
        }

        /// Sets the value of [read_mask][crate::model::ListObjectsRequest::read_mask].
        pub fn set_read_mask<T: Into<std::option::Option<wkt::FieldMask>>>(mut self, v: T) -> Self {
            self.0.request.read_mask = v.into();
            self
        }

        /// Sets the value of [lexicographic_start][crate::model::ListObjectsRequest::lexicographic_start].
        pub fn set_lexicographic_start<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.lexicographic_start = v.into();
            self
        }

        /// Sets the value of [lexicographic_end][crate::model::ListObjectsRequest::lexicographic_end].
        pub fn set_lexicographic_end<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.lexicographic_end = v.into();
            self
        }

        /// Sets the value of [soft_deleted][crate::model::ListObjectsRequest::soft_deleted].
        pub fn set_soft_deleted<T: Into<bool>>(mut self, v: T) -> Self {
            self.0.request.soft_deleted = v.into();
            self
        }

        /// Sets the value of [include_folders_as_prefixes][crate::model::ListObjectsRequest::include_folders_as_prefixes].
        pub fn set_include_folders_as_prefixes<T: Into<bool>>(mut self, v: T) -> Self {
            self.0.request.include_folders_as_prefixes = v.into();
            self
        }

        /// Sets the value of [match_glob][crate::model::ListObjectsRequest::match_glob].
        pub fn set_match_glob<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.match_glob = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for ListObjects {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    #[derive(Clone, Debug)]
    pub struct RewriteObject(RequestBuilder<crate::model::RewriteObjectRequest>);

    impl RewriteObject {
        pub(crate) fn new(stub: std::sync::Arc<dyn super::super::stub::dynamic::Storage>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::RewriteObjectRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::RewriteResponse> {
            (*self.0.stub)
                .rewrite_object(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Sets the value of [destination_name][crate::model::RewriteObjectRequest::destination_name].
        ///
        /// This is a **required** field for requests.
        pub fn set_destination_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.destination_name = v.into();
            self
        }

        /// Sets the value of [destination_bucket][crate::model::RewriteObjectRequest::destination_bucket].
        ///
        /// This is a **required** field for requests.
        pub fn set_destination_bucket<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.destination_bucket = v.into();
            self
        }

        /// Sets the value of [destination_kms_key][crate::model::RewriteObjectRequest::destination_kms_key].
        pub fn set_destination_kms_key<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.destination_kms_key = v.into();
            self
        }

        /// Sets the value of [destination][crate::model::RewriteObjectRequest::destination].
        pub fn set_destination<T: Into<std::option::Option<crate::model::Object>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.destination = v.into();
            self
        }

        /// Sets the value of [source_bucket][crate::model::RewriteObjectRequest::source_bucket].
        ///
        /// This is a **required** field for requests.
        pub fn set_source_bucket<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.source_bucket = v.into();
            self
        }

        /// Sets the value of [source_object][crate::model::RewriteObjectRequest::source_object].
        ///
        /// This is a **required** field for requests.
        pub fn set_source_object<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.source_object = v.into();
            self
        }

        /// Sets the value of [source_generation][crate::model::RewriteObjectRequest::source_generation].
        pub fn set_source_generation<T: Into<i64>>(mut self, v: T) -> Self {
            self.0.request.source_generation = v.into();
            self
        }

        /// Sets the value of [rewrite_token][crate::model::RewriteObjectRequest::rewrite_token].
        pub fn set_rewrite_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.rewrite_token = v.into();
            self
        }

        /// Sets the value of [destination_predefined_acl][crate::model::RewriteObjectRequest::destination_predefined_acl].
        pub fn set_destination_predefined_acl<T: Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.destination_predefined_acl = v.into();
            self
        }

        /// Sets the value of [if_generation_match][crate::model::RewriteObjectRequest::if_generation_match].
        pub fn set_if_generation_match<T: Into<std::option::Option<i64>>>(mut self, v: T) -> Self {
            self.0.request.if_generation_match = v.into();
            self
        }

        /// Sets the value of [if_generation_not_match][crate::model::RewriteObjectRequest::if_generation_not_match].
        pub fn set_if_generation_not_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_generation_not_match = v.into();
            self
        }

        /// Sets the value of [if_metageneration_match][crate::model::RewriteObjectRequest::if_metageneration_match].
        pub fn set_if_metageneration_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_match = v.into();
            self
        }

        /// Sets the value of [if_metageneration_not_match][crate::model::RewriteObjectRequest::if_metageneration_not_match].
        pub fn set_if_metageneration_not_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_not_match = v.into();
            self
        }

        /// Sets the value of [if_source_generation_match][crate::model::RewriteObjectRequest::if_source_generation_match].
        pub fn set_if_source_generation_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_source_generation_match = v.into();
            self
        }

        /// Sets the value of [if_source_generation_not_match][crate::model::RewriteObjectRequest::if_source_generation_not_match].
        pub fn set_if_source_generation_not_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_source_generation_not_match = v.into();
            self
        }

        /// Sets the value of [if_source_metageneration_match][crate::model::RewriteObjectRequest::if_source_metageneration_match].
        pub fn set_if_source_metageneration_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_source_metageneration_match = v.into();
            self
        }

        /// Sets the value of [if_source_metageneration_not_match][crate::model::RewriteObjectRequest::if_source_metageneration_not_match].
        pub fn set_if_source_metageneration_not_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_source_metageneration_not_match = v.into();
            self
        }

        /// Sets the value of [max_bytes_rewritten_per_call][crate::model::RewriteObjectRequest::max_bytes_rewritten_per_call].
        pub fn set_max_bytes_rewritten_per_call<T: Into<i64>>(mut self, v: T) -> Self {
            self.0.request.max_bytes_rewritten_per_call = v.into();
            self
        }

        /// Sets the value of [copy_source_encryption_algorithm][crate::model::RewriteObjectRequest::copy_source_encryption_algorithm].
        pub fn set_copy_source_encryption_algorithm<T: Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.copy_source_encryption_algorithm = v.into();
            self
        }

        /// Sets the value of [copy_source_encryption_key_bytes][crate::model::RewriteObjectRequest::copy_source_encryption_key_bytes].
        pub fn set_copy_source_encryption_key_bytes<T: Into<::bytes::Bytes>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.copy_source_encryption_key_bytes = v.into();
            self
        }

        /// Sets the value of [copy_source_encryption_key_sha256_bytes][crate::model::RewriteObjectRequest::copy_source_encryption_key_sha256_bytes].
        pub fn set_copy_source_encryption_key_sha256_bytes<T: Into<::bytes::Bytes>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.copy_source_encryption_key_sha256_bytes = v.into();
            self
        }

        /// Sets the value of [common_object_request_params][crate::model::RewriteObjectRequest::common_object_request_params].
        pub fn set_common_object_request_params<
            T: Into<std::option::Option<crate::model::CommonObjectRequestParams>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.common_object_request_params = v.into();
            self
        }

        /// Sets the value of [object_checksums][crate::model::RewriteObjectRequest::object_checksums].
        pub fn set_object_checksums<T: Into<std::option::Option<crate::model::ObjectChecksums>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.object_checksums = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for RewriteObject {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    #[derive(Clone, Debug)]
    pub struct MoveObject(RequestBuilder<crate::model::MoveObjectRequest>);

    impl MoveObject {
        pub(crate) fn new(stub: std::sync::Arc<dyn super::super::stub::dynamic::Storage>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::MoveObjectRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Object> {
            (*self.0.stub)
                .move_object(self.0.request, self.0.options)
                .await
                .map(gax::response::Response::into_body)
        }

        /// Sets the value of [bucket][crate::model::MoveObjectRequest::bucket].
        ///
        /// This is a **required** field for requests.
        pub fn set_bucket<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.bucket = v.into();
            self
        }

        /// Sets the value of [source_object][crate::model::MoveObjectRequest::source_object].
        ///
        /// This is a **required** field for requests.
        pub fn set_source_object<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.source_object = v.into();
            self
        }

        /// Sets the value of [destination_object][crate::model::MoveObjectRequest::destination_object].
        ///
        /// This is a **required** field for requests.
        pub fn set_destination_object<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.destination_object = v.into();
            self
        }

        /// Sets the value of [if_source_generation_match][crate::model::MoveObjectRequest::if_source_generation_match].
        pub fn set_if_source_generation_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_source_generation_match = v.into();
            self
        }

        /// Sets the value of [if_source_generation_not_match][crate::model::MoveObjectRequest::if_source_generation_not_match].
        pub fn set_if_source_generation_not_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_source_generation_not_match = v.into();
            self
        }

        /// Sets the value of [if_source_metageneration_match][crate::model::MoveObjectRequest::if_source_metageneration_match].
        pub fn set_if_source_metageneration_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_source_metageneration_match = v.into();
            self
        }

        /// Sets the value of [if_source_metageneration_not_match][crate::model::MoveObjectRequest::if_source_metageneration_not_match].
        pub fn set_if_source_metageneration_not_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_source_metageneration_not_match = v.into();
            self
        }

        /// Sets the value of [if_generation_match][crate::model::MoveObjectRequest::if_generation_match].
        pub fn set_if_generation_match<T: Into<std::option::Option<i64>>>(mut self, v: T) -> Self {
            self.0.request.if_generation_match = v.into();
            self
        }

        /// Sets the value of [if_generation_not_match][crate::model::MoveObjectRequest::if_generation_not_match].
        pub fn set_if_generation_not_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_generation_not_match = v.into();
            self
        }

        /// Sets the value of [if_metageneration_match][crate::model::MoveObjectRequest::if_metageneration_match].
        pub fn set_if_metageneration_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_match = v.into();
            self
        }

        /// Sets the value of [if_metageneration_not_match][crate::model::MoveObjectRequest::if_metageneration_not_match].
        pub fn set_if_metageneration_not_match<T: Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.if_metageneration_not_match = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for MoveObject {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }
}
