// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

/// A test message for `enum` fields.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithEnum {
    /// A singular field.
    pub singular: crate::generated::message_with_enum::TestEnum,

    /// An optional field.
    pub optional: std::option::Option<crate::generated::message_with_enum::TestEnum>,

    /// A repeated field.
    pub repeated: std::vec::Vec<crate::generated::message_with_enum::TestEnum>,

    /// A map field, enums cannot be keys. We only need to test them as values.
    pub map: std::collections::HashMap<
        std::string::String,
        crate::generated::message_with_enum::TestEnum,
    >,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithEnum {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithEnum::singular].
    pub fn set_singular<T: std::convert::Into<crate::generated::message_with_enum::TestEnum>>(
        mut self,
        v: T,
    ) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::generated::MessageWithEnum::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::generated::message_with_enum::TestEnum>,
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::generated::MessageWithEnum::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::generated::message_with_enum::TestEnum>,
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithEnum::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::generated::message_with_enum::TestEnum>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::generated::MessageWithEnum::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::generated::message_with_enum::TestEnum>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithEnum {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithEnum"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithEnum {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __optional,
            __repeated,
            __map,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithEnum")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "optional" => Ok(__FieldTag::__optional),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "map" => Ok(__FieldTag::__map),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithEnum;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithEnum")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            result.singular =
                                map.next_value::<std::option::Option<
                                    crate::generated::message_with_enum::TestEnum,
                                >>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__optional => {
                            if !fields.insert(__FieldTag::__optional) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for optional",
                                ));
                            }
                            result.optional = map.next_value::<std::option::Option<
                                crate::generated::message_with_enum::TestEnum,
                            >>()?;
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            result.repeated = map
                                .next_value::<std::option::Option<
                                    std::vec::Vec<crate::generated::message_with_enum::TestEnum>,
                                >>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__map => {
                            if !fields.insert(__FieldTag::__map) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map",
                                ));
                            }
                            result.map = map
                                .next_value::<std::option::Option<
                                    std::collections::HashMap<
                                        std::string::String,
                                        crate::generated::message_with_enum::TestEnum,
                                    >,
                                >>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithEnum {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if !wkt::internal::is_default(&self.singular) {
            state.serialize_entry("singular", &self.singular)?;
        }
        if self.optional.is_some() {
            state.serialize_entry("optional", &self.optional)?;
        }
        if !self.repeated.is_empty() {
            state.serialize_entry("repeated", &self.repeated)?;
        }
        if !self.map.is_empty() {
            state.serialize_entry("map", &self.map)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// Defines additional types related to [MessageWithEnum].
pub mod message_with_enum {
    #[allow(unused_imports)]
    use super::*;

    /// The enum type
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum TestEnum {
        /// Open enums require a default value of `0`.
        Unspecified,
        /// A test value.
        Red,
        /// A test value.
        Green,
        /// A test value.
        Blue,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [TestEnum::value] or
        /// [TestEnum::name].
        UnknownValue(test_enum::UnknownValue),
    }

    #[doc(hidden)]
    pub mod test_enum {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl TestEnum {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Red => std::option::Option::Some(1),
                Self::Green => std::option::Option::Some(2),
                Self::Blue => std::option::Option::Some(3),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("TEST_ENUM_UNSPECIFIED"),
                Self::Red => std::option::Option::Some("RED"),
                Self::Green => std::option::Option::Some("GREEN"),
                Self::Blue => std::option::Option::Some("BLUE"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for TestEnum {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for TestEnum {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for TestEnum {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Red,
                2 => Self::Green,
                3 => Self::Blue,
                _ => Self::UnknownValue(test_enum::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for TestEnum {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "TEST_ENUM_UNSPECIFIED" => Self::Unspecified,
                "RED" => Self::Red,
                "GREEN" => Self::Green,
                "BLUE" => Self::Blue,
                _ => Self::UnknownValue(test_enum::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for TestEnum {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Red => serializer.serialize_i32(1),
                Self::Green => serializer.serialize_i32(2),
                Self::Blue => serializer.serialize_i32(3),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for TestEnum {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<TestEnum>::new(
                ".google.rust.sdk.test.MessageWithEnum.TestEnum",
            ))
        }
    }
}

/// A message with several interesting `oneof` fields.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithOneOf {
    pub single_string: std::option::Option<crate::generated::message_with_one_of::SingleString>,

    pub two_strings: std::option::Option<crate::generated::message_with_one_of::TwoStrings>,

    pub one_message: std::option::Option<crate::generated::message_with_one_of::OneMessage>,

    pub mixed: std::option::Option<crate::generated::message_with_one_of::Mixed>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithOneOf {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [single_string][crate::generated::MessageWithOneOf::single_string].
    ///
    /// Note that all the setters affecting `single_string` are mutually
    /// exclusive.
    pub fn set_single_string<
        T: std::convert::Into<
                std::option::Option<crate::generated::message_with_one_of::SingleString>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.single_string = v.into();
        self
    }

    /// The value of [single_string][crate::generated::MessageWithOneOf::single_string]
    /// if it holds a `StringContents`, `None` if the field is not set or
    /// holds a different branch.
    pub fn string_contents(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.single_string.as_ref().and_then(|v| match v {
            crate::generated::message_with_one_of::SingleString::StringContents(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [single_string][crate::generated::MessageWithOneOf::single_string]
    /// to hold a `StringContents`.
    ///
    /// Note that all the setters affecting `single_string` are
    /// mutually exclusive.
    pub fn set_string_contents<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.single_string = std::option::Option::Some(
            crate::generated::message_with_one_of::SingleString::StringContents(v.into()),
        );
        self
    }

    /// Sets the value of [two_strings][crate::generated::MessageWithOneOf::two_strings].
    ///
    /// Note that all the setters affecting `two_strings` are mutually
    /// exclusive.
    pub fn set_two_strings<
        T: std::convert::Into<std::option::Option<crate::generated::message_with_one_of::TwoStrings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.two_strings = v.into();
        self
    }

    /// The value of [two_strings][crate::generated::MessageWithOneOf::two_strings]
    /// if it holds a `StringContentsOne`, `None` if the field is not set or
    /// holds a different branch.
    pub fn string_contents_one(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.two_strings.as_ref().and_then(|v| match v {
            crate::generated::message_with_one_of::TwoStrings::StringContentsOne(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [two_strings][crate::generated::MessageWithOneOf::two_strings]
    /// to hold a `StringContentsOne`.
    ///
    /// Note that all the setters affecting `two_strings` are
    /// mutually exclusive.
    pub fn set_string_contents_one<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.two_strings = std::option::Option::Some(
            crate::generated::message_with_one_of::TwoStrings::StringContentsOne(v.into()),
        );
        self
    }

    /// The value of [two_strings][crate::generated::MessageWithOneOf::two_strings]
    /// if it holds a `StringContentsTwo`, `None` if the field is not set or
    /// holds a different branch.
    pub fn string_contents_two(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.two_strings.as_ref().and_then(|v| match v {
            crate::generated::message_with_one_of::TwoStrings::StringContentsTwo(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [two_strings][crate::generated::MessageWithOneOf::two_strings]
    /// to hold a `StringContentsTwo`.
    ///
    /// Note that all the setters affecting `two_strings` are
    /// mutually exclusive.
    pub fn set_string_contents_two<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.two_strings = std::option::Option::Some(
            crate::generated::message_with_one_of::TwoStrings::StringContentsTwo(v.into()),
        );
        self
    }

    /// Sets the value of [one_message][crate::generated::MessageWithOneOf::one_message].
    ///
    /// Note that all the setters affecting `one_message` are mutually
    /// exclusive.
    pub fn set_one_message<
        T: std::convert::Into<std::option::Option<crate::generated::message_with_one_of::OneMessage>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.one_message = v.into();
        self
    }

    /// The value of [one_message][crate::generated::MessageWithOneOf::one_message]
    /// if it holds a `MessageValue`, `None` if the field is not set or
    /// holds a different branch.
    pub fn message_value(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::generated::message_with_one_of::Message>> {
        #[allow(unreachable_patterns)]
        self.one_message.as_ref().and_then(|v| match v {
            crate::generated::message_with_one_of::OneMessage::MessageValue(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [one_message][crate::generated::MessageWithOneOf::one_message]
    /// to hold a `MessageValue`.
    ///
    /// Note that all the setters affecting `one_message` are
    /// mutually exclusive.
    pub fn set_message_value<
        T: std::convert::Into<std::boxed::Box<crate::generated::message_with_one_of::Message>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.one_message = std::option::Option::Some(
            crate::generated::message_with_one_of::OneMessage::MessageValue(v.into()),
        );
        self
    }

    /// Sets the value of [mixed][crate::generated::MessageWithOneOf::mixed].
    ///
    /// Note that all the setters affecting `mixed` are mutually
    /// exclusive.
    pub fn set_mixed<
        T: std::convert::Into<std::option::Option<crate::generated::message_with_one_of::Mixed>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.mixed = v.into();
        self
    }

    /// The value of [mixed][crate::generated::MessageWithOneOf::mixed]
    /// if it holds a `AnotherMessage`, `None` if the field is not set or
    /// holds a different branch.
    pub fn another_message(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::generated::message_with_one_of::Message>> {
        #[allow(unreachable_patterns)]
        self.mixed.as_ref().and_then(|v| match v {
            crate::generated::message_with_one_of::Mixed::AnotherMessage(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [mixed][crate::generated::MessageWithOneOf::mixed]
    /// to hold a `AnotherMessage`.
    ///
    /// Note that all the setters affecting `mixed` are
    /// mutually exclusive.
    pub fn set_another_message<
        T: std::convert::Into<std::boxed::Box<crate::generated::message_with_one_of::Message>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.mixed = std::option::Option::Some(
            crate::generated::message_with_one_of::Mixed::AnotherMessage(v.into()),
        );
        self
    }

    /// The value of [mixed][crate::generated::MessageWithOneOf::mixed]
    /// if it holds a `String`, `None` if the field is not set or
    /// holds a different branch.
    pub fn string(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.mixed.as_ref().and_then(|v| match v {
            crate::generated::message_with_one_of::Mixed::String(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [mixed][crate::generated::MessageWithOneOf::mixed]
    /// to hold a `String`.
    ///
    /// Note that all the setters affecting `mixed` are
    /// mutually exclusive.
    pub fn set_string<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.mixed = std::option::Option::Some(
            crate::generated::message_with_one_of::Mixed::String(v.into()),
        );
        self
    }

    /// The value of [mixed][crate::generated::MessageWithOneOf::mixed]
    /// if it holds a `Duration`, `None` if the field is not set or
    /// holds a different branch.
    pub fn duration(&self) -> std::option::Option<&std::boxed::Box<wkt::Duration>> {
        #[allow(unreachable_patterns)]
        self.mixed.as_ref().and_then(|v| match v {
            crate::generated::message_with_one_of::Mixed::Duration(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [mixed][crate::generated::MessageWithOneOf::mixed]
    /// to hold a `Duration`.
    ///
    /// Note that all the setters affecting `mixed` are
    /// mutually exclusive.
    pub fn set_duration<T: std::convert::Into<std::boxed::Box<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.mixed = std::option::Option::Some(
            crate::generated::message_with_one_of::Mixed::Duration(v.into()),
        );
        self
    }
}

impl wkt::message::Message for MessageWithOneOf {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithOneOf"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithOneOf {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __string_contents,
            __string_contents_one,
            __string_contents_two,
            __message_value,
            __another_message,
            __string,
            __duration,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithOneOf")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "stringContents" => Ok(__FieldTag::__string_contents),
                            "string_contents" => Ok(__FieldTag::__string_contents),
                            "stringContentsOne" => Ok(__FieldTag::__string_contents_one),
                            "string_contents_one" => Ok(__FieldTag::__string_contents_one),
                            "stringContentsTwo" => Ok(__FieldTag::__string_contents_two),
                            "string_contents_two" => Ok(__FieldTag::__string_contents_two),
                            "messageValue" => Ok(__FieldTag::__message_value),
                            "message_value" => Ok(__FieldTag::__message_value),
                            "anotherMessage" => Ok(__FieldTag::__another_message),
                            "another_message" => Ok(__FieldTag::__another_message),
                            "string" => Ok(__FieldTag::__string),
                            "duration" => Ok(__FieldTag::__duration),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithOneOf;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithOneOf")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__string_contents => {
                            if !fields.insert(__FieldTag::__string_contents) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for string_contents",
                                ));
                            }
                            if result.single_string.is_some() {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for `single_string`, a oneof with full ID .google.rust.sdk.test.MessageWithOneOf.string_contents, latest field was stringContents",
                                ));
                            }
                            result.single_string = std::option::Option::Some(
                                crate::generated::message_with_one_of::SingleString::StringContents(
                                    map.next_value::<std::option::Option<std::string::String>>()?
                                        .unwrap_or_default(),
                                ),
                            );
                        }
                        __FieldTag::__string_contents_one => {
                            if !fields.insert(__FieldTag::__string_contents_one) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for string_contents_one",
                                ));
                            }
                            if result.two_strings.is_some() {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for `two_strings`, a oneof with full ID .google.rust.sdk.test.MessageWithOneOf.string_contents_one, latest field was stringContentsOne",
                                ));
                            }
                            result.two_strings = std::option::Option::Some(
                                crate::generated::message_with_one_of::TwoStrings::StringContentsOne(
                                    map.next_value::<std::option::Option<std::string::String>>()?.unwrap_or_default()
                                ),
                            );
                        }
                        __FieldTag::__string_contents_two => {
                            if !fields.insert(__FieldTag::__string_contents_two) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for string_contents_two",
                                ));
                            }
                            if result.two_strings.is_some() {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for `two_strings`, a oneof with full ID .google.rust.sdk.test.MessageWithOneOf.string_contents_two, latest field was stringContentsTwo",
                                ));
                            }
                            result.two_strings = std::option::Option::Some(
                                crate::generated::message_with_one_of::TwoStrings::StringContentsTwo(
                                    map.next_value::<std::option::Option<std::string::String>>()?.unwrap_or_default()
                                ),
                            );
                        }
                        __FieldTag::__message_value => {
                            if !fields.insert(__FieldTag::__message_value) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for message_value",
                                ));
                            }
                            if result.one_message.is_some() {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for `one_message`, a oneof with full ID .google.rust.sdk.test.MessageWithOneOf.message_value, latest field was messageValue",
                                ));
                            }
                            result.one_message = std::option::Option::Some(
                                crate::generated::message_with_one_of::OneMessage::MessageValue(
                                    map.next_value::<std::option::Option<
                                        std::boxed::Box<
                                            crate::generated::message_with_one_of::Message,
                                        >,
                                    >>()?
                                    .unwrap_or_default(),
                                ),
                            );
                        }
                        __FieldTag::__another_message => {
                            if !fields.insert(__FieldTag::__another_message) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for another_message",
                                ));
                            }
                            if result.mixed.is_some() {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for `mixed`, a oneof with full ID .google.rust.sdk.test.MessageWithOneOf.another_message, latest field was anotherMessage",
                                ));
                            }
                            result.mixed = std::option::Option::Some(
                                crate::generated::message_with_one_of::Mixed::AnotherMessage(
                                    map.next_value::<std::option::Option<
                                        std::boxed::Box<
                                            crate::generated::message_with_one_of::Message,
                                        >,
                                    >>()?
                                    .unwrap_or_default(),
                                ),
                            );
                        }
                        __FieldTag::__string => {
                            if !fields.insert(__FieldTag::__string) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for string",
                                ));
                            }
                            if result.mixed.is_some() {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for `mixed`, a oneof with full ID .google.rust.sdk.test.MessageWithOneOf.string, latest field was string",
                                ));
                            }
                            result.mixed = std::option::Option::Some(
                                crate::generated::message_with_one_of::Mixed::String(
                                    map.next_value::<std::option::Option<std::string::String>>()?
                                        .unwrap_or_default(),
                                ),
                            );
                        }
                        __FieldTag::__duration => {
                            if !fields.insert(__FieldTag::__duration) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for duration",
                                ));
                            }
                            if result.mixed.is_some() {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for `mixed`, a oneof with full ID .google.rust.sdk.test.MessageWithOneOf.duration, latest field was duration",
                                ));
                            }
                            result.mixed = std::option::Option::Some(
                                crate::generated::message_with_one_of::Mixed::Duration(
                                    map.next_value::<std::option::Option<std::boxed::Box<wkt::Duration>>>()?.unwrap_or_default()
                                ),
                            );
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithOneOf {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if let Some(value) = self.string_contents() {
            state.serialize_entry("stringContents", value)?;
        }
        if let Some(value) = self.string_contents_one() {
            state.serialize_entry("stringContentsOne", value)?;
        }
        if let Some(value) = self.string_contents_two() {
            state.serialize_entry("stringContentsTwo", value)?;
        }
        if let Some(value) = self.message_value() {
            state.serialize_entry("messageValue", value)?;
        }
        if let Some(value) = self.another_message() {
            state.serialize_entry("anotherMessage", value)?;
        }
        if let Some(value) = self.string() {
            state.serialize_entry("string", value)?;
        }
        if let Some(value) = self.duration() {
            state.serialize_entry("duration", value)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// Defines additional types related to [MessageWithOneOf].
pub mod message_with_one_of {
    #[allow(unused_imports)]
    use super::*;

    #[derive(Clone, Debug, Default, PartialEq)]
    #[non_exhaustive]
    pub struct Message {
        pub parent: std::string::String,

        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Message {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [parent][crate::generated::message_with_one_of::Message::parent].
        pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.parent = v.into();
            self
        }
    }

    impl wkt::message::Message for Message {
        fn typename() -> &'static str {
            "type.googleapis.com/google.rust.sdk.test.MessageWithOneOf.Message"
        }
    }

    #[doc(hidden)]
    impl<'de> serde::de::Deserialize<'de> for Message {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            #[derive(PartialEq, Eq, Hash)]
            enum __FieldTag {
                __parent,
                Unknown(std::string::String),
            }
            impl<'de> serde::de::Deserialize<'de> for __FieldTag {
                fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
                where
                    D: serde::Deserializer<'de>,
                {
                    struct Visitor;
                    impl<'de> serde::de::Visitor<'de> for Visitor {
                        type Value = __FieldTag;
                        fn expecting(
                            &self,
                            formatter: &mut std::fmt::Formatter,
                        ) -> std::fmt::Result {
                            formatter.write_str("a field name for Message")
                        }
                        fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                        where
                            E: serde::de::Error,
                        {
                            use std::result::Result::Ok;
                            use std::string::ToString;
                            match value {
                                "parent" => Ok(__FieldTag::__parent),
                                _ => Ok(__FieldTag::Unknown(value.to_string())),
                            }
                        }
                    }
                    deserializer.deserialize_identifier(Visitor)
                }
            }
            struct Visitor;
            impl<'de> serde::de::Visitor<'de> for Visitor {
                type Value = Message;
                fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                    formatter.write_str("struct Message")
                }
                fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
                where
                    A: serde::de::MapAccess<'de>,
                {
                    #[allow(unused_imports)]
                    use serde::de::Error;
                    use std::option::Option::Some;
                    let mut fields = std::collections::HashSet::new();
                    let mut result = Self::Value::new();
                    while let Some(tag) = map.next_key::<__FieldTag>()? {
                        #[allow(clippy::match_single_binding)]
                        match tag {
                            __FieldTag::__parent => {
                                if !fields.insert(__FieldTag::__parent) {
                                    return std::result::Result::Err(A::Error::duplicate_field(
                                        "multiple values for parent",
                                    ));
                                }
                                result.parent = map
                                    .next_value::<std::option::Option<std::string::String>>()?
                                    .unwrap_or_default();
                            }
                            __FieldTag::Unknown(key) => {
                                let value = map.next_value::<serde_json::Value>()?;
                                result._unknown_fields.insert(key, value);
                            }
                        }
                    }
                    std::result::Result::Ok(result)
                }
            }
            deserializer.deserialize_any(Visitor)
        }
    }

    #[doc(hidden)]
    impl serde::ser::Serialize for Message {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::ser::Serializer,
        {
            use serde::ser::SerializeMap;
            #[allow(unused_imports)]
            use std::option::Option::Some;
            let mut state = serializer.serialize_map(std::option::Option::None)?;
            if !self.parent.is_empty() {
                state.serialize_entry("parent", &self.parent)?;
            }
            if !self._unknown_fields.is_empty() {
                for (key, value) in self._unknown_fields.iter() {
                    state.serialize_entry(key, &value)?;
                }
            }
            state.end()
        }
    }

    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum SingleString {
        StringContents(std::string::String),
    }

    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum TwoStrings {
        StringContentsOne(std::string::String),
        StringContentsTwo(std::string::String),
    }

    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum OneMessage {
        MessageValue(std::boxed::Box<crate::generated::message_with_one_of::Message>),
    }

    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum Mixed {
        AnotherMessage(std::boxed::Box<crate::generated::message_with_one_of::Message>),
        String(std::string::String),
        Duration(std::boxed::Box<wkt::Duration>),
    }
}

/// A message with a more complex `oneof` field.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithComplexOneOf {
    pub complex: std::option::Option<crate::generated::message_with_complex_one_of::Complex>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithComplexOneOf {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [complex][crate::generated::MessageWithComplexOneOf::complex].
    ///
    /// Note that all the setters affecting `complex` are mutually
    /// exclusive.
    pub fn set_complex<
        T: std::convert::Into<
                std::option::Option<crate::generated::message_with_complex_one_of::Complex>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.complex = v.into();
        self
    }

    /// The value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// if it holds a `Null`, `None` if the field is not set or
    /// holds a different branch.
    pub fn null(&self) -> std::option::Option<&wkt::NullValue> {
        #[allow(unreachable_patterns)]
        self.complex.as_ref().and_then(|v| match v {
            crate::generated::message_with_complex_one_of::Complex::Null(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// to hold a `Null`.
    ///
    /// Note that all the setters affecting `complex` are
    /// mutually exclusive.
    pub fn set_null<T: std::convert::Into<wkt::NullValue>>(mut self, v: T) -> Self {
        self.complex = std::option::Option::Some(
            crate::generated::message_with_complex_one_of::Complex::Null(v.into()),
        );
        self
    }

    /// The value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// if it holds a `BoolValue`, `None` if the field is not set or
    /// holds a different branch.
    pub fn bool_value(&self) -> std::option::Option<&bool> {
        #[allow(unreachable_patterns)]
        self.complex.as_ref().and_then(|v| match v {
            crate::generated::message_with_complex_one_of::Complex::BoolValue(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// to hold a `BoolValue`.
    ///
    /// Note that all the setters affecting `complex` are
    /// mutually exclusive.
    pub fn set_bool_value<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.complex = std::option::Option::Some(
            crate::generated::message_with_complex_one_of::Complex::BoolValue(v.into()),
        );
        self
    }

    /// The value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// if it holds a `BytesValue`, `None` if the field is not set or
    /// holds a different branch.
    pub fn bytes_value(&self) -> std::option::Option<&::bytes::Bytes> {
        #[allow(unreachable_patterns)]
        self.complex.as_ref().and_then(|v| match v {
            crate::generated::message_with_complex_one_of::Complex::BytesValue(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// to hold a `BytesValue`.
    ///
    /// Note that all the setters affecting `complex` are
    /// mutually exclusive.
    pub fn set_bytes_value<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.complex = std::option::Option::Some(
            crate::generated::message_with_complex_one_of::Complex::BytesValue(v.into()),
        );
        self
    }

    /// The value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// if it holds a `StringValue`, `None` if the field is not set or
    /// holds a different branch.
    pub fn string_value(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.complex.as_ref().and_then(|v| match v {
            crate::generated::message_with_complex_one_of::Complex::StringValue(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// to hold a `StringValue`.
    ///
    /// Note that all the setters affecting `complex` are
    /// mutually exclusive.
    pub fn set_string_value<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.complex = std::option::Option::Some(
            crate::generated::message_with_complex_one_of::Complex::StringValue(v.into()),
        );
        self
    }

    /// The value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// if it holds a `FloatValue`, `None` if the field is not set or
    /// holds a different branch.
    pub fn float_value(&self) -> std::option::Option<&f32> {
        #[allow(unreachable_patterns)]
        self.complex.as_ref().and_then(|v| match v {
            crate::generated::message_with_complex_one_of::Complex::FloatValue(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// to hold a `FloatValue`.
    ///
    /// Note that all the setters affecting `complex` are
    /// mutually exclusive.
    pub fn set_float_value<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.complex = std::option::Option::Some(
            crate::generated::message_with_complex_one_of::Complex::FloatValue(v.into()),
        );
        self
    }

    /// The value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// if it holds a `DoubleValue`, `None` if the field is not set or
    /// holds a different branch.
    pub fn double_value(&self) -> std::option::Option<&f64> {
        #[allow(unreachable_patterns)]
        self.complex.as_ref().and_then(|v| match v {
            crate::generated::message_with_complex_one_of::Complex::DoubleValue(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// to hold a `DoubleValue`.
    ///
    /// Note that all the setters affecting `complex` are
    /// mutually exclusive.
    pub fn set_double_value<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.complex = std::option::Option::Some(
            crate::generated::message_with_complex_one_of::Complex::DoubleValue(v.into()),
        );
        self
    }

    /// The value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// if it holds a `Int`, `None` if the field is not set or
    /// holds a different branch.
    pub fn int(&self) -> std::option::Option<&i32> {
        #[allow(unreachable_patterns)]
        self.complex.as_ref().and_then(|v| match v {
            crate::generated::message_with_complex_one_of::Complex::Int(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// to hold a `Int`.
    ///
    /// Note that all the setters affecting `complex` are
    /// mutually exclusive.
    pub fn set_int<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.complex = std::option::Option::Some(
            crate::generated::message_with_complex_one_of::Complex::Int(v.into()),
        );
        self
    }

    /// The value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// if it holds a `Long`, `None` if the field is not set or
    /// holds a different branch.
    pub fn long(&self) -> std::option::Option<&i64> {
        #[allow(unreachable_patterns)]
        self.complex.as_ref().and_then(|v| match v {
            crate::generated::message_with_complex_one_of::Complex::Long(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// to hold a `Long`.
    ///
    /// Note that all the setters affecting `complex` are
    /// mutually exclusive.
    pub fn set_long<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.complex = std::option::Option::Some(
            crate::generated::message_with_complex_one_of::Complex::Long(v.into()),
        );
        self
    }

    /// The value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// if it holds a `Enum`, `None` if the field is not set or
    /// holds a different branch.
    pub fn r#enum(
        &self,
    ) -> std::option::Option<&crate::generated::message_with_complex_one_of::TestEnum> {
        #[allow(unreachable_patterns)]
        self.complex.as_ref().and_then(|v| match v {
            crate::generated::message_with_complex_one_of::Complex::Enum(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// to hold a `Enum`.
    ///
    /// Note that all the setters affecting `complex` are
    /// mutually exclusive.
    pub fn set_enum<
        T: std::convert::Into<crate::generated::message_with_complex_one_of::TestEnum>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.complex = std::option::Option::Some(
            crate::generated::message_with_complex_one_of::Complex::Enum(v.into()),
        );
        self
    }

    /// The value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// if it holds a `Inner`, `None` if the field is not set or
    /// holds a different branch.
    pub fn inner(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::generated::message_with_complex_one_of::Inner>>
    {
        #[allow(unreachable_patterns)]
        self.complex.as_ref().and_then(|v| match v {
            crate::generated::message_with_complex_one_of::Complex::Inner(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// to hold a `Inner`.
    ///
    /// Note that all the setters affecting `complex` are
    /// mutually exclusive.
    pub fn set_inner<
        T: std::convert::Into<std::boxed::Box<crate::generated::message_with_complex_one_of::Inner>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.complex = std::option::Option::Some(
            crate::generated::message_with_complex_one_of::Complex::Inner(v.into()),
        );
        self
    }

    /// The value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// if it holds a `Duration`, `None` if the field is not set or
    /// holds a different branch.
    pub fn duration(&self) -> std::option::Option<&std::boxed::Box<wkt::Duration>> {
        #[allow(unreachable_patterns)]
        self.complex.as_ref().and_then(|v| match v {
            crate::generated::message_with_complex_one_of::Complex::Duration(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// to hold a `Duration`.
    ///
    /// Note that all the setters affecting `complex` are
    /// mutually exclusive.
    pub fn set_duration<T: std::convert::Into<std::boxed::Box<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.complex = std::option::Option::Some(
            crate::generated::message_with_complex_one_of::Complex::Duration(v.into()),
        );
        self
    }

    /// The value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// if it holds a `Value`, `None` if the field is not set or
    /// holds a different branch.
    pub fn value(&self) -> std::option::Option<&std::boxed::Box<wkt::Value>> {
        #[allow(unreachable_patterns)]
        self.complex.as_ref().and_then(|v| match v {
            crate::generated::message_with_complex_one_of::Complex::Value(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// to hold a `Value`.
    ///
    /// Note that all the setters affecting `complex` are
    /// mutually exclusive.
    pub fn set_value<T: std::convert::Into<std::boxed::Box<wkt::Value>>>(mut self, v: T) -> Self {
        self.complex = std::option::Option::Some(
            crate::generated::message_with_complex_one_of::Complex::Value(v.into()),
        );
        self
    }

    /// The value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// if it holds a `OptionalDouble`, `None` if the field is not set or
    /// holds a different branch.
    pub fn optional_double(&self) -> std::option::Option<&std::boxed::Box<wkt::DoubleValue>> {
        #[allow(unreachable_patterns)]
        self.complex.as_ref().and_then(|v| match v {
            crate::generated::message_with_complex_one_of::Complex::OptionalDouble(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [complex][crate::generated::MessageWithComplexOneOf::complex]
    /// to hold a `OptionalDouble`.
    ///
    /// Note that all the setters affecting `complex` are
    /// mutually exclusive.
    pub fn set_optional_double<T: std::convert::Into<std::boxed::Box<wkt::DoubleValue>>>(
        mut self,
        v: T,
    ) -> Self {
        self.complex = std::option::Option::Some(
            crate::generated::message_with_complex_one_of::Complex::OptionalDouble(v.into()),
        );
        self
    }
}

impl wkt::message::Message for MessageWithComplexOneOf {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithComplexOneOf"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithComplexOneOf {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __null,
            __bool_value,
            __bytes_value,
            __string_value,
            __float_value,
            __double_value,
            __int,
            __long,
            __enum,
            __inner,
            __duration,
            __value,
            __optional_double,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithComplexOneOf")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "null" => Ok(__FieldTag::__null),
                            "boolValue" => Ok(__FieldTag::__bool_value),
                            "bool_value" => Ok(__FieldTag::__bool_value),
                            "bytesValue" => Ok(__FieldTag::__bytes_value),
                            "bytes_value" => Ok(__FieldTag::__bytes_value),
                            "stringValue" => Ok(__FieldTag::__string_value),
                            "string_value" => Ok(__FieldTag::__string_value),
                            "floatValue" => Ok(__FieldTag::__float_value),
                            "float_value" => Ok(__FieldTag::__float_value),
                            "doubleValue" => Ok(__FieldTag::__double_value),
                            "double_value" => Ok(__FieldTag::__double_value),
                            "int" => Ok(__FieldTag::__int),
                            "long" => Ok(__FieldTag::__long),
                            "enum" => Ok(__FieldTag::__enum),
                            "inner" => Ok(__FieldTag::__inner),
                            "duration" => Ok(__FieldTag::__duration),
                            "value" => Ok(__FieldTag::__value),
                            "optionalDouble" => Ok(__FieldTag::__optional_double),
                            "optional_double" => Ok(__FieldTag::__optional_double),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithComplexOneOf;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithComplexOneOf")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__null => {
                            if !fields.insert(__FieldTag::__null) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for null",
                                ));
                            }
                            if result.complex.is_some() {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for `complex`, a oneof with full ID .google.rust.sdk.test.MessageWithComplexOneOf.null, latest field was null",
                                ));
                            }
                            result.complex = std::option::Option::Some(
                                crate::generated::message_with_complex_one_of::Complex::Null(
                                    map.next_value::<std::option::Option<wkt::NullValue>>()?
                                        .unwrap_or_default(),
                                ),
                            );
                        }
                        __FieldTag::__bool_value => {
                            if !fields.insert(__FieldTag::__bool_value) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for bool_value",
                                ));
                            }
                            if result.complex.is_some() {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for `complex`, a oneof with full ID .google.rust.sdk.test.MessageWithComplexOneOf.bool_value, latest field was boolValue",
                                ));
                            }
                            result.complex = std::option::Option::Some(
                                crate::generated::message_with_complex_one_of::Complex::BoolValue(
                                    map.next_value::<std::option::Option<bool>>()?
                                        .unwrap_or_default(),
                                ),
                            );
                        }
                        __FieldTag::__bytes_value => {
                            if !fields.insert(__FieldTag::__bytes_value) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for bytes_value",
                                ));
                            }
                            struct __With(std::option::Option<::bytes::Bytes>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<serde_with::base64::Base64> >::deserialize(deserializer).map(__With)
                                }
                            }
                            if result.complex.is_some() {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for `complex`, a oneof with full ID .google.rust.sdk.test.MessageWithComplexOneOf.bytes_value, latest field was bytesValue",
                                ));
                            }
                            result.complex = std::option::Option::Some(
                                crate::generated::message_with_complex_one_of::Complex::BytesValue(
                                    map.next_value::<__With>()?.0.unwrap_or_default(),
                                ),
                            );
                        }
                        __FieldTag::__string_value => {
                            if !fields.insert(__FieldTag::__string_value) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for string_value",
                                ));
                            }
                            if result.complex.is_some() {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for `complex`, a oneof with full ID .google.rust.sdk.test.MessageWithComplexOneOf.string_value, latest field was stringValue",
                                ));
                            }
                            result.complex = std::option::Option::Some(
                                crate::generated::message_with_complex_one_of::Complex::StringValue(
                                    map.next_value::<std::option::Option<std::string::String>>()?
                                        .unwrap_or_default(),
                                ),
                            );
                        }
                        __FieldTag::__float_value => {
                            if !fields.insert(__FieldTag::__float_value) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for float_value",
                                ));
                            }
                            struct __With(std::option::Option<f32>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<wkt::internal::F32> >::deserialize(deserializer).map(__With)
                                }
                            }
                            if result.complex.is_some() {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for `complex`, a oneof with full ID .google.rust.sdk.test.MessageWithComplexOneOf.float_value, latest field was floatValue",
                                ));
                            }
                            result.complex = std::option::Option::Some(
                                crate::generated::message_with_complex_one_of::Complex::FloatValue(
                                    map.next_value::<__With>()?.0.unwrap_or_default(),
                                ),
                            );
                        }
                        __FieldTag::__double_value => {
                            if !fields.insert(__FieldTag::__double_value) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for double_value",
                                ));
                            }
                            struct __With(std::option::Option<f64>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<wkt::internal::F64> >::deserialize(deserializer).map(__With)
                                }
                            }
                            if result.complex.is_some() {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for `complex`, a oneof with full ID .google.rust.sdk.test.MessageWithComplexOneOf.double_value, latest field was doubleValue",
                                ));
                            }
                            result.complex = std::option::Option::Some(
                                crate::generated::message_with_complex_one_of::Complex::DoubleValue(
                                    map.next_value::<__With>()?.0.unwrap_or_default(),
                                ),
                            );
                        }
                        __FieldTag::__int => {
                            if !fields.insert(__FieldTag::__int) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for int",
                                ));
                            }
                            struct __With(std::option::Option<i32>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<wkt::internal::I32> >::deserialize(deserializer).map(__With)
                                }
                            }
                            if result.complex.is_some() {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for `complex`, a oneof with full ID .google.rust.sdk.test.MessageWithComplexOneOf.int, latest field was int",
                                ));
                            }
                            result.complex = std::option::Option::Some(
                                crate::generated::message_with_complex_one_of::Complex::Int(
                                    map.next_value::<__With>()?.0.unwrap_or_default(),
                                ),
                            );
                        }
                        __FieldTag::__long => {
                            if !fields.insert(__FieldTag::__long) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for long",
                                ));
                            }
                            struct __With(std::option::Option<i64>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<wkt::internal::I64> >::deserialize(deserializer).map(__With)
                                }
                            }
                            if result.complex.is_some() {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for `complex`, a oneof with full ID .google.rust.sdk.test.MessageWithComplexOneOf.long, latest field was long",
                                ));
                            }
                            result.complex = std::option::Option::Some(
                                crate::generated::message_with_complex_one_of::Complex::Long(
                                    map.next_value::<__With>()?.0.unwrap_or_default(),
                                ),
                            );
                        }
                        __FieldTag::__enum => {
                            if !fields.insert(__FieldTag::__enum) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for enum",
                                ));
                            }
                            if result.complex.is_some() {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for `complex`, a oneof with full ID .google.rust.sdk.test.MessageWithComplexOneOf.enum, latest field was enum",
                                ));
                            }
                            result.complex = std::option::Option::Some(
                                crate::generated::message_with_complex_one_of::Complex::Enum(
                                    map.next_value::<std::option::Option<
                                        crate::generated::message_with_complex_one_of::TestEnum,
                                    >>()?
                                    .unwrap_or_default(),
                                ),
                            );
                        }
                        __FieldTag::__inner => {
                            if !fields.insert(__FieldTag::__inner) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for inner",
                                ));
                            }
                            if result.complex.is_some() {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for `complex`, a oneof with full ID .google.rust.sdk.test.MessageWithComplexOneOf.inner, latest field was inner",
                                ));
                            }
                            result.complex = std::option::Option::Some(
                                crate::generated::message_with_complex_one_of::Complex::Inner(
                                    map.next_value::<std::option::Option<
                                        std::boxed::Box<
                                            crate::generated::message_with_complex_one_of::Inner,
                                        >,
                                    >>()?
                                    .unwrap_or_default(),
                                ),
                            );
                        }
                        __FieldTag::__duration => {
                            if !fields.insert(__FieldTag::__duration) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for duration",
                                ));
                            }
                            if result.complex.is_some() {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for `complex`, a oneof with full ID .google.rust.sdk.test.MessageWithComplexOneOf.duration, latest field was duration",
                                ));
                            }
                            result.complex = std::option::Option::Some(
                                crate::generated::message_with_complex_one_of::Complex::Duration(
                                    map.next_value::<std::option::Option<std::boxed::Box<wkt::Duration>>>()?.unwrap_or_default()
                                ),
                            );
                        }
                        __FieldTag::__value => {
                            if !fields.insert(__FieldTag::__value) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for value",
                                ));
                            }
                            if result.complex.is_some() {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for `complex`, a oneof with full ID .google.rust.sdk.test.MessageWithComplexOneOf.value, latest field was value",
                                ));
                            }
                            result.complex = std::option::Option::Some(
                                crate::generated::message_with_complex_one_of::Complex::Value(
                                    map.next_value::<std::option::Option<std::boxed::Box<wkt::Value>>>()?.unwrap_or_default()
                                ),
                            );
                        }
                        __FieldTag::__optional_double => {
                            if !fields.insert(__FieldTag::__optional_double) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for optional_double",
                                ));
                            }
                            struct __With(std::option::Option<std::boxed::Box<wkt::DoubleValue>>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<std::boxed::Box<wkt::internal::F64>>,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            if result.complex.is_some() {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for `complex`, a oneof with full ID .google.rust.sdk.test.MessageWithComplexOneOf.optional_double, latest field was optionalDouble",
                                ));
                            }
                            result.complex = std::option::Option::Some(
                                crate::generated::message_with_complex_one_of::Complex::OptionalDouble(
                                    map.next_value::<__With>()?.0.unwrap_or_default()
                                ),
                            );
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithComplexOneOf {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if let Some(value) = self.null() {
            state.serialize_entry("null", value)?;
        }
        if let Some(value) = self.bool_value() {
            state.serialize_entry("boolValue", value)?;
        }
        if let Some(value) = self.bytes_value() {
            struct __With<'a>(&'a ::bytes::Bytes);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<serde_with::base64::Base64>::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("bytesValue", &__With(value))?;
        }
        if let Some(value) = self.string_value() {
            state.serialize_entry("stringValue", value)?;
        }
        if let Some(value) = self.float_value() {
            struct __With<'a>(&'a f32);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<wkt::internal::F32>::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("floatValue", &__With(value))?;
        }
        if let Some(value) = self.double_value() {
            struct __With<'a>(&'a f64);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<wkt::internal::F64>::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("doubleValue", &__With(value))?;
        }
        if let Some(value) = self.int() {
            struct __With<'a>(&'a i32);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<wkt::internal::I32>::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("int", &__With(value))?;
        }
        if let Some(value) = self.long() {
            struct __With<'a>(&'a i64);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<wkt::internal::I64>::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("long", &__With(value))?;
        }
        if let Some(value) = self.r#enum() {
            state.serialize_entry("enum", value)?;
        }
        if let Some(value) = self.inner() {
            state.serialize_entry("inner", value)?;
        }
        if let Some(value) = self.duration() {
            state.serialize_entry("duration", value)?;
        }
        if let Some(value) = self.value() {
            state.serialize_entry("value", value)?;
        }
        if let Some(value) = self.optional_double() {
            struct __With<'a>(&'a std::boxed::Box<wkt::DoubleValue>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<wkt::internal::F64>::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("optionalDouble", &__With(value))?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// Defines additional types related to [MessageWithComplexOneOf].
pub mod message_with_complex_one_of {
    #[allow(unused_imports)]
    use super::*;

    #[derive(Clone, Debug, Default, PartialEq)]
    #[non_exhaustive]
    pub struct Inner {
        pub strings: std::vec::Vec<std::string::String>,

        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Inner {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [strings][crate::generated::message_with_complex_one_of::Inner::strings].
        pub fn set_strings<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.strings = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for Inner {
        fn typename() -> &'static str {
            "type.googleapis.com/google.rust.sdk.test.MessageWithComplexOneOf.Inner"
        }
    }

    #[doc(hidden)]
    impl<'de> serde::de::Deserialize<'de> for Inner {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            #[derive(PartialEq, Eq, Hash)]
            enum __FieldTag {
                __strings,
                Unknown(std::string::String),
            }
            impl<'de> serde::de::Deserialize<'de> for __FieldTag {
                fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
                where
                    D: serde::Deserializer<'de>,
                {
                    struct Visitor;
                    impl<'de> serde::de::Visitor<'de> for Visitor {
                        type Value = __FieldTag;
                        fn expecting(
                            &self,
                            formatter: &mut std::fmt::Formatter,
                        ) -> std::fmt::Result {
                            formatter.write_str("a field name for Inner")
                        }
                        fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                        where
                            E: serde::de::Error,
                        {
                            use std::result::Result::Ok;
                            use std::string::ToString;
                            match value {
                                "strings" => Ok(__FieldTag::__strings),
                                _ => Ok(__FieldTag::Unknown(value.to_string())),
                            }
                        }
                    }
                    deserializer.deserialize_identifier(Visitor)
                }
            }
            struct Visitor;
            impl<'de> serde::de::Visitor<'de> for Visitor {
                type Value = Inner;
                fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                    formatter.write_str("struct Inner")
                }
                fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
                where
                    A: serde::de::MapAccess<'de>,
                {
                    #[allow(unused_imports)]
                    use serde::de::Error;
                    use std::option::Option::Some;
                    let mut fields = std::collections::HashSet::new();
                    let mut result = Self::Value::new();
                    while let Some(tag) = map.next_key::<__FieldTag>()? {
                        #[allow(clippy::match_single_binding)]
                        match tag {
                            __FieldTag::__strings => {
                                if !fields.insert(__FieldTag::__strings) {
                                    return std::result::Result::Err(A::Error::duplicate_field(
                                        "multiple values for strings",
                                    ));
                                }
                                result.strings = map.next_value::<std::option::Option<std::vec::Vec<std::string::String>>>()?.unwrap_or_default();
                            }
                            __FieldTag::Unknown(key) => {
                                let value = map.next_value::<serde_json::Value>()?;
                                result._unknown_fields.insert(key, value);
                            }
                        }
                    }
                    std::result::Result::Ok(result)
                }
            }
            deserializer.deserialize_any(Visitor)
        }
    }

    #[doc(hidden)]
    impl serde::ser::Serialize for Inner {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::ser::Serializer,
        {
            use serde::ser::SerializeMap;
            #[allow(unused_imports)]
            use std::option::Option::Some;
            let mut state = serializer.serialize_map(std::option::Option::None)?;
            if !self.strings.is_empty() {
                state.serialize_entry("strings", &self.strings)?;
            }
            if !self._unknown_fields.is_empty() {
                for (key, value) in self._unknown_fields.iter() {
                    state.serialize_entry(key, &value)?;
                }
            }
            state.end()
        }
    }

    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum TestEnum {
        Unspecified,
        Black,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [TestEnum::value] or
        /// [TestEnum::name].
        UnknownValue(test_enum::UnknownValue),
    }

    #[doc(hidden)]
    pub mod test_enum {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl TestEnum {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Black => std::option::Option::Some(1),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("TEST_ENUM_UNSPECIFIED"),
                Self::Black => std::option::Option::Some("BLACK"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for TestEnum {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for TestEnum {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for TestEnum {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Black,
                _ => Self::UnknownValue(test_enum::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for TestEnum {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "TEST_ENUM_UNSPECIFIED" => Self::Unspecified,
                "BLACK" => Self::Black,
                _ => Self::UnknownValue(test_enum::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for TestEnum {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Black => serializer.serialize_i32(1),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for TestEnum {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<TestEnum>::new(
                ".google.rust.sdk.test.MessageWithComplexOneOf.TestEnum",
            ))
        }
    }

    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum Complex {
        Null(wkt::NullValue),
        BoolValue(bool),
        BytesValue(::bytes::Bytes),
        StringValue(std::string::String),
        FloatValue(f32),
        DoubleValue(f64),
        /// TODO(#2382) - the natural name does not work.
        Int(i32),
        /// TODO(#2382) - the natural name does not work.
        Long(i64),
        Enum(crate::generated::message_with_complex_one_of::TestEnum),
        Inner(std::boxed::Box<crate::generated::message_with_complex_one_of::Inner>),
        Duration(std::boxed::Box<wkt::Duration>),
        Value(std::boxed::Box<wkt::Value>),
        OptionalDouble(std::boxed::Box<wkt::DoubleValue>),
    }
}

/// A test message for f32.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithF32 {
    /// A singular field.
    pub singular: f32,

    /// An optional field.
    pub optional: std::option::Option<f32>,

    /// A repeated field.
    pub repeated: std::vec::Vec<f32>,

    /// A map field, floats cannot be keys, so we only need to test them as
    /// values.
    pub map: std::collections::HashMap<std::string::String, f32>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithF32 {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithF32::singular].
    pub fn set_singular<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::generated::MessageWithF32::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<f32>,
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::generated::MessageWithF32::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<f32>,
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithF32::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<f32>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::generated::MessageWithF32::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<f32>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithF32 {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithF32"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithF32 {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __optional,
            __repeated,
            __map,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithF32")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "optional" => Ok(__FieldTag::__optional),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "map" => Ok(__FieldTag::__map),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithF32;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithF32")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            struct __With(std::option::Option<f32>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<wkt::internal::F32> >::deserialize(deserializer).map(__With)
                                }
                            }
                            result.singular = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__optional => {
                            if !fields.insert(__FieldTag::__optional) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for optional",
                                ));
                            }
                            struct __With(std::option::Option<f32>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<wkt::internal::F32> >::deserialize(deserializer).map(__With)
                                }
                            }
                            result.optional = map.next_value::<__With>()?.0;
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            struct __With(std::option::Option<std::vec::Vec<f32>>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<std::vec::Vec<wkt::internal::F32>>,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.repeated = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map => {
                            if !fields.insert(__FieldTag::__map) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map",
                                ));
                            }
                            struct __With(
                                std::option::Option<
                                    std::collections::HashMap<std::string::String, f32>,
                                >,
                            );
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                serde_with::Same,
                                                wkt::internal::F32,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithF32 {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if !wkt::internal::is_default(&self.singular) {
            struct __With<'a>(&'a f32);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<wkt::internal::F32>::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("singular", &__With(&self.singular))?;
        }
        if self.optional.is_some() {
            struct __With<'a>(&'a std::option::Option<f32>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::option::Option<wkt::internal::F32>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("optional", &__With(&self.optional))?;
        }
        if !self.repeated.is_empty() {
            struct __With<'a>(&'a std::vec::Vec<f32>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::vec::Vec<wkt::internal::F32>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("repeated", &__With(&self.repeated))?;
        }
        if !self.map.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<std::string::String, f32>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::< std::collections::HashMap<serde_with::Same, wkt::internal::F32> >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("map", &__With(&self.map))?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// A test message for f64.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithF64 {
    /// A singular field.
    pub singular: f64,

    /// An optional field.
    pub optional: std::option::Option<f64>,

    /// A repeated field.
    pub repeated: std::vec::Vec<f64>,

    /// A map field, doubles cannot be keys, so we only need to test them as
    /// values.
    pub map: std::collections::HashMap<std::string::String, f64>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithF64 {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithF64::singular].
    pub fn set_singular<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::generated::MessageWithF64::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<f64>,
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::generated::MessageWithF64::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<f64>,
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithF64::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<f64>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::generated::MessageWithF64::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<f64>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithF64 {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithF64"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithF64 {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __optional,
            __repeated,
            __map,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithF64")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "optional" => Ok(__FieldTag::__optional),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "map" => Ok(__FieldTag::__map),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithF64;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithF64")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            struct __With(std::option::Option<f64>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<wkt::internal::F64> >::deserialize(deserializer).map(__With)
                                }
                            }
                            result.singular = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__optional => {
                            if !fields.insert(__FieldTag::__optional) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for optional",
                                ));
                            }
                            struct __With(std::option::Option<f64>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<wkt::internal::F64> >::deserialize(deserializer).map(__With)
                                }
                            }
                            result.optional = map.next_value::<__With>()?.0;
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            struct __With(std::option::Option<std::vec::Vec<f64>>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<std::vec::Vec<wkt::internal::F64>>,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.repeated = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map => {
                            if !fields.insert(__FieldTag::__map) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map",
                                ));
                            }
                            struct __With(
                                std::option::Option<
                                    std::collections::HashMap<std::string::String, f64>,
                                >,
                            );
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                serde_with::Same,
                                                wkt::internal::F64,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithF64 {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if !wkt::internal::is_default(&self.singular) {
            struct __With<'a>(&'a f64);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<wkt::internal::F64>::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("singular", &__With(&self.singular))?;
        }
        if self.optional.is_some() {
            struct __With<'a>(&'a std::option::Option<f64>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::option::Option<wkt::internal::F64>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("optional", &__With(&self.optional))?;
        }
        if !self.repeated.is_empty() {
            struct __With<'a>(&'a std::vec::Vec<f64>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::vec::Vec<wkt::internal::F64>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("repeated", &__With(&self.repeated))?;
        }
        if !self.map.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<std::string::String, f64>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::< std::collections::HashMap<serde_with::Same, wkt::internal::F64> >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("map", &__With(&self.map))?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// A test message for i32.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithI32 {
    /// A singular field.
    pub singular: i32,

    /// An optional field.
    pub optional: std::option::Option<i32>,

    /// A repeated field.
    pub repeated: std::vec::Vec<i32>,

    /// Test i32 as values.
    pub map_value: std::collections::HashMap<std::string::String, i32>,

    /// Test i32 as keys.
    pub map_key: std::collections::HashMap<i32, std::string::String>,

    /// Test i32 as both keys and values.
    pub map_key_value: std::collections::HashMap<i32, i32>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithI32 {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithI32::singular].
    pub fn set_singular<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::generated::MessageWithI32::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<i32>,
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::generated::MessageWithI32::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<i32>,
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithI32::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<i32>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map_value][crate::generated::MessageWithI32::map_value].
    pub fn set_map_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<i32>,
    {
        use std::iter::Iterator;
        self.map_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key][crate::generated::MessageWithI32::map_key].
    pub fn set_map_key<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<i32>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.map_key = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key_value][crate::generated::MessageWithI32::map_key_value].
    pub fn set_map_key_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<i32>,
        V: std::convert::Into<i32>,
    {
        use std::iter::Iterator;
        self.map_key_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithI32 {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithI32"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithI32 {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __optional,
            __repeated,
            __map_value,
            __map_key,
            __map_key_value,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithI32")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "optional" => Ok(__FieldTag::__optional),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "mapValue" => Ok(__FieldTag::__map_value),
                            "map_value" => Ok(__FieldTag::__map_value),
                            "mapKey" => Ok(__FieldTag::__map_key),
                            "map_key" => Ok(__FieldTag::__map_key),
                            "mapKeyValue" => Ok(__FieldTag::__map_key_value),
                            "map_key_value" => Ok(__FieldTag::__map_key_value),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithI32;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithI32")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            struct __With(std::option::Option<i32>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<wkt::internal::I32> >::deserialize(deserializer).map(__With)
                                }
                            }
                            result.singular = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__optional => {
                            if !fields.insert(__FieldTag::__optional) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for optional",
                                ));
                            }
                            struct __With(std::option::Option<i32>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<wkt::internal::I32> >::deserialize(deserializer).map(__With)
                                }
                            }
                            result.optional = map.next_value::<__With>()?.0;
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            struct __With(std::option::Option<std::vec::Vec<i32>>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<std::vec::Vec<wkt::internal::I32>>,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.repeated = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map_value => {
                            if !fields.insert(__FieldTag::__map_value) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map_value",
                                ));
                            }
                            struct __With(
                                std::option::Option<
                                    std::collections::HashMap<std::string::String, i32>,
                                >,
                            );
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                serde_with::Same,
                                                wkt::internal::I32,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map_value = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map_key => {
                            if !fields.insert(__FieldTag::__map_key) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map_key",
                                ));
                            }
                            struct __With(
                                std::option::Option<
                                    std::collections::HashMap<i32, std::string::String>,
                                >,
                            );
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                wkt::internal::I32,
                                                serde_with::Same,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map_key = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map_key_value => {
                            if !fields.insert(__FieldTag::__map_key_value) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map_key_value",
                                ));
                            }
                            struct __With(std::option::Option<std::collections::HashMap<i32, i32>>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                wkt::internal::I32,
                                                wkt::internal::I32,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map_key_value =
                                map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithI32 {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if !wkt::internal::is_default(&self.singular) {
            struct __With<'a>(&'a i32);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<wkt::internal::I32>::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("singular", &__With(&self.singular))?;
        }
        if self.optional.is_some() {
            struct __With<'a>(&'a std::option::Option<i32>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::option::Option<wkt::internal::I32>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("optional", &__With(&self.optional))?;
        }
        if !self.repeated.is_empty() {
            struct __With<'a>(&'a std::vec::Vec<i32>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::vec::Vec<wkt::internal::I32>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("repeated", &__With(&self.repeated))?;
        }
        if !self.map_value.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<std::string::String, i32>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::< std::collections::HashMap<serde_with::Same, wkt::internal::I32> >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("mapValue", &__With(&self.map_value))?;
        }
        if !self.map_key.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<i32, std::string::String>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::< std::collections::HashMap<wkt::internal::I32, serde_with::Same> >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("mapKey", &__With(&self.map_key))?;
        }
        if !self.map_key_value.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<i32, i32>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<
                        std::collections::HashMap<wkt::internal::I32, wkt::internal::I32>,
                    >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("mapKeyValue", &__With(&self.map_key_value))?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// A test message for u32.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithU32 {
    /// A singular field.
    pub singular: u32,

    /// An optional field.
    pub optional: std::option::Option<u32>,

    /// A repeated field.
    pub repeated: std::vec::Vec<u32>,

    /// Test u32 as values.
    pub map_value: std::collections::HashMap<std::string::String, u32>,

    /// Test u32 as keys.
    pub map_key: std::collections::HashMap<u32, std::string::String>,

    /// Test u32 as both keys and values.
    pub map_key_value: std::collections::HashMap<u32, u32>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithU32 {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithU32::singular].
    pub fn set_singular<T: std::convert::Into<u32>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::generated::MessageWithU32::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<u32>,
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::generated::MessageWithU32::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<u32>,
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithU32::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<u32>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map_value][crate::generated::MessageWithU32::map_value].
    pub fn set_map_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<u32>,
    {
        use std::iter::Iterator;
        self.map_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key][crate::generated::MessageWithU32::map_key].
    pub fn set_map_key<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<u32>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.map_key = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key_value][crate::generated::MessageWithU32::map_key_value].
    pub fn set_map_key_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<u32>,
        V: std::convert::Into<u32>,
    {
        use std::iter::Iterator;
        self.map_key_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithU32 {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithU32"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithU32 {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __optional,
            __repeated,
            __map_value,
            __map_key,
            __map_key_value,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithU32")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "optional" => Ok(__FieldTag::__optional),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "mapValue" => Ok(__FieldTag::__map_value),
                            "map_value" => Ok(__FieldTag::__map_value),
                            "mapKey" => Ok(__FieldTag::__map_key),
                            "map_key" => Ok(__FieldTag::__map_key),
                            "mapKeyValue" => Ok(__FieldTag::__map_key_value),
                            "map_key_value" => Ok(__FieldTag::__map_key_value),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithU32;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithU32")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            struct __With(std::option::Option<u32>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<wkt::internal::U32> >::deserialize(deserializer).map(__With)
                                }
                            }
                            result.singular = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__optional => {
                            if !fields.insert(__FieldTag::__optional) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for optional",
                                ));
                            }
                            struct __With(std::option::Option<u32>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<wkt::internal::U32> >::deserialize(deserializer).map(__With)
                                }
                            }
                            result.optional = map.next_value::<__With>()?.0;
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            struct __With(std::option::Option<std::vec::Vec<u32>>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<std::vec::Vec<wkt::internal::U32>>,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.repeated = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map_value => {
                            if !fields.insert(__FieldTag::__map_value) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map_value",
                                ));
                            }
                            struct __With(
                                std::option::Option<
                                    std::collections::HashMap<std::string::String, u32>,
                                >,
                            );
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                serde_with::Same,
                                                wkt::internal::U32,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map_value = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map_key => {
                            if !fields.insert(__FieldTag::__map_key) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map_key",
                                ));
                            }
                            struct __With(
                                std::option::Option<
                                    std::collections::HashMap<u32, std::string::String>,
                                >,
                            );
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                wkt::internal::U32,
                                                serde_with::Same,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map_key = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map_key_value => {
                            if !fields.insert(__FieldTag::__map_key_value) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map_key_value",
                                ));
                            }
                            struct __With(std::option::Option<std::collections::HashMap<u32, u32>>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                wkt::internal::U32,
                                                wkt::internal::U32,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map_key_value =
                                map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithU32 {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if !wkt::internal::is_default(&self.singular) {
            struct __With<'a>(&'a u32);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<wkt::internal::U32>::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("singular", &__With(&self.singular))?;
        }
        if self.optional.is_some() {
            struct __With<'a>(&'a std::option::Option<u32>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::option::Option<wkt::internal::U32>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("optional", &__With(&self.optional))?;
        }
        if !self.repeated.is_empty() {
            struct __With<'a>(&'a std::vec::Vec<u32>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::vec::Vec<wkt::internal::U32>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("repeated", &__With(&self.repeated))?;
        }
        if !self.map_value.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<std::string::String, u32>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::< std::collections::HashMap<serde_with::Same, wkt::internal::U32> >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("mapValue", &__With(&self.map_value))?;
        }
        if !self.map_key.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<u32, std::string::String>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::< std::collections::HashMap<wkt::internal::U32, serde_with::Same> >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("mapKey", &__With(&self.map_key))?;
        }
        if !self.map_key_value.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<u32, u32>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<
                        std::collections::HashMap<wkt::internal::U32, wkt::internal::U32>,
                    >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("mapKeyValue", &__With(&self.map_key_value))?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// A test message for i64.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithI64 {
    /// A singular field.
    pub singular: i64,

    /// An optional field.
    pub optional: std::option::Option<i64>,

    /// A repeated field.
    pub repeated: std::vec::Vec<i64>,

    /// Test i64 as values.
    pub map_value: std::collections::HashMap<std::string::String, i64>,

    /// Test i64 as keys.
    pub map_key: std::collections::HashMap<i64, std::string::String>,

    /// Test i64 as both keys and values.
    pub map_key_value: std::collections::HashMap<i64, i64>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithI64 {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithI64::singular].
    pub fn set_singular<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::generated::MessageWithI64::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<i64>,
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::generated::MessageWithI64::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<i64>,
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithI64::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<i64>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map_value][crate::generated::MessageWithI64::map_value].
    pub fn set_map_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<i64>,
    {
        use std::iter::Iterator;
        self.map_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key][crate::generated::MessageWithI64::map_key].
    pub fn set_map_key<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<i64>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.map_key = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key_value][crate::generated::MessageWithI64::map_key_value].
    pub fn set_map_key_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<i64>,
        V: std::convert::Into<i64>,
    {
        use std::iter::Iterator;
        self.map_key_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithI64 {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithI64"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithI64 {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __optional,
            __repeated,
            __map_value,
            __map_key,
            __map_key_value,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithI64")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "optional" => Ok(__FieldTag::__optional),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "mapValue" => Ok(__FieldTag::__map_value),
                            "map_value" => Ok(__FieldTag::__map_value),
                            "mapKey" => Ok(__FieldTag::__map_key),
                            "map_key" => Ok(__FieldTag::__map_key),
                            "mapKeyValue" => Ok(__FieldTag::__map_key_value),
                            "map_key_value" => Ok(__FieldTag::__map_key_value),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithI64;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithI64")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            struct __With(std::option::Option<i64>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<wkt::internal::I64> >::deserialize(deserializer).map(__With)
                                }
                            }
                            result.singular = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__optional => {
                            if !fields.insert(__FieldTag::__optional) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for optional",
                                ));
                            }
                            struct __With(std::option::Option<i64>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<wkt::internal::I64> >::deserialize(deserializer).map(__With)
                                }
                            }
                            result.optional = map.next_value::<__With>()?.0;
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            struct __With(std::option::Option<std::vec::Vec<i64>>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<std::vec::Vec<wkt::internal::I64>>,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.repeated = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map_value => {
                            if !fields.insert(__FieldTag::__map_value) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map_value",
                                ));
                            }
                            struct __With(
                                std::option::Option<
                                    std::collections::HashMap<std::string::String, i64>,
                                >,
                            );
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                serde_with::Same,
                                                wkt::internal::I64,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map_value = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map_key => {
                            if !fields.insert(__FieldTag::__map_key) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map_key",
                                ));
                            }
                            struct __With(
                                std::option::Option<
                                    std::collections::HashMap<i64, std::string::String>,
                                >,
                            );
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                wkt::internal::I64,
                                                serde_with::Same,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map_key = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map_key_value => {
                            if !fields.insert(__FieldTag::__map_key_value) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map_key_value",
                                ));
                            }
                            struct __With(std::option::Option<std::collections::HashMap<i64, i64>>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                wkt::internal::I64,
                                                wkt::internal::I64,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map_key_value =
                                map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithI64 {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if !wkt::internal::is_default(&self.singular) {
            struct __With<'a>(&'a i64);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<wkt::internal::I64>::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("singular", &__With(&self.singular))?;
        }
        if self.optional.is_some() {
            struct __With<'a>(&'a std::option::Option<i64>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::option::Option<wkt::internal::I64>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("optional", &__With(&self.optional))?;
        }
        if !self.repeated.is_empty() {
            struct __With<'a>(&'a std::vec::Vec<i64>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::vec::Vec<wkt::internal::I64>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("repeated", &__With(&self.repeated))?;
        }
        if !self.map_value.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<std::string::String, i64>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::< std::collections::HashMap<serde_with::Same, wkt::internal::I64> >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("mapValue", &__With(&self.map_value))?;
        }
        if !self.map_key.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<i64, std::string::String>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::< std::collections::HashMap<wkt::internal::I64, serde_with::Same> >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("mapKey", &__With(&self.map_key))?;
        }
        if !self.map_key_value.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<i64, i64>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<
                        std::collections::HashMap<wkt::internal::I64, wkt::internal::I64>,
                    >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("mapKeyValue", &__With(&self.map_key_value))?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// A test message for u64.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithU64 {
    /// A singular field.
    pub singular: u64,

    /// An optional field.
    pub optional: std::option::Option<u64>,

    /// A repeated field.
    pub repeated: std::vec::Vec<u64>,

    /// Test u64 as values.
    pub map_value: std::collections::HashMap<std::string::String, u64>,

    /// Test u64 as keys.
    pub map_key: std::collections::HashMap<u64, std::string::String>,

    /// Test u64 as both keys and values.
    pub map_key_value: std::collections::HashMap<u64, u64>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithU64 {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithU64::singular].
    pub fn set_singular<T: std::convert::Into<u64>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::generated::MessageWithU64::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<u64>,
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::generated::MessageWithU64::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<u64>,
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithU64::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<u64>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map_value][crate::generated::MessageWithU64::map_value].
    pub fn set_map_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<u64>,
    {
        use std::iter::Iterator;
        self.map_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key][crate::generated::MessageWithU64::map_key].
    pub fn set_map_key<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<u64>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.map_key = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key_value][crate::generated::MessageWithU64::map_key_value].
    pub fn set_map_key_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<u64>,
        V: std::convert::Into<u64>,
    {
        use std::iter::Iterator;
        self.map_key_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithU64 {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithU64"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithU64 {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __optional,
            __repeated,
            __map_value,
            __map_key,
            __map_key_value,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithU64")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "optional" => Ok(__FieldTag::__optional),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "mapValue" => Ok(__FieldTag::__map_value),
                            "map_value" => Ok(__FieldTag::__map_value),
                            "mapKey" => Ok(__FieldTag::__map_key),
                            "map_key" => Ok(__FieldTag::__map_key),
                            "mapKeyValue" => Ok(__FieldTag::__map_key_value),
                            "map_key_value" => Ok(__FieldTag::__map_key_value),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithU64;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithU64")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            struct __With(std::option::Option<u64>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<wkt::internal::U64> >::deserialize(deserializer).map(__With)
                                }
                            }
                            result.singular = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__optional => {
                            if !fields.insert(__FieldTag::__optional) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for optional",
                                ));
                            }
                            struct __With(std::option::Option<u64>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<wkt::internal::U64> >::deserialize(deserializer).map(__With)
                                }
                            }
                            result.optional = map.next_value::<__With>()?.0;
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            struct __With(std::option::Option<std::vec::Vec<u64>>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<std::vec::Vec<wkt::internal::U64>>,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.repeated = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map_value => {
                            if !fields.insert(__FieldTag::__map_value) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map_value",
                                ));
                            }
                            struct __With(
                                std::option::Option<
                                    std::collections::HashMap<std::string::String, u64>,
                                >,
                            );
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                serde_with::Same,
                                                wkt::internal::U64,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map_value = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map_key => {
                            if !fields.insert(__FieldTag::__map_key) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map_key",
                                ));
                            }
                            struct __With(
                                std::option::Option<
                                    std::collections::HashMap<u64, std::string::String>,
                                >,
                            );
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                wkt::internal::U64,
                                                serde_with::Same,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map_key = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map_key_value => {
                            if !fields.insert(__FieldTag::__map_key_value) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map_key_value",
                                ));
                            }
                            struct __With(std::option::Option<std::collections::HashMap<u64, u64>>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                wkt::internal::U64,
                                                wkt::internal::U64,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map_key_value =
                                map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithU64 {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if !wkt::internal::is_default(&self.singular) {
            struct __With<'a>(&'a u64);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<wkt::internal::U64>::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("singular", &__With(&self.singular))?;
        }
        if self.optional.is_some() {
            struct __With<'a>(&'a std::option::Option<u64>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::option::Option<wkt::internal::U64>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("optional", &__With(&self.optional))?;
        }
        if !self.repeated.is_empty() {
            struct __With<'a>(&'a std::vec::Vec<u64>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::vec::Vec<wkt::internal::U64>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("repeated", &__With(&self.repeated))?;
        }
        if !self.map_value.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<std::string::String, u64>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::< std::collections::HashMap<serde_with::Same, wkt::internal::U64> >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("mapValue", &__With(&self.map_value))?;
        }
        if !self.map_key.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<u64, std::string::String>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::< std::collections::HashMap<wkt::internal::U64, serde_with::Same> >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("mapKey", &__With(&self.map_key))?;
        }
        if !self.map_key_value.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<u64, u64>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<
                        std::collections::HashMap<wkt::internal::U64, wkt::internal::U64>,
                    >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("mapKeyValue", &__With(&self.map_key_value))?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// A test message for bytes.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithBytes {
    /// A singular field.
    pub singular: ::bytes::Bytes,

    /// An optional field.
    pub optional: std::option::Option<::bytes::Bytes>,

    /// A repeated field.
    pub repeated: std::vec::Vec<::bytes::Bytes>,

    /// A map field, bytes cannot be keys, so we only need to test them as
    /// values.
    pub map: std::collections::HashMap<std::string::String, ::bytes::Bytes>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithBytes {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithBytes::singular].
    pub fn set_singular<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::generated::MessageWithBytes::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<::bytes::Bytes>,
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::generated::MessageWithBytes::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<::bytes::Bytes>,
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithBytes::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<::bytes::Bytes>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::generated::MessageWithBytes::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<::bytes::Bytes>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithBytes {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithBytes"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithBytes {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __optional,
            __repeated,
            __map,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithBytes")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "optional" => Ok(__FieldTag::__optional),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "map" => Ok(__FieldTag::__map),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithBytes;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithBytes")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            struct __With(std::option::Option<::bytes::Bytes>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<serde_with::base64::Base64> >::deserialize(deserializer).map(__With)
                                }
                            }
                            result.singular = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__optional => {
                            if !fields.insert(__FieldTag::__optional) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for optional",
                                ));
                            }
                            struct __With(std::option::Option<::bytes::Bytes>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<serde_with::base64::Base64> >::deserialize(deserializer).map(__With)
                                }
                            }
                            result.optional = map.next_value::<__With>()?.0;
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            struct __With(std::option::Option<std::vec::Vec<::bytes::Bytes>>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::vec::Vec<serde_with::base64::Base64>,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.repeated = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map => {
                            if !fields.insert(__FieldTag::__map) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map",
                                ));
                            }
                            struct __With(
                                std::option::Option<
                                    std::collections::HashMap<std::string::String, ::bytes::Bytes>,
                                >,
                            );
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                serde_with::Same,
                                                serde_with::base64::Base64,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithBytes {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if !self.singular.is_empty() {
            struct __With<'a>(&'a ::bytes::Bytes);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<serde_with::base64::Base64>::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("singular", &__With(&self.singular))?;
        }
        if self.optional.is_some() {
            struct __With<'a>(&'a std::option::Option<::bytes::Bytes>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::option::Option<serde_with::base64::Base64>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("optional", &__With(&self.optional))?;
        }
        if !self.repeated.is_empty() {
            struct __With<'a>(&'a std::vec::Vec<::bytes::Bytes>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::vec::Vec<serde_with::base64::Base64>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("repeated", &__With(&self.repeated))?;
        }
        if !self.map.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<std::string::String, ::bytes::Bytes>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<
                        std::collections::HashMap<serde_with::Same, serde_with::base64::Base64>,
                    >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("map", &__With(&self.map))?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// A test message for bool.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithBool {
    /// A singular field.
    pub singular: bool,

    /// An optional field.
    pub optional: std::option::Option<bool>,

    /// A repeated field.
    pub repeated: std::vec::Vec<bool>,

    /// Test bool as map values.
    pub map_value: std::collections::HashMap<std::string::String, bool>,

    /// Test bool as map keys.
    pub map_key: std::collections::HashMap<bool, std::string::String>,

    /// Test bool as map key and value.
    pub map_key_value: std::collections::HashMap<bool, bool>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithBool {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithBool::singular].
    pub fn set_singular<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::generated::MessageWithBool::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<bool>,
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::generated::MessageWithBool::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<bool>,
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithBool::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<bool>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map_value][crate::generated::MessageWithBool::map_value].
    pub fn set_map_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<bool>,
    {
        use std::iter::Iterator;
        self.map_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key][crate::generated::MessageWithBool::map_key].
    pub fn set_map_key<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<bool>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.map_key = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key_value][crate::generated::MessageWithBool::map_key_value].
    pub fn set_map_key_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<bool>,
        V: std::convert::Into<bool>,
    {
        use std::iter::Iterator;
        self.map_key_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithBool {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithBool"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithBool {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __optional,
            __repeated,
            __map_value,
            __map_key,
            __map_key_value,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithBool")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "optional" => Ok(__FieldTag::__optional),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "mapValue" => Ok(__FieldTag::__map_value),
                            "map_value" => Ok(__FieldTag::__map_value),
                            "mapKey" => Ok(__FieldTag::__map_key),
                            "map_key" => Ok(__FieldTag::__map_key),
                            "mapKeyValue" => Ok(__FieldTag::__map_key_value),
                            "map_key_value" => Ok(__FieldTag::__map_key_value),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithBool;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithBool")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            result.singular = map
                                .next_value::<std::option::Option<bool>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__optional => {
                            if !fields.insert(__FieldTag::__optional) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for optional",
                                ));
                            }
                            result.optional = map.next_value::<std::option::Option<bool>>()?;
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            result.repeated = map
                                .next_value::<std::option::Option<std::vec::Vec<bool>>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__map_value => {
                            if !fields.insert(__FieldTag::__map_value) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map_value",
                                ));
                            }
                            result.map_value = map
                                .next_value::<std::option::Option<
                                    std::collections::HashMap<std::string::String, bool>,
                                >>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__map_key => {
                            if !fields.insert(__FieldTag::__map_key) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map_key",
                                ));
                            }
                            struct __With(
                                std::option::Option<
                                    std::collections::HashMap<bool, std::string::String>,
                                >,
                            );
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                serde_with::DisplayFromStr,
                                                serde_with::Same,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map_key = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map_key_value => {
                            if !fields.insert(__FieldTag::__map_key_value) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map_key_value",
                                ));
                            }
                            struct __With(
                                std::option::Option<std::collections::HashMap<bool, bool>>,
                            );
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                serde_with::DisplayFromStr,
                                                serde_with::Same,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map_key_value =
                                map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithBool {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if !wkt::internal::is_default(&self.singular) {
            state.serialize_entry("singular", &self.singular)?;
        }
        if self.optional.is_some() {
            state.serialize_entry("optional", &self.optional)?;
        }
        if !self.repeated.is_empty() {
            state.serialize_entry("repeated", &self.repeated)?;
        }
        if !self.map_value.is_empty() {
            state.serialize_entry("mapValue", &self.map_value)?;
        }
        if !self.map_key.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<bool, std::string::String>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<
                        std::collections::HashMap<serde_with::DisplayFromStr, serde_with::Same>,
                    >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("mapKey", &__With(&self.map_key))?;
        }
        if !self.map_key_value.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<bool, bool>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<
                        std::collections::HashMap<serde_with::DisplayFromStr, serde_with::Same>,
                    >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("mapKeyValue", &__With(&self.map_key_value))?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// A test message for string.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithString {
    /// A singular field.
    pub singular: std::string::String,

    /// An optional field.
    pub optional: std::option::Option<std::string::String>,

    /// A repeated field.
    pub repeated: std::vec::Vec<std::string::String>,

    /// Test string as map values.
    pub map_value: std::collections::HashMap<i32, std::string::String>,

    /// Test string as map keys.
    pub map_key: std::collections::HashMap<std::string::String, i32>,

    /// Test string as map key and value.
    pub map_key_value: std::collections::HashMap<std::string::String, std::string::String>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithString {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithString::singular].
    pub fn set_singular<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::generated::MessageWithString::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<std::string::String>,
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::generated::MessageWithString::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<std::string::String>,
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithString::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map_value][crate::generated::MessageWithString::map_value].
    pub fn set_map_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<i32>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.map_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key][crate::generated::MessageWithString::map_key].
    pub fn set_map_key<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<i32>,
    {
        use std::iter::Iterator;
        self.map_key = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key_value][crate::generated::MessageWithString::map_key_value].
    pub fn set_map_key_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.map_key_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithString {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithString"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithString {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __optional,
            __repeated,
            __map_value,
            __map_key,
            __map_key_value,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithString")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "optional" => Ok(__FieldTag::__optional),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "mapValue" => Ok(__FieldTag::__map_value),
                            "map_value" => Ok(__FieldTag::__map_value),
                            "mapKey" => Ok(__FieldTag::__map_key),
                            "map_key" => Ok(__FieldTag::__map_key),
                            "mapKeyValue" => Ok(__FieldTag::__map_key_value),
                            "map_key_value" => Ok(__FieldTag::__map_key_value),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithString;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithString")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            result.singular = map
                                .next_value::<std::option::Option<std::string::String>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__optional => {
                            if !fields.insert(__FieldTag::__optional) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for optional",
                                ));
                            }
                            result.optional =
                                map.next_value::<std::option::Option<std::string::String>>()?;
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            result.repeated = map.next_value::<std::option::Option<std::vec::Vec<std::string::String>>>()?.unwrap_or_default();
                        }
                        __FieldTag::__map_value => {
                            if !fields.insert(__FieldTag::__map_value) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map_value",
                                ));
                            }
                            struct __With(
                                std::option::Option<
                                    std::collections::HashMap<i32, std::string::String>,
                                >,
                            );
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                wkt::internal::I32,
                                                serde_with::Same,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map_value = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map_key => {
                            if !fields.insert(__FieldTag::__map_key) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map_key",
                                ));
                            }
                            struct __With(
                                std::option::Option<
                                    std::collections::HashMap<std::string::String, i32>,
                                >,
                            );
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                serde_with::Same,
                                                wkt::internal::I32,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map_key = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map_key_value => {
                            if !fields.insert(__FieldTag::__map_key_value) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map_key_value",
                                ));
                            }
                            result.map_key_value = map
                                .next_value::<std::option::Option<
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                >>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithString {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if !self.singular.is_empty() {
            state.serialize_entry("singular", &self.singular)?;
        }
        if self.optional.is_some() {
            state.serialize_entry("optional", &self.optional)?;
        }
        if !self.repeated.is_empty() {
            state.serialize_entry("repeated", &self.repeated)?;
        }
        if !self.map_value.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<i32, std::string::String>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::< std::collections::HashMap<wkt::internal::I32, serde_with::Same> >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("mapValue", &__With(&self.map_value))?;
        }
        if !self.map_key.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<std::string::String, i32>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::< std::collections::HashMap<serde_with::Same, wkt::internal::I32> >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("mapKey", &__With(&self.map_key))?;
        }
        if !self.map_key_value.is_empty() {
            state.serialize_entry("mapKeyValue", &self.map_key_value)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// A test message for FieldMask.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithRecursion {
    /// A singular field.
    pub singular:
        std::option::Option<std::boxed::Box<crate::generated::message_with_recursion::Level0>>,

    /// An optional field.
    pub optional:
        std::option::Option<std::boxed::Box<crate::generated::message_with_recursion::Level0>>,

    /// A repeated field.
    pub repeated: std::vec::Vec<crate::generated::message_with_recursion::Level0>,

    /// A map field, messages cannot be keys.
    pub map: std::collections::HashMap<
        std::string::String,
        crate::generated::message_with_recursion::Level0,
    >,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithRecursion {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithRecursion::singular].
    pub fn set_singular<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::generated::message_with_recursion::Level0>,
    {
        self.singular = std::option::Option::Some(std::boxed::Box::new(v.into()));
        self
    }

    /// Sets or clears the value of [singular][crate::generated::MessageWithRecursion::singular].
    pub fn set_or_clear_singular<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::generated::message_with_recursion::Level0>,
    {
        self.singular = v.map(|x| std::boxed::Box::new(x.into()));
        self
    }

    /// Sets the value of [optional][crate::generated::MessageWithRecursion::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::generated::message_with_recursion::Level0>,
    {
        self.optional = std::option::Option::Some(std::boxed::Box::new(v.into()));
        self
    }

    /// Sets or clears the value of [optional][crate::generated::MessageWithRecursion::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::generated::message_with_recursion::Level0>,
    {
        self.optional = v.map(|x| std::boxed::Box::new(x.into()));
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithRecursion::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::generated::message_with_recursion::Level0>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::generated::MessageWithRecursion::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::generated::message_with_recursion::Level0>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithRecursion {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithRecursion"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithRecursion {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __optional,
            __repeated,
            __map,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithRecursion")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "optional" => Ok(__FieldTag::__optional),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "map" => Ok(__FieldTag::__map),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithRecursion;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithRecursion")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            result.singular = map.next_value::<std::option::Option<
                                std::boxed::Box<crate::generated::message_with_recursion::Level0>,
                            >>()?;
                        }
                        __FieldTag::__optional => {
                            if !fields.insert(__FieldTag::__optional) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for optional",
                                ));
                            }
                            result.optional = map.next_value::<std::option::Option<
                                std::boxed::Box<crate::generated::message_with_recursion::Level0>,
                            >>()?;
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            result.repeated = map
                                .next_value::<std::option::Option<
                                    std::vec::Vec<crate::generated::message_with_recursion::Level0>,
                                >>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__map => {
                            if !fields.insert(__FieldTag::__map) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map",
                                ));
                            }
                            result.map = map
                                .next_value::<std::option::Option<
                                    std::collections::HashMap<
                                        std::string::String,
                                        crate::generated::message_with_recursion::Level0,
                                    >,
                                >>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithRecursion {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if self.singular.is_some() {
            state.serialize_entry("singular", &self.singular)?;
        }
        if self.optional.is_some() {
            state.serialize_entry("optional", &self.optional)?;
        }
        if !self.repeated.is_empty() {
            state.serialize_entry("repeated", &self.repeated)?;
        }
        if !self.map.is_empty() {
            state.serialize_entry("map", &self.map)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// Defines additional types related to [MessageWithRecursion].
pub mod message_with_recursion {
    #[allow(unused_imports)]
    use super::*;

    #[derive(Clone, Debug, Default, PartialEq)]
    #[non_exhaustive]
    pub struct Level0 {
        pub level_1:
            std::option::Option<std::boxed::Box<crate::generated::message_with_recursion::Level1>>,

        pub side: std::option::Option<crate::generated::message_with_recursion::NonRecursive>,

        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Level0 {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [level_1][crate::generated::message_with_recursion::Level0::level_1].
        pub fn set_level_1<T>(mut self, v: T) -> Self
        where
            T: std::convert::Into<crate::generated::message_with_recursion::Level1>,
        {
            self.level_1 = std::option::Option::Some(std::boxed::Box::new(v.into()));
            self
        }

        /// Sets or clears the value of [level_1][crate::generated::message_with_recursion::Level0::level_1].
        pub fn set_or_clear_level_1<T>(mut self, v: std::option::Option<T>) -> Self
        where
            T: std::convert::Into<crate::generated::message_with_recursion::Level1>,
        {
            self.level_1 = v.map(|x| std::boxed::Box::new(x.into()));
            self
        }

        /// Sets the value of [side][crate::generated::message_with_recursion::Level0::side].
        pub fn set_side<T>(mut self, v: T) -> Self
        where
            T: std::convert::Into<crate::generated::message_with_recursion::NonRecursive>,
        {
            self.side = std::option::Option::Some(v.into());
            self
        }

        /// Sets or clears the value of [side][crate::generated::message_with_recursion::Level0::side].
        pub fn set_or_clear_side<T>(mut self, v: std::option::Option<T>) -> Self
        where
            T: std::convert::Into<crate::generated::message_with_recursion::NonRecursive>,
        {
            self.side = v.map(|x| x.into());
            self
        }
    }

    impl wkt::message::Message for Level0 {
        fn typename() -> &'static str {
            "type.googleapis.com/google.rust.sdk.test.MessageWithRecursion.Level0"
        }
    }

    #[doc(hidden)]
    impl<'de> serde::de::Deserialize<'de> for Level0 {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            #[derive(PartialEq, Eq, Hash)]
            enum __FieldTag {
                __level_1,
                __side,
                Unknown(std::string::String),
            }
            impl<'de> serde::de::Deserialize<'de> for __FieldTag {
                fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
                where
                    D: serde::Deserializer<'de>,
                {
                    struct Visitor;
                    impl<'de> serde::de::Visitor<'de> for Visitor {
                        type Value = __FieldTag;
                        fn expecting(
                            &self,
                            formatter: &mut std::fmt::Formatter,
                        ) -> std::fmt::Result {
                            formatter.write_str("a field name for Level0")
                        }
                        fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                        where
                            E: serde::de::Error,
                        {
                            use std::result::Result::Ok;
                            use std::string::ToString;
                            match value {
                                "level1" => Ok(__FieldTag::__level_1),
                                "level_1" => Ok(__FieldTag::__level_1),
                                "side" => Ok(__FieldTag::__side),
                                _ => Ok(__FieldTag::Unknown(value.to_string())),
                            }
                        }
                    }
                    deserializer.deserialize_identifier(Visitor)
                }
            }
            struct Visitor;
            impl<'de> serde::de::Visitor<'de> for Visitor {
                type Value = Level0;
                fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                    formatter.write_str("struct Level0")
                }
                fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
                where
                    A: serde::de::MapAccess<'de>,
                {
                    #[allow(unused_imports)]
                    use serde::de::Error;
                    use std::option::Option::Some;
                    let mut fields = std::collections::HashSet::new();
                    let mut result = Self::Value::new();
                    while let Some(tag) = map.next_key::<__FieldTag>()? {
                        #[allow(clippy::match_single_binding)]
                        match tag {
                            __FieldTag::__level_1 => {
                                if !fields.insert(__FieldTag::__level_1) {
                                    return std::result::Result::Err(A::Error::duplicate_field(
                                        "multiple values for level_1",
                                    ));
                                }
                                result.level_1 = map.next_value::<std::option::Option<
                                    std::boxed::Box<
                                        crate::generated::message_with_recursion::Level1,
                                    >,
                                >>()?;
                            }
                            __FieldTag::__side => {
                                if !fields.insert(__FieldTag::__side) {
                                    return std::result::Result::Err(A::Error::duplicate_field(
                                        "multiple values for side",
                                    ));
                                }
                                result.side = map.next_value::<std::option::Option<
                                    crate::generated::message_with_recursion::NonRecursive,
                                >>()?;
                            }
                            __FieldTag::Unknown(key) => {
                                let value = map.next_value::<serde_json::Value>()?;
                                result._unknown_fields.insert(key, value);
                            }
                        }
                    }
                    std::result::Result::Ok(result)
                }
            }
            deserializer.deserialize_any(Visitor)
        }
    }

    #[doc(hidden)]
    impl serde::ser::Serialize for Level0 {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::ser::Serializer,
        {
            use serde::ser::SerializeMap;
            #[allow(unused_imports)]
            use std::option::Option::Some;
            let mut state = serializer.serialize_map(std::option::Option::None)?;
            if self.level_1.is_some() {
                state.serialize_entry("level1", &self.level_1)?;
            }
            if self.side.is_some() {
                state.serialize_entry("side", &self.side)?;
            }
            if !self._unknown_fields.is_empty() {
                for (key, value) in self._unknown_fields.iter() {
                    state.serialize_entry(key, &value)?;
                }
            }
            state.end()
        }
    }

    #[derive(Clone, Debug, Default, PartialEq)]
    #[non_exhaustive]
    pub struct Level1 {
        pub recurse: std::option::Option<std::boxed::Box<crate::generated::MessageWithRecursion>>,

        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Level1 {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [recurse][crate::generated::message_with_recursion::Level1::recurse].
        pub fn set_recurse<T>(mut self, v: T) -> Self
        where
            T: std::convert::Into<crate::generated::MessageWithRecursion>,
        {
            self.recurse = std::option::Option::Some(std::boxed::Box::new(v.into()));
            self
        }

        /// Sets or clears the value of [recurse][crate::generated::message_with_recursion::Level1::recurse].
        pub fn set_or_clear_recurse<T>(mut self, v: std::option::Option<T>) -> Self
        where
            T: std::convert::Into<crate::generated::MessageWithRecursion>,
        {
            self.recurse = v.map(|x| std::boxed::Box::new(x.into()));
            self
        }
    }

    impl wkt::message::Message for Level1 {
        fn typename() -> &'static str {
            "type.googleapis.com/google.rust.sdk.test.MessageWithRecursion.Level1"
        }
    }

    #[doc(hidden)]
    impl<'de> serde::de::Deserialize<'de> for Level1 {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            #[derive(PartialEq, Eq, Hash)]
            enum __FieldTag {
                __recurse,
                Unknown(std::string::String),
            }
            impl<'de> serde::de::Deserialize<'de> for __FieldTag {
                fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
                where
                    D: serde::Deserializer<'de>,
                {
                    struct Visitor;
                    impl<'de> serde::de::Visitor<'de> for Visitor {
                        type Value = __FieldTag;
                        fn expecting(
                            &self,
                            formatter: &mut std::fmt::Formatter,
                        ) -> std::fmt::Result {
                            formatter.write_str("a field name for Level1")
                        }
                        fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                        where
                            E: serde::de::Error,
                        {
                            use std::result::Result::Ok;
                            use std::string::ToString;
                            match value {
                                "recurse" => Ok(__FieldTag::__recurse),
                                _ => Ok(__FieldTag::Unknown(value.to_string())),
                            }
                        }
                    }
                    deserializer.deserialize_identifier(Visitor)
                }
            }
            struct Visitor;
            impl<'de> serde::de::Visitor<'de> for Visitor {
                type Value = Level1;
                fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                    formatter.write_str("struct Level1")
                }
                fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
                where
                    A: serde::de::MapAccess<'de>,
                {
                    #[allow(unused_imports)]
                    use serde::de::Error;
                    use std::option::Option::Some;
                    let mut fields = std::collections::HashSet::new();
                    let mut result = Self::Value::new();
                    while let Some(tag) = map.next_key::<__FieldTag>()? {
                        #[allow(clippy::match_single_binding)]
                        match tag {
                            __FieldTag::__recurse => {
                                if !fields.insert(__FieldTag::__recurse) {
                                    return std::result::Result::Err(A::Error::duplicate_field(
                                        "multiple values for recurse",
                                    ));
                                }
                                result.recurse = map.next_value::<std::option::Option<
                                    std::boxed::Box<crate::generated::MessageWithRecursion>,
                                >>()?;
                            }
                            __FieldTag::Unknown(key) => {
                                let value = map.next_value::<serde_json::Value>()?;
                                result._unknown_fields.insert(key, value);
                            }
                        }
                    }
                    std::result::Result::Ok(result)
                }
            }
            deserializer.deserialize_any(Visitor)
        }
    }

    #[doc(hidden)]
    impl serde::ser::Serialize for Level1 {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::ser::Serializer,
        {
            use serde::ser::SerializeMap;
            #[allow(unused_imports)]
            use std::option::Option::Some;
            let mut state = serializer.serialize_map(std::option::Option::None)?;
            if self.recurse.is_some() {
                state.serialize_entry("recurse", &self.recurse)?;
            }
            if !self._unknown_fields.is_empty() {
                for (key, value) in self._unknown_fields.iter() {
                    state.serialize_entry(key, &value)?;
                }
            }
            state.end()
        }
    }

    #[derive(Clone, Debug, Default, PartialEq)]
    #[non_exhaustive]
    pub struct NonRecursive {
        pub value: std::string::String,

        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl NonRecursive {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [value][crate::generated::message_with_recursion::NonRecursive::value].
        pub fn set_value<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.value = v.into();
            self
        }
    }

    impl wkt::message::Message for NonRecursive {
        fn typename() -> &'static str {
            "type.googleapis.com/google.rust.sdk.test.MessageWithRecursion.NonRecursive"
        }
    }

    #[doc(hidden)]
    impl<'de> serde::de::Deserialize<'de> for NonRecursive {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            #[derive(PartialEq, Eq, Hash)]
            enum __FieldTag {
                __value,
                Unknown(std::string::String),
            }
            impl<'de> serde::de::Deserialize<'de> for __FieldTag {
                fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
                where
                    D: serde::Deserializer<'de>,
                {
                    struct Visitor;
                    impl<'de> serde::de::Visitor<'de> for Visitor {
                        type Value = __FieldTag;
                        fn expecting(
                            &self,
                            formatter: &mut std::fmt::Formatter,
                        ) -> std::fmt::Result {
                            formatter.write_str("a field name for NonRecursive")
                        }
                        fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                        where
                            E: serde::de::Error,
                        {
                            use std::result::Result::Ok;
                            use std::string::ToString;
                            match value {
                                "value" => Ok(__FieldTag::__value),
                                _ => Ok(__FieldTag::Unknown(value.to_string())),
                            }
                        }
                    }
                    deserializer.deserialize_identifier(Visitor)
                }
            }
            struct Visitor;
            impl<'de> serde::de::Visitor<'de> for Visitor {
                type Value = NonRecursive;
                fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                    formatter.write_str("struct NonRecursive")
                }
                fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
                where
                    A: serde::de::MapAccess<'de>,
                {
                    #[allow(unused_imports)]
                    use serde::de::Error;
                    use std::option::Option::Some;
                    let mut fields = std::collections::HashSet::new();
                    let mut result = Self::Value::new();
                    while let Some(tag) = map.next_key::<__FieldTag>()? {
                        #[allow(clippy::match_single_binding)]
                        match tag {
                            __FieldTag::__value => {
                                if !fields.insert(__FieldTag::__value) {
                                    return std::result::Result::Err(A::Error::duplicate_field(
                                        "multiple values for value",
                                    ));
                                }
                                result.value = map
                                    .next_value::<std::option::Option<std::string::String>>()?
                                    .unwrap_or_default();
                            }
                            __FieldTag::Unknown(key) => {
                                let value = map.next_value::<serde_json::Value>()?;
                                result._unknown_fields.insert(key, value);
                            }
                        }
                    }
                    std::result::Result::Ok(result)
                }
            }
            deserializer.deserialize_any(Visitor)
        }
    }

    #[doc(hidden)]
    impl serde::ser::Serialize for NonRecursive {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::ser::Serializer,
        {
            use serde::ser::SerializeMap;
            #[allow(unused_imports)]
            use std::option::Option::Some;
            let mut state = serializer.serialize_map(std::option::Option::None)?;
            if !self.value.is_empty() {
                state.serialize_entry("value", &self.value)?;
            }
            if !self._unknown_fields.is_empty() {
                for (key, value) in self._unknown_fields.iter() {
                    state.serialize_entry(key, &value)?;
                }
            }
            state.end()
        }
    }
}

/// A test message for Value.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithValue {
    /// A singular field.
    pub singular: std::option::Option<wkt::Value>,

    /// An optional field.
    pub optional: std::option::Option<wkt::Value>,

    /// A repeated field.
    pub repeated: std::vec::Vec<wkt::Value>,

    /// A map field, messages cannot be keys.
    pub map: std::collections::HashMap<std::string::String, wkt::Value>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithValue {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithValue::singular].
    pub fn set_singular<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::Value>,
    {
        self.singular = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [singular][crate::generated::MessageWithValue::singular].
    pub fn set_or_clear_singular<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::Value>,
    {
        self.singular = v.map(|x| x.into());
        self
    }

    /// Sets the value of [optional][crate::generated::MessageWithValue::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::Value>,
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::generated::MessageWithValue::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::Value>,
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithValue::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::Value>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::generated::MessageWithValue::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::Value>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithValue {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithValue"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithValue {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __optional,
            __repeated,
            __map,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithValue")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "optional" => Ok(__FieldTag::__optional),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "map" => Ok(__FieldTag::__map),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithValue;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithValue")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            result.singular = map
                                .next_value::<std::option::Option<wkt::Value>>()?
                                .or(Some(wkt::Value::Null));
                        }
                        __FieldTag::__optional => {
                            if !fields.insert(__FieldTag::__optional) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for optional",
                                ));
                            }
                            result.optional = map
                                .next_value::<std::option::Option<wkt::Value>>()?
                                .or(Some(wkt::Value::Null));
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            result.repeated = map
                                .next_value::<std::option::Option<std::vec::Vec<wkt::Value>>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__map => {
                            if !fields.insert(__FieldTag::__map) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map",
                                ));
                            }
                            result.map = map
                                .next_value::<std::option::Option<
                                    std::collections::HashMap<std::string::String, wkt::Value>,
                                >>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithValue {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if self.singular.is_some() {
            state.serialize_entry("singular", &self.singular)?;
        }
        if self.optional.is_some() {
            state.serialize_entry("optional", &self.optional)?;
        }
        if !self.repeated.is_empty() {
            state.serialize_entry("repeated", &self.repeated)?;
        }
        if !self.map.is_empty() {
            state.serialize_entry("map", &self.map)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// A test message for Struct.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithStruct {
    /// A singular field.
    pub singular: std::option::Option<wkt::Struct>,

    /// An optional field.
    pub optional: std::option::Option<wkt::Struct>,

    /// A repeated field.
    pub repeated: std::vec::Vec<wkt::Struct>,

    /// A map field, messages cannot be keys.
    pub map: std::collections::HashMap<std::string::String, wkt::Struct>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithStruct {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithStruct::singular].
    pub fn set_singular<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::Struct>,
    {
        self.singular = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [singular][crate::generated::MessageWithStruct::singular].
    pub fn set_or_clear_singular<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::Struct>,
    {
        self.singular = v.map(|x| x.into());
        self
    }

    /// Sets the value of [optional][crate::generated::MessageWithStruct::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::Struct>,
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::generated::MessageWithStruct::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::Struct>,
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithStruct::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::Struct>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::generated::MessageWithStruct::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::Struct>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithStruct {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithStruct"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithStruct {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __optional,
            __repeated,
            __map,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithStruct")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "optional" => Ok(__FieldTag::__optional),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "map" => Ok(__FieldTag::__map),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithStruct;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithStruct")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            result.singular =
                                map.next_value::<std::option::Option<wkt::Struct>>()?;
                        }
                        __FieldTag::__optional => {
                            if !fields.insert(__FieldTag::__optional) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for optional",
                                ));
                            }
                            result.optional =
                                map.next_value::<std::option::Option<wkt::Struct>>()?;
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            result.repeated = map
                                .next_value::<std::option::Option<std::vec::Vec<wkt::Struct>>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__map => {
                            if !fields.insert(__FieldTag::__map) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map",
                                ));
                            }
                            result.map = map
                                .next_value::<std::option::Option<
                                    std::collections::HashMap<std::string::String, wkt::Struct>,
                                >>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithStruct {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if self.singular.is_some() {
            state.serialize_entry("singular", &self.singular)?;
        }
        if self.optional.is_some() {
            state.serialize_entry("optional", &self.optional)?;
        }
        if !self.repeated.is_empty() {
            state.serialize_entry("repeated", &self.repeated)?;
        }
        if !self.map.is_empty() {
            state.serialize_entry("map", &self.map)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// A test message for ListValue.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithListValue {
    /// A singular field.
    pub singular: std::option::Option<wkt::ListValue>,

    /// An optional field.
    pub optional: std::option::Option<wkt::ListValue>,

    /// A repeated field.
    pub repeated: std::vec::Vec<wkt::ListValue>,

    /// A map field, messages cannot be keys.
    pub map: std::collections::HashMap<std::string::String, wkt::ListValue>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithListValue {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithListValue::singular].
    pub fn set_singular<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::ListValue>,
    {
        self.singular = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [singular][crate::generated::MessageWithListValue::singular].
    pub fn set_or_clear_singular<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::ListValue>,
    {
        self.singular = v.map(|x| x.into());
        self
    }

    /// Sets the value of [optional][crate::generated::MessageWithListValue::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::ListValue>,
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::generated::MessageWithListValue::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::ListValue>,
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithListValue::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::ListValue>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::generated::MessageWithListValue::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::ListValue>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithListValue {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithListValue"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithListValue {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __optional,
            __repeated,
            __map,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithListValue")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "optional" => Ok(__FieldTag::__optional),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "map" => Ok(__FieldTag::__map),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithListValue;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithListValue")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            result.singular =
                                map.next_value::<std::option::Option<wkt::ListValue>>()?;
                        }
                        __FieldTag::__optional => {
                            if !fields.insert(__FieldTag::__optional) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for optional",
                                ));
                            }
                            result.optional =
                                map.next_value::<std::option::Option<wkt::ListValue>>()?;
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            result.repeated = map
                                .next_value::<std::option::Option<std::vec::Vec<wkt::ListValue>>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__map => {
                            if !fields.insert(__FieldTag::__map) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map",
                                ));
                            }
                            result.map = map
                                .next_value::<std::option::Option<
                                    std::collections::HashMap<std::string::String, wkt::ListValue>,
                                >>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithListValue {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if self.singular.is_some() {
            state.serialize_entry("singular", &self.singular)?;
        }
        if self.optional.is_some() {
            state.serialize_entry("optional", &self.optional)?;
        }
        if !self.repeated.is_empty() {
            state.serialize_entry("repeated", &self.repeated)?;
        }
        if !self.map.is_empty() {
            state.serialize_entry("map", &self.map)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// A test message for NullValue.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithNullValue {
    /// A singular field.
    pub singular: wkt::NullValue,

    /// An optional field.
    pub optional: std::option::Option<wkt::NullValue>,

    /// A repeated field.
    pub repeated: std::vec::Vec<wkt::NullValue>,

    /// A map field, messages cannot be keys.
    pub map: std::collections::HashMap<std::string::String, wkt::NullValue>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithNullValue {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithNullValue::singular].
    pub fn set_singular<T: std::convert::Into<wkt::NullValue>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::generated::MessageWithNullValue::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::NullValue>,
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::generated::MessageWithNullValue::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::NullValue>,
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithNullValue::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::NullValue>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::generated::MessageWithNullValue::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::NullValue>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithNullValue {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithNullValue"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithNullValue {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __optional,
            __repeated,
            __map,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithNullValue")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "optional" => Ok(__FieldTag::__optional),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "map" => Ok(__FieldTag::__map),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithNullValue;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithNullValue")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            result.singular = map
                                .next_value::<std::option::Option<wkt::NullValue>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__optional => {
                            if !fields.insert(__FieldTag::__optional) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for optional",
                                ));
                            }
                            result.optional = map
                                .next_value::<std::option::Option<wkt::NullValue>>()?
                                .or(Some(wkt::NullValue));
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            result.repeated = map
                                .next_value::<std::option::Option<std::vec::Vec<wkt::NullValue>>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__map => {
                            if !fields.insert(__FieldTag::__map) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map",
                                ));
                            }
                            result.map = map
                                .next_value::<std::option::Option<
                                    std::collections::HashMap<std::string::String, wkt::NullValue>,
                                >>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithNullValue {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if !wkt::internal::is_default(&self.singular) {
            state.serialize_entry("singular", &self.singular)?;
        }
        if self.optional.is_some() {
            state.serialize_entry("optional", &self.optional)?;
        }
        if !self.repeated.is_empty() {
            state.serialize_entry("repeated", &self.repeated)?;
        }
        if !self.map.is_empty() {
            state.serialize_entry("map", &self.map)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// A test message for FieldMask.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithFieldMask {
    /// A singular field.
    pub singular: std::option::Option<wkt::FieldMask>,

    /// An optional field.
    pub optional: std::option::Option<wkt::FieldMask>,

    /// A repeated field.
    pub repeated: std::vec::Vec<wkt::FieldMask>,

    /// A map field, messages cannot be keys.
    pub map: std::collections::HashMap<std::string::String, wkt::FieldMask>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithFieldMask {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithFieldMask::singular].
    pub fn set_singular<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::FieldMask>,
    {
        self.singular = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [singular][crate::generated::MessageWithFieldMask::singular].
    pub fn set_or_clear_singular<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::FieldMask>,
    {
        self.singular = v.map(|x| x.into());
        self
    }

    /// Sets the value of [optional][crate::generated::MessageWithFieldMask::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::FieldMask>,
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::generated::MessageWithFieldMask::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::FieldMask>,
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithFieldMask::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::FieldMask>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::generated::MessageWithFieldMask::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::FieldMask>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithFieldMask {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithFieldMask"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithFieldMask {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __optional,
            __repeated,
            __map,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithFieldMask")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "optional" => Ok(__FieldTag::__optional),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "map" => Ok(__FieldTag::__map),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithFieldMask;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithFieldMask")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            result.singular =
                                map.next_value::<std::option::Option<wkt::FieldMask>>()?;
                        }
                        __FieldTag::__optional => {
                            if !fields.insert(__FieldTag::__optional) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for optional",
                                ));
                            }
                            result.optional =
                                map.next_value::<std::option::Option<wkt::FieldMask>>()?;
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            result.repeated = map
                                .next_value::<std::option::Option<std::vec::Vec<wkt::FieldMask>>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__map => {
                            if !fields.insert(__FieldTag::__map) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map",
                                ));
                            }
                            result.map = map
                                .next_value::<std::option::Option<
                                    std::collections::HashMap<std::string::String, wkt::FieldMask>,
                                >>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithFieldMask {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if self.singular.is_some() {
            state.serialize_entry("singular", &self.singular)?;
        }
        if self.optional.is_some() {
            state.serialize_entry("optional", &self.optional)?;
        }
        if !self.repeated.is_empty() {
            state.serialize_entry("repeated", &self.repeated)?;
        }
        if !self.map.is_empty() {
            state.serialize_entry("map", &self.map)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// A test message for google.protobuf.FloatValue.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithFloatValue {
    /// A singular field.
    pub singular: std::option::Option<wkt::FloatValue>,

    /// A repeated field.
    pub repeated: std::vec::Vec<wkt::FloatValue>,

    /// Test google.protobuf.FloatValue as amap values.
    pub map: std::collections::HashMap<std::string::String, wkt::FloatValue>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithFloatValue {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithFloatValue::singular].
    pub fn set_singular<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::FloatValue>,
    {
        self.singular = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [singular][crate::generated::MessageWithFloatValue::singular].
    pub fn set_or_clear_singular<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::FloatValue>,
    {
        self.singular = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithFloatValue::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::FloatValue>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::generated::MessageWithFloatValue::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::FloatValue>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithFloatValue {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithFloatValue"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithFloatValue {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __repeated,
            __map,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithFloatValue")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "map" => Ok(__FieldTag::__map),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithFloatValue;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithFloatValue")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            struct __With(std::option::Option<wkt::FloatValue>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<wkt::internal::F32> >::deserialize(deserializer).map(__With)
                                }
                            }
                            result.singular = map.next_value::<__With>()?.0;
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            struct __With(std::option::Option<std::vec::Vec<wkt::FloatValue>>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<std::vec::Vec<wkt::internal::F32>>,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.repeated = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map => {
                            if !fields.insert(__FieldTag::__map) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map",
                                ));
                            }
                            struct __With(
                                std::option::Option<
                                    std::collections::HashMap<std::string::String, wkt::FloatValue>,
                                >,
                            );
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                serde_with::Same,
                                                wkt::internal::F32,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithFloatValue {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if self.singular.is_some() {
            struct __With<'a>(&'a std::option::Option<wkt::FloatValue>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::option::Option<wkt::internal::F32>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("singular", &__With(&self.singular))?;
        }
        if !self.repeated.is_empty() {
            struct __With<'a>(&'a std::vec::Vec<wkt::FloatValue>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::vec::Vec<wkt::internal::F32>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("repeated", &__With(&self.repeated))?;
        }
        if !self.map.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<std::string::String, wkt::FloatValue>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::< std::collections::HashMap<serde_with::Same, wkt::internal::F32> >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("map", &__With(&self.map))?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// A test message for google.protobuf.DoubleValue.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithDoubleValue {
    /// A singular field.
    pub singular: std::option::Option<wkt::DoubleValue>,

    /// A repeated field.
    pub repeated: std::vec::Vec<wkt::DoubleValue>,

    /// Test google.protobuf.DoubleValue as map values.
    pub map: std::collections::HashMap<std::string::String, wkt::DoubleValue>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithDoubleValue {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithDoubleValue::singular].
    pub fn set_singular<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::DoubleValue>,
    {
        self.singular = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [singular][crate::generated::MessageWithDoubleValue::singular].
    pub fn set_or_clear_singular<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::DoubleValue>,
    {
        self.singular = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithDoubleValue::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::DoubleValue>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::generated::MessageWithDoubleValue::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::DoubleValue>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithDoubleValue {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithDoubleValue"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithDoubleValue {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __repeated,
            __map,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithDoubleValue")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "map" => Ok(__FieldTag::__map),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithDoubleValue;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithDoubleValue")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            struct __With(std::option::Option<wkt::DoubleValue>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<wkt::internal::F64> >::deserialize(deserializer).map(__With)
                                }
                            }
                            result.singular = map.next_value::<__With>()?.0;
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            struct __With(std::option::Option<std::vec::Vec<wkt::DoubleValue>>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<std::vec::Vec<wkt::internal::F64>>,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.repeated = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map => {
                            if !fields.insert(__FieldTag::__map) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map",
                                ));
                            }
                            struct __With(
                                std::option::Option<
                                    std::collections::HashMap<
                                        std::string::String,
                                        wkt::DoubleValue,
                                    >,
                                >,
                            );
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                serde_with::Same,
                                                wkt::internal::F64,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithDoubleValue {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if self.singular.is_some() {
            struct __With<'a>(&'a std::option::Option<wkt::DoubleValue>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::option::Option<wkt::internal::F64>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("singular", &__With(&self.singular))?;
        }
        if !self.repeated.is_empty() {
            struct __With<'a>(&'a std::vec::Vec<wkt::DoubleValue>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::vec::Vec<wkt::internal::F64>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("repeated", &__With(&self.repeated))?;
        }
        if !self.map.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<std::string::String, wkt::DoubleValue>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::< std::collections::HashMap<serde_with::Same, wkt::internal::F64> >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("map", &__With(&self.map))?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// A test message for google.protobuf.Int32Value.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithInt32Value {
    /// A singular field.
    pub singular: std::option::Option<wkt::Int32Value>,

    /// A repeated field.
    pub repeated: std::vec::Vec<wkt::Int32Value>,

    /// Test google.protobuf.Int32Value as map values.
    pub map: std::collections::HashMap<std::string::String, wkt::Int32Value>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithInt32Value {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithInt32Value::singular].
    pub fn set_singular<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::Int32Value>,
    {
        self.singular = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [singular][crate::generated::MessageWithInt32Value::singular].
    pub fn set_or_clear_singular<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::Int32Value>,
    {
        self.singular = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithInt32Value::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::Int32Value>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::generated::MessageWithInt32Value::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::Int32Value>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithInt32Value {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithInt32Value"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithInt32Value {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __repeated,
            __map,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithInt32Value")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "map" => Ok(__FieldTag::__map),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithInt32Value;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithInt32Value")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            struct __With(std::option::Option<wkt::Int32Value>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<wkt::internal::I32> >::deserialize(deserializer).map(__With)
                                }
                            }
                            result.singular = map.next_value::<__With>()?.0;
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            struct __With(std::option::Option<std::vec::Vec<wkt::Int32Value>>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<std::vec::Vec<wkt::internal::I32>>,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.repeated = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map => {
                            if !fields.insert(__FieldTag::__map) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map",
                                ));
                            }
                            struct __With(
                                std::option::Option<
                                    std::collections::HashMap<std::string::String, wkt::Int32Value>,
                                >,
                            );
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                serde_with::Same,
                                                wkt::internal::I32,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithInt32Value {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if self.singular.is_some() {
            struct __With<'a>(&'a std::option::Option<wkt::Int32Value>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::option::Option<wkt::internal::I32>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("singular", &__With(&self.singular))?;
        }
        if !self.repeated.is_empty() {
            struct __With<'a>(&'a std::vec::Vec<wkt::Int32Value>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::vec::Vec<wkt::internal::I32>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("repeated", &__With(&self.repeated))?;
        }
        if !self.map.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<std::string::String, wkt::Int32Value>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::< std::collections::HashMap<serde_with::Same, wkt::internal::I32> >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("map", &__With(&self.map))?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// A test message for u32.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithUInt32Value {
    /// A singular field.
    pub singular: std::option::Option<wkt::UInt32Value>,

    /// A repeated field.
    pub repeated: std::vec::Vec<wkt::UInt32Value>,

    /// Test google.protobuf.UInt32Value as map values.
    pub map: std::collections::HashMap<std::string::String, wkt::UInt32Value>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithUInt32Value {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithUInt32Value::singular].
    pub fn set_singular<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::UInt32Value>,
    {
        self.singular = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [singular][crate::generated::MessageWithUInt32Value::singular].
    pub fn set_or_clear_singular<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::UInt32Value>,
    {
        self.singular = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithUInt32Value::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::UInt32Value>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::generated::MessageWithUInt32Value::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::UInt32Value>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithUInt32Value {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithUInt32Value"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithUInt32Value {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __repeated,
            __map,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithUInt32Value")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "map" => Ok(__FieldTag::__map),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithUInt32Value;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithUInt32Value")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            struct __With(std::option::Option<wkt::UInt32Value>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<wkt::internal::U32> >::deserialize(deserializer).map(__With)
                                }
                            }
                            result.singular = map.next_value::<__With>()?.0;
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            struct __With(std::option::Option<std::vec::Vec<wkt::UInt32Value>>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<std::vec::Vec<wkt::internal::U32>>,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.repeated = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map => {
                            if !fields.insert(__FieldTag::__map) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map",
                                ));
                            }
                            struct __With(
                                std::option::Option<
                                    std::collections::HashMap<
                                        std::string::String,
                                        wkt::UInt32Value,
                                    >,
                                >,
                            );
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                serde_with::Same,
                                                wkt::internal::U32,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithUInt32Value {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if self.singular.is_some() {
            struct __With<'a>(&'a std::option::Option<wkt::UInt32Value>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::option::Option<wkt::internal::U32>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("singular", &__With(&self.singular))?;
        }
        if !self.repeated.is_empty() {
            struct __With<'a>(&'a std::vec::Vec<wkt::UInt32Value>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::vec::Vec<wkt::internal::U32>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("repeated", &__With(&self.repeated))?;
        }
        if !self.map.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<std::string::String, wkt::UInt32Value>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::< std::collections::HashMap<serde_with::Same, wkt::internal::U32> >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("map", &__With(&self.map))?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// A test message for google.protobuf.Int64Value.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithInt64Value {
    /// A singular field.
    pub singular: std::option::Option<wkt::Int64Value>,

    /// A repeated field.
    pub repeated: std::vec::Vec<wkt::Int64Value>,

    /// Test google.protobuf.Int64Value as values.
    pub map: std::collections::HashMap<std::string::String, wkt::Int64Value>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithInt64Value {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithInt64Value::singular].
    pub fn set_singular<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::Int64Value>,
    {
        self.singular = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [singular][crate::generated::MessageWithInt64Value::singular].
    pub fn set_or_clear_singular<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::Int64Value>,
    {
        self.singular = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithInt64Value::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::Int64Value>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::generated::MessageWithInt64Value::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::Int64Value>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithInt64Value {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithInt64Value"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithInt64Value {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __repeated,
            __map,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithInt64Value")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "map" => Ok(__FieldTag::__map),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithInt64Value;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithInt64Value")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            struct __With(std::option::Option<wkt::Int64Value>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<wkt::internal::I64> >::deserialize(deserializer).map(__With)
                                }
                            }
                            result.singular = map.next_value::<__With>()?.0;
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            struct __With(std::option::Option<std::vec::Vec<wkt::Int64Value>>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<std::vec::Vec<wkt::internal::I64>>,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.repeated = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map => {
                            if !fields.insert(__FieldTag::__map) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map",
                                ));
                            }
                            struct __With(
                                std::option::Option<
                                    std::collections::HashMap<std::string::String, wkt::Int64Value>,
                                >,
                            );
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                serde_with::Same,
                                                wkt::internal::I64,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithInt64Value {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if self.singular.is_some() {
            struct __With<'a>(&'a std::option::Option<wkt::Int64Value>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::option::Option<wkt::internal::I64>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("singular", &__With(&self.singular))?;
        }
        if !self.repeated.is_empty() {
            struct __With<'a>(&'a std::vec::Vec<wkt::Int64Value>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::vec::Vec<wkt::internal::I64>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("repeated", &__With(&self.repeated))?;
        }
        if !self.map.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<std::string::String, wkt::Int64Value>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::< std::collections::HashMap<serde_with::Same, wkt::internal::I64> >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("map", &__With(&self.map))?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// A test message for google.protobuf.Int64Value.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithUInt64Value {
    /// A singular field.
    pub singular: std::option::Option<wkt::Int64Value>,

    /// A repeated field.
    pub repeated: std::vec::Vec<wkt::Int64Value>,

    /// Test google.protobuf.Int64Value as values.
    pub map: std::collections::HashMap<std::string::String, wkt::Int64Value>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithUInt64Value {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithUInt64Value::singular].
    pub fn set_singular<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::Int64Value>,
    {
        self.singular = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [singular][crate::generated::MessageWithUInt64Value::singular].
    pub fn set_or_clear_singular<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::Int64Value>,
    {
        self.singular = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithUInt64Value::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::Int64Value>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::generated::MessageWithUInt64Value::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::Int64Value>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithUInt64Value {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithUInt64Value"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithUInt64Value {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __repeated,
            __map,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithUInt64Value")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "map" => Ok(__FieldTag::__map),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithUInt64Value;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithUInt64Value")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            struct __With(std::option::Option<wkt::Int64Value>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<wkt::internal::I64> >::deserialize(deserializer).map(__With)
                                }
                            }
                            result.singular = map.next_value::<__With>()?.0;
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            struct __With(std::option::Option<std::vec::Vec<wkt::Int64Value>>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<std::vec::Vec<wkt::internal::I64>>,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.repeated = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map => {
                            if !fields.insert(__FieldTag::__map) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map",
                                ));
                            }
                            struct __With(
                                std::option::Option<
                                    std::collections::HashMap<std::string::String, wkt::Int64Value>,
                                >,
                            );
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                serde_with::Same,
                                                wkt::internal::I64,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithUInt64Value {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if self.singular.is_some() {
            struct __With<'a>(&'a std::option::Option<wkt::Int64Value>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::option::Option<wkt::internal::I64>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("singular", &__With(&self.singular))?;
        }
        if !self.repeated.is_empty() {
            struct __With<'a>(&'a std::vec::Vec<wkt::Int64Value>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::vec::Vec<wkt::internal::I64>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("repeated", &__With(&self.repeated))?;
        }
        if !self.map.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<std::string::String, wkt::Int64Value>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::< std::collections::HashMap<serde_with::Same, wkt::internal::I64> >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("map", &__With(&self.map))?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// A test message for google.protobuf.BytesValue.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithBytesValue {
    /// A singular field.
    pub singular: std::option::Option<wkt::BytesValue>,

    /// A repeated field.
    pub repeated: std::vec::Vec<wkt::BytesValue>,

    /// A map field, google.protobuf.BytesValue cannot be keys, so we only need to test them as
    /// values.
    pub map: std::collections::HashMap<std::string::String, wkt::BytesValue>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithBytesValue {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithBytesValue::singular].
    pub fn set_singular<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::BytesValue>,
    {
        self.singular = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [singular][crate::generated::MessageWithBytesValue::singular].
    pub fn set_or_clear_singular<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::BytesValue>,
    {
        self.singular = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithBytesValue::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::BytesValue>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::generated::MessageWithBytesValue::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::BytesValue>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithBytesValue {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithBytesValue"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithBytesValue {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __repeated,
            __map,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithBytesValue")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "map" => Ok(__FieldTag::__map),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithBytesValue;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithBytesValue")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            struct __With(std::option::Option<wkt::BytesValue>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::< std::option::Option<serde_with::base64::Base64> >::deserialize(deserializer).map(__With)
                                }
                            }
                            result.singular = map.next_value::<__With>()?.0;
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            struct __With(std::option::Option<std::vec::Vec<wkt::BytesValue>>);
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::vec::Vec<serde_with::base64::Base64>,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.repeated = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::__map => {
                            if !fields.insert(__FieldTag::__map) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map",
                                ));
                            }
                            struct __With(
                                std::option::Option<
                                    std::collections::HashMap<std::string::String, wkt::BytesValue>,
                                >,
                            );
                            impl<'de> serde::de::Deserialize<'de> for __With {
                                fn deserialize<D>(
                                    deserializer: D,
                                ) -> std::result::Result<Self, D::Error>
                                where
                                    D: serde::de::Deserializer<'de>,
                                {
                                    serde_with::As::<
                                        std::option::Option<
                                            std::collections::HashMap<
                                                serde_with::Same,
                                                serde_with::base64::Base64,
                                            >,
                                        >,
                                    >::deserialize(deserializer)
                                    .map(__With)
                                }
                            }
                            result.map = map.next_value::<__With>()?.0.unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithBytesValue {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if self.singular.is_some() {
            struct __With<'a>(&'a std::option::Option<wkt::BytesValue>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::option::Option<serde_with::base64::Base64>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("singular", &__With(&self.singular))?;
        }
        if !self.repeated.is_empty() {
            struct __With<'a>(&'a std::vec::Vec<wkt::BytesValue>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<std::vec::Vec<serde_with::base64::Base64>>::serialize(
                        self.0, serializer,
                    )
                }
            }
            state.serialize_entry("repeated", &__With(&self.repeated))?;
        }
        if !self.map.is_empty() {
            struct __With<'a>(&'a std::collections::HashMap<std::string::String, wkt::BytesValue>);
            impl<'a> serde::ser::Serialize for __With<'a> {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::ser::Serializer,
                {
                    serde_with::As::<
                        std::collections::HashMap<serde_with::Same, serde_with::base64::Base64>,
                    >::serialize(self.0, serializer)
                }
            }
            state.serialize_entry("map", &__With(&self.map))?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// A test message for google.protobuf.BoolValue.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithBoolValue {
    /// A singular field.
    pub singular: std::option::Option<wkt::BoolValue>,

    /// A repeated field.
    pub repeated: std::vec::Vec<wkt::BoolValue>,

    /// Test google.protobuf.BoolValue as map values.
    pub map: std::collections::HashMap<std::string::String, wkt::BoolValue>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithBoolValue {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithBoolValue::singular].
    pub fn set_singular<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::BoolValue>,
    {
        self.singular = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [singular][crate::generated::MessageWithBoolValue::singular].
    pub fn set_or_clear_singular<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::BoolValue>,
    {
        self.singular = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithBoolValue::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::BoolValue>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::generated::MessageWithBoolValue::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::BoolValue>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithBoolValue {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithBoolValue"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithBoolValue {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __repeated,
            __map,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithBoolValue")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "map" => Ok(__FieldTag::__map),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithBoolValue;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithBoolValue")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            result.singular =
                                map.next_value::<std::option::Option<wkt::BoolValue>>()?;
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            result.repeated = map
                                .next_value::<std::option::Option<std::vec::Vec<wkt::BoolValue>>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__map => {
                            if !fields.insert(__FieldTag::__map) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map",
                                ));
                            }
                            result.map = map
                                .next_value::<std::option::Option<
                                    std::collections::HashMap<std::string::String, wkt::BoolValue>,
                                >>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithBoolValue {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if self.singular.is_some() {
            state.serialize_entry("singular", &self.singular)?;
        }
        if !self.repeated.is_empty() {
            state.serialize_entry("repeated", &self.repeated)?;
        }
        if !self.map.is_empty() {
            state.serialize_entry("map", &self.map)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// A test message for string.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct MessageWithStringValue {
    /// A singular field.
    pub singular: std::option::Option<wkt::StringValue>,

    /// A repeated field.
    pub repeated: std::vec::Vec<wkt::StringValue>,

    /// Test string as map values.
    pub map: std::collections::HashMap<std::string::String, wkt::StringValue>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithStringValue {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::generated::MessageWithStringValue::singular].
    pub fn set_singular<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::StringValue>,
    {
        self.singular = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [singular][crate::generated::MessageWithStringValue::singular].
    pub fn set_or_clear_singular<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::StringValue>,
    {
        self.singular = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::generated::MessageWithStringValue::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::StringValue>,
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::generated::MessageWithStringValue::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::StringValue>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithStringValue {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithStringValue"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for MessageWithStringValue {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __singular,
            __repeated,
            __map,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for MessageWithStringValue")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "singular" => Ok(__FieldTag::__singular),
                            "repeated" => Ok(__FieldTag::__repeated),
                            "map" => Ok(__FieldTag::__map),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = MessageWithStringValue;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MessageWithStringValue")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__singular => {
                            if !fields.insert(__FieldTag::__singular) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for singular",
                                ));
                            }
                            result.singular =
                                map.next_value::<std::option::Option<wkt::StringValue>>()?;
                        }
                        __FieldTag::__repeated => {
                            if !fields.insert(__FieldTag::__repeated) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for repeated",
                                ));
                            }
                            result.repeated = map
                                .next_value::<std::option::Option<std::vec::Vec<wkt::StringValue>>>(
                                )?
                                .unwrap_or_default();
                        }
                        __FieldTag::__map => {
                            if !fields.insert(__FieldTag::__map) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for map",
                                ));
                            }
                            result.map = map
                                .next_value::<std::option::Option<
                                    std::collections::HashMap<
                                        std::string::String,
                                        wkt::StringValue,
                                    >,
                                >>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for MessageWithStringValue {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if self.singular.is_some() {
            state.serialize_entry("singular", &self.singular)?;
        }
        if !self.repeated.is_empty() {
            state.serialize_entry("repeated", &self.repeated)?;
        }
        if !self.map.is_empty() {
            state.serialize_entry("map", &self.map)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}
