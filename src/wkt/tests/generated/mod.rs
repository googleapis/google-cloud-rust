// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.


/// A message with several interesting `oneof` fields.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageWithOneOf {

    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub single_string: std::option::Option<crate::test::protos::message_with_one_of::SingleString>,

    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub two_strings: std::option::Option<crate::test::protos::message_with_one_of::TwoStrings>,

    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub one_message: std::option::Option<crate::test::protos::message_with_one_of::OneMessage>,

    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub mixed: std::option::Option<crate::test::protos::message_with_one_of::Mixed>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithOneOf {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [single_string][crate::test::protos::MessageWithOneOf::single_string].
    ///
    /// Note that all the setters affecting `single_string` are mutually
    /// exclusive.
    pub fn set_single_string<T: std::convert::Into<std::option::Option<crate::test::protos::message_with_one_of::SingleString>>>(mut self, v: T) -> Self
    {
        self.single_string = v.into();
        self
    }

    /// The value of [single_string][crate::test::protos::MessageWithOneOf::single_string]
    /// if it holds a `StringContents`, `None` if the field is not set or
    /// holds a different branch.
    pub fn string_contents(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.single_string.as_ref().and_then(|v| match v {
            crate::test::protos::message_with_one_of::SingleString::StringContents(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [single_string][crate::test::protos::MessageWithOneOf::single_string]
    /// to hold a `StringContents`.
    ///
    /// Note that all the setters affecting `single_string` are
    /// mutually exclusive.
    pub fn set_string_contents<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.single_string = std::option::Option::Some(
            crate::test::protos::message_with_one_of::SingleString::StringContents(
                v.into()
            )
        );
        self
    }

    /// Sets the value of [two_strings][crate::test::protos::MessageWithOneOf::two_strings].
    ///
    /// Note that all the setters affecting `two_strings` are mutually
    /// exclusive.
    pub fn set_two_strings<T: std::convert::Into<std::option::Option<crate::test::protos::message_with_one_of::TwoStrings>>>(mut self, v: T) -> Self
    {
        self.two_strings = v.into();
        self
    }

    /// The value of [two_strings][crate::test::protos::MessageWithOneOf::two_strings]
    /// if it holds a `StringContentsOne`, `None` if the field is not set or
    /// holds a different branch.
    pub fn string_contents_one(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.two_strings.as_ref().and_then(|v| match v {
            crate::test::protos::message_with_one_of::TwoStrings::StringContentsOne(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [two_strings][crate::test::protos::MessageWithOneOf::two_strings]
    /// to hold a `StringContentsOne`.
    ///
    /// Note that all the setters affecting `two_strings` are
    /// mutually exclusive.
    pub fn set_string_contents_one<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.two_strings = std::option::Option::Some(
            crate::test::protos::message_with_one_of::TwoStrings::StringContentsOne(
                v.into()
            )
        );
        self
    }

    /// The value of [two_strings][crate::test::protos::MessageWithOneOf::two_strings]
    /// if it holds a `StringContentsTwo`, `None` if the field is not set or
    /// holds a different branch.
    pub fn string_contents_two(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.two_strings.as_ref().and_then(|v| match v {
            crate::test::protos::message_with_one_of::TwoStrings::StringContentsTwo(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [two_strings][crate::test::protos::MessageWithOneOf::two_strings]
    /// to hold a `StringContentsTwo`.
    ///
    /// Note that all the setters affecting `two_strings` are
    /// mutually exclusive.
    pub fn set_string_contents_two<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.two_strings = std::option::Option::Some(
            crate::test::protos::message_with_one_of::TwoStrings::StringContentsTwo(
                v.into()
            )
        );
        self
    }

    /// Sets the value of [one_message][crate::test::protos::MessageWithOneOf::one_message].
    ///
    /// Note that all the setters affecting `one_message` are mutually
    /// exclusive.
    pub fn set_one_message<T: std::convert::Into<std::option::Option<crate::test::protos::message_with_one_of::OneMessage>>>(mut self, v: T) -> Self
    {
        self.one_message = v.into();
        self
    }

    /// The value of [one_message][crate::test::protos::MessageWithOneOf::one_message]
    /// if it holds a `MessageValue`, `None` if the field is not set or
    /// holds a different branch.
    pub fn message_value(&self) -> std::option::Option<&std::boxed::Box<crate::test::protos::message_with_one_of::Message>> {
        #[allow(unreachable_patterns)]
        self.one_message.as_ref().and_then(|v| match v {
            crate::test::protos::message_with_one_of::OneMessage::MessageValue(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [one_message][crate::test::protos::MessageWithOneOf::one_message]
    /// to hold a `MessageValue`.
    ///
    /// Note that all the setters affecting `one_message` are
    /// mutually exclusive.
    pub fn set_message_value<T: std::convert::Into<std::boxed::Box<crate::test::protos::message_with_one_of::Message>>>(mut self, v: T) -> Self {
        self.one_message = std::option::Option::Some(
            crate::test::protos::message_with_one_of::OneMessage::MessageValue(
                v.into()
            )
        );
        self
    }

    /// Sets the value of [mixed][crate::test::protos::MessageWithOneOf::mixed].
    ///
    /// Note that all the setters affecting `mixed` are mutually
    /// exclusive.
    pub fn set_mixed<T: std::convert::Into<std::option::Option<crate::test::protos::message_with_one_of::Mixed>>>(mut self, v: T) -> Self
    {
        self.mixed = v.into();
        self
    }

    /// The value of [mixed][crate::test::protos::MessageWithOneOf::mixed]
    /// if it holds a `AnotherMessage`, `None` if the field is not set or
    /// holds a different branch.
    pub fn another_message(&self) -> std::option::Option<&std::boxed::Box<crate::test::protos::message_with_one_of::Message>> {
        #[allow(unreachable_patterns)]
        self.mixed.as_ref().and_then(|v| match v {
            crate::test::protos::message_with_one_of::Mixed::AnotherMessage(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [mixed][crate::test::protos::MessageWithOneOf::mixed]
    /// to hold a `AnotherMessage`.
    ///
    /// Note that all the setters affecting `mixed` are
    /// mutually exclusive.
    pub fn set_another_message<T: std::convert::Into<std::boxed::Box<crate::test::protos::message_with_one_of::Message>>>(mut self, v: T) -> Self {
        self.mixed = std::option::Option::Some(
            crate::test::protos::message_with_one_of::Mixed::AnotherMessage(
                v.into()
            )
        );
        self
    }

    /// The value of [mixed][crate::test::protos::MessageWithOneOf::mixed]
    /// if it holds a `String`, `None` if the field is not set or
    /// holds a different branch.
    pub fn string(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.mixed.as_ref().and_then(|v| match v {
            crate::test::protos::message_with_one_of::Mixed::String(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [mixed][crate::test::protos::MessageWithOneOf::mixed]
    /// to hold a `String`.
    ///
    /// Note that all the setters affecting `mixed` are
    /// mutually exclusive.
    pub fn set_string<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.mixed = std::option::Option::Some(
            crate::test::protos::message_with_one_of::Mixed::String(
                v.into()
            )
        );
        self
    }

    /// The value of [mixed][crate::test::protos::MessageWithOneOf::mixed]
    /// if it holds a `Duration`, `None` if the field is not set or
    /// holds a different branch.
    pub fn duration(&self) -> std::option::Option<&std::boxed::Box<wkt::Duration>> {
        #[allow(unreachable_patterns)]
        self.mixed.as_ref().and_then(|v| match v {
            crate::test::protos::message_with_one_of::Mixed::Duration(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [mixed][crate::test::protos::MessageWithOneOf::mixed]
    /// to hold a `Duration`.
    ///
    /// Note that all the setters affecting `mixed` are
    /// mutually exclusive.
    pub fn set_duration<T: std::convert::Into<std::boxed::Box<wkt::Duration>>>(mut self, v: T) -> Self {
        self.mixed = std::option::Option::Some(
            crate::test::protos::message_with_one_of::Mixed::Duration(
                v.into()
            )
        );
        self
    }
}

impl wkt::message::Message for MessageWithOneOf {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithOneOf"
    }
}

/// Defines additional types related to [MessageWithOneOf].
pub mod message_with_one_of {
    #[allow(unused_imports)]
    use super::*;


    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Message {

        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        #[serde_as(as = "serde_with::DefaultOnNull<_>")]
        pub parent: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Message {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [parent][crate::test::protos::message_with_one_of::Message::parent].
        pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.parent = v.into();
            self
        }
    }

    impl wkt::message::Message for Message {
        fn typename() -> &'static str {
            "type.googleapis.com/google.rust.sdk.test.MessageWithOneOf.Message"
        }
    }

    #[serde_with::serde_as]
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum SingleString {
        StringContents(#[serde_as(as = "serde_with::DefaultOnNull<_>")]std::string::String),
    }

    #[serde_with::serde_as]
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum TwoStrings {
        StringContentsOne(#[serde_as(as = "serde_with::DefaultOnNull<_>")]std::string::String),
        StringContentsTwo(#[serde_as(as = "serde_with::DefaultOnNull<_>")]std::string::String),
    }

    #[serde_with::serde_as]
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum OneMessage {
        MessageValue(std::boxed::Box<crate::test::protos::message_with_one_of::Message>),
    }

    #[serde_with::serde_as]
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Mixed {
        AnotherMessage(std::boxed::Box<crate::test::protos::message_with_one_of::Message>),
        String(#[serde_as(as = "serde_with::DefaultOnNull<_>")]std::string::String),
        Duration(std::boxed::Box<wkt::Duration>),
    }
}

/// A test message for f32.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageWithF32 {

    /// A singular field.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    #[serde_as(as = "serde_with::DefaultOnNull<wkt::internal::F32>")]
    pub singular: f32,

    /// An optional field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<wkt::internal::F32>")]
    pub optional: std::option::Option<f32>,

    /// A repeated field.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::vec::Vec<wkt::internal::F32>>")]
    pub repeated: std::vec::Vec<f32>,

    /// A map field, floats cannot be keys, so we only need to test them as
    /// values.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<_, wkt::internal::F32>>")]
    pub map: std::collections::HashMap<std::string::String,f32>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithF32 {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::test::protos::MessageWithF32::singular].
    pub fn set_singular<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::test::protos::MessageWithF32::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where T: std::convert::Into<f32>
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::test::protos::MessageWithF32::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<f32>
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::test::protos::MessageWithF32::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<f32>
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::test::protos::MessageWithF32::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<f32>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithF32 {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithF32"
    }
}

/// A test message for f64.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageWithF64 {

    /// A singular field.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    #[serde_as(as = "serde_with::DefaultOnNull<wkt::internal::F64>")]
    pub singular: f64,

    /// An optional field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<wkt::internal::F64>")]
    pub optional: std::option::Option<f64>,

    /// A repeated field.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::vec::Vec<wkt::internal::F64>>")]
    pub repeated: std::vec::Vec<f64>,

    /// A map field, doubles cannot be keys, so we only need to test them as
    /// values.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<_, wkt::internal::F64>>")]
    pub map: std::collections::HashMap<std::string::String,f64>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithF64 {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::test::protos::MessageWithF64::singular].
    pub fn set_singular<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::test::protos::MessageWithF64::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where T: std::convert::Into<f64>
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::test::protos::MessageWithF64::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<f64>
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::test::protos::MessageWithF64::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<f64>
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::test::protos::MessageWithF64::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<f64>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithF64 {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithF64"
    }
}

/// A test message for i32.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageWithI32 {

    /// A singular field.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    #[serde_as(as = "serde_with::DefaultOnNull<wkt::internal::I32>")]
    pub singular: i32,

    /// An optional field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<wkt::internal::I32>")]
    pub optional: std::option::Option<i32>,

    /// A repeated field.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::vec::Vec<wkt::internal::I32>>")]
    pub repeated: std::vec::Vec<i32>,

    /// Test i32 as values.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<_, wkt::internal::I32>>")]
    pub map_value: std::collections::HashMap<std::string::String,i32>,

    /// Test i32 as keys.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<wkt::internal::I32, _>>")]
    pub map_key: std::collections::HashMap<i32,std::string::String>,

    /// Test i32 as both keys and values.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<wkt::internal::I32, wkt::internal::I32>>")]
    pub map_key_value: std::collections::HashMap<i32,i32>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithI32 {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::test::protos::MessageWithI32::singular].
    pub fn set_singular<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::test::protos::MessageWithI32::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where T: std::convert::Into<i32>
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::test::protos::MessageWithI32::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<i32>
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::test::protos::MessageWithI32::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<i32>
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map_value][crate::test::protos::MessageWithI32::map_value].
    pub fn set_map_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<i32>,
    {
        use std::iter::Iterator;
        self.map_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key][crate::test::protos::MessageWithI32::map_key].
    pub fn set_map_key<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<i32>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.map_key = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key_value][crate::test::protos::MessageWithI32::map_key_value].
    pub fn set_map_key_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<i32>,
        V: std::convert::Into<i32>,
    {
        use std::iter::Iterator;
        self.map_key_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithI32 {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithI32"
    }
}

/// A test message for u32.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageWithU32 {

    /// A singular field.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    #[serde_as(as = "serde_with::DefaultOnNull<wkt::internal::U32>")]
    pub singular: u32,

    /// An optional field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<wkt::internal::U32>")]
    pub optional: std::option::Option<u32>,

    /// A repeated field.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::vec::Vec<wkt::internal::U32>>")]
    pub repeated: std::vec::Vec<u32>,

    /// Test u32 as values.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<_, wkt::internal::U32>>")]
    pub map_value: std::collections::HashMap<std::string::String,u32>,

    /// Test u32 as keys.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<wkt::internal::U32, _>>")]
    pub map_key: std::collections::HashMap<u32,std::string::String>,

    /// Test u32 as both keys and values.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<wkt::internal::U32, wkt::internal::U32>>")]
    pub map_key_value: std::collections::HashMap<u32,u32>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithU32 {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::test::protos::MessageWithU32::singular].
    pub fn set_singular<T: std::convert::Into<u32>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::test::protos::MessageWithU32::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where T: std::convert::Into<u32>
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::test::protos::MessageWithU32::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<u32>
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::test::protos::MessageWithU32::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<u32>
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map_value][crate::test::protos::MessageWithU32::map_value].
    pub fn set_map_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<u32>,
    {
        use std::iter::Iterator;
        self.map_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key][crate::test::protos::MessageWithU32::map_key].
    pub fn set_map_key<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<u32>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.map_key = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key_value][crate::test::protos::MessageWithU32::map_key_value].
    pub fn set_map_key_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<u32>,
        V: std::convert::Into<u32>,
    {
        use std::iter::Iterator;
        self.map_key_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithU32 {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithU32"
    }
}

/// A test message for i64.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageWithI64 {

    /// A singular field.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    #[serde_as(as = "serde_with::DefaultOnNull<wkt::internal::I64>")]
    pub singular: i64,

    /// An optional field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<wkt::internal::I64>")]
    pub optional: std::option::Option<i64>,

    /// A repeated field.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::vec::Vec<wkt::internal::I64>>")]
    pub repeated: std::vec::Vec<i64>,

    /// Test i64 as values.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<_, wkt::internal::I64>>")]
    pub map_value: std::collections::HashMap<std::string::String,i64>,

    /// Test i64 as keys.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<wkt::internal::I64, _>>")]
    pub map_key: std::collections::HashMap<i64,std::string::String>,

    /// Test i64 as both keys and values.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<wkt::internal::I64, wkt::internal::I64>>")]
    pub map_key_value: std::collections::HashMap<i64,i64>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithI64 {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::test::protos::MessageWithI64::singular].
    pub fn set_singular<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::test::protos::MessageWithI64::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where T: std::convert::Into<i64>
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::test::protos::MessageWithI64::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<i64>
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::test::protos::MessageWithI64::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<i64>
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map_value][crate::test::protos::MessageWithI64::map_value].
    pub fn set_map_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<i64>,
    {
        use std::iter::Iterator;
        self.map_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key][crate::test::protos::MessageWithI64::map_key].
    pub fn set_map_key<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<i64>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.map_key = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key_value][crate::test::protos::MessageWithI64::map_key_value].
    pub fn set_map_key_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<i64>,
        V: std::convert::Into<i64>,
    {
        use std::iter::Iterator;
        self.map_key_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithI64 {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithI64"
    }
}

/// A test message for u64.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageWithU64 {

    /// A singular field.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    #[serde_as(as = "serde_with::DefaultOnNull<wkt::internal::U64>")]
    pub singular: u64,

    /// An optional field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<wkt::internal::U64>")]
    pub optional: std::option::Option<u64>,

    /// A repeated field.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::vec::Vec<wkt::internal::U64>>")]
    pub repeated: std::vec::Vec<u64>,

    /// Test u64 as values.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<_, wkt::internal::U64>>")]
    pub map_value: std::collections::HashMap<std::string::String,u64>,

    /// Test u64 as keys.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<wkt::internal::U64, _>>")]
    pub map_key: std::collections::HashMap<u64,std::string::String>,

    /// Test u64 as both keys and values.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<wkt::internal::U64, wkt::internal::U64>>")]
    pub map_key_value: std::collections::HashMap<u64,u64>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithU64 {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::test::protos::MessageWithU64::singular].
    pub fn set_singular<T: std::convert::Into<u64>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::test::protos::MessageWithU64::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where T: std::convert::Into<u64>
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::test::protos::MessageWithU64::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<u64>
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::test::protos::MessageWithU64::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<u64>
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map_value][crate::test::protos::MessageWithU64::map_value].
    pub fn set_map_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<u64>,
    {
        use std::iter::Iterator;
        self.map_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key][crate::test::protos::MessageWithU64::map_key].
    pub fn set_map_key<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<u64>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.map_key = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key_value][crate::test::protos::MessageWithU64::map_key_value].
    pub fn set_map_key_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<u64>,
        V: std::convert::Into<u64>,
    {
        use std::iter::Iterator;
        self.map_key_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithU64 {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithU64"
    }
}

/// A test message for bytes.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageWithBytes {

    /// A singular field.
    #[serde(skip_serializing_if = "::bytes::Bytes::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<serde_with::base64::Base64>")]
    pub singular: ::bytes::Bytes,

    /// An optional field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<serde_with::base64::Base64>")]
    pub optional: std::option::Option<::bytes::Bytes>,

    /// A repeated field.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::vec::Vec<serde_with::base64::Base64>>")]
    pub repeated: std::vec::Vec<::bytes::Bytes>,

    /// A map field, bytes cannot be keys, so we only need to test them as
    /// values.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<_, serde_with::base64::Base64>>")]
    pub map: std::collections::HashMap<std::string::String,::bytes::Bytes>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithBytes {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::test::protos::MessageWithBytes::singular].
    pub fn set_singular<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::test::protos::MessageWithBytes::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where T: std::convert::Into<::bytes::Bytes>
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::test::protos::MessageWithBytes::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<::bytes::Bytes>
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::test::protos::MessageWithBytes::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<::bytes::Bytes>
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::test::protos::MessageWithBytes::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<::bytes::Bytes>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithBytes {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithBytes"
    }
}

/// A test message for bool.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageWithBool {

    /// A singular field.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    #[serde_as(as = "serde_with::DefaultOnNull<_>")]
    pub singular: bool,

    /// An optional field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub optional: std::option::Option<bool>,

    /// A repeated field.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::vec::Vec<_>>")]
    pub repeated: std::vec::Vec<bool>,

    /// Test bool as map values.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<_, _>>")]
    pub map_value: std::collections::HashMap<std::string::String,bool>,

    /// Test bool as map keys.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<serde_with::DisplayFromStr, _>>")]
    pub map_key: std::collections::HashMap<bool,std::string::String>,

    /// Test bool as map key and value.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<serde_with::DisplayFromStr, _>>")]
    pub map_key_value: std::collections::HashMap<bool,bool>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithBool {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::test::protos::MessageWithBool::singular].
    pub fn set_singular<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::test::protos::MessageWithBool::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where T: std::convert::Into<bool>
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::test::protos::MessageWithBool::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<bool>
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::test::protos::MessageWithBool::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<bool>
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map_value][crate::test::protos::MessageWithBool::map_value].
    pub fn set_map_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<bool>,
    {
        use std::iter::Iterator;
        self.map_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key][crate::test::protos::MessageWithBool::map_key].
    pub fn set_map_key<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<bool>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.map_key = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key_value][crate::test::protos::MessageWithBool::map_key_value].
    pub fn set_map_key_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<bool>,
        V: std::convert::Into<bool>,
    {
        use std::iter::Iterator;
        self.map_key_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithBool {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithBool"
    }
}

/// A test message for string.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageWithString {

    /// A singular field.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<_>")]
    pub singular: std::string::String,

    /// An optional field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub optional: std::option::Option<std::string::String>,

    /// A repeated field.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::vec::Vec<_>>")]
    pub repeated: std::vec::Vec<std::string::String>,

    /// Test string as map values.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<wkt::internal::I32, _>>")]
    pub map_value: std::collections::HashMap<i32,std::string::String>,

    /// Test string as map keys.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<_, wkt::internal::I32>>")]
    pub map_key: std::collections::HashMap<std::string::String,i32>,

    /// Test string as map key and value.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<_, _>>")]
    pub map_key_value: std::collections::HashMap<std::string::String,std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithString {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::test::protos::MessageWithString::singular].
    pub fn set_singular<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::test::protos::MessageWithString::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where T: std::convert::Into<std::string::String>
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::test::protos::MessageWithString::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<std::string::String>
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::test::protos::MessageWithString::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map_value][crate::test::protos::MessageWithString::map_value].
    pub fn set_map_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<i32>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.map_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key][crate::test::protos::MessageWithString::map_key].
    pub fn set_map_key<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<i32>,
    {
        use std::iter::Iterator;
        self.map_key = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key_value][crate::test::protos::MessageWithString::map_key_value].
    pub fn set_map_key_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.map_key_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithString {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithString"
    }
}

/// A test message for Value.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageWithValue {

    /// A singular field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "wkt::internal::OptionalValue")]
    pub singular: std::option::Option<wkt::Value>,

    /// An optional field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "wkt::internal::OptionalValue")]
    pub optional: std::option::Option<wkt::Value>,

    /// A repeated field.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::vec::Vec<_>>")]
    pub repeated: std::vec::Vec<wkt::Value>,

    /// A map field, messages cannot be keys.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<_, _>>")]
    pub map: std::collections::HashMap<std::string::String,wkt::Value>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithValue {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::test::protos::MessageWithValue::singular].
    pub fn set_singular<T>(mut self, v: T) -> Self
    where T: std::convert::Into<wkt::Value>
    {
        self.singular = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [singular][crate::test::protos::MessageWithValue::singular].
    pub fn set_or_clear_singular<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<wkt::Value>
    {
        self.singular = v.map(|x| x.into());
        self
    }

    /// Sets the value of [optional][crate::test::protos::MessageWithValue::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where T: std::convert::Into<wkt::Value>
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::test::protos::MessageWithValue::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<wkt::Value>
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::test::protos::MessageWithValue::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::Value>
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::test::protos::MessageWithValue::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::Value>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithValue {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithValue"
    }
}

/// A test message for Struct.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageWithStruct {

    /// A singular field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub singular: std::option::Option<wkt::Struct>,

    /// An optional field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub optional: std::option::Option<wkt::Struct>,

    /// A repeated field.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::vec::Vec<_>>")]
    pub repeated: std::vec::Vec<wkt::Struct>,

    /// A map field, messages cannot be keys.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<_, _>>")]
    pub map: std::collections::HashMap<std::string::String,wkt::Struct>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithStruct {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::test::protos::MessageWithStruct::singular].
    pub fn set_singular<T>(mut self, v: T) -> Self
    where T: std::convert::Into<wkt::Struct>
    {
        self.singular = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [singular][crate::test::protos::MessageWithStruct::singular].
    pub fn set_or_clear_singular<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<wkt::Struct>
    {
        self.singular = v.map(|x| x.into());
        self
    }

    /// Sets the value of [optional][crate::test::protos::MessageWithStruct::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where T: std::convert::Into<wkt::Struct>
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::test::protos::MessageWithStruct::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<wkt::Struct>
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::test::protos::MessageWithStruct::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::Struct>
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::test::protos::MessageWithStruct::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::Struct>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithStruct {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithStruct"
    }
}

/// A test message for ListValue.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageWithListValue {

    /// A singular field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub singular: std::option::Option<wkt::ListValue>,

    /// An optional field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub optional: std::option::Option<wkt::ListValue>,

    /// A repeated field.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::vec::Vec<_>>")]
    pub repeated: std::vec::Vec<wkt::ListValue>,

    /// A map field, messages cannot be keys.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<_, _>>")]
    pub map: std::collections::HashMap<std::string::String,wkt::ListValue>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithListValue {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::test::protos::MessageWithListValue::singular].
    pub fn set_singular<T>(mut self, v: T) -> Self
    where T: std::convert::Into<wkt::ListValue>
    {
        self.singular = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [singular][crate::test::protos::MessageWithListValue::singular].
    pub fn set_or_clear_singular<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<wkt::ListValue>
    {
        self.singular = v.map(|x| x.into());
        self
    }

    /// Sets the value of [optional][crate::test::protos::MessageWithListValue::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where T: std::convert::Into<wkt::ListValue>
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::test::protos::MessageWithListValue::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<wkt::ListValue>
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::test::protos::MessageWithListValue::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::ListValue>
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::test::protos::MessageWithListValue::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::ListValue>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithListValue {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithListValue"
    }
}

/// A test message for NullValue.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageWithNullValue {

    /// A singular field.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    #[serde_as(as = "serde_with::DefaultOnNull<_>")]
    pub singular: wkt::NullValue,

    /// An optional field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub optional: std::option::Option<wkt::NullValue>,

    /// A repeated field.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::vec::Vec<_>>")]
    pub repeated: std::vec::Vec<wkt::NullValue>,

    /// A map field, messages cannot be keys.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<_, _>>")]
    pub map: std::collections::HashMap<std::string::String,wkt::NullValue>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithNullValue {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::test::protos::MessageWithNullValue::singular].
    pub fn set_singular<T: std::convert::Into<wkt::NullValue>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::test::protos::MessageWithNullValue::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where T: std::convert::Into<wkt::NullValue>
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::test::protos::MessageWithNullValue::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<wkt::NullValue>
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::test::protos::MessageWithNullValue::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::NullValue>
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::test::protos::MessageWithNullValue::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::NullValue>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithNullValue {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithNullValue"
    }
}

/// A test message for FieldMask.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageWithFieldMask {

    /// A singular field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub singular: std::option::Option<wkt::FieldMask>,

    /// An optional field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub optional: std::option::Option<wkt::FieldMask>,

    /// A repeated field.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::vec::Vec<_>>")]
    pub repeated: std::vec::Vec<wkt::FieldMask>,

    /// A map field, messages cannot be keys.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "serde_with::DefaultOnNull<std::collections::HashMap<_, _>>")]
    pub map: std::collections::HashMap<std::string::String,wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithFieldMask {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::test::protos::MessageWithFieldMask::singular].
    pub fn set_singular<T>(mut self, v: T) -> Self
    where T: std::convert::Into<wkt::FieldMask>
    {
        self.singular = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [singular][crate::test::protos::MessageWithFieldMask::singular].
    pub fn set_or_clear_singular<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<wkt::FieldMask>
    {
        self.singular = v.map(|x| x.into());
        self
    }

    /// Sets the value of [optional][crate::test::protos::MessageWithFieldMask::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where T: std::convert::Into<wkt::FieldMask>
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::test::protos::MessageWithFieldMask::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<wkt::FieldMask>
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::test::protos::MessageWithFieldMask::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::FieldMask>
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::test::protos::MessageWithFieldMask::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::FieldMask>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithFieldMask {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithFieldMask"
    }
}
