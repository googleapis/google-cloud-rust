// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.


/// A test message for f32.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageWithF32 {

    /// A singular field.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    #[serde_as(as = "wkt::internal::F32")]
    pub singular: f32,

    /// An optional field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<wkt::internal::F32>")]
    pub optional: std::option::Option<f32>,

    /// A repeated field.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    #[serde_as(as = "std::vec::Vec<wkt::internal::F32>")]
    pub repeated: std::vec::Vec<f32>,

    /// A map field, floats cannot be keys, so we only need to test them as
    /// values.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "std::collections::HashMap<_, wkt::internal::F32>")]
    pub map: std::collections::HashMap<std::string::String,f32>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithF32 {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::protos::MessageWithF32::singular].
    pub fn set_singular<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::protos::MessageWithF32::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where T: std::convert::Into<f32>
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::protos::MessageWithF32::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<f32>
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::protos::MessageWithF32::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<f32>
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::protos::MessageWithF32::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<f32>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithF32 {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithF32"
    }
}

/// A test message for f64.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageWithF64 {

    /// A singular field.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    #[serde_as(as = "wkt::internal::F64")]
    pub singular: f64,

    /// An optional field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<wkt::internal::F64>")]
    pub optional: std::option::Option<f64>,

    /// A repeated field.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    #[serde_as(as = "std::vec::Vec<wkt::internal::F64>")]
    pub repeated: std::vec::Vec<f64>,

    /// A map field, doubles cannot be keys, so we only need to test them as
    /// values.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "std::collections::HashMap<_, wkt::internal::F64>")]
    pub map: std::collections::HashMap<std::string::String,f64>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithF64 {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::protos::MessageWithF64::singular].
    pub fn set_singular<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::protos::MessageWithF64::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where T: std::convert::Into<f64>
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::protos::MessageWithF64::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<f64>
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::protos::MessageWithF64::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<f64>
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::protos::MessageWithF64::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<f64>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithF64 {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithF64"
    }
}

/// A test message for i32.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageWithI32 {

    /// A singular field.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    #[serde_as(as = "wkt::internal::I32")]
    pub singular: i32,

    /// An optional field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<wkt::internal::I32>")]
    pub optional: std::option::Option<i32>,

    /// A repeated field.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    #[serde_as(as = "std::vec::Vec<wkt::internal::I32>")]
    pub repeated: std::vec::Vec<i32>,

    /// Test i32 as values.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "std::collections::HashMap<_, wkt::internal::I32>")]
    pub map_value: std::collections::HashMap<std::string::String,i32>,

    /// Test i32 as keys.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "std::collections::HashMap<wkt::internal::I32, _>")]
    pub map_key: std::collections::HashMap<i32,std::string::String>,

    /// Test i32 as both keys and values.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "std::collections::HashMap<wkt::internal::I32, wkt::internal::I32>")]
    pub map_key_value: std::collections::HashMap<i32,i32>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithI32 {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::protos::MessageWithI32::singular].
    pub fn set_singular<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::protos::MessageWithI32::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where T: std::convert::Into<i32>
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::protos::MessageWithI32::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<i32>
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::protos::MessageWithI32::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<i32>
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map_value][crate::protos::MessageWithI32::map_value].
    pub fn set_map_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<i32>,
    {
        use std::iter::Iterator;
        self.map_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key][crate::protos::MessageWithI32::map_key].
    pub fn set_map_key<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<i32>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.map_key = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key_value][crate::protos::MessageWithI32::map_key_value].
    pub fn set_map_key_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<i32>,
        V: std::convert::Into<i32>,
    {
        use std::iter::Iterator;
        self.map_key_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithI32 {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithI32"
    }
}

/// A test message for i64.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageWithI64 {

    /// A singular field.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub singular: i64,

    /// An optional field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<serde_with::DisplayFromStr>")]
    pub optional: std::option::Option<i64>,

    /// A repeated field.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    #[serde_as(as = "std::vec::Vec<serde_with::DisplayFromStr>")]
    pub repeated: std::vec::Vec<i64>,

    /// Test i64 as values.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "std::collections::HashMap<_, serde_with::DisplayFromStr>")]
    pub map_value: std::collections::HashMap<std::string::String,i64>,

    /// Test i64 as keys.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "std::collections::HashMap<serde_with::DisplayFromStr, _>")]
    pub map_key: std::collections::HashMap<i64,std::string::String>,

    /// Test i64 as both keys and values.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "std::collections::HashMap<serde_with::DisplayFromStr, serde_with::DisplayFromStr>")]
    pub map_key_value: std::collections::HashMap<i64,i64>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithI64 {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::protos::MessageWithI64::singular].
    pub fn set_singular<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::protos::MessageWithI64::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where T: std::convert::Into<i64>
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::protos::MessageWithI64::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<i64>
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::protos::MessageWithI64::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<i64>
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map_value][crate::protos::MessageWithI64::map_value].
    pub fn set_map_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<i64>,
    {
        use std::iter::Iterator;
        self.map_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key][crate::protos::MessageWithI64::map_key].
    pub fn set_map_key<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<i64>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.map_key = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key_value][crate::protos::MessageWithI64::map_key_value].
    pub fn set_map_key_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<i64>,
        V: std::convert::Into<i64>,
    {
        use std::iter::Iterator;
        self.map_key_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithI64 {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithI64"
    }
}

/// A test message for bytes.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageWithBytes {

    /// A singular field.
    #[serde(skip_serializing_if = "::bytes::Bytes::is_empty")]
    #[serde_as(as = "serde_with::base64::Base64")]
    pub singular: ::bytes::Bytes,

    /// An optional field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<serde_with::base64::Base64>")]
    pub optional: std::option::Option<::bytes::Bytes>,

    /// A repeated field.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    #[serde_as(as = "std::vec::Vec<serde_with::base64::Base64>")]
    pub repeated: std::vec::Vec<::bytes::Bytes>,

    /// A map field, bytes cannot be keys, so we only need to test them as
    /// values.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "std::collections::HashMap<_, serde_with::base64::Base64>")]
    pub map: std::collections::HashMap<std::string::String,::bytes::Bytes>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithBytes {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::protos::MessageWithBytes::singular].
    pub fn set_singular<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::protos::MessageWithBytes::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where T: std::convert::Into<::bytes::Bytes>
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::protos::MessageWithBytes::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<::bytes::Bytes>
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::protos::MessageWithBytes::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<::bytes::Bytes>
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::protos::MessageWithBytes::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<::bytes::Bytes>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithBytes {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithBytes"
    }
}

/// A test message for bool.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageWithBool {

    /// A singular field.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub singular: bool,

    /// An optional field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub optional: std::option::Option<bool>,

    /// A repeated field.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub repeated: std::vec::Vec<bool>,

    /// Test bool as map values.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub map_value: std::collections::HashMap<std::string::String,bool>,

    /// Test bool as map keys.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "std::collections::HashMap<serde_with::DisplayFromStr, _>")]
    pub map_key: std::collections::HashMap<bool,std::string::String>,

    /// Test bool as map key and value.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "std::collections::HashMap<serde_with::DisplayFromStr, _>")]
    pub map_key_value: std::collections::HashMap<bool,bool>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithBool {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::protos::MessageWithBool::singular].
    pub fn set_singular<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::protos::MessageWithBool::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where T: std::convert::Into<bool>
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::protos::MessageWithBool::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<bool>
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::protos::MessageWithBool::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<bool>
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map_value][crate::protos::MessageWithBool::map_value].
    pub fn set_map_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<bool>,
    {
        use std::iter::Iterator;
        self.map_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key][crate::protos::MessageWithBool::map_key].
    pub fn set_map_key<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<bool>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.map_key = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key_value][crate::protos::MessageWithBool::map_key_value].
    pub fn set_map_key_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<bool>,
        V: std::convert::Into<bool>,
    {
        use std::iter::Iterator;
        self.map_key_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithBool {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithBool"
    }
}

/// A test message for string.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageWithString {

    /// A singular field.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub singular: std::string::String,

    /// An optional field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub optional: std::option::Option<std::string::String>,

    /// A repeated field.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub repeated: std::vec::Vec<std::string::String>,

    /// Test string as map values.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "std::collections::HashMap<wkt::internal::I32, _>")]
    pub map_value: std::collections::HashMap<i32,std::string::String>,

    /// Test string as map keys.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "std::collections::HashMap<_, wkt::internal::I32>")]
    pub map_key: std::collections::HashMap<std::string::String,i32>,

    /// Test string as map key and value.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub map_key_value: std::collections::HashMap<std::string::String,std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithString {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::protos::MessageWithString::singular].
    pub fn set_singular<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.singular = v.into();
        self
    }

    /// Sets the value of [optional][crate::protos::MessageWithString::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where T: std::convert::Into<std::string::String>
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::protos::MessageWithString::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<std::string::String>
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::protos::MessageWithString::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map_value][crate::protos::MessageWithString::map_value].
    pub fn set_map_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<i32>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.map_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key][crate::protos::MessageWithString::map_key].
    pub fn set_map_key<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<i32>,
    {
        use std::iter::Iterator;
        self.map_key = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [map_key_value][crate::protos::MessageWithString::map_key_value].
    pub fn set_map_key_value<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.map_key_value = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithString {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithString"
    }
}

/// A test message for FieldMask.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageWithFieldMask {

    /// A singular field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub singular: std::option::Option<wkt::FieldMask>,

    /// An optional field.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub optional: std::option::Option<wkt::FieldMask>,

    /// A repeated field.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub repeated: std::vec::Vec<wkt::FieldMask>,

    /// A map field, messages cannot be keys.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub map: std::collections::HashMap<std::string::String,wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageWithFieldMask {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [singular][crate::protos::MessageWithFieldMask::singular].
    pub fn set_singular<T>(mut self, v: T) -> Self
    where T: std::convert::Into<wkt::FieldMask>
    {
        self.singular = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [singular][crate::protos::MessageWithFieldMask::singular].
    pub fn set_or_clear_singular<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<wkt::FieldMask>
    {
        self.singular = v.map(|x| x.into());
        self
    }

    /// Sets the value of [optional][crate::protos::MessageWithFieldMask::optional].
    pub fn set_optional<T>(mut self, v: T) -> Self
    where T: std::convert::Into<wkt::FieldMask>
    {
        self.optional = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [optional][crate::protos::MessageWithFieldMask::optional].
    pub fn set_or_clear_optional<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<wkt::FieldMask>
    {
        self.optional = v.map(|x| x.into());
        self
    }

    /// Sets the value of [repeated][crate::protos::MessageWithFieldMask::repeated].
    pub fn set_repeated<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::FieldMask>
    {
        use std::iter::Iterator;
        self.repeated = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [map][crate::protos::MessageWithFieldMask::map].
    pub fn set_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::FieldMask>,
    {
        use std::iter::Iterator;
        self.map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for MessageWithFieldMask {
    fn typename() -> &'static str {
        "type.googleapis.com/google.rust.sdk.test.MessageWithFieldMask"
    }
}
