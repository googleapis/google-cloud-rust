// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

impl gaxi::prost::Convert<DeleteBucketRequest> for crate::generated::gapic::model::DeleteBucketRequest {
    fn cnv(self) -> DeleteBucketRequest {
        DeleteBucketRequest {
            name: self.name.cnv(),
            if_metageneration_match: self.if_metageneration_match.map(|v| v.cnv()),
            if_metageneration_not_match: self.if_metageneration_not_match.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::DeleteBucketRequest> for DeleteBucketRequest {
    fn cnv(self) -> crate::generated::gapic::model::DeleteBucketRequest {
        crate::generated::gapic::model::DeleteBucketRequest::new()
            .set_name(self.name)
            .set_if_metageneration_match(self.if_metageneration_match.map(|v| v.cnv()))
            .set_if_metageneration_not_match(self.if_metageneration_not_match.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<GetBucketRequest> for crate::generated::gapic::model::GetBucketRequest {
    fn cnv(self) -> GetBucketRequest {
        GetBucketRequest {
            name: self.name.cnv(),
            if_metageneration_match: self.if_metageneration_match.map(|v| v.cnv()),
            if_metageneration_not_match: self.if_metageneration_not_match.map(|v| v.cnv()),
            read_mask: self.read_mask.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::GetBucketRequest> for GetBucketRequest {
    fn cnv(self) -> crate::generated::gapic::model::GetBucketRequest {
        crate::generated::gapic::model::GetBucketRequest::new()
            .set_name(self.name)
            .set_if_metageneration_match(self.if_metageneration_match.map(|v| v.cnv()))
            .set_if_metageneration_not_match(self.if_metageneration_not_match.map(|v| v.cnv()))
            .set_read_mask(self.read_mask.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<CreateBucketRequest> for crate::generated::gapic::model::CreateBucketRequest {
    fn cnv(self) -> CreateBucketRequest {
        CreateBucketRequest {
            parent: self.parent.cnv(),
            bucket: self.bucket.map(|v| v.cnv()),
            bucket_id: self.bucket_id.cnv(),
            predefined_acl: self.predefined_acl.cnv(),
            predefined_default_object_acl: self.predefined_default_object_acl.cnv(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::CreateBucketRequest> for CreateBucketRequest {
    fn cnv(self) -> crate::generated::gapic::model::CreateBucketRequest {
        crate::generated::gapic::model::CreateBucketRequest::new()
            .set_parent(self.parent)
            .set_bucket(self.bucket.map(|v| v.cnv()))
            .set_bucket_id(self.bucket_id)
            .set_predefined_acl(self.predefined_acl)
            .set_predefined_default_object_acl(self.predefined_default_object_acl)
    }
}

impl gaxi::prost::Convert<ListBucketsRequest> for crate::generated::gapic::model::ListBucketsRequest {
    fn cnv(self) -> ListBucketsRequest {
        ListBucketsRequest {
            parent: self.parent.cnv(),
            page_size: self.page_size.cnv(),
            page_token: self.page_token.cnv(),
            prefix: self.prefix.cnv(),
            read_mask: self.read_mask.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::ListBucketsRequest> for ListBucketsRequest {
    fn cnv(self) -> crate::generated::gapic::model::ListBucketsRequest {
        crate::generated::gapic::model::ListBucketsRequest::new()
            .set_parent(self.parent)
            .set_page_size(self.page_size)
            .set_page_token(self.page_token)
            .set_prefix(self.prefix)
            .set_read_mask(self.read_mask.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<ListBucketsResponse> for crate::generated::gapic::model::ListBucketsResponse {
    fn cnv(self) -> ListBucketsResponse {
        ListBucketsResponse {
            next_page_token: self.next_page_token.cnv(),
            buckets: self.buckets.into_iter().map(|v| v.cnv()).collect(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::ListBucketsResponse> for ListBucketsResponse {
    fn cnv(self) -> crate::generated::gapic::model::ListBucketsResponse {
        crate::generated::gapic::model::ListBucketsResponse::new()
            .set_next_page_token(self.next_page_token)
            .set_buckets(self.buckets.into_iter().map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<LockBucketRetentionPolicyRequest> for crate::generated::gapic::model::LockBucketRetentionPolicyRequest {
    fn cnv(self) -> LockBucketRetentionPolicyRequest {
        LockBucketRetentionPolicyRequest {
            bucket: self.bucket.cnv(),
            if_metageneration_match: self.if_metageneration_match.cnv(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::LockBucketRetentionPolicyRequest> for LockBucketRetentionPolicyRequest {
    fn cnv(self) -> crate::generated::gapic::model::LockBucketRetentionPolicyRequest {
        crate::generated::gapic::model::LockBucketRetentionPolicyRequest::new()
            .set_bucket(self.bucket)
            .set_if_metageneration_match(self.if_metageneration_match)
    }
}

impl gaxi::prost::Convert<UpdateBucketRequest> for crate::generated::gapic::model::UpdateBucketRequest {
    fn cnv(self) -> UpdateBucketRequest {
        UpdateBucketRequest {
            bucket: self.bucket.map(|v| v.cnv()),
            if_metageneration_match: self.if_metageneration_match.map(|v| v.cnv()),
            if_metageneration_not_match: self.if_metageneration_not_match.map(|v| v.cnv()),
            predefined_acl: self.predefined_acl.cnv(),
            predefined_default_object_acl: self.predefined_default_object_acl.cnv(),
            update_mask: self.update_mask.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::UpdateBucketRequest> for UpdateBucketRequest {
    fn cnv(self) -> crate::generated::gapic::model::UpdateBucketRequest {
        crate::generated::gapic::model::UpdateBucketRequest::new()
            .set_bucket(self.bucket.map(|v| v.cnv()))
            .set_if_metageneration_match(self.if_metageneration_match.map(|v| v.cnv()))
            .set_if_metageneration_not_match(self.if_metageneration_not_match.map(|v| v.cnv()))
            .set_predefined_acl(self.predefined_acl)
            .set_predefined_default_object_acl(self.predefined_default_object_acl)
            .set_update_mask(self.update_mask.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<compose_object_request::source_object::ObjectPreconditions> for crate::generated::gapic::model::compose_object_request::source_object::ObjectPreconditions {
    fn cnv(self) -> compose_object_request::source_object::ObjectPreconditions {
        compose_object_request::source_object::ObjectPreconditions {
            if_generation_match: self.if_generation_match.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::compose_object_request::source_object::ObjectPreconditions> for compose_object_request::source_object::ObjectPreconditions {
    fn cnv(self) -> crate::generated::gapic::model::compose_object_request::source_object::ObjectPreconditions {
        crate::generated::gapic::model::compose_object_request::source_object::ObjectPreconditions::new()
            .set_if_generation_match(self.if_generation_match.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<compose_object_request::SourceObject> for crate::generated::gapic::model::compose_object_request::SourceObject {
    fn cnv(self) -> compose_object_request::SourceObject {
        compose_object_request::SourceObject {
            name: self.name.cnv(),
            generation: self.generation.cnv(),
            object_preconditions: self.object_preconditions.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::compose_object_request::SourceObject> for compose_object_request::SourceObject {
    fn cnv(self) -> crate::generated::gapic::model::compose_object_request::SourceObject {
        crate::generated::gapic::model::compose_object_request::SourceObject::new()
            .set_name(self.name)
            .set_generation(self.generation)
            .set_object_preconditions(self.object_preconditions.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<ComposeObjectRequest> for crate::generated::gapic::model::ComposeObjectRequest {
    fn cnv(self) -> ComposeObjectRequest {
        ComposeObjectRequest {
            destination: self.destination.map(|v| v.cnv()),
            destination_predefined_acl: self.destination_predefined_acl.cnv(),
            if_generation_match: self.if_generation_match.map(|v| v.cnv()),
            if_metageneration_match: self.if_metageneration_match.map(|v| v.cnv()),
            kms_key: self.kms_key.cnv(),
            common_object_request_params: self.common_object_request_params.map(|v| v.cnv()),
            object_checksums: self.object_checksums.map(|v| v.cnv()),
            source_objects: self.source_objects.into_iter().map(|v| v.cnv()).collect(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::ComposeObjectRequest> for ComposeObjectRequest {
    fn cnv(self) -> crate::generated::gapic::model::ComposeObjectRequest {
        crate::generated::gapic::model::ComposeObjectRequest::new()
            .set_destination(self.destination.map(|v| v.cnv()))
            .set_destination_predefined_acl(self.destination_predefined_acl)
            .set_if_generation_match(self.if_generation_match.map(|v| v.cnv()))
            .set_if_metageneration_match(self.if_metageneration_match.map(|v| v.cnv()))
            .set_kms_key(self.kms_key)
            .set_common_object_request_params(self.common_object_request_params.map(|v| v.cnv()))
            .set_object_checksums(self.object_checksums.map(|v| v.cnv()))
            .set_source_objects(self.source_objects.into_iter().map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<DeleteObjectRequest> for crate::generated::gapic::model::DeleteObjectRequest {
    fn cnv(self) -> DeleteObjectRequest {
        DeleteObjectRequest {
            bucket: self.bucket.cnv(),
            object: self.object.cnv(),
            generation: self.generation.cnv(),
            if_generation_match: self.if_generation_match.map(|v| v.cnv()),
            if_generation_not_match: self.if_generation_not_match.map(|v| v.cnv()),
            if_metageneration_match: self.if_metageneration_match.map(|v| v.cnv()),
            if_metageneration_not_match: self.if_metageneration_not_match.map(|v| v.cnv()),
            common_object_request_params: self.common_object_request_params.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::DeleteObjectRequest> for DeleteObjectRequest {
    fn cnv(self) -> crate::generated::gapic::model::DeleteObjectRequest {
        crate::generated::gapic::model::DeleteObjectRequest::new()
            .set_bucket(self.bucket)
            .set_object(self.object)
            .set_generation(self.generation)
            .set_if_generation_match(self.if_generation_match.map(|v| v.cnv()))
            .set_if_generation_not_match(self.if_generation_not_match.map(|v| v.cnv()))
            .set_if_metageneration_match(self.if_metageneration_match.map(|v| v.cnv()))
            .set_if_metageneration_not_match(self.if_metageneration_not_match.map(|v| v.cnv()))
            .set_common_object_request_params(self.common_object_request_params.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<RestoreObjectRequest> for crate::generated::gapic::model::RestoreObjectRequest {
    fn cnv(self) -> RestoreObjectRequest {
        RestoreObjectRequest {
            bucket: self.bucket.cnv(),
            object: self.object.cnv(),
            generation: self.generation.cnv(),
            restore_token: self.restore_token.cnv(),
            if_generation_match: self.if_generation_match.map(|v| v.cnv()),
            if_generation_not_match: self.if_generation_not_match.map(|v| v.cnv()),
            if_metageneration_match: self.if_metageneration_match.map(|v| v.cnv()),
            if_metageneration_not_match: self.if_metageneration_not_match.map(|v| v.cnv()),
            copy_source_acl: self.copy_source_acl.map(|v| v.cnv()),
            common_object_request_params: self.common_object_request_params.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::RestoreObjectRequest> for RestoreObjectRequest {
    fn cnv(self) -> crate::generated::gapic::model::RestoreObjectRequest {
        crate::generated::gapic::model::RestoreObjectRequest::new()
            .set_bucket(self.bucket)
            .set_object(self.object)
            .set_generation(self.generation)
            .set_restore_token(self.restore_token)
            .set_if_generation_match(self.if_generation_match.map(|v| v.cnv()))
            .set_if_generation_not_match(self.if_generation_not_match.map(|v| v.cnv()))
            .set_if_metageneration_match(self.if_metageneration_match.map(|v| v.cnv()))
            .set_if_metageneration_not_match(self.if_metageneration_not_match.map(|v| v.cnv()))
            .set_copy_source_acl(self.copy_source_acl.map(|v| v.cnv()))
            .set_common_object_request_params(self.common_object_request_params.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<CancelResumableWriteRequest> for crate::generated::gapic::model::CancelResumableWriteRequest {
    fn cnv(self) -> CancelResumableWriteRequest {
        CancelResumableWriteRequest {
            upload_id: self.upload_id.cnv(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::CancelResumableWriteRequest> for CancelResumableWriteRequest {
    fn cnv(self) -> crate::generated::gapic::model::CancelResumableWriteRequest {
        crate::generated::gapic::model::CancelResumableWriteRequest::new()
            .set_upload_id(self.upload_id)
    }
}

impl gaxi::prost::Convert<CancelResumableWriteResponse> for crate::generated::gapic::model::CancelResumableWriteResponse {
    fn cnv(self) -> CancelResumableWriteResponse {
        CancelResumableWriteResponse {
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::CancelResumableWriteResponse> for CancelResumableWriteResponse {
    fn cnv(self) -> crate::generated::gapic::model::CancelResumableWriteResponse {
        crate::generated::gapic::model::CancelResumableWriteResponse::new()
    }
}

impl gaxi::prost::Convert<ReadObjectRequest> for crate::generated::gapic::model::ReadObjectRequest {
    fn cnv(self) -> ReadObjectRequest {
        ReadObjectRequest {
            bucket: self.bucket.cnv(),
            object: self.object.cnv(),
            generation: self.generation.cnv(),
            read_offset: self.read_offset.cnv(),
            read_limit: self.read_limit.cnv(),
            if_generation_match: self.if_generation_match.map(|v| v.cnv()),
            if_generation_not_match: self.if_generation_not_match.map(|v| v.cnv()),
            if_metageneration_match: self.if_metageneration_match.map(|v| v.cnv()),
            if_metageneration_not_match: self.if_metageneration_not_match.map(|v| v.cnv()),
            common_object_request_params: self.common_object_request_params.map(|v| v.cnv()),
            read_mask: self.read_mask.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::ReadObjectRequest> for ReadObjectRequest {
    fn cnv(self) -> crate::generated::gapic::model::ReadObjectRequest {
        crate::generated::gapic::model::ReadObjectRequest::new()
            .set_bucket(self.bucket)
            .set_object(self.object)
            .set_generation(self.generation)
            .set_read_offset(self.read_offset)
            .set_read_limit(self.read_limit)
            .set_if_generation_match(self.if_generation_match.map(|v| v.cnv()))
            .set_if_generation_not_match(self.if_generation_not_match.map(|v| v.cnv()))
            .set_if_metageneration_match(self.if_metageneration_match.map(|v| v.cnv()))
            .set_if_metageneration_not_match(self.if_metageneration_not_match.map(|v| v.cnv()))
            .set_common_object_request_params(self.common_object_request_params.map(|v| v.cnv()))
            .set_read_mask(self.read_mask.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<GetObjectRequest> for crate::generated::gapic::model::GetObjectRequest {
    fn cnv(self) -> GetObjectRequest {
        GetObjectRequest {
            bucket: self.bucket.cnv(),
            object: self.object.cnv(),
            generation: self.generation.cnv(),
            soft_deleted: self.soft_deleted.map(|v| v.cnv()),
            if_generation_match: self.if_generation_match.map(|v| v.cnv()),
            if_generation_not_match: self.if_generation_not_match.map(|v| v.cnv()),
            if_metageneration_match: self.if_metageneration_match.map(|v| v.cnv()),
            if_metageneration_not_match: self.if_metageneration_not_match.map(|v| v.cnv()),
            common_object_request_params: self.common_object_request_params.map(|v| v.cnv()),
            read_mask: self.read_mask.map(|v| v.cnv()),
            restore_token: self.restore_token.cnv(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::GetObjectRequest> for GetObjectRequest {
    fn cnv(self) -> crate::generated::gapic::model::GetObjectRequest {
        crate::generated::gapic::model::GetObjectRequest::new()
            .set_bucket(self.bucket)
            .set_object(self.object)
            .set_generation(self.generation)
            .set_soft_deleted(self.soft_deleted.map(|v| v.cnv()))
            .set_if_generation_match(self.if_generation_match.map(|v| v.cnv()))
            .set_if_generation_not_match(self.if_generation_not_match.map(|v| v.cnv()))
            .set_if_metageneration_match(self.if_metageneration_match.map(|v| v.cnv()))
            .set_if_metageneration_not_match(self.if_metageneration_not_match.map(|v| v.cnv()))
            .set_common_object_request_params(self.common_object_request_params.map(|v| v.cnv()))
            .set_read_mask(self.read_mask.map(|v| v.cnv()))
            .set_restore_token(self.restore_token)
    }
}

impl gaxi::prost::Convert<ReadObjectResponse> for crate::generated::gapic::model::ReadObjectResponse {
    fn cnv(self) -> ReadObjectResponse {
        ReadObjectResponse {
            checksummed_data: self.checksummed_data.map(|v| v.cnv()),
            object_checksums: self.object_checksums.map(|v| v.cnv()),
            content_range: self.content_range.map(|v| v.cnv()),
            metadata: self.metadata.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::ReadObjectResponse> for ReadObjectResponse {
    fn cnv(self) -> crate::generated::gapic::model::ReadObjectResponse {
        crate::generated::gapic::model::ReadObjectResponse::new()
            .set_checksummed_data(self.checksummed_data.map(|v| v.cnv()))
            .set_object_checksums(self.object_checksums.map(|v| v.cnv()))
            .set_content_range(self.content_range.map(|v| v.cnv()))
            .set_metadata(self.metadata.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<BidiReadObjectSpec> for crate::generated::gapic::model::BidiReadObjectSpec {
    fn cnv(self) -> BidiReadObjectSpec {
        BidiReadObjectSpec {
            bucket: self.bucket.cnv(),
            object: self.object.cnv(),
            generation: self.generation.cnv(),
            if_generation_match: self.if_generation_match.map(|v| v.cnv()),
            if_generation_not_match: self.if_generation_not_match.map(|v| v.cnv()),
            if_metageneration_match: self.if_metageneration_match.map(|v| v.cnv()),
            if_metageneration_not_match: self.if_metageneration_not_match.map(|v| v.cnv()),
            common_object_request_params: self.common_object_request_params.map(|v| v.cnv()),
            read_mask: self.read_mask.map(|v| v.cnv()),
            read_handle: self.read_handle.map(|v| v.cnv()),
            routing_token: self.routing_token.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::BidiReadObjectSpec> for BidiReadObjectSpec {
    fn cnv(self) -> crate::generated::gapic::model::BidiReadObjectSpec {
        crate::generated::gapic::model::BidiReadObjectSpec::new()
            .set_bucket(self.bucket)
            .set_object(self.object)
            .set_generation(self.generation)
            .set_if_generation_match(self.if_generation_match.map(|v| v.cnv()))
            .set_if_generation_not_match(self.if_generation_not_match.map(|v| v.cnv()))
            .set_if_metageneration_match(self.if_metageneration_match.map(|v| v.cnv()))
            .set_if_metageneration_not_match(self.if_metageneration_not_match.map(|v| v.cnv()))
            .set_common_object_request_params(self.common_object_request_params.map(|v| v.cnv()))
            .set_read_mask(self.read_mask.map(|v| v.cnv()))
            .set_read_handle(self.read_handle.map(|v| v.cnv()))
            .set_routing_token(self.routing_token.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<BidiReadObjectRequest> for crate::generated::gapic::model::BidiReadObjectRequest {
    fn cnv(self) -> BidiReadObjectRequest {
        BidiReadObjectRequest {
            read_object_spec: self.read_object_spec.map(|v| v.cnv()),
            read_ranges: self.read_ranges.into_iter().map(|v| v.cnv()).collect(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::BidiReadObjectRequest> for BidiReadObjectRequest {
    fn cnv(self) -> crate::generated::gapic::model::BidiReadObjectRequest {
        crate::generated::gapic::model::BidiReadObjectRequest::new()
            .set_read_object_spec(self.read_object_spec.map(|v| v.cnv()))
            .set_read_ranges(self.read_ranges.into_iter().map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<BidiReadObjectResponse> for crate::generated::gapic::model::BidiReadObjectResponse {
    fn cnv(self) -> BidiReadObjectResponse {
        BidiReadObjectResponse {
            metadata: self.metadata.map(|v| v.cnv()),
            read_handle: self.read_handle.map(|v| v.cnv()),
            object_data_ranges: self.object_data_ranges.into_iter().map(|v| v.cnv()).collect(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::BidiReadObjectResponse> for BidiReadObjectResponse {
    fn cnv(self) -> crate::generated::gapic::model::BidiReadObjectResponse {
        crate::generated::gapic::model::BidiReadObjectResponse::new()
            .set_metadata(self.metadata.map(|v| v.cnv()))
            .set_read_handle(self.read_handle.map(|v| v.cnv()))
            .set_object_data_ranges(self.object_data_ranges.into_iter().map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<BidiReadObjectRedirectedError> for crate::generated::gapic::model::BidiReadObjectRedirectedError {
    fn cnv(self) -> BidiReadObjectRedirectedError {
        BidiReadObjectRedirectedError {
            read_handle: self.read_handle.map(|v| v.cnv()),
            routing_token: self.routing_token.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::BidiReadObjectRedirectedError> for BidiReadObjectRedirectedError {
    fn cnv(self) -> crate::generated::gapic::model::BidiReadObjectRedirectedError {
        crate::generated::gapic::model::BidiReadObjectRedirectedError::new()
            .set_read_handle(self.read_handle.map(|v| v.cnv()))
            .set_routing_token(self.routing_token.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<BidiWriteObjectRedirectedError> for crate::generated::gapic::model::BidiWriteObjectRedirectedError {
    fn cnv(self) -> BidiWriteObjectRedirectedError {
        BidiWriteObjectRedirectedError {
            routing_token: self.routing_token.map(|v| v.cnv()),
            write_handle: self.write_handle.map(|v| v.cnv()),
            generation: self.generation.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::BidiWriteObjectRedirectedError> for BidiWriteObjectRedirectedError {
    fn cnv(self) -> crate::generated::gapic::model::BidiWriteObjectRedirectedError {
        crate::generated::gapic::model::BidiWriteObjectRedirectedError::new()
            .set_routing_token(self.routing_token.map(|v| v.cnv()))
            .set_write_handle(self.write_handle.map(|v| v.cnv()))
            .set_generation(self.generation.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<BidiReadObjectError> for crate::generated::gapic::model::BidiReadObjectError {
    fn cnv(self) -> BidiReadObjectError {
        BidiReadObjectError {
            read_range_errors: self.read_range_errors.into_iter().map(|v| v.cnv()).collect(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::BidiReadObjectError> for BidiReadObjectError {
    fn cnv(self) -> crate::generated::gapic::model::BidiReadObjectError {
        crate::generated::gapic::model::BidiReadObjectError::new()
            .set_read_range_errors(self.read_range_errors.into_iter().map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<ReadRangeError> for crate::generated::gapic::model::ReadRangeError {
    fn cnv(self) -> ReadRangeError {
        ReadRangeError {
            read_id: self.read_id.cnv(),
            status: self.status.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::ReadRangeError> for ReadRangeError {
    fn cnv(self) -> crate::generated::gapic::model::ReadRangeError {
        crate::generated::gapic::model::ReadRangeError::new()
            .set_read_id(self.read_id)
            .set_status(self.status.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<ReadRange> for crate::generated::gapic::model::ReadRange {
    fn cnv(self) -> ReadRange {
        ReadRange {
            read_offset: self.read_offset.cnv(),
            read_length: self.read_length.cnv(),
            read_id: self.read_id.cnv(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::ReadRange> for ReadRange {
    fn cnv(self) -> crate::generated::gapic::model::ReadRange {
        crate::generated::gapic::model::ReadRange::new()
            .set_read_offset(self.read_offset)
            .set_read_length(self.read_length)
            .set_read_id(self.read_id)
    }
}

impl gaxi::prost::Convert<ObjectRangeData> for crate::generated::gapic::model::ObjectRangeData {
    fn cnv(self) -> ObjectRangeData {
        ObjectRangeData {
            checksummed_data: self.checksummed_data.map(|v| v.cnv()),
            read_range: self.read_range.map(|v| v.cnv()),
            range_end: self.range_end.cnv(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::ObjectRangeData> for ObjectRangeData {
    fn cnv(self) -> crate::generated::gapic::model::ObjectRangeData {
        crate::generated::gapic::model::ObjectRangeData::new()
            .set_checksummed_data(self.checksummed_data.map(|v| v.cnv()))
            .set_read_range(self.read_range.map(|v| v.cnv()))
            .set_range_end(self.range_end)
    }
}

impl gaxi::prost::Convert<BidiReadHandle> for crate::generated::gapic::model::BidiReadHandle {
    fn cnv(self) -> BidiReadHandle {
        BidiReadHandle {
            handle: self.handle.cnv(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::BidiReadHandle> for BidiReadHandle {
    fn cnv(self) -> crate::generated::gapic::model::BidiReadHandle {
        crate::generated::gapic::model::BidiReadHandle::new()
            .set_handle(self.handle)
    }
}

impl gaxi::prost::Convert<BidiWriteHandle> for crate::generated::gapic::model::BidiWriteHandle {
    fn cnv(self) -> BidiWriteHandle {
        BidiWriteHandle {
            handle: self.handle.cnv(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::BidiWriteHandle> for BidiWriteHandle {
    fn cnv(self) -> crate::generated::gapic::model::BidiWriteHandle {
        crate::generated::gapic::model::BidiWriteHandle::new()
            .set_handle(self.handle)
    }
}

impl gaxi::prost::Convert<WriteObjectSpec> for crate::generated::gapic::model::WriteObjectSpec {
    fn cnv(self) -> WriteObjectSpec {
        WriteObjectSpec {
            resource: self.resource.map(|v| v.cnv()),
            predefined_acl: self.predefined_acl.cnv(),
            if_generation_match: self.if_generation_match.map(|v| v.cnv()),
            if_generation_not_match: self.if_generation_not_match.map(|v| v.cnv()),
            if_metageneration_match: self.if_metageneration_match.map(|v| v.cnv()),
            if_metageneration_not_match: self.if_metageneration_not_match.map(|v| v.cnv()),
            object_size: self.object_size.map(|v| v.cnv()),
            appendable: self.appendable.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::WriteObjectSpec> for WriteObjectSpec {
    fn cnv(self) -> crate::generated::gapic::model::WriteObjectSpec {
        crate::generated::gapic::model::WriteObjectSpec::new()
            .set_resource(self.resource.map(|v| v.cnv()))
            .set_predefined_acl(self.predefined_acl)
            .set_if_generation_match(self.if_generation_match.map(|v| v.cnv()))
            .set_if_generation_not_match(self.if_generation_not_match.map(|v| v.cnv()))
            .set_if_metageneration_match(self.if_metageneration_match.map(|v| v.cnv()))
            .set_if_metageneration_not_match(self.if_metageneration_not_match.map(|v| v.cnv()))
            .set_object_size(self.object_size.map(|v| v.cnv()))
            .set_appendable(self.appendable.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::write_object_request::FirstMessage> for write_object_request::FirstMessage {
    fn cnv(self) -> crate::generated::gapic::model::write_object_request::FirstMessage {
        use crate::generated::gapic::model::write_object_request::FirstMessage as T;
        match self {
            Self::UploadId(v) => T::from_upload_id(v.cnv()),
            Self::WriteObjectSpec(v) => T::from_write_object_spec(v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<write_object_request::FirstMessage> for crate::generated::gapic::model::write_object_request::FirstMessage {
    fn cnv(self) -> write_object_request::FirstMessage {
        use write_object_request::FirstMessage as T;
        match self {
            Self::UploadId(v) => T::UploadId(v.cnv()),
            Self::WriteObjectSpec(v) => T::WriteObjectSpec((*v).cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::write_object_request::Data> for write_object_request::Data {
    fn cnv(self) -> crate::generated::gapic::model::write_object_request::Data {
        use crate::generated::gapic::model::write_object_request::Data as T;
        match self {
            Self::ChecksummedData(v) => T::from_checksummed_data(v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<write_object_request::Data> for crate::generated::gapic::model::write_object_request::Data {
    fn cnv(self) -> write_object_request::Data {
        use write_object_request::Data as T;
        match self {
            Self::ChecksummedData(v) => T::ChecksummedData((*v).cnv()),
        }
    }
}

impl gaxi::prost::Convert<WriteObjectRequest> for crate::generated::gapic::model::WriteObjectRequest {
    fn cnv(self) -> WriteObjectRequest {
        WriteObjectRequest {
            write_offset: self.write_offset.cnv(),
            object_checksums: self.object_checksums.map(|v| v.cnv()),
            finish_write: self.finish_write.cnv(),
            common_object_request_params: self.common_object_request_params.map(|v| v.cnv()),
            first_message: self.first_message.map(|v| v.cnv()),
            data: self.data.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::WriteObjectRequest> for WriteObjectRequest {
    fn cnv(self) -> crate::generated::gapic::model::WriteObjectRequest {
        crate::generated::gapic::model::WriteObjectRequest::new()
            .set_write_offset(self.write_offset)
            .set_object_checksums(self.object_checksums.map(|v| v.cnv()))
            .set_finish_write(self.finish_write)
            .set_common_object_request_params(self.common_object_request_params.map(|v| v.cnv()))
            .set_first_message(self.first_message.map(|v| v.cnv()))
            .set_data(self.data.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::write_object_response::WriteStatus> for write_object_response::WriteStatus {
    fn cnv(self) -> crate::generated::gapic::model::write_object_response::WriteStatus {
        use crate::generated::gapic::model::write_object_response::WriteStatus as T;
        match self {
            Self::PersistedSize(v) => T::from_persisted_size(v.cnv()),
            Self::Resource(v) => T::from_resource(v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<write_object_response::WriteStatus> for crate::generated::gapic::model::write_object_response::WriteStatus {
    fn cnv(self) -> write_object_response::WriteStatus {
        use write_object_response::WriteStatus as T;
        match self {
            Self::PersistedSize(v) => T::PersistedSize(v.cnv()),
            Self::Resource(v) => T::Resource((*v).cnv()),
        }
    }
}

impl gaxi::prost::Convert<WriteObjectResponse> for crate::generated::gapic::model::WriteObjectResponse {
    fn cnv(self) -> WriteObjectResponse {
        WriteObjectResponse {
            write_status: self.write_status.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::WriteObjectResponse> for WriteObjectResponse {
    fn cnv(self) -> crate::generated::gapic::model::WriteObjectResponse {
        crate::generated::gapic::model::WriteObjectResponse::new()
            .set_write_status(self.write_status.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<AppendObjectSpec> for crate::generated::gapic::model::AppendObjectSpec {
    fn cnv(self) -> AppendObjectSpec {
        AppendObjectSpec {
            bucket: self.bucket.cnv(),
            object: self.object.cnv(),
            generation: self.generation.cnv(),
            if_metageneration_match: self.if_metageneration_match.map(|v| v.cnv()),
            if_metageneration_not_match: self.if_metageneration_not_match.map(|v| v.cnv()),
            routing_token: self.routing_token.map(|v| v.cnv()),
            write_handle: self.write_handle.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::AppendObjectSpec> for AppendObjectSpec {
    fn cnv(self) -> crate::generated::gapic::model::AppendObjectSpec {
        crate::generated::gapic::model::AppendObjectSpec::new()
            .set_bucket(self.bucket)
            .set_object(self.object)
            .set_generation(self.generation)
            .set_if_metageneration_match(self.if_metageneration_match.map(|v| v.cnv()))
            .set_if_metageneration_not_match(self.if_metageneration_not_match.map(|v| v.cnv()))
            .set_routing_token(self.routing_token.map(|v| v.cnv()))
            .set_write_handle(self.write_handle.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::bidi_write_object_request::FirstMessage> for bidi_write_object_request::FirstMessage {
    fn cnv(self) -> crate::generated::gapic::model::bidi_write_object_request::FirstMessage {
        use crate::generated::gapic::model::bidi_write_object_request::FirstMessage as T;
        match self {
            Self::UploadId(v) => T::from_upload_id(v.cnv()),
            Self::WriteObjectSpec(v) => T::from_write_object_spec(v.cnv()),
            Self::AppendObjectSpec(v) => T::from_append_object_spec(v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<bidi_write_object_request::FirstMessage> for crate::generated::gapic::model::bidi_write_object_request::FirstMessage {
    fn cnv(self) -> bidi_write_object_request::FirstMessage {
        use bidi_write_object_request::FirstMessage as T;
        match self {
            Self::UploadId(v) => T::UploadId(v.cnv()),
            Self::WriteObjectSpec(v) => T::WriteObjectSpec((*v).cnv()),
            Self::AppendObjectSpec(v) => T::AppendObjectSpec((*v).cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::bidi_write_object_request::Data> for bidi_write_object_request::Data {
    fn cnv(self) -> crate::generated::gapic::model::bidi_write_object_request::Data {
        use crate::generated::gapic::model::bidi_write_object_request::Data as T;
        match self {
            Self::ChecksummedData(v) => T::from_checksummed_data(v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<bidi_write_object_request::Data> for crate::generated::gapic::model::bidi_write_object_request::Data {
    fn cnv(self) -> bidi_write_object_request::Data {
        use bidi_write_object_request::Data as T;
        match self {
            Self::ChecksummedData(v) => T::ChecksummedData((*v).cnv()),
        }
    }
}

impl gaxi::prost::Convert<BidiWriteObjectRequest> for crate::generated::gapic::model::BidiWriteObjectRequest {
    fn cnv(self) -> BidiWriteObjectRequest {
        BidiWriteObjectRequest {
            write_offset: self.write_offset.cnv(),
            object_checksums: self.object_checksums.map(|v| v.cnv()),
            state_lookup: self.state_lookup.cnv(),
            flush: self.flush.cnv(),
            finish_write: self.finish_write.cnv(),
            common_object_request_params: self.common_object_request_params.map(|v| v.cnv()),
            first_message: self.first_message.map(|v| v.cnv()),
            data: self.data.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::BidiWriteObjectRequest> for BidiWriteObjectRequest {
    fn cnv(self) -> crate::generated::gapic::model::BidiWriteObjectRequest {
        crate::generated::gapic::model::BidiWriteObjectRequest::new()
            .set_write_offset(self.write_offset)
            .set_object_checksums(self.object_checksums.map(|v| v.cnv()))
            .set_state_lookup(self.state_lookup)
            .set_flush(self.flush)
            .set_finish_write(self.finish_write)
            .set_common_object_request_params(self.common_object_request_params.map(|v| v.cnv()))
            .set_first_message(self.first_message.map(|v| v.cnv()))
            .set_data(self.data.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::bidi_write_object_response::WriteStatus> for bidi_write_object_response::WriteStatus {
    fn cnv(self) -> crate::generated::gapic::model::bidi_write_object_response::WriteStatus {
        use crate::generated::gapic::model::bidi_write_object_response::WriteStatus as T;
        match self {
            Self::PersistedSize(v) => T::from_persisted_size(v.cnv()),
            Self::Resource(v) => T::from_resource(v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<bidi_write_object_response::WriteStatus> for crate::generated::gapic::model::bidi_write_object_response::WriteStatus {
    fn cnv(self) -> bidi_write_object_response::WriteStatus {
        use bidi_write_object_response::WriteStatus as T;
        match self {
            Self::PersistedSize(v) => T::PersistedSize(v.cnv()),
            Self::Resource(v) => T::Resource((*v).cnv()),
        }
    }
}

impl gaxi::prost::Convert<BidiWriteObjectResponse> for crate::generated::gapic::model::BidiWriteObjectResponse {
    fn cnv(self) -> BidiWriteObjectResponse {
        BidiWriteObjectResponse {
            write_handle: self.write_handle.map(|v| v.cnv()),
            write_status: self.write_status.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::BidiWriteObjectResponse> for BidiWriteObjectResponse {
    fn cnv(self) -> crate::generated::gapic::model::BidiWriteObjectResponse {
        crate::generated::gapic::model::BidiWriteObjectResponse::new()
            .set_write_handle(self.write_handle.map(|v| v.cnv()))
            .set_write_status(self.write_status.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<ListObjectsRequest> for crate::generated::gapic::model::ListObjectsRequest {
    fn cnv(self) -> ListObjectsRequest {
        ListObjectsRequest {
            parent: self.parent.cnv(),
            page_size: self.page_size.cnv(),
            page_token: self.page_token.cnv(),
            delimiter: self.delimiter.cnv(),
            include_trailing_delimiter: self.include_trailing_delimiter.cnv(),
            prefix: self.prefix.cnv(),
            versions: self.versions.cnv(),
            read_mask: self.read_mask.map(|v| v.cnv()),
            lexicographic_start: self.lexicographic_start.cnv(),
            lexicographic_end: self.lexicographic_end.cnv(),
            soft_deleted: self.soft_deleted.cnv(),
            include_folders_as_prefixes: self.include_folders_as_prefixes.cnv(),
            match_glob: self.match_glob.cnv(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::ListObjectsRequest> for ListObjectsRequest {
    fn cnv(self) -> crate::generated::gapic::model::ListObjectsRequest {
        crate::generated::gapic::model::ListObjectsRequest::new()
            .set_parent(self.parent)
            .set_page_size(self.page_size)
            .set_page_token(self.page_token)
            .set_delimiter(self.delimiter)
            .set_include_trailing_delimiter(self.include_trailing_delimiter)
            .set_prefix(self.prefix)
            .set_versions(self.versions)
            .set_read_mask(self.read_mask.map(|v| v.cnv()))
            .set_lexicographic_start(self.lexicographic_start)
            .set_lexicographic_end(self.lexicographic_end)
            .set_soft_deleted(self.soft_deleted)
            .set_include_folders_as_prefixes(self.include_folders_as_prefixes)
            .set_match_glob(self.match_glob)
    }
}

impl gaxi::prost::Convert<QueryWriteStatusRequest> for crate::generated::gapic::model::QueryWriteStatusRequest {
    fn cnv(self) -> QueryWriteStatusRequest {
        QueryWriteStatusRequest {
            upload_id: self.upload_id.cnv(),
            common_object_request_params: self.common_object_request_params.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::QueryWriteStatusRequest> for QueryWriteStatusRequest {
    fn cnv(self) -> crate::generated::gapic::model::QueryWriteStatusRequest {
        crate::generated::gapic::model::QueryWriteStatusRequest::new()
            .set_upload_id(self.upload_id)
            .set_common_object_request_params(self.common_object_request_params.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::query_write_status_response::WriteStatus> for query_write_status_response::WriteStatus {
    fn cnv(self) -> crate::generated::gapic::model::query_write_status_response::WriteStatus {
        use crate::generated::gapic::model::query_write_status_response::WriteStatus as T;
        match self {
            Self::PersistedSize(v) => T::from_persisted_size(v.cnv()),
            Self::Resource(v) => T::from_resource(v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<query_write_status_response::WriteStatus> for crate::generated::gapic::model::query_write_status_response::WriteStatus {
    fn cnv(self) -> query_write_status_response::WriteStatus {
        use query_write_status_response::WriteStatus as T;
        match self {
            Self::PersistedSize(v) => T::PersistedSize(v.cnv()),
            Self::Resource(v) => T::Resource((*v).cnv()),
        }
    }
}

impl gaxi::prost::Convert<QueryWriteStatusResponse> for crate::generated::gapic::model::QueryWriteStatusResponse {
    fn cnv(self) -> QueryWriteStatusResponse {
        QueryWriteStatusResponse {
            write_status: self.write_status.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::QueryWriteStatusResponse> for QueryWriteStatusResponse {
    fn cnv(self) -> crate::generated::gapic::model::QueryWriteStatusResponse {
        crate::generated::gapic::model::QueryWriteStatusResponse::new()
            .set_write_status(self.write_status.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<RewriteObjectRequest> for crate::generated::gapic::model::RewriteObjectRequest {
    fn cnv(self) -> RewriteObjectRequest {
        RewriteObjectRequest {
            destination_name: self.destination_name.cnv(),
            destination_bucket: self.destination_bucket.cnv(),
            destination_kms_key: self.destination_kms_key.cnv(),
            destination: self.destination.map(|v| v.cnv()),
            source_bucket: self.source_bucket.cnv(),
            source_object: self.source_object.cnv(),
            source_generation: self.source_generation.cnv(),
            rewrite_token: self.rewrite_token.cnv(),
            destination_predefined_acl: self.destination_predefined_acl.cnv(),
            if_generation_match: self.if_generation_match.map(|v| v.cnv()),
            if_generation_not_match: self.if_generation_not_match.map(|v| v.cnv()),
            if_metageneration_match: self.if_metageneration_match.map(|v| v.cnv()),
            if_metageneration_not_match: self.if_metageneration_not_match.map(|v| v.cnv()),
            if_source_generation_match: self.if_source_generation_match.map(|v| v.cnv()),
            if_source_generation_not_match: self.if_source_generation_not_match.map(|v| v.cnv()),
            if_source_metageneration_match: self.if_source_metageneration_match.map(|v| v.cnv()),
            if_source_metageneration_not_match: self.if_source_metageneration_not_match.map(|v| v.cnv()),
            max_bytes_rewritten_per_call: self.max_bytes_rewritten_per_call.cnv(),
            copy_source_encryption_algorithm: self.copy_source_encryption_algorithm.cnv(),
            copy_source_encryption_key_bytes: self.copy_source_encryption_key_bytes.cnv(),
            copy_source_encryption_key_sha256_bytes: self.copy_source_encryption_key_sha256_bytes.cnv(),
            common_object_request_params: self.common_object_request_params.map(|v| v.cnv()),
            object_checksums: self.object_checksums.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::RewriteObjectRequest> for RewriteObjectRequest {
    fn cnv(self) -> crate::generated::gapic::model::RewriteObjectRequest {
        crate::generated::gapic::model::RewriteObjectRequest::new()
            .set_destination_name(self.destination_name)
            .set_destination_bucket(self.destination_bucket)
            .set_destination_kms_key(self.destination_kms_key)
            .set_destination(self.destination.map(|v| v.cnv()))
            .set_source_bucket(self.source_bucket)
            .set_source_object(self.source_object)
            .set_source_generation(self.source_generation)
            .set_rewrite_token(self.rewrite_token)
            .set_destination_predefined_acl(self.destination_predefined_acl)
            .set_if_generation_match(self.if_generation_match.map(|v| v.cnv()))
            .set_if_generation_not_match(self.if_generation_not_match.map(|v| v.cnv()))
            .set_if_metageneration_match(self.if_metageneration_match.map(|v| v.cnv()))
            .set_if_metageneration_not_match(self.if_metageneration_not_match.map(|v| v.cnv()))
            .set_if_source_generation_match(self.if_source_generation_match.map(|v| v.cnv()))
            .set_if_source_generation_not_match(self.if_source_generation_not_match.map(|v| v.cnv()))
            .set_if_source_metageneration_match(self.if_source_metageneration_match.map(|v| v.cnv()))
            .set_if_source_metageneration_not_match(self.if_source_metageneration_not_match.map(|v| v.cnv()))
            .set_max_bytes_rewritten_per_call(self.max_bytes_rewritten_per_call)
            .set_copy_source_encryption_algorithm(self.copy_source_encryption_algorithm)
            .set_copy_source_encryption_key_bytes(self.copy_source_encryption_key_bytes)
            .set_copy_source_encryption_key_sha256_bytes(self.copy_source_encryption_key_sha256_bytes)
            .set_common_object_request_params(self.common_object_request_params.map(|v| v.cnv()))
            .set_object_checksums(self.object_checksums.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<RewriteResponse> for crate::generated::gapic::model::RewriteResponse {
    fn cnv(self) -> RewriteResponse {
        RewriteResponse {
            total_bytes_rewritten: self.total_bytes_rewritten.cnv(),
            object_size: self.object_size.cnv(),
            done: self.done.cnv(),
            rewrite_token: self.rewrite_token.cnv(),
            resource: self.resource.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::RewriteResponse> for RewriteResponse {
    fn cnv(self) -> crate::generated::gapic::model::RewriteResponse {
        crate::generated::gapic::model::RewriteResponse::new()
            .set_total_bytes_rewritten(self.total_bytes_rewritten)
            .set_object_size(self.object_size)
            .set_done(self.done)
            .set_rewrite_token(self.rewrite_token)
            .set_resource(self.resource.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<MoveObjectRequest> for crate::generated::gapic::model::MoveObjectRequest {
    fn cnv(self) -> MoveObjectRequest {
        MoveObjectRequest {
            bucket: self.bucket.cnv(),
            source_object: self.source_object.cnv(),
            destination_object: self.destination_object.cnv(),
            if_source_generation_match: self.if_source_generation_match.map(|v| v.cnv()),
            if_source_generation_not_match: self.if_source_generation_not_match.map(|v| v.cnv()),
            if_source_metageneration_match: self.if_source_metageneration_match.map(|v| v.cnv()),
            if_source_metageneration_not_match: self.if_source_metageneration_not_match.map(|v| v.cnv()),
            if_generation_match: self.if_generation_match.map(|v| v.cnv()),
            if_generation_not_match: self.if_generation_not_match.map(|v| v.cnv()),
            if_metageneration_match: self.if_metageneration_match.map(|v| v.cnv()),
            if_metageneration_not_match: self.if_metageneration_not_match.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::MoveObjectRequest> for MoveObjectRequest {
    fn cnv(self) -> crate::generated::gapic::model::MoveObjectRequest {
        crate::generated::gapic::model::MoveObjectRequest::new()
            .set_bucket(self.bucket)
            .set_source_object(self.source_object)
            .set_destination_object(self.destination_object)
            .set_if_source_generation_match(self.if_source_generation_match.map(|v| v.cnv()))
            .set_if_source_generation_not_match(self.if_source_generation_not_match.map(|v| v.cnv()))
            .set_if_source_metageneration_match(self.if_source_metageneration_match.map(|v| v.cnv()))
            .set_if_source_metageneration_not_match(self.if_source_metageneration_not_match.map(|v| v.cnv()))
            .set_if_generation_match(self.if_generation_match.map(|v| v.cnv()))
            .set_if_generation_not_match(self.if_generation_not_match.map(|v| v.cnv()))
            .set_if_metageneration_match(self.if_metageneration_match.map(|v| v.cnv()))
            .set_if_metageneration_not_match(self.if_metageneration_not_match.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<StartResumableWriteRequest> for crate::generated::gapic::model::StartResumableWriteRequest {
    fn cnv(self) -> StartResumableWriteRequest {
        StartResumableWriteRequest {
            write_object_spec: self.write_object_spec.map(|v| v.cnv()),
            common_object_request_params: self.common_object_request_params.map(|v| v.cnv()),
            object_checksums: self.object_checksums.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::StartResumableWriteRequest> for StartResumableWriteRequest {
    fn cnv(self) -> crate::generated::gapic::model::StartResumableWriteRequest {
        crate::generated::gapic::model::StartResumableWriteRequest::new()
            .set_write_object_spec(self.write_object_spec.map(|v| v.cnv()))
            .set_common_object_request_params(self.common_object_request_params.map(|v| v.cnv()))
            .set_object_checksums(self.object_checksums.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<StartResumableWriteResponse> for crate::generated::gapic::model::StartResumableWriteResponse {
    fn cnv(self) -> StartResumableWriteResponse {
        StartResumableWriteResponse {
            upload_id: self.upload_id.cnv(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::StartResumableWriteResponse> for StartResumableWriteResponse {
    fn cnv(self) -> crate::generated::gapic::model::StartResumableWriteResponse {
        crate::generated::gapic::model::StartResumableWriteResponse::new()
            .set_upload_id(self.upload_id)
    }
}

impl gaxi::prost::Convert<UpdateObjectRequest> for crate::generated::gapic::model::UpdateObjectRequest {
    fn cnv(self) -> UpdateObjectRequest {
        UpdateObjectRequest {
            object: self.object.map(|v| v.cnv()),
            if_generation_match: self.if_generation_match.map(|v| v.cnv()),
            if_generation_not_match: self.if_generation_not_match.map(|v| v.cnv()),
            if_metageneration_match: self.if_metageneration_match.map(|v| v.cnv()),
            if_metageneration_not_match: self.if_metageneration_not_match.map(|v| v.cnv()),
            predefined_acl: self.predefined_acl.cnv(),
            update_mask: self.update_mask.map(|v| v.cnv()),
            common_object_request_params: self.common_object_request_params.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::UpdateObjectRequest> for UpdateObjectRequest {
    fn cnv(self) -> crate::generated::gapic::model::UpdateObjectRequest {
        crate::generated::gapic::model::UpdateObjectRequest::new()
            .set_object(self.object.map(|v| v.cnv()))
            .set_if_generation_match(self.if_generation_match.map(|v| v.cnv()))
            .set_if_generation_not_match(self.if_generation_not_match.map(|v| v.cnv()))
            .set_if_metageneration_match(self.if_metageneration_match.map(|v| v.cnv()))
            .set_if_metageneration_not_match(self.if_metageneration_not_match.map(|v| v.cnv()))
            .set_predefined_acl(self.predefined_acl)
            .set_update_mask(self.update_mask.map(|v| v.cnv()))
            .set_common_object_request_params(self.common_object_request_params.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<CommonObjectRequestParams> for crate::generated::gapic::model::CommonObjectRequestParams {
    fn cnv(self) -> CommonObjectRequestParams {
        CommonObjectRequestParams {
            encryption_algorithm: self.encryption_algorithm.cnv(),
            encryption_key_bytes: self.encryption_key_bytes.cnv(),
            encryption_key_sha256_bytes: self.encryption_key_sha256_bytes.cnv(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::CommonObjectRequestParams> for CommonObjectRequestParams {
    fn cnv(self) -> crate::generated::gapic::model::CommonObjectRequestParams {
        crate::generated::gapic::model::CommonObjectRequestParams::new()
            .set_encryption_algorithm(self.encryption_algorithm)
            .set_encryption_key_bytes(self.encryption_key_bytes)
            .set_encryption_key_sha256_bytes(self.encryption_key_sha256_bytes)
    }
}

impl gaxi::prost::Convert<ServiceConstants> for crate::generated::gapic::model::ServiceConstants {
    fn cnv(self) -> ServiceConstants {
        ServiceConstants {
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::ServiceConstants> for ServiceConstants {
    fn cnv(self) -> crate::generated::gapic::model::ServiceConstants {
        crate::generated::gapic::model::ServiceConstants::new()
    }
}

impl gaxi::prost::Convert<bucket::Billing> for crate::generated::gapic::model::bucket::Billing {
    fn cnv(self) -> bucket::Billing {
        bucket::Billing {
            requester_pays: self.requester_pays.cnv(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::bucket::Billing> for bucket::Billing {
    fn cnv(self) -> crate::generated::gapic::model::bucket::Billing {
        crate::generated::gapic::model::bucket::Billing::new()
            .set_requester_pays(self.requester_pays)
    }
}

impl gaxi::prost::Convert<bucket::Cors> for crate::generated::gapic::model::bucket::Cors {
    fn cnv(self) -> bucket::Cors {
        bucket::Cors {
            max_age_seconds: self.max_age_seconds.cnv(),
            origin: self.origin.into_iter().map(|v| v.cnv()).collect(),
            method: self.method.into_iter().map(|v| v.cnv()).collect(),
            response_header: self.response_header.into_iter().map(|v| v.cnv()).collect(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::bucket::Cors> for bucket::Cors {
    fn cnv(self) -> crate::generated::gapic::model::bucket::Cors {
        crate::generated::gapic::model::bucket::Cors::new()
            .set_max_age_seconds(self.max_age_seconds)
            .set_origin(self.origin.into_iter().map(|v| v.cnv()))
            .set_method(self.method.into_iter().map(|v| v.cnv()))
            .set_response_header(self.response_header.into_iter().map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<bucket::Encryption> for crate::generated::gapic::model::bucket::Encryption {
    fn cnv(self) -> bucket::Encryption {
        bucket::Encryption {
            default_kms_key: self.default_kms_key.cnv(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::bucket::Encryption> for bucket::Encryption {
    fn cnv(self) -> crate::generated::gapic::model::bucket::Encryption {
        crate::generated::gapic::model::bucket::Encryption::new()
            .set_default_kms_key(self.default_kms_key)
    }
}

impl gaxi::prost::Convert<bucket::iam_config::UniformBucketLevelAccess> for crate::generated::gapic::model::bucket::iam_config::UniformBucketLevelAccess {
    fn cnv(self) -> bucket::iam_config::UniformBucketLevelAccess {
        bucket::iam_config::UniformBucketLevelAccess {
            enabled: self.enabled.cnv(),
            lock_time: self.lock_time.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::bucket::iam_config::UniformBucketLevelAccess> for bucket::iam_config::UniformBucketLevelAccess {
    fn cnv(self) -> crate::generated::gapic::model::bucket::iam_config::UniformBucketLevelAccess {
        crate::generated::gapic::model::bucket::iam_config::UniformBucketLevelAccess::new()
            .set_enabled(self.enabled)
            .set_lock_time(self.lock_time.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<bucket::IamConfig> for crate::generated::gapic::model::bucket::IamConfig {
    fn cnv(self) -> bucket::IamConfig {
        bucket::IamConfig {
            uniform_bucket_level_access: self.uniform_bucket_level_access.map(|v| v.cnv()),
            public_access_prevention: self.public_access_prevention.cnv(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::bucket::IamConfig> for bucket::IamConfig {
    fn cnv(self) -> crate::generated::gapic::model::bucket::IamConfig {
        crate::generated::gapic::model::bucket::IamConfig::new()
            .set_uniform_bucket_level_access(self.uniform_bucket_level_access.map(|v| v.cnv()))
            .set_public_access_prevention(self.public_access_prevention)
    }
}

impl gaxi::prost::Convert<bucket::lifecycle::rule::Action> for crate::generated::gapic::model::bucket::lifecycle::rule::Action {
    fn cnv(self) -> bucket::lifecycle::rule::Action {
        bucket::lifecycle::rule::Action {
            r#type: self.r#type.cnv(),
            storage_class: self.storage_class.cnv(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::bucket::lifecycle::rule::Action> for bucket::lifecycle::rule::Action {
    fn cnv(self) -> crate::generated::gapic::model::bucket::lifecycle::rule::Action {
        crate::generated::gapic::model::bucket::lifecycle::rule::Action::new()
            .set_type(self.r#type)
            .set_storage_class(self.storage_class)
    }
}

impl gaxi::prost::Convert<bucket::lifecycle::rule::Condition> for crate::generated::gapic::model::bucket::lifecycle::rule::Condition {
    fn cnv(self) -> bucket::lifecycle::rule::Condition {
        bucket::lifecycle::rule::Condition {
            age_days: self.age_days.map(|v| v.cnv()),
            created_before: self.created_before.map(|v| v.cnv()),
            is_live: self.is_live.map(|v| v.cnv()),
            num_newer_versions: self.num_newer_versions.map(|v| v.cnv()),
            days_since_custom_time: self.days_since_custom_time.map(|v| v.cnv()),
            custom_time_before: self.custom_time_before.map(|v| v.cnv()),
            days_since_noncurrent_time: self.days_since_noncurrent_time.map(|v| v.cnv()),
            noncurrent_time_before: self.noncurrent_time_before.map(|v| v.cnv()),
            matches_storage_class: self.matches_storage_class.into_iter().map(|v| v.cnv()).collect(),
            matches_prefix: self.matches_prefix.into_iter().map(|v| v.cnv()).collect(),
            matches_suffix: self.matches_suffix.into_iter().map(|v| v.cnv()).collect(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::bucket::lifecycle::rule::Condition> for bucket::lifecycle::rule::Condition {
    fn cnv(self) -> crate::generated::gapic::model::bucket::lifecycle::rule::Condition {
        crate::generated::gapic::model::bucket::lifecycle::rule::Condition::new()
            .set_age_days(self.age_days.map(|v| v.cnv()))
            .set_created_before(self.created_before.map(|v| v.cnv()))
            .set_is_live(self.is_live.map(|v| v.cnv()))
            .set_num_newer_versions(self.num_newer_versions.map(|v| v.cnv()))
            .set_days_since_custom_time(self.days_since_custom_time.map(|v| v.cnv()))
            .set_custom_time_before(self.custom_time_before.map(|v| v.cnv()))
            .set_days_since_noncurrent_time(self.days_since_noncurrent_time.map(|v| v.cnv()))
            .set_noncurrent_time_before(self.noncurrent_time_before.map(|v| v.cnv()))
            .set_matches_storage_class(self.matches_storage_class.into_iter().map(|v| v.cnv()))
            .set_matches_prefix(self.matches_prefix.into_iter().map(|v| v.cnv()))
            .set_matches_suffix(self.matches_suffix.into_iter().map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<bucket::lifecycle::Rule> for crate::generated::gapic::model::bucket::lifecycle::Rule {
    fn cnv(self) -> bucket::lifecycle::Rule {
        bucket::lifecycle::Rule {
            action: self.action.map(|v| v.cnv()),
            condition: self.condition.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::bucket::lifecycle::Rule> for bucket::lifecycle::Rule {
    fn cnv(self) -> crate::generated::gapic::model::bucket::lifecycle::Rule {
        crate::generated::gapic::model::bucket::lifecycle::Rule::new()
            .set_action(self.action.map(|v| v.cnv()))
            .set_condition(self.condition.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<bucket::Lifecycle> for crate::generated::gapic::model::bucket::Lifecycle {
    fn cnv(self) -> bucket::Lifecycle {
        bucket::Lifecycle {
            rule: self.rule.into_iter().map(|v| v.cnv()).collect(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::bucket::Lifecycle> for bucket::Lifecycle {
    fn cnv(self) -> crate::generated::gapic::model::bucket::Lifecycle {
        crate::generated::gapic::model::bucket::Lifecycle::new()
            .set_rule(self.rule.into_iter().map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<bucket::Logging> for crate::generated::gapic::model::bucket::Logging {
    fn cnv(self) -> bucket::Logging {
        bucket::Logging {
            log_bucket: self.log_bucket.cnv(),
            log_object_prefix: self.log_object_prefix.cnv(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::bucket::Logging> for bucket::Logging {
    fn cnv(self) -> crate::generated::gapic::model::bucket::Logging {
        crate::generated::gapic::model::bucket::Logging::new()
            .set_log_bucket(self.log_bucket)
            .set_log_object_prefix(self.log_object_prefix)
    }
}

impl gaxi::prost::Convert<bucket::RetentionPolicy> for crate::generated::gapic::model::bucket::RetentionPolicy {
    fn cnv(self) -> bucket::RetentionPolicy {
        bucket::RetentionPolicy {
            effective_time: self.effective_time.map(|v| v.cnv()),
            is_locked: self.is_locked.cnv(),
            retention_duration: self.retention_duration.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::bucket::RetentionPolicy> for bucket::RetentionPolicy {
    fn cnv(self) -> crate::generated::gapic::model::bucket::RetentionPolicy {
        crate::generated::gapic::model::bucket::RetentionPolicy::new()
            .set_effective_time(self.effective_time.map(|v| v.cnv()))
            .set_is_locked(self.is_locked)
            .set_retention_duration(self.retention_duration.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<bucket::SoftDeletePolicy> for crate::generated::gapic::model::bucket::SoftDeletePolicy {
    fn cnv(self) -> bucket::SoftDeletePolicy {
        bucket::SoftDeletePolicy {
            retention_duration: self.retention_duration.map(|v| v.cnv()),
            effective_time: self.effective_time.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::bucket::SoftDeletePolicy> for bucket::SoftDeletePolicy {
    fn cnv(self) -> crate::generated::gapic::model::bucket::SoftDeletePolicy {
        crate::generated::gapic::model::bucket::SoftDeletePolicy::new()
            .set_retention_duration(self.retention_duration.map(|v| v.cnv()))
            .set_effective_time(self.effective_time.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<bucket::Versioning> for crate::generated::gapic::model::bucket::Versioning {
    fn cnv(self) -> bucket::Versioning {
        bucket::Versioning {
            enabled: self.enabled.cnv(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::bucket::Versioning> for bucket::Versioning {
    fn cnv(self) -> crate::generated::gapic::model::bucket::Versioning {
        crate::generated::gapic::model::bucket::Versioning::new()
            .set_enabled(self.enabled)
    }
}

impl gaxi::prost::Convert<bucket::Website> for crate::generated::gapic::model::bucket::Website {
    fn cnv(self) -> bucket::Website {
        bucket::Website {
            main_page_suffix: self.main_page_suffix.cnv(),
            not_found_page: self.not_found_page.cnv(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::bucket::Website> for bucket::Website {
    fn cnv(self) -> crate::generated::gapic::model::bucket::Website {
        crate::generated::gapic::model::bucket::Website::new()
            .set_main_page_suffix(self.main_page_suffix)
            .set_not_found_page(self.not_found_page)
    }
}

impl gaxi::prost::Convert<bucket::CustomPlacementConfig> for crate::generated::gapic::model::bucket::CustomPlacementConfig {
    fn cnv(self) -> bucket::CustomPlacementConfig {
        bucket::CustomPlacementConfig {
            data_locations: self.data_locations.into_iter().map(|v| v.cnv()).collect(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::bucket::CustomPlacementConfig> for bucket::CustomPlacementConfig {
    fn cnv(self) -> crate::generated::gapic::model::bucket::CustomPlacementConfig {
        crate::generated::gapic::model::bucket::CustomPlacementConfig::new()
            .set_data_locations(self.data_locations.into_iter().map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<bucket::Autoclass> for crate::generated::gapic::model::bucket::Autoclass {
    fn cnv(self) -> bucket::Autoclass {
        bucket::Autoclass {
            enabled: self.enabled.cnv(),
            toggle_time: self.toggle_time.map(|v| v.cnv()),
            terminal_storage_class: self.terminal_storage_class.map(|v| v.cnv()),
            terminal_storage_class_update_time: self.terminal_storage_class_update_time.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::bucket::Autoclass> for bucket::Autoclass {
    fn cnv(self) -> crate::generated::gapic::model::bucket::Autoclass {
        crate::generated::gapic::model::bucket::Autoclass::new()
            .set_enabled(self.enabled)
            .set_toggle_time(self.toggle_time.map(|v| v.cnv()))
            .set_terminal_storage_class(self.terminal_storage_class.map(|v| v.cnv()))
            .set_terminal_storage_class_update_time(self.terminal_storage_class_update_time.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<bucket::HierarchicalNamespace> for crate::generated::gapic::model::bucket::HierarchicalNamespace {
    fn cnv(self) -> bucket::HierarchicalNamespace {
        bucket::HierarchicalNamespace {
            enabled: self.enabled.cnv(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::bucket::HierarchicalNamespace> for bucket::HierarchicalNamespace {
    fn cnv(self) -> crate::generated::gapic::model::bucket::HierarchicalNamespace {
        crate::generated::gapic::model::bucket::HierarchicalNamespace::new()
            .set_enabled(self.enabled)
    }
}

impl gaxi::prost::Convert<Bucket> for crate::generated::gapic::model::Bucket {
    fn cnv(self) -> Bucket {
        Bucket {
            name: self.name.cnv(),
            bucket_id: self.bucket_id.cnv(),
            etag: self.etag.cnv(),
            project: self.project.cnv(),
            metageneration: self.metageneration.cnv(),
            location: self.location.cnv(),
            location_type: self.location_type.cnv(),
            storage_class: self.storage_class.cnv(),
            rpo: self.rpo.cnv(),
            lifecycle: self.lifecycle.map(|v| v.cnv()),
            create_time: self.create_time.map(|v| v.cnv()),
            update_time: self.update_time.map(|v| v.cnv()),
            default_event_based_hold: self.default_event_based_hold.cnv(),
            website: self.website.map(|v| v.cnv()),
            versioning: self.versioning.map(|v| v.cnv()),
            logging: self.logging.map(|v| v.cnv()),
            owner: self.owner.map(|v| v.cnv()),
            encryption: self.encryption.map(|v| v.cnv()),
            billing: self.billing.map(|v| v.cnv()),
            retention_policy: self.retention_policy.map(|v| v.cnv()),
            iam_config: self.iam_config.map(|v| v.cnv()),
            satisfies_pzs: self.satisfies_pzs.cnv(),
            custom_placement_config: self.custom_placement_config.map(|v| v.cnv()),
            autoclass: self.autoclass.map(|v| v.cnv()),
            hierarchical_namespace: self.hierarchical_namespace.map(|v| v.cnv()),
            soft_delete_policy: self.soft_delete_policy.map(|v| v.cnv()),
            acl: self.acl.into_iter().map(|v| v.cnv()).collect(),
            default_object_acl: self.default_object_acl.into_iter().map(|v| v.cnv()).collect(),
            cors: self.cors.into_iter().map(|v| v.cnv()).collect(),
            labels: self.labels.into_iter().map(|(k, v)| (k.cnv(), v.cnv())).collect(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::Bucket> for Bucket {
    fn cnv(self) -> crate::generated::gapic::model::Bucket {
        crate::generated::gapic::model::Bucket::new()
            .set_name(self.name)
            .set_bucket_id(self.bucket_id)
            .set_etag(self.etag)
            .set_project(self.project)
            .set_metageneration(self.metageneration)
            .set_location(self.location)
            .set_location_type(self.location_type)
            .set_storage_class(self.storage_class)
            .set_rpo(self.rpo)
            .set_lifecycle(self.lifecycle.map(|v| v.cnv()))
            .set_create_time(self.create_time.map(|v| v.cnv()))
            .set_update_time(self.update_time.map(|v| v.cnv()))
            .set_default_event_based_hold(self.default_event_based_hold)
            .set_website(self.website.map(|v| v.cnv()))
            .set_versioning(self.versioning.map(|v| v.cnv()))
            .set_logging(self.logging.map(|v| v.cnv()))
            .set_owner(self.owner.map(|v| v.cnv()))
            .set_encryption(self.encryption.map(|v| v.cnv()))
            .set_billing(self.billing.map(|v| v.cnv()))
            .set_retention_policy(self.retention_policy.map(|v| v.cnv()))
            .set_iam_config(self.iam_config.map(|v| v.cnv()))
            .set_satisfies_pzs(self.satisfies_pzs)
            .set_custom_placement_config(self.custom_placement_config.map(|v| v.cnv()))
            .set_autoclass(self.autoclass.map(|v| v.cnv()))
            .set_hierarchical_namespace(self.hierarchical_namespace.map(|v| v.cnv()))
            .set_soft_delete_policy(self.soft_delete_policy.map(|v| v.cnv()))
            .set_acl(self.acl.into_iter().map(|v| v.cnv()))
            .set_default_object_acl(self.default_object_acl.into_iter().map(|v| v.cnv()))
            .set_cors(self.cors.into_iter().map(|v| v.cnv()))
            .set_labels(self.labels.into_iter().map(|(k, v)| (k.cnv(), v.cnv())))
    }
}

impl gaxi::prost::Convert<BucketAccessControl> for crate::generated::gapic::model::BucketAccessControl {
    fn cnv(self) -> BucketAccessControl {
        BucketAccessControl {
            role: self.role.cnv(),
            id: self.id.cnv(),
            entity: self.entity.cnv(),
            entity_alt: self.entity_alt.cnv(),
            entity_id: self.entity_id.cnv(),
            etag: self.etag.cnv(),
            email: self.email.cnv(),
            domain: self.domain.cnv(),
            project_team: self.project_team.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::BucketAccessControl> for BucketAccessControl {
    fn cnv(self) -> crate::generated::gapic::model::BucketAccessControl {
        crate::generated::gapic::model::BucketAccessControl::new()
            .set_role(self.role)
            .set_id(self.id)
            .set_entity(self.entity)
            .set_entity_alt(self.entity_alt)
            .set_entity_id(self.entity_id)
            .set_etag(self.etag)
            .set_email(self.email)
            .set_domain(self.domain)
            .set_project_team(self.project_team.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<ChecksummedData> for crate::generated::gapic::model::ChecksummedData {
    fn cnv(self) -> ChecksummedData {
        ChecksummedData {
            content: self.content.cnv(),
            crc32c: self.crc32c.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::ChecksummedData> for ChecksummedData {
    fn cnv(self) -> crate::generated::gapic::model::ChecksummedData {
        crate::generated::gapic::model::ChecksummedData::new()
            .set_content(self.content)
            .set_crc32c(self.crc32c.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<ObjectChecksums> for crate::generated::gapic::model::ObjectChecksums {
    fn cnv(self) -> ObjectChecksums {
        ObjectChecksums {
            crc32c: self.crc32c.map(|v| v.cnv()),
            md5_hash: self.md5_hash.cnv(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::ObjectChecksums> for ObjectChecksums {
    fn cnv(self) -> crate::generated::gapic::model::ObjectChecksums {
        crate::generated::gapic::model::ObjectChecksums::new()
            .set_crc32c(self.crc32c.map(|v| v.cnv()))
            .set_md5_hash(self.md5_hash)
    }
}

impl gaxi::prost::Convert<CustomerEncryption> for crate::generated::gapic::model::CustomerEncryption {
    fn cnv(self) -> CustomerEncryption {
        CustomerEncryption {
            encryption_algorithm: self.encryption_algorithm.cnv(),
            key_sha256_bytes: self.key_sha256_bytes.cnv(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::CustomerEncryption> for CustomerEncryption {
    fn cnv(self) -> crate::generated::gapic::model::CustomerEncryption {
        crate::generated::gapic::model::CustomerEncryption::new()
            .set_encryption_algorithm(self.encryption_algorithm)
            .set_key_sha256_bytes(self.key_sha256_bytes)
    }
}

impl gaxi::prost::Convert<Object> for crate::generated::gapic::model::Object {
    fn cnv(self) -> Object {
        Object {
            name: self.name.cnv(),
            bucket: self.bucket.cnv(),
            etag: self.etag.cnv(),
            generation: self.generation.cnv(),
            restore_token: self.restore_token.map(|v| v.cnv()),
            metageneration: self.metageneration.cnv(),
            storage_class: self.storage_class.cnv(),
            size: self.size.cnv(),
            content_encoding: self.content_encoding.cnv(),
            content_disposition: self.content_disposition.cnv(),
            cache_control: self.cache_control.cnv(),
            content_language: self.content_language.cnv(),
            delete_time: self.delete_time.map(|v| v.cnv()),
            finalize_time: self.finalize_time.map(|v| v.cnv()),
            content_type: self.content_type.cnv(),
            create_time: self.create_time.map(|v| v.cnv()),
            component_count: self.component_count.cnv(),
            checksums: self.checksums.map(|v| v.cnv()),
            update_time: self.update_time.map(|v| v.cnv()),
            kms_key: self.kms_key.cnv(),
            update_storage_class_time: self.update_storage_class_time.map(|v| v.cnv()),
            temporary_hold: self.temporary_hold.cnv(),
            retention_expire_time: self.retention_expire_time.map(|v| v.cnv()),
            event_based_hold: self.event_based_hold.map(|v| v.cnv()),
            owner: self.owner.map(|v| v.cnv()),
            customer_encryption: self.customer_encryption.map(|v| v.cnv()),
            custom_time: self.custom_time.map(|v| v.cnv()),
            soft_delete_time: self.soft_delete_time.map(|v| v.cnv()),
            hard_delete_time: self.hard_delete_time.map(|v| v.cnv()),
            acl: self.acl.into_iter().map(|v| v.cnv()).collect(),
            metadata: self.metadata.into_iter().map(|(k, v)| (k.cnv(), v.cnv())).collect(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::Object> for Object {
    fn cnv(self) -> crate::generated::gapic::model::Object {
        crate::generated::gapic::model::Object::new()
            .set_name(self.name)
            .set_bucket(self.bucket)
            .set_etag(self.etag)
            .set_generation(self.generation)
            .set_restore_token(self.restore_token.map(|v| v.cnv()))
            .set_metageneration(self.metageneration)
            .set_storage_class(self.storage_class)
            .set_size(self.size)
            .set_content_encoding(self.content_encoding)
            .set_content_disposition(self.content_disposition)
            .set_cache_control(self.cache_control)
            .set_content_language(self.content_language)
            .set_delete_time(self.delete_time.map(|v| v.cnv()))
            .set_finalize_time(self.finalize_time.map(|v| v.cnv()))
            .set_content_type(self.content_type)
            .set_create_time(self.create_time.map(|v| v.cnv()))
            .set_component_count(self.component_count)
            .set_checksums(self.checksums.map(|v| v.cnv()))
            .set_update_time(self.update_time.map(|v| v.cnv()))
            .set_kms_key(self.kms_key)
            .set_update_storage_class_time(self.update_storage_class_time.map(|v| v.cnv()))
            .set_temporary_hold(self.temporary_hold)
            .set_retention_expire_time(self.retention_expire_time.map(|v| v.cnv()))
            .set_event_based_hold(self.event_based_hold.map(|v| v.cnv()))
            .set_owner(self.owner.map(|v| v.cnv()))
            .set_customer_encryption(self.customer_encryption.map(|v| v.cnv()))
            .set_custom_time(self.custom_time.map(|v| v.cnv()))
            .set_soft_delete_time(self.soft_delete_time.map(|v| v.cnv()))
            .set_hard_delete_time(self.hard_delete_time.map(|v| v.cnv()))
            .set_acl(self.acl.into_iter().map(|v| v.cnv()))
            .set_metadata(self.metadata.into_iter().map(|(k, v)| (k.cnv(), v.cnv())))
    }
}

impl gaxi::prost::Convert<ObjectAccessControl> for crate::generated::gapic::model::ObjectAccessControl {
    fn cnv(self) -> ObjectAccessControl {
        ObjectAccessControl {
            role: self.role.cnv(),
            id: self.id.cnv(),
            entity: self.entity.cnv(),
            entity_alt: self.entity_alt.cnv(),
            entity_id: self.entity_id.cnv(),
            etag: self.etag.cnv(),
            email: self.email.cnv(),
            domain: self.domain.cnv(),
            project_team: self.project_team.map(|v| v.cnv()),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::ObjectAccessControl> for ObjectAccessControl {
    fn cnv(self) -> crate::generated::gapic::model::ObjectAccessControl {
        crate::generated::gapic::model::ObjectAccessControl::new()
            .set_role(self.role)
            .set_id(self.id)
            .set_entity(self.entity)
            .set_entity_alt(self.entity_alt)
            .set_entity_id(self.entity_id)
            .set_etag(self.etag)
            .set_email(self.email)
            .set_domain(self.domain)
            .set_project_team(self.project_team.map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<ListObjectsResponse> for crate::generated::gapic::model::ListObjectsResponse {
    fn cnv(self) -> ListObjectsResponse {
        ListObjectsResponse {
            next_page_token: self.next_page_token.cnv(),
            objects: self.objects.into_iter().map(|v| v.cnv()).collect(),
            prefixes: self.prefixes.into_iter().map(|v| v.cnv()).collect(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::ListObjectsResponse> for ListObjectsResponse {
    fn cnv(self) -> crate::generated::gapic::model::ListObjectsResponse {
        crate::generated::gapic::model::ListObjectsResponse::new()
            .set_next_page_token(self.next_page_token)
            .set_objects(self.objects.into_iter().map(|v| v.cnv()))
            .set_prefixes(self.prefixes.into_iter().map(|v| v.cnv()))
    }
}

impl gaxi::prost::Convert<ProjectTeam> for crate::generated::gapic::model::ProjectTeam {
    fn cnv(self) -> ProjectTeam {
        ProjectTeam {
            project_number: self.project_number.cnv(),
            team: self.team.cnv(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::ProjectTeam> for ProjectTeam {
    fn cnv(self) -> crate::generated::gapic::model::ProjectTeam {
        crate::generated::gapic::model::ProjectTeam::new()
            .set_project_number(self.project_number)
            .set_team(self.team)
    }
}

impl gaxi::prost::Convert<Owner> for crate::generated::gapic::model::Owner {
    fn cnv(self) -> Owner {
        Owner {
            entity: self.entity.cnv(),
            entity_id: self.entity_id.cnv(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::Owner> for Owner {
    fn cnv(self) -> crate::generated::gapic::model::Owner {
        crate::generated::gapic::model::Owner::new()
            .set_entity(self.entity)
            .set_entity_id(self.entity_id)
    }
}

impl gaxi::prost::Convert<ContentRange> for crate::generated::gapic::model::ContentRange {
    fn cnv(self) -> ContentRange {
        ContentRange {
            start: self.start.cnv(),
            end: self.end.cnv(),
            complete_length: self.complete_length.cnv(),
        }
    }
}

impl gaxi::prost::Convert<crate::generated::gapic::model::ContentRange> for ContentRange {
    fn cnv(self) -> crate::generated::gapic::model::ContentRange {
        crate::generated::gapic::model::ContentRange::new()
            .set_start(self.start)
            .set_end(self.end)
            .set_complete_length(self.complete_length)
    }
}
