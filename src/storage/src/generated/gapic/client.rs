// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Cloud Storage.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_storage::client::Storage;
/// let client = Storage::builder().build().await?;
/// // use `client` to make requests to the Cloud Storage.
/// # gax::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// ## API Overview and Naming Syntax
///
/// The Cloud Storage gRPC API allows applications to read and write data through
/// the abstractions of buckets and objects. For a description of these
/// abstractions please see <https://cloud.google.com/storage/docs>.
///
/// Resources are named as follows:
///
/// - Projects are referred to as they are defined by the Resource Manager API,
///   using strings like `projects/123456` or `projects/my-string-id`.
///
/// - Buckets are named using string names of the form:
///   `projects/{project}/buckets/{bucket}`
///   For globally unique buckets, `_` may be substituted for the project.
///
/// - Objects are uniquely identified by their name along with the name of the
///   bucket they belong to, as separate strings in this API. For example:
///
/// - ReadObjectRequest {
///   bucket: 'projects/_/buckets/my-bucket'
///   object: 'my-object'
///   }
///   Note that object names can contain `/` characters, which are treated as
///   any other character (no special directory semantics).
///
///
/// # Configuration
///
/// To configure `Storage` use the `with_*` methods in the type returned
/// by [builder()][Storage::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://storage.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::storage::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::storage::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `Storage` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Storage` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Storage {
    inner: Arc<dyn super::stub::dynamic::Storage>,
}

impl Storage {
    /// Returns a builder for [Storage].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_storage::client::Storage;
    /// let client = Storage::builder().build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::storage::ClientBuilder {
        gax::client_builder::internal::new_builder(super::builder::storage::client::Factory)
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::Storage + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    pub(crate) async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> Result<Arc<dyn super::stub::dynamic::Storage>> {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::Storage> {
        super::transport::Storage::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::Storage> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::Storage::new)
    }

    /// Permanently deletes an empty bucket.
    pub fn delete_bucket(&self) -> super::builder::storage::DeleteBucket {
        super::builder::storage::DeleteBucket::new(self.inner.clone())
    }

    /// Returns metadata for the specified bucket.
    pub fn get_bucket(&self) -> super::builder::storage::GetBucket {
        super::builder::storage::GetBucket::new(self.inner.clone())
    }

    /// Creates a new bucket.
    pub fn create_bucket(&self) -> super::builder::storage::CreateBucket {
        super::builder::storage::CreateBucket::new(self.inner.clone())
    }

    /// Retrieves a list of buckets for a given project.
    pub fn list_buckets(&self) -> super::builder::storage::ListBuckets {
        super::builder::storage::ListBuckets::new(self.inner.clone())
    }

    /// Locks retention policy on a bucket.
    pub fn lock_bucket_retention_policy(
        &self,
    ) -> super::builder::storage::LockBucketRetentionPolicy {
        super::builder::storage::LockBucketRetentionPolicy::new(self.inner.clone())
    }

    /// Updates a bucket. Equivalent to JSON API's storage.buckets.patch method.
    pub fn update_bucket(&self) -> super::builder::storage::UpdateBucket {
        super::builder::storage::UpdateBucket::new(self.inner.clone())
    }

    /// Concatenates a list of existing objects into a new object in the same
    /// bucket.
    pub fn compose_object(&self) -> super::builder::storage::ComposeObject {
        super::builder::storage::ComposeObject::new(self.inner.clone())
    }

    /// Deletes an object and its metadata. Deletions are permanent if versioning
    /// is not enabled for the bucket, or if the generation parameter is used, or
    /// if [soft delete](https://cloud.google.com/storage/docs/soft-delete) is not
    /// enabled for the bucket.
    /// When this API is used to delete an object from a bucket that has soft
    /// delete policy enabled, the object becomes soft deleted, and the
    /// `softDeleteTime` and `hardDeleteTime` properties are set on the object.
    /// This API cannot be used to permanently delete soft-deleted objects.
    /// Soft-deleted objects are permanently deleted according to their
    /// `hardDeleteTime`.
    ///
    /// You can use the [`RestoreObject`][google.storage.v2.Storage.RestoreObject]
    /// API to restore soft-deleted objects until the soft delete retention period
    /// has passed.
    ///
    /// **IAM Permissions**:
    ///
    /// Requires `storage.objects.delete`
    /// [IAM permission](https://cloud.google.com/iam/docs/overview#permissions) on
    /// the bucket.
    ///
    /// [google.storage.v2.Storage.RestoreObject]: crate::client::Storage::restore_object
    pub fn delete_object(&self) -> super::builder::storage::DeleteObject {
        super::builder::storage::DeleteObject::new(self.inner.clone())
    }

    /// Restores a soft-deleted object.
    pub fn restore_object(&self) -> super::builder::storage::RestoreObject {
        super::builder::storage::RestoreObject::new(self.inner.clone())
    }

    /// Cancels an in-progress resumable upload.
    ///
    /// Any attempts to write to the resumable upload after cancelling the upload
    /// will fail.
    ///
    /// The behavior for currently in progress write operations is not guaranteed -
    /// they could either complete before the cancellation or fail if the
    /// cancellation completes first.
    pub fn cancel_resumable_write(&self) -> super::builder::storage::CancelResumableWrite {
        super::builder::storage::CancelResumableWrite::new(self.inner.clone())
    }

    /// Retrieves object metadata.
    ///
    /// **IAM Permissions**:
    ///
    /// Requires `storage.objects.get`
    /// [IAM permission](https://cloud.google.com/iam/docs/overview#permissions) on
    /// the bucket. To return object ACLs, the authenticated user must also have
    /// the `storage.objects.getIamPolicy` permission.
    pub fn get_object(&self) -> super::builder::storage::GetObject {
        super::builder::storage::GetObject::new(self.inner.clone())
    }

    /// Updates an object's metadata.
    /// Equivalent to JSON API's storage.objects.patch.
    pub fn update_object(&self) -> super::builder::storage::UpdateObject {
        super::builder::storage::UpdateObject::new(self.inner.clone())
    }

    /// Retrieves a list of objects matching the criteria.
    ///
    /// **IAM Permissions**:
    ///
    /// The authenticated user requires `storage.objects.list`
    /// [IAM permission](https://cloud.google.com/iam/docs/overview#permissions)
    /// to use this method. To return object ACLs, the authenticated user must also
    /// have the `storage.objects.getIamPolicy` permission.
    pub fn list_objects(&self) -> super::builder::storage::ListObjects {
        super::builder::storage::ListObjects::new(self.inner.clone())
    }

    /// Rewrites a source object to a destination object. Optionally overrides
    /// metadata.
    pub fn rewrite_object(&self) -> super::builder::storage::RewriteObject {
        super::builder::storage::RewriteObject::new(self.inner.clone())
    }

    /// Starts a resumable write operation. This
    /// method is part of the [Resumable
    /// upload](https://cloud.google.com/storage/docs/resumable-uploads) feature.
    /// This allows you to upload large objects in multiple chunks, which is more
    /// resilient to network interruptions than a single upload. The validity
    /// duration of the write operation, and the consequences of it becoming
    /// invalid, are service-dependent.
    ///
    /// **IAM Permissions**:
    ///
    /// Requires `storage.objects.create`
    /// [IAM permission](https://cloud.google.com/iam/docs/overview#permissions) on
    /// the bucket.
    pub fn start_resumable_write(&self) -> super::builder::storage::StartResumableWrite {
        super::builder::storage::StartResumableWrite::new(self.inner.clone())
    }

    /// Determines the `persisted_size` of an object that is being written. This
    /// method is part of the [resumable
    /// upload](https://cloud.google.com/storage/docs/resumable-uploads) feature.
    /// The returned value is the size of the object that has been persisted so
    /// far. The value can be used as the `write_offset` for the next `Write()`
    /// call.
    ///
    /// If the object does not exist, meaning if it was deleted, or the
    /// first `Write()` has not yet reached the service, this method returns the
    /// error `NOT_FOUND`.
    ///
    /// This method is useful for clients that buffer data and need to know which
    /// data can be safely evicted. The client can call `QueryWriteStatus()` at any
    /// time to determine how much data has been logged for this object.
    /// For any sequence of `QueryWriteStatus()` calls for a given
    /// object name, the sequence of returned `persisted_size` values are
    /// non-decreasing.
    pub fn query_write_status(&self) -> super::builder::storage::QueryWriteStatus {
        super::builder::storage::QueryWriteStatus::new(self.inner.clone())
    }

    /// Moves the source object to the destination object in the same bucket.
    pub fn move_object(&self) -> super::builder::storage::MoveObject {
        super::builder::storage::MoveObject::new(self.inner.clone())
    }
}
