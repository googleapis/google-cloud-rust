// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::Storage].
///
/// Application developers may need to implement this trait to mock
/// `client::Storage`.  In other use-cases, application developers only
/// use `client::Storage` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait Storage: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::Storage::delete_bucket].
    fn delete_bucket(
        &self,
        _req: crate::model::DeleteBucketRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Storage::get_bucket].
    fn get_bucket(
        &self,
        _req: crate::model::GetBucketRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Bucket>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Bucket>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Storage::create_bucket].
    fn create_bucket(
        &self,
        _req: crate::model::CreateBucketRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Bucket>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Bucket>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Storage::list_buckets].
    fn list_buckets(
        &self,
        _req: crate::model::ListBucketsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListBucketsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListBucketsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Storage::lock_bucket_retention_policy].
    fn lock_bucket_retention_policy(
        &self,
        _req: crate::model::LockBucketRetentionPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Bucket>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Bucket>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Storage::update_bucket].
    fn update_bucket(
        &self,
        _req: crate::model::UpdateBucketRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Bucket>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Bucket>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Storage::compose_object].
    fn compose_object(
        &self,
        _req: crate::model::ComposeObjectRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Object>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Object>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Storage::delete_object].
    fn delete_object(
        &self,
        _req: crate::model::DeleteObjectRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Storage::restore_object].
    fn restore_object(
        &self,
        _req: crate::model::RestoreObjectRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Object>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Object>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Storage::cancel_resumable_write].
    fn cancel_resumable_write(
        &self,
        _req: crate::model::CancelResumableWriteRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::CancelResumableWriteResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::CancelResumableWriteResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Storage::get_object].
    fn get_object(
        &self,
        _req: crate::model::GetObjectRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Object>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Object>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Storage::update_object].
    fn update_object(
        &self,
        _req: crate::model::UpdateObjectRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Object>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Object>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Storage::list_objects].
    fn list_objects(
        &self,
        _req: crate::model::ListObjectsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListObjectsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListObjectsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Storage::rewrite_object].
    fn rewrite_object(
        &self,
        _req: crate::model::RewriteObjectRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::RewriteResponse>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::RewriteResponse>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Storage::start_resumable_write].
    fn start_resumable_write(
        &self,
        _req: crate::model::StartResumableWriteRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::StartResumableWriteResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::StartResumableWriteResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Storage::query_write_status].
    fn query_write_status(
        &self,
        _req: crate::model::QueryWriteStatusRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::QueryWriteStatusResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::QueryWriteStatusResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Storage::move_object].
    fn move_object(
        &self,
        _req: crate::model::MoveObjectRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Object>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Object>>>(Err(
            Error::other("unimplemented"),
        ))
    }
}
