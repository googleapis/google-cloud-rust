// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Cloud Firestore API.
///
/// # Service Description
///
/// The Cloud Firestore service.
///
/// Cloud Firestore is a fast, fully managed, serverless, cloud-native NoSQL
/// document database that simplifies storing, syncing, and querying data for
/// your mobile, web, and IoT apps at global scale. Its client libraries provide
/// live synchronization and offline support, while its security features and
/// integrations with Firebase and Google Cloud Platform accelerate building
/// truly serverless apps.
///
/// # Configuration
///
/// `Firestore` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Firestore` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Firestore` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Firestore {
    inner: Arc<dyn super::stubs::dynamic::Firestore>,
}

impl Firestore {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::Firestore + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::Firestore>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::Firestore> {
        super::transport::Firestore::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::Firestore> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::Firestore::new)
    }

    /// Gets a single document.
    pub fn get_document(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::firestore::GetDocument {
        super::builders::firestore::GetDocument::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists documents.
    pub fn list_documents(
        &self,
        parent: impl Into<std::string::String>,
        collection_id: impl Into<std::string::String>,
    ) -> super::builders::firestore::ListDocuments {
        super::builders::firestore::ListDocuments::new(self.inner.clone())
            .set_parent(parent.into())
            .set_collection_id(collection_id.into())
    }

    /// Updates or inserts a document.
    pub fn update_document(
        &self,
        document: impl Into<crate::model::Document>,
    ) -> super::builders::firestore::UpdateDocument {
        super::builders::firestore::UpdateDocument::new(self.inner.clone())
            .set_document(document.into())
    }

    /// Deletes a document.
    pub fn delete_document(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::firestore::DeleteDocument {
        super::builders::firestore::DeleteDocument::new(self.inner.clone()).set_name(name.into())
    }

    /// Starts a new transaction.
    pub fn begin_transaction(
        &self,
        database: impl Into<std::string::String>,
    ) -> super::builders::firestore::BeginTransaction {
        super::builders::firestore::BeginTransaction::new(self.inner.clone())
            .set_database(database.into())
    }

    /// Commits a transaction, while optionally updating documents.
    pub fn commit(
        &self,
        database: impl Into<std::string::String>,
    ) -> super::builders::firestore::Commit {
        super::builders::firestore::Commit::new(self.inner.clone()).set_database(database.into())
    }

    /// Rolls back a transaction.
    pub fn rollback(
        &self,
        database: impl Into<std::string::String>,
    ) -> super::builders::firestore::Rollback {
        super::builders::firestore::Rollback::new(self.inner.clone()).set_database(database.into())
    }

    /// Partitions a query by returning partition cursors that can be used to run
    /// the query in parallel. The returned partition cursors are split points that
    /// can be used by RunQuery as starting/end points for the query results.
    pub fn partition_query(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::firestore::PartitionQuery {
        super::builders::firestore::PartitionQuery::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists all the collection IDs underneath a document.
    pub fn list_collection_ids(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::firestore::ListCollectionIds {
        super::builders::firestore::ListCollectionIds::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Applies a batch of write operations.
    ///
    /// The BatchWrite method does not apply the write operations atomically
    /// and can apply them out of order. Method does not allow more than one write
    /// per document. Each write succeeds or fails independently. See the
    /// [BatchWriteResponse][google.firestore.v1.BatchWriteResponse] for the
    /// success status of each write.
    ///
    /// If you require an atomically applied set of writes, use
    /// [Commit][google.firestore.v1.Firestore.Commit] instead.
    ///
    /// [google.firestore.v1.BatchWriteResponse]: crate::model::BatchWriteResponse
    /// [google.firestore.v1.Firestore.Commit]: crate::client::Firestore::commit
    pub fn batch_write(
        &self,
        database: impl Into<std::string::String>,
    ) -> super::builders::firestore::BatchWrite {
        super::builders::firestore::BatchWrite::new(self.inner.clone())
            .set_database(database.into())
    }

    /// Creates a new document.
    pub fn create_document(
        &self,
        parent: impl Into<std::string::String>,
        collection_id: impl Into<std::string::String>,
    ) -> super::builders::firestore::CreateDocument {
        super::builders::firestore::CreateDocument::new(self.inner.clone())
            .set_parent(parent.into())
            .set_collection_id(collection_id.into())
    }
}
