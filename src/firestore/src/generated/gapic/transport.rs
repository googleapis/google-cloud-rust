// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use crate::Result;
#[allow(unused_imports)]
use gax::error::Error;
use gaxi::prost::Convert;

const DEFAULT_HOST: &str = "https://firestore.googleapis.com";

mod info {
    const NAME: &str = env!("CARGO_PKG_NAME");
    const VERSION: &str = env!("CARGO_PKG_VERSION");
    lazy_static::lazy_static! {
        pub(crate) static ref X_GOOG_API_CLIENT_HEADER: String = {
            let ac = gaxi::api_header::XGoogApiClient{
                name:          NAME,
                version:       VERSION,
                library_type:  gaxi::api_header::GAPIC,
            };
            ac.header_value()
        };
    }
}

/// Implements [Firestore](super::stub::Firestore) using a Tonic-generated client.
#[derive(Clone)]
pub struct Firestore {
    inner: gaxi::grpc::Client,
}

impl std::fmt::Debug for Firestore {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        f.debug_struct("Firestore")
            .field("inner", &self.inner)
            .finish()
    }
}

impl Firestore {
    pub async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = gaxi::grpc::Client::new(config, DEFAULT_HOST).await?;
        Ok(Self { inner })
    }
}

impl super::stub::Firestore for Firestore {
    async fn get_document(
        &self,
        req: crate::model::GetDocumentRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Document>> {
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new(
                "google.firestore.v1.Firestore",
                "GetDocument",
            ));
            e
        };
        let path =
            http::uri::PathAndQuery::from_static("/google.firestore.v1.Firestore/GetDocument");
        let x_goog_request_params = [format!("name={}", req.name)]
            .into_iter()
            .fold(String::new(), |b, p| b + "&" + &p);

        self.inner
            .execute(
                extensions,
                path,
                req.cnv(),
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .map(
                gaxi::grpc::to_gax_response::<
                    crate::google::firestore::v1::Document,
                    crate::model::Document,
                >,
            )
    }

    async fn list_documents(
        &self,
        req: crate::model::ListDocumentsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListDocumentsResponse>> {
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new(
                "google.firestore.v1.Firestore",
                "ListDocuments",
            ));
            e
        };
        let path =
            http::uri::PathAndQuery::from_static("/google.firestore.v1.Firestore/ListDocuments");
        let x_goog_request_params = [
            format!("parent={}", req.parent),
            format!("collection_id={}", req.collection_id),
        ]
        .into_iter()
        .fold(String::new(), |b, p| b + "&" + &p);

        self.inner
            .execute(
                extensions,
                path,
                req.cnv(),
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .map(
                gaxi::grpc::to_gax_response::<
                    crate::google::firestore::v1::ListDocumentsResponse,
                    crate::model::ListDocumentsResponse,
                >,
            )
    }

    async fn update_document(
        &self,
        req: crate::model::UpdateDocumentRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Document>> {
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new(
                "google.firestore.v1.Firestore",
                "UpdateDocument",
            ));
            e
        };
        let path =
            http::uri::PathAndQuery::from_static("/google.firestore.v1.Firestore/UpdateDocument");
        let x_goog_request_params = [format!(
            "document.name={}",
            req.document
                .as_ref()
                .ok_or_else(|| gaxi::path_parameter::missing("document"))?
                .name
        )]
        .into_iter()
        .fold(String::new(), |b, p| b + "&" + &p);

        self.inner
            .execute(
                extensions,
                path,
                req.cnv(),
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .map(
                gaxi::grpc::to_gax_response::<
                    crate::google::firestore::v1::Document,
                    crate::model::Document,
                >,
            )
    }

    async fn delete_document(
        &self,
        req: crate::model::DeleteDocumentRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new(
                "google.firestore.v1.Firestore",
                "DeleteDocument",
            ));
            e
        };
        let path =
            http::uri::PathAndQuery::from_static("/google.firestore.v1.Firestore/DeleteDocument");
        let x_goog_request_params = [format!("name={}", req.name)]
            .into_iter()
            .fold(String::new(), |b, p| b + "&" + &p);

        self.inner
            .execute(
                extensions,
                path,
                req.cnv(),
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .map(gaxi::grpc::to_gax_response::<(), ()>)
    }

    async fn begin_transaction(
        &self,
        req: crate::model::BeginTransactionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::BeginTransactionResponse>> {
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new(
                "google.firestore.v1.Firestore",
                "BeginTransaction",
            ));
            e
        };
        let path =
            http::uri::PathAndQuery::from_static("/google.firestore.v1.Firestore/BeginTransaction");
        let x_goog_request_params = [format!("database={}", req.database)]
            .into_iter()
            .fold(String::new(), |b, p| b + "&" + &p);

        self.inner
            .execute(
                extensions,
                path,
                req.cnv(),
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .map(
                gaxi::grpc::to_gax_response::<
                    crate::google::firestore::v1::BeginTransactionResponse,
                    crate::model::BeginTransactionResponse,
                >,
            )
    }

    async fn commit(
        &self,
        req: crate::model::CommitRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::CommitResponse>> {
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new(
                "google.firestore.v1.Firestore",
                "Commit",
            ));
            e
        };
        let path = http::uri::PathAndQuery::from_static("/google.firestore.v1.Firestore/Commit");
        let x_goog_request_params = [format!("database={}", req.database)]
            .into_iter()
            .fold(String::new(), |b, p| b + "&" + &p);

        self.inner
            .execute(
                extensions,
                path,
                req.cnv(),
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .map(
                gaxi::grpc::to_gax_response::<
                    crate::google::firestore::v1::CommitResponse,
                    crate::model::CommitResponse,
                >,
            )
    }

    async fn rollback(
        &self,
        req: crate::model::RollbackRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new(
                "google.firestore.v1.Firestore",
                "Rollback",
            ));
            e
        };
        let path = http::uri::PathAndQuery::from_static("/google.firestore.v1.Firestore/Rollback");
        let x_goog_request_params = [format!("database={}", req.database)]
            .into_iter()
            .fold(String::new(), |b, p| b + "&" + &p);

        self.inner
            .execute(
                extensions,
                path,
                req.cnv(),
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .map(gaxi::grpc::to_gax_response::<(), ()>)
    }

    async fn partition_query(
        &self,
        req: crate::model::PartitionQueryRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::PartitionQueryResponse>> {
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new(
                "google.firestore.v1.Firestore",
                "PartitionQuery",
            ));
            e
        };
        let path =
            http::uri::PathAndQuery::from_static("/google.firestore.v1.Firestore/PartitionQuery");
        let x_goog_request_params = [format!("parent={}", req.parent)]
            .into_iter()
            .fold(String::new(), |b, p| b + "&" + &p);

        self.inner
            .execute(
                extensions,
                path,
                req.cnv(),
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .map(
                gaxi::grpc::to_gax_response::<
                    crate::google::firestore::v1::PartitionQueryResponse,
                    crate::model::PartitionQueryResponse,
                >,
            )
    }

    async fn list_collection_ids(
        &self,
        req: crate::model::ListCollectionIdsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListCollectionIdsResponse>> {
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new(
                "google.firestore.v1.Firestore",
                "ListCollectionIds",
            ));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.firestore.v1.Firestore/ListCollectionIds",
        );
        let x_goog_request_params = [format!("parent={}", req.parent)]
            .into_iter()
            .fold(String::new(), |b, p| b + "&" + &p);

        self.inner
            .execute(
                extensions,
                path,
                req.cnv(),
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .map(
                gaxi::grpc::to_gax_response::<
                    crate::google::firestore::v1::ListCollectionIdsResponse,
                    crate::model::ListCollectionIdsResponse,
                >,
            )
    }

    async fn batch_write(
        &self,
        req: crate::model::BatchWriteRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::BatchWriteResponse>> {
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new(
                "google.firestore.v1.Firestore",
                "BatchWrite",
            ));
            e
        };
        let path =
            http::uri::PathAndQuery::from_static("/google.firestore.v1.Firestore/BatchWrite");
        let x_goog_request_params = [format!("database={}", req.database)]
            .into_iter()
            .fold(String::new(), |b, p| b + "&" + &p);

        self.inner
            .execute(
                extensions,
                path,
                req.cnv(),
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .map(
                gaxi::grpc::to_gax_response::<
                    crate::google::firestore::v1::BatchWriteResponse,
                    crate::model::BatchWriteResponse,
                >,
            )
    }

    async fn create_document(
        &self,
        req: crate::model::CreateDocumentRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Document>> {
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new(
                "google.firestore.v1.Firestore",
                "CreateDocument",
            ));
            e
        };
        let path =
            http::uri::PathAndQuery::from_static("/google.firestore.v1.Firestore/CreateDocument");
        let x_goog_request_params = [
            format!("parent={}", req.parent),
            format!("collection_id={}", req.collection_id),
        ]
        .into_iter()
        .fold(String::new(), |b, p| b + "&" + &p);

        self.inner
            .execute(
                extensions,
                path,
                req.cnv(),
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .map(
                gaxi::grpc::to_gax_response::<
                    crate::google::firestore::v1::Document,
                    crate::model::Document,
                >,
            )
    }
}
