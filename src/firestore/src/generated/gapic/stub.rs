// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::Firestore].
///
/// Application developers may need to implement this trait to mock
/// `client::Firestore`.  In other use-cases, application developers only
/// use `client::Firestore` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait Firestore: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::Firestore::get_document].
    fn get_document(
        &self,
        _req: crate::model::GetDocumentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Document>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Document>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Firestore::list_documents].
    fn list_documents(
        &self,
        _req: crate::model::ListDocumentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListDocumentsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListDocumentsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Firestore::update_document].
    fn update_document(
        &self,
        _req: crate::model::UpdateDocumentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Document>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Document>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Firestore::delete_document].
    fn delete_document(
        &self,
        _req: crate::model::DeleteDocumentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Firestore::begin_transaction].
    fn begin_transaction(
        &self,
        _req: crate::model::BeginTransactionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::BeginTransactionResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::BeginTransactionResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Firestore::commit].
    fn commit(
        &self,
        _req: crate::model::CommitRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::CommitResponse>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::CommitResponse>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Firestore::rollback].
    fn rollback(
        &self,
        _req: crate::model::RollbackRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Firestore::partition_query].
    fn partition_query(
        &self,
        _req: crate::model::PartitionQueryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::PartitionQueryResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::PartitionQueryResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Firestore::list_collection_ids].
    fn list_collection_ids(
        &self,
        _req: crate::model::ListCollectionIdsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListCollectionIdsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListCollectionIdsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Firestore::batch_write].
    fn batch_write(
        &self,
        _req: crate::model::BatchWriteRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::BatchWriteResponse>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::BatchWriteResponse>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::Firestore::create_document].
    fn create_document(
        &self,
        _req: crate::model::CreateDocumentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Document>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Document>>>(Err(
            Error::other("unimplemented"),
        ))
    }
}
