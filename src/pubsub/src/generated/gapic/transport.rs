// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use crate::Result;
#[allow(unused_imports)]
use gax::error::Error;

const DEFAULT_HOST: &str = "https://pubsub.googleapis.com";

mod info {
    const NAME: &str = env!("CARGO_PKG_NAME");
    const VERSION: &str = env!("CARGO_PKG_VERSION");
    lazy_static::lazy_static! {
        pub(crate) static ref X_GOOG_API_CLIENT_HEADER: String = {
            let ac = gaxi::api_header::XGoogApiClient{
                name:          NAME,
                version:       VERSION,
                library_type:  gaxi::api_header::GAPIC,
            };
            ac.grpc_header_value()
        };
    }
}

/// Implements [Publisher](super::stub::Publisher) using a Tonic-generated client.
#[derive(Clone)]
pub struct Publisher {
    inner: gaxi::grpc::Client,
}

impl std::fmt::Debug for Publisher {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        f.debug_struct("Publisher")
            .field("inner", &self.inner)
            .finish()
    }
}

impl Publisher {
    pub async fn new(config: gaxi::options::ClientConfig) -> gax::client_builder::Result<Self> {
        let inner = gaxi::grpc::Client::new(config, DEFAULT_HOST).await?;
        Ok(Self { inner })
    }
}

impl super::stub::Publisher for Publisher {
    async fn create_topic(
        &self,
        req: crate::model::Topic,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Topic>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            true,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.Publisher", "CreateTopic"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.Publisher/CreateTopic"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.name).map(|s| s.as_str()).map(|v| format!("name={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::Topic;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::Topic>)
    }

    async fn update_topic(
        &self,
        req: crate::model::UpdateTopicRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Topic>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            false,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.Publisher", "UpdateTopic"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.Publisher/UpdateTopic"
        );
        let x_goog_request_params = [
                Some(&req).and_then(|m| m.topic.as_ref()).map(|m| &m.name).map(|s| s.as_str()).map(|v| format!("topic.name={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::Topic;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::Topic>)
    }

    async fn get_topic(
        &self,
        req: crate::model::GetTopicRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Topic>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            true,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.Publisher", "GetTopic"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.Publisher/GetTopic"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.topic).map(|s| s.as_str()).map(|v| format!("topic={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::Topic;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::Topic>)
    }

    async fn list_topics(
        &self,
        req: crate::model::ListTopicsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListTopicsResponse>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            true,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.Publisher", "ListTopics"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.Publisher/ListTopics"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.project).map(|s| s.as_str()).map(|v| format!("project={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::ListTopicsResponse;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::ListTopicsResponse>)
    }

    async fn list_topic_subscriptions(
        &self,
        req: crate::model::ListTopicSubscriptionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListTopicSubscriptionsResponse>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            true,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.Publisher", "ListTopicSubscriptions"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.Publisher/ListTopicSubscriptions"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.topic).map(|s| s.as_str()).map(|v| format!("topic={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::ListTopicSubscriptionsResponse;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::ListTopicSubscriptionsResponse>)
    }

    async fn list_topic_snapshots(
        &self,
        req: crate::model::ListTopicSnapshotsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListTopicSnapshotsResponse>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            true,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.Publisher", "ListTopicSnapshots"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.Publisher/ListTopicSnapshots"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.topic).map(|s| s.as_str()).map(|v| format!("topic={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::ListTopicSnapshotsResponse;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::ListTopicSnapshotsResponse>)
    }

    async fn delete_topic(
        &self,
        req: crate::model::DeleteTopicRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            true,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.Publisher", "DeleteTopic"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.Publisher/DeleteTopic"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.topic).map(|s| s.as_str()).map(|v| format!("topic={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = ();
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, ()>)
    }

    async fn detach_subscription(
        &self,
        req: crate::model::DetachSubscriptionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::DetachSubscriptionResponse>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            false,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.Publisher", "DetachSubscription"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.Publisher/DetachSubscription"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.subscription).map(|s| s.as_str()).map(|v| format!("subscription={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::DetachSubscriptionResponse;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::DetachSubscriptionResponse>)
    }

}

/// Implements [Subscriber](super::stub::Subscriber) using a Tonic-generated client.
#[derive(Clone)]
pub struct Subscriber {
    inner: gaxi::grpc::Client,
}

impl std::fmt::Debug for Subscriber {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        f.debug_struct("Subscriber")
            .field("inner", &self.inner)
            .finish()
    }
}

impl Subscriber {
    pub async fn new(config: gaxi::options::ClientConfig) -> gax::client_builder::Result<Self> {
        let inner = gaxi::grpc::Client::new(config, DEFAULT_HOST).await?;
        Ok(Self { inner })
    }
}

impl super::stub::Subscriber for Subscriber {
    async fn create_subscription(
        &self,
        req: crate::model::Subscription,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Subscription>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            true,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.Subscriber", "CreateSubscription"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.Subscriber/CreateSubscription"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.name).map(|s| s.as_str()).map(|v| format!("name={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::Subscription;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::Subscription>)
    }

    async fn get_subscription(
        &self,
        req: crate::model::GetSubscriptionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Subscription>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            true,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.Subscriber", "GetSubscription"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.Subscriber/GetSubscription"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.subscription).map(|s| s.as_str()).map(|v| format!("subscription={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::Subscription;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::Subscription>)
    }

    async fn update_subscription(
        &self,
        req: crate::model::UpdateSubscriptionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Subscription>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            false,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.Subscriber", "UpdateSubscription"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.Subscriber/UpdateSubscription"
        );
        let x_goog_request_params = [
                Some(&req).and_then(|m| m.subscription.as_ref()).map(|m| &m.name).map(|s| s.as_str()).map(|v| format!("subscription.name={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::Subscription;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::Subscription>)
    }

    async fn list_subscriptions(
        &self,
        req: crate::model::ListSubscriptionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListSubscriptionsResponse>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            true,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.Subscriber", "ListSubscriptions"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.Subscriber/ListSubscriptions"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.project).map(|s| s.as_str()).map(|v| format!("project={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::ListSubscriptionsResponse;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::ListSubscriptionsResponse>)
    }

    async fn delete_subscription(
        &self,
        req: crate::model::DeleteSubscriptionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            true,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.Subscriber", "DeleteSubscription"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.Subscriber/DeleteSubscription"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.subscription).map(|s| s.as_str()).map(|v| format!("subscription={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = ();
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, ()>)
    }

    async fn modify_push_config(
        &self,
        req: crate::model::ModifyPushConfigRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            false,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.Subscriber", "ModifyPushConfig"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.Subscriber/ModifyPushConfig"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.subscription).map(|s| s.as_str()).map(|v| format!("subscription={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = ();
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, ()>)
    }

    async fn get_snapshot(
        &self,
        req: crate::model::GetSnapshotRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Snapshot>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            true,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.Subscriber", "GetSnapshot"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.Subscriber/GetSnapshot"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.snapshot).map(|s| s.as_str()).map(|v| format!("snapshot={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::Snapshot;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::Snapshot>)
    }

    async fn list_snapshots(
        &self,
        req: crate::model::ListSnapshotsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListSnapshotsResponse>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            true,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.Subscriber", "ListSnapshots"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.Subscriber/ListSnapshots"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.project).map(|s| s.as_str()).map(|v| format!("project={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::ListSnapshotsResponse;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::ListSnapshotsResponse>)
    }

    async fn create_snapshot(
        &self,
        req: crate::model::CreateSnapshotRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Snapshot>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            true,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.Subscriber", "CreateSnapshot"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.Subscriber/CreateSnapshot"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.name).map(|s| s.as_str()).map(|v| format!("name={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::Snapshot;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::Snapshot>)
    }

    async fn update_snapshot(
        &self,
        req: crate::model::UpdateSnapshotRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Snapshot>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            false,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.Subscriber", "UpdateSnapshot"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.Subscriber/UpdateSnapshot"
        );
        let x_goog_request_params = [
                Some(&req).and_then(|m| m.snapshot.as_ref()).map(|m| &m.name).map(|s| s.as_str()).map(|v| format!("snapshot.name={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::Snapshot;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::Snapshot>)
    }

    async fn delete_snapshot(
        &self,
        req: crate::model::DeleteSnapshotRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            true,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.Subscriber", "DeleteSnapshot"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.Subscriber/DeleteSnapshot"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.snapshot).map(|s| s.as_str()).map(|v| format!("snapshot={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = ();
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, ()>)
    }

    async fn seek(
        &self,
        req: crate::model::SeekRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::SeekResponse>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            false,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.Subscriber", "Seek"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.Subscriber/Seek"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.subscription).map(|s| s.as_str()).map(|v| format!("subscription={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::SeekResponse;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::SeekResponse>)
    }

}

/// Implements [SchemaService](super::stub::SchemaService) using a Tonic-generated client.
#[derive(Clone)]
pub struct SchemaService {
    inner: gaxi::grpc::Client,
}

impl std::fmt::Debug for SchemaService {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        f.debug_struct("SchemaService")
            .field("inner", &self.inner)
            .finish()
    }
}

impl SchemaService {
    pub async fn new(config: gaxi::options::ClientConfig) -> gax::client_builder::Result<Self> {
        let inner = gaxi::grpc::Client::new(config, DEFAULT_HOST).await?;
        Ok(Self { inner })
    }
}

impl super::stub::SchemaService for SchemaService {
    async fn create_schema(
        &self,
        req: crate::model::CreateSchemaRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Schema>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            false,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.SchemaService", "CreateSchema"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.SchemaService/CreateSchema"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.parent).map(|s| s.as_str()).map(|v| format!("parent={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::Schema;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::Schema>)
    }

    async fn get_schema(
        &self,
        req: crate::model::GetSchemaRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Schema>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            true,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.SchemaService", "GetSchema"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.SchemaService/GetSchema"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.name).map(|s| s.as_str()).map(|v| format!("name={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::Schema;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::Schema>)
    }

    async fn list_schemas(
        &self,
        req: crate::model::ListSchemasRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListSchemasResponse>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            true,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.SchemaService", "ListSchemas"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.SchemaService/ListSchemas"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.parent).map(|s| s.as_str()).map(|v| format!("parent={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::ListSchemasResponse;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::ListSchemasResponse>)
    }

    async fn list_schema_revisions(
        &self,
        req: crate::model::ListSchemaRevisionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListSchemaRevisionsResponse>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            true,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.SchemaService", "ListSchemaRevisions"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.SchemaService/ListSchemaRevisions"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.name).map(|s| s.as_str()).map(|v| format!("name={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::ListSchemaRevisionsResponse;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::ListSchemaRevisionsResponse>)
    }

    async fn commit_schema(
        &self,
        req: crate::model::CommitSchemaRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Schema>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            false,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.SchemaService", "CommitSchema"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.SchemaService/CommitSchema"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.name).map(|s| s.as_str()).map(|v| format!("name={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::Schema;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::Schema>)
    }

    async fn rollback_schema(
        &self,
        req: crate::model::RollbackSchemaRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Schema>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            false,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.SchemaService", "RollbackSchema"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.SchemaService/RollbackSchema"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.name).map(|s| s.as_str()).map(|v| format!("name={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::Schema;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::Schema>)
    }

    async fn delete_schema_revision(
        &self,
        req: crate::model::DeleteSchemaRevisionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Schema>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            true,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.SchemaService", "DeleteSchemaRevision"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.SchemaService/DeleteSchemaRevision"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.name).map(|s| s.as_str()).map(|v| format!("name={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::Schema;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::Schema>)
    }

    async fn delete_schema(
        &self,
        req: crate::model::DeleteSchemaRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            true,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.SchemaService", "DeleteSchema"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.SchemaService/DeleteSchema"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.name).map(|s| s.as_str()).map(|v| format!("name={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = ();
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, ()>)
    }

    async fn validate_schema(
        &self,
        req: crate::model::ValidateSchemaRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ValidateSchemaResponse>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            false,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.SchemaService", "ValidateSchema"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.SchemaService/ValidateSchema"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.parent).map(|s| s.as_str()).map(|v| format!("parent={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::ValidateSchemaResponse;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::ValidateSchemaResponse>)
    }

    async fn validate_message(
        &self,
        req: crate::model::ValidateMessageRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ValidateMessageResponse>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            false,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.pubsub.v1.SchemaService", "ValidateMessage"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.pubsub.v1.SchemaService/ValidateMessage"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.parent).map(|s| s.as_str()).map(|v| format!("parent={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::pubsub::v1::ValidateMessageResponse;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, crate::model::ValidateMessageResponse>)
    }

    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::Policy>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            false,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.iam.v1.IAMPolicy", "SetIamPolicy"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.iam.v1.IAMPolicy/SetIamPolicy"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.resource).map(|s| s.as_str()).map(|v| format!("resource={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::iam::v1::Policy;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, iam_v1::model::Policy>)
    }

    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::Policy>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            true,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.iam.v1.IAMPolicy", "GetIamPolicy"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.iam.v1.IAMPolicy/GetIamPolicy"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.resource).map(|s| s.as_str()).map(|v| format!("resource={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::iam::v1::Policy;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, iam_v1::model::Policy>)
    }

    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::TestIamPermissionsResponse>> {
        use gaxi::prost::ToProto;
        let options = gax::options::internal::set_default_idempotency(
            options,
            false,
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("google.iam.v1.IAMPolicy", "TestIamPermissions"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/google.iam.v1.IAMPolicy/TestIamPermissions"
        );
        let x_goog_request_params = [
                Some(&req).map(|m| &m.resource).map(|s| s.as_str()).map(|v| format!("resource={v}")),
        ]
        .into_iter()
        .flatten()
        .fold(String::new(), |b, p| b + "&" + &p);

        type TR = crate::google::iam::v1::TestIamPermissionsResponse;
        self.inner
            .execute(
                extensions,
                path,
                req.to_proto().map_err(Error::deser)?,
                options,
                &info::X_GOOG_API_CLIENT_HEADER,
                &x_goog_request_params,
            )
            .await
            .and_then(gaxi::grpc::to_gax_response::<TR, iam_v1::model::TestIamPermissionsResponse>)
    }

}

