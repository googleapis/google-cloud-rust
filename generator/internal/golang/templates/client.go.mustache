{{!
Copyright 2024 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}
// Copyright {{Codec.CopyrightYear}} Google LLC
{{#Codec.BoilerPlate}}
//{{{.}}}
{{/Codec.BoilerPlate}}

package {{Codec.GoPackage}}

import (
    "bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"time"

    "cloud.google.com/go/auth"
    {{#Codec.Imports}}
    {{{.}}}
    {{/Codec.Imports}}
)

{{#Codec.HasServices}}
const defaultHost = "https://{{Codec.DefaultHost}}"

type Options struct {
    Credentials *auth.Credentials
    Endpoint    string
}

// Client used to talk to services.
type Client struct {
    hc *http.Client
    opts *Options
    {{#Services}}
    {{Codec.FieldName}} *{{Codec.StructName}}
    {{/Services}}
}

// NewClient returns a new Client.
func NewClient(opts *Options) *Client {
    return &Client{hc: http.DefaultClient, opts: opts}
}

func (c *Client) addAuthorizationHeader(ctx context.Context, h http.Header) error {
    tok, err := c.token(ctx)
    if err != nil {
        return err
    }
    h.Set("Authorization", "Bearer "+tok)
    return nil
}

func (c *Client) token(ctx context.Context) (string, error) {
    tok, err := c.opts.Credentials.Token(ctx)
    if err != nil {
        return "", err
    }
    return tok.Value, nil
}

{{#Services}}
{{#Codec.DocLines}}
// {{{.}}}
{{/Codec.DocLines}}
type {{Codec.StructName}} struct {
    client *Client
    baseURL   string
}

{{#Codec.DocLines}}
// {{{.}}}
{{/Codec.DocLines}}
func (c *Client) {{Codec.StructName}}() *{{Codec.StructName}}{
    return &{{Codec.StructName}}{client: c, baseURL: defaultHost}
}

{{#Methods}}
{{#Codec.DocLines}}
// {{{.}}}
{{/Codec.DocLines}}
func (s *{{Codec.ServiceStructName}}) {{Codec.Name}}(ctx context.Context, req *{{InputType.Codec.Name}}) (*{{OutputType.Codec.Name}}, error) {
    out := new({{OutputType.Codec.Name}})
    {{#PathInfo.Codec.HasBody}}
    reqBody, err := json.Marshal(req{{Codec.BodyAccessor}})
    if err != nil {
        return nil, err
    }
    {{/PathInfo.Codec.HasBody}}
    baseURL, err := url.Parse(s.baseURL)
    if err != nil {
		return nil, err
	}
    baseURL.Path += fmt.Sprintf("{{PathInfo.Codec.PathFmt}}"{{#PathInfo.Codec.PathArgs}}{{.}}{{/PathInfo.Codec.PathArgs}})
    params := url.Values{}
    params.Add("$alt", "json")
    {{#QueryParams}}
    params.Add("{{JSONName}}", fmt.Sprintf("%v", {{Codec.AsQueryParameter}}))
    {{/QueryParams}}
    baseURL.RawQuery = params.Encode()
    httpReq, err := http.NewRequestWithContext(ctx, "{{PathInfo.Codec.Method}}", baseURL.String(), {{#PathInfo.Codec.HasBody}}bytes.NewReader(reqBody){{/PathInfo.Codec.HasBody}}{{^PathInfo.Codec.HasBody}}nil{{/PathInfo.Codec.HasBody}})
    if err != nil {
        return nil, err
    }
    if err := s.client.addAuthorizationHeader(ctx, httpReq.Header); err != nil {
        return nil, err
    }
    respBody, err := doRequest(s.client.hc, httpReq)
    if err != nil {
        return nil, err
    }
    if err := json.Unmarshal(respBody, &out); err != nil {
        return nil, err
    }
    return out, nil
}
{{/Methods}}
{{/Services}}

func doRequest(client *http.Client, req *http.Request) ([]byte, error){
    resp, err := client.Do(req)
    if err != nil {
        return nil, err
    }
    defer resp.Body.Close()
    b, err := io.ReadAll(resp.Body)
    if err != nil {
        return nil, err
    }
    return b, nil
}
{{/Codec.HasServices}}
{{#Messages}}
{{> message}}
{{/Messages}}
