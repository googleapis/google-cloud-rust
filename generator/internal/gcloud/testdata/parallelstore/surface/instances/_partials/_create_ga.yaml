# -*- coding: utf-8 -*- #
# Copyright 2024 Google LLC. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This file is autogenerated and should not be edited by hand.
# AUTOGEN_CLI_VERSION: HEAD
- release_tracks:
  - GA
  auto_generated: true
  hidden: true
  help_text:
    brief: Creates a Parallelstore instance
    description: |
      Creates a Parallelstore instance.
    examples: |-
      To create an instance `my-instance` in location `us-central1-a` with 12000 Gib capacity run:

      $ {command} my-instance --capacity-gib=12000 --location=us-central1-a
  arguments:
    params:
    - help_text: |-
        Identifier. The resource name of the instance, in the format
        `projects/{project}/locations/{location}/instances/{instance_id}`.
      is_positional: true
      is_primary_resource: true
      request_id_field: instanceId
      resource_spec: !REF googlecloudsdk.command_lib.parallelstore.v1_resources:project_location_instance
      required: true
    - arg_name: description
      api_field: instance.description
      required: false
      repeated: false
      help_text: |-
        The description of the instance. 2048 characters or less.
    - arg_name: labels
      api_field: instance.labels
      required: false
      repeated: true
      help_text: |-
        Cloud Labels are a flexible and lightweight mechanism for organizing cloud
        resources into groups that reflect a customer's organizational needs and
        deployment strategies. See
        https://cloud.google.com/resource-manager/docs/labels-overview for details.
      spec:
      - api_field: key
      - api_field: value
    - arg_name: capacity-gib
      api_field: instance.capacityGib
      required: true
      repeated: false
      type: long
      help_text: |-
        The instance's storage capacity in Gibibytes (GiB). Allowed values are
        between 12000 and 100000, in multiples of 4000; e.g., 12000, 16000,
        20000, ...
    - arg_name: network
      help_text: |-
        The name of the Compute Engine
        [VPC network](https://cloud.google.com/vpc/docs/vpc) to which the
        instance is connected.
      is_positional: false
      is_primary_resource: false
      resource_spec: !REF googlecloudsdk.command_lib.parallelstore.v1_resources:project_global_network
      resource_method_params:
        instance.network: '{__relative_name__}'
      required: false
    - arg_name: reserved-ip-range
      help_text: |-
        The ID of the IP address range being used by the instance's VPC network.
        See
        [Configure a VPC
        network](https://cloud.google.com/parallelstore/docs/vpc#create_and_configure_the_vpc).
        If no ID is provided, all ranges are considered.
      is_positional: false
      is_primary_resource: false
      resource_spec: !REF googlecloudsdk.command_lib.parallelstore.v1_resources:project_region_address
      resource_method_params:
        instance.reservedIpRange: '{__relative_name__}'
      required: false
    - arg_name: file-stripe-level
      api_field: instance.fileStripeLevel
      required: false
      help_text: |-
        Stripe level for files. Allowed values are:

        * `FILE_STRIPE_LEVEL_MIN`: offers the best performance for small size
          files.
        * `FILE_STRIPE_LEVEL_BALANCED`: balances performance for workloads
          involving a mix of small and large files.
        * `FILE_STRIPE_LEVEL_MAX`: higher throughput performance for larger files.
      choices:
      - arg_value: file-stripe-level-min
        enum_value: FILE_STRIPE_LEVEL_MIN
        help_text: |-
          Minimum file striping
      - arg_value: file-stripe-level-balanced
        enum_value: FILE_STRIPE_LEVEL_BALANCED
        help_text: |-
          Medium file striping
      - arg_value: file-stripe-level-max
        enum_value: FILE_STRIPE_LEVEL_MAX
        help_text: |-
          Maximum file striping
    - arg_name: directory-stripe-level
      api_field: instance.directoryStripeLevel
      required: false
      help_text: |-
        Stripe level for directories. Allowed values are:

        * `DIRECTORY_STRIPE_LEVEL_MIN`: recommended when directories contain a
          small number of files.
        * `DIRECTORY_STRIPE_LEVEL_BALANCED`: balances performance for workloads
          involving a mix of small and large directories.
        * `DIRECTORY_STRIPE_LEVEL_MAX`: recommended for directories with a large
          number of files.
      choices:
      - arg_value: directory-stripe-level-min
        enum_value: DIRECTORY_STRIPE_LEVEL_MIN
        help_text: |-
          Minimum directory striping
      - arg_value: directory-stripe-level-balanced
        enum_value: DIRECTORY_STRIPE_LEVEL_BALANCED
        help_text: |-
          Medium directory striping
      - arg_value: directory-stripe-level-max
        enum_value: DIRECTORY_STRIPE_LEVEL_MAX
        help_text: |-
          Maximum directory striping
    - arg_name: deployment-type
      api_field: instance.deploymentType
      required: false
      help_text: |-
        The deployment type of the instance. Allowed values are:

        * `SCRATCH`: the instance is a scratch instance.
        * `PERSISTENT`: the instance is a persistent instance.
      choices:
      - arg_value: scratch
        enum_value: SCRATCH
        help_text: |-
          Scratch
      - arg_value: persistent
        enum_value: PERSISTENT
        help_text: |-
          Persistent
    - arg_name: request-id
      api_field: requestId
      required: false
      repeated: false
      help_text: |-
        An optional request ID to identify requests. Specify a unique request ID
        so that if you must retry your request, the server will know to ignore
        the request if it has already been completed. The server will guarantee
        that for at least 60 minutes since the first request.

        For example, consider a situation where you make an initial request and t
        he request times out. If you make the request again with the same request
        ID, the server can check if original operation with the same request ID
        was received, and if so, will ignore the second request. This prevents
        clients from accidentally creating duplicate commitments.

        The request ID must be a valid UUID with the exception that zero UUID is
        not supported (00000000-0000-0000-0000-000000000000).
  request:
    api_version: v1
    collection:
    - parallelstore.projects.locations.instances
  async:
    collection:
    - parallelstore.projects.locations.operations
