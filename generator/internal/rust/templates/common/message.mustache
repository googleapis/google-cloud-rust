{{!
Copyright 2024 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}
{{^IsMap}}

{{#Codec.DocLines}}
{{{.}}}
{{/Codec.DocLines}}
{{> /templates/common/feature_gate}}
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
{{#Deprecated}}
#[deprecated]
{{/Deprecated}}
pub struct {{Codec.Name}} {
    {{#Codec.BasicFields}}

    {{#Codec.DocLines}}
    {{{.}}}
    {{/Codec.DocLines}}
    {{#Deprecated}}
    #[deprecated]
    {{/Deprecated}}
    pub {{Codec.FieldName}}: {{{Codec.FieldType}}},
    {{/Codec.BasicFields}}
    {{#OneOfs}}

    {{#Codec.DocLines}}
    {{{.}}}
    {{/Codec.DocLines}}
    pub {{Codec.FieldName}}: std::option::Option<{{{Codec.FieldType}}}>,
    {{/OneOfs}}

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

{{> /templates/common/feature_gate}}
impl {{Codec.Name}} {
    pub fn new() -> Self {
        std::default::Default::default()
    }
    {{#Codec.BasicFields}}

    /// Sets the value of [{{Codec.FieldName}}][{{Codec.FQMessageName}}::{{Codec.SetterName}}].
    {{#Deprecated}}
    #[deprecated]
    {{/Deprecated}}
    {{#Singular}}
    {{^Optional}}
    pub fn set_{{Codec.SetterName}}<T: std::convert::Into<{{{Codec.FieldType}}}>>(mut self, v: T) -> Self {
        self.{{Codec.FieldName}} = v.into();
        self
    }
    {{/Optional}}
    {{#Optional}}
    {{^Codec.IsBoxed}}
    pub fn set_{{Codec.SetterName}}<T>(mut self, v: T) -> Self
    where T: std::convert::Into<{{{Codec.PrimitiveFieldType}}}>
    {
        self.{{Codec.FieldName}} = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [{{Codec.FieldName}}][{{Codec.FQMessageName}}::{{Codec.SetterName}}].
    {{#Deprecated}}
    #[deprecated]
    {{/Deprecated}}
    pub fn set_or_clear_{{Codec.SetterName}}<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<{{{Codec.PrimitiveFieldType}}}>
    {
        self.{{Codec.FieldName}} = v.map(|x| x.into());
        self
    }
    {{/Codec.IsBoxed}}
    {{#Codec.IsBoxed}}
    pub fn set_{{Codec.SetterName}}<T>(mut self, v: T) -> Self
    where T: std::convert::Into<{{{Codec.PrimitiveFieldType}}}>
    {
        self.{{Codec.FieldName}} = std::option::Option::Some(std::boxed::Box::new(v.into()));
        self
    }

    /// Sets or clears the value of [{{Codec.FieldName}}][{{Codec.FQMessageName}}::{{Codec.SetterName}}].
    {{#Deprecated}}
    #[deprecated]
    {{/Deprecated}}
    pub fn set_or_clear_{{Codec.SetterName}}<T>(mut self, v: std::option::Option<T>) -> Self
    where T: std::convert::Into<{{{Codec.PrimitiveFieldType}}}>
    {
        self.{{Codec.FieldName}} = v.map(|x| std::boxed::Box::new(x.into()));
        self
    }
    {{/Codec.IsBoxed}}
    {{/Optional}}
    {{/Singular}}
    {{#Repeated}}
    pub fn set_{{Codec.SetterName}}<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<{{{Codec.PrimitiveFieldType}}}>
    {
        use std::iter::Iterator;
        self.{{Codec.FieldName}} = v.into_iter().map(|i| i.into()).collect();
        self
    }
    {{/Repeated}}
    {{#Map}}
    pub fn set_{{Codec.SetterName}}<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<{{{Codec.KeyType}}}>,
        V: std::convert::Into<{{{Codec.ValueType}}}>,
    {
        use std::iter::Iterator;
        self.{{Codec.FieldName}} = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
    {{/Map}}
    {{/Codec.BasicFields}}
    {{#OneOfs}}

    /// Sets the value of [{{Codec.FieldName}}][{{Codec.StructQualifiedName}}::{{Codec.SetterName}}].
    ///
    /// Note that all the setters affecting `{{Codec.FieldName}}` are mutually
    /// exclusive.
    pub fn set_{{Codec.SetterName}}<T: std::convert::Into<std::option::Option<{{{Codec.FieldType}}}>>>(mut self, v: T) -> Self
    {
        self.{{Codec.FieldName}} = v.into();
        self
    }
    {{#Fields}}

    /// The value of [{{Group.Codec.FieldName}}][{{Codec.FQMessageName}}::{{Group.Codec.FieldName}}]
    /// if it holds a `{{Codec.BranchName}}`, `None` if the field is not set or
    /// holds a different branch.
    {{#Deprecated}}
    #[deprecated]
    {{/Deprecated}}
    pub fn {{Codec.FieldName}}(&self) -> std::option::Option<&{{{Codec.FieldType}}}> {
        {{! Rarely, oneofs have a single branch and then the `_` case is never matched. }}
        #[allow(unreachable_patterns)]
        self.{{Group.Codec.FieldName}}.as_ref().and_then(|v| match v {
            {{Group.Codec.QualifiedName}}::{{Codec.BranchName}}(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [{{Group.Codec.FieldName}}][{{Codec.FQMessageName}}::{{Group.Codec.FieldName}}]
    /// to hold a `{{Codec.BranchName}}`.
    ///
    /// Note that all the setters affecting `{{Group.Codec.FieldName}}` are
    /// mutually exclusive.
    {{#Deprecated}}
    #[deprecated]
    {{/Deprecated}}
    {{#Singular}}
    pub fn set_{{Codec.SetterName}}<T: std::convert::Into<{{{Codec.FieldType}}}>>(mut self, v: T) -> Self {
        self.{{Group.Codec.FieldName}} = std::option::Option::Some(
            {{Group.Codec.QualifiedName}}::{{Codec.BranchName}}(
                v.into()
            )
        );
        self
    }
    {{/Singular}}
    {{#Repeated}}
    pub fn set_{{Codec.SetterName}}<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<{{{Codec.PrimitiveFieldType}}}>
    {
        use std::iter::Iterator;
        self.{{Group.Codec.FieldName}} = std::option::Option::Some(
            {{Group.Codec.QualifiedName}}::{{Codec.BranchName}}(
                v.into_iter().map(|i| i.into()).collect()
            )
        );
        self
    }
    {{/Repeated}}
    {{#Map}}
    pub fn set_{{Codec.SetterName}}<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<{{{Codec.KeyType}}}>,
        V: std::convert::Into<{{{Codec.ValueType}}}>,
    {
        use std::iter::Iterator;
        self.{{Group.Codec.FieldName}} = std::option::Option::Some(
            {{Group.Codec.QualifiedName}}::{{Codec.BranchName}}(
                v.into_iter().map(|(k, v)| (k.into(), v.into())).collect()
            )
        );
        self
    }
    {{/Map}}
    {{/Fields}}
    {{/OneOfs}}
}
{{^Codec.HasSyntheticFields}}

{{> /templates/common/feature_gate}}
impl wkt::message::Message for {{Codec.Name}} {
    fn typename() -> &'static str {
        "type.googleapis.com/{{Codec.SourceFQN}}"
    }
}
{{/Codec.HasSyntheticFields}}
{{#Pagination}}

{{> /templates/common/feature_gate}}
#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for {{Codec.Name}} {
    {{#PageableItem}}
    type PageItem = {{{Codec.PrimitiveFieldType}}};

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.{{{Codec.FieldName}}}
    }

    {{/PageableItem}}
    {{#NextPageToken}}
    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        {{^Optional}}
        self.{{Codec.FieldName}}.clone()
        {{/Optional}}
        {{#Optional}}
        self.{{Codec.FieldName}}.clone().unwrap_or_default()
        {{/Optional}}
    }
    {{/NextPageToken}}
}
{{/Pagination}}

{{!
    We will grow this code over multiple PRs to complete the serialization and
    deserialization of message types via code generation.
}}
{{> /templates/common/feature_gate}}
#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for {{Codec.Name}} {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        {{> /templates/common/deser_field_tag}}
        {{! This is the visitor for the message }}
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = {{Codec.Name}};
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct {{Codec.Name}}")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                use std::option::Option::Some;
                #[allow(unused_imports)]
                use serde::de::Error;
                {{#HasFields}}
                let mut fields = std::collections::HashSet::new();
                {{/HasFields}}
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        {{#Fields}}
                        __FieldTag::__{{Codec.SetterName}} => {
                            if !fields.insert(__FieldTag::__{{Codec.SetterName}}) {
                                return std::result::Result::Err(A::Error::duplicate_field("multiple values for {{Codec.SetterName}}"));
                            }
                            {{^Codec.RequiresSerdeAs}}
                            {{> /templates/common/deser_plain_message_field}}
                            {{/Codec.RequiresSerdeAs}}
                            {{#Codec.RequiresSerdeAs}}
                            {{> /templates/common/deser_with_message_field}}
                            {{/Codec.RequiresSerdeAs}}
                        },
                        {{/Fields}}
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        },
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

{{> /templates/common/feature_gate}}
#[doc(hidden)]
impl serde::ser::Serialize for {{Codec.Name}} {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        #[allow(unused_imports)]
        use std::option::Option::Some;
        use serde::ser::SerializeMap;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        {{#Fields}}
        {{^Synthetic}}
        {{^Codec.RequiresSerdeAs}}
        {{> /templates/common/ser_plain_message_field}}
        {{/Codec.RequiresSerdeAs}}
        {{#Codec.RequiresSerdeAs}}
        {{> /templates/common/ser_with_message_field}}
        {{/Codec.RequiresSerdeAs}}
        {{/Synthetic}}
        {{/Fields}}
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}
{{#Codec.HasNestedTypes}}

/// Defines additional types related to [{{Name}}].
{{> /templates/common/feature_gate}}
pub mod {{Codec.ModuleName}} {
    {{! Very rarely, this is unused. It is easier to always disable the warning. }}
    #[allow(unused_imports)]
    use super::*;

{{/Codec.HasNestedTypes}}
    {{#Messages}}
    {{> message}}
    {{/Messages}}
    {{#Enums}}
    {{> enum}}
    {{/Enums}}
    {{#OneOfs}}
    {{> oneof}}
    {{/OneOfs}}
{{#Codec.HasNestedTypes}}
}
{{/Codec.HasNestedTypes}}
{{/IsMap}}
