{{!
Copyright 2024 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}

{{#Codec.DocLines}}
{{{.}}}
{{/Codec.DocLines}}
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
{{> /templates/common/feature_gate}}
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
{{#Deprecated}}
#[deprecated]
{{/Deprecated}}
pub enum {{Codec.Name}} {
    {{#Codec.UniqueNames}}
    {{#Codec.DocLines}}
    {{{.}}}
    {{/Codec.DocLines}}
    {{#Deprecated}}
    #[deprecated]
    {{/Deprecated}}
    {{Codec.VariantName}},
    {{/Codec.UniqueNames}}
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [{{Codec.Name}}::value] or
    /// [{{Codec.Name}}::name].
    UnknownValue({{Codec.ModuleName}}::UnknownValue),
}

{{!
    The `UnknownValue` variant must be public, but we do not want people to
    build that variant with a known value. We use a struct, with a `pub(crate)`
    constructor, and a `pub(crate)` enum.
}}
#[doc(hidden)]
{{> /templates/common/feature_gate}}
pub mod {{Codec.ModuleName}} {
    {{! Very rarely, this is unused. It is easier to always disable the warning. }}
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

{{> /templates/common/feature_gate}}
impl {{Codec.Name}} {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            {{#Codec.UniqueNames}}
            Self::{{Codec.VariantName}} => std::option::Option::Some({{Number}}),
            {{/Codec.UniqueNames}}
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            {{#Codec.UniqueNames}}
            Self::{{Codec.VariantName}} => std::option::Option::Some("{{Name}}"),
            {{/Codec.UniqueNames}}
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

{{> /templates/common/feature_gate}}
impl std::default::Default for {{Codec.Name}} {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

{{> /templates/common/feature_gate}}
impl std::fmt::Display for {{Codec.Name}} {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

{{> /templates/common/feature_gate}}
impl std::convert::From<i32> for {{Codec.Name}} {
    fn from(value: i32) -> Self {
        match value {
            {{#UniqueNumberValues}}
            {{Number}} => Self::{{Codec.VariantName}},
            {{/UniqueNumberValues}}
            _ => Self::UnknownValue({{Codec.ModuleName}}::UnknownValue(wkt::internal::UnknownEnumValue::Integer(value))),
        }
    }
}

{{> /templates/common/feature_gate}}
impl std::convert::From<&str> for {{Codec.Name}} {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            {{#Values}}
            "{{Name}}" => Self::{{Codec.VariantName}},
            {{/Values}}
            _ => Self::UnknownValue({{Codec.ModuleName}}::UnknownValue(wkt::internal::UnknownEnumValue::String(value.to_string()))),
        }
    }
}

{{> /templates/common/feature_gate}}
impl serde::ser::Serialize for {{Codec.Name}} {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            {{#Codec.UniqueNames}}
            Self::{{Codec.VariantName}} => serializer.serialize_i32({{Number}}),
            {{/Codec.UniqueNames}}
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

{{> /templates/common/feature_gate}}
impl<'de> serde::de::Deserialize<'de> for {{Codec.Name}} {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<{{Codec.Name}}>::new(
            "{{ID}}"))
    }
}
