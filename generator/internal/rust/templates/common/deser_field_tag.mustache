{{!
Copyright 2025 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}
{{!
    The serde guide recommends using an enumeration to avoid data copies
    and allocations related to the field names. The basic idea is to create
    an enumeration to convert the (borrowed) field names into enumeration
    variants. The latter are cheap to copy and compare. A special variant
    handles unknown fields.

    Then we implement deserialization for this enumeration, so they can be
    extracted from the map, and use the enumeration to extract the fields.
}}
#[allow(non_camel_case_types)]
#[doc(hidden)]
#[derive(PartialEq, Eq, Hash)]
enum __FieldTag {
    {{#Fields}}
    __{{Codec.SetterName}},
    {{/Fields}}
    Unknown(std::string::String),
}
impl<'de> serde::de::Deserialize<'de> for __FieldTag {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        {{! The visitor for `__FieldTag`. }}
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = __FieldTag;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("a field name for {{Codec.Name}}")
            }
            fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
            where
                E: serde::de::Error,
            {
                use std::result::Result::Ok;
                match value {
                    {{#Fields}}
                    "{{JSONName}}" => Ok(__FieldTag::__{{Codec.SetterName}}),
                    {{^NameEqualJSONName}}
                    {{!
                        The [ProtoJSON spec] reads:

                        Parsers accept both the lowerCamelCase name (or the one
                        specified by the json_name option) and the original proto field name.

                        [ProtoJSON spec]: https://protobuf.dev/programming-guides/json/
                    }}
                    "{{Name}}" => Ok(__FieldTag::__{{Codec.SetterName}}),
                    {{/NameEqualJSONName}}
                    {{/Fields}}
                    _ => Ok(__FieldTag::Unknown(value.to_string())),
                }
            }
        }
        {{! Deserialize the field tag. }}
        deserializer.deserialize_identifier(Visitor)
    }
}
