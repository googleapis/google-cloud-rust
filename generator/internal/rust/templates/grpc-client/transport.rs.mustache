{{!
Copyright 2025 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}
// Copyright {{Codec.CopyrightYear}} Google LLC
{{#Codec.BoilerPlate}}
//{{{.}}}
{{/Codec.BoilerPlate}}
{{#Codec.HasServices}}

{{#Codec.PerServiceFeatures}}
#[cfg(any({{#Codec.Services}}feature = "{{Codec.ModuleName}}",{{/Codec.Services}}))]
{{/Codec.PerServiceFeatures}}
use crate::Result;
#[allow(unused_imports)]
use gax::error::Error;
{{#Codec.PerServiceFeatures}}
#[cfg(any({{#Codec.Services}}feature = "{{Codec.ModuleName}}",{{/Codec.Services}}))]
{{/Codec.PerServiceFeatures}}
use gaxi::prost::Convert;
{{#Codec.PerServiceFeatures}}
#[cfg(any({{#Codec.Services}}feature = "{{Codec.ModuleName}}",{{/Codec.Services}}))]
{{/Codec.PerServiceFeatures}}

{{#Codec.PerServiceFeatures}}
#[cfg(any({{#Codec.Services}}feature = "{{Codec.ModuleName}}",{{/Codec.Services}}))]
{{/Codec.PerServiceFeatures}}
const DEFAULT_HOST: &str = "https://{{Codec.DefaultHost}}";

{{#Codec.PerServiceFeatures}}
#[cfg(any({{#Codec.Services}}feature = "{{Codec.ModuleName}}",{{/Codec.Services}}))]
{{/Codec.PerServiceFeatures}}
mod info {
    const NAME: &str = env!("CARGO_PKG_NAME");
    const VERSION: &str = env!("CARGO_PKG_VERSION");
    lazy_static::lazy_static! {
        pub(crate) static ref X_GOOG_API_CLIENT_HEADER: String = {
            let ac = gaxi::api_header::XGoogApiClient{
                name:          NAME,
                version:       VERSION,
                library_type:  gaxi::api_header::GAPIC,
            };
            ac.header_value()
        };
    }
}

{{/Codec.HasServices}}
{{#Codec.Services}}
/// Implements [{{Codec.Name}}](super::stub::{{Codec.Name}}) using a Tonic-generated client.
{{#Codec.PerServiceFeatures}}
#[cfg(feature = "{{Codec.ModuleName}}")]
{{/Codec.PerServiceFeatures}}
#[derive(Clone)]
pub struct {{Codec.Name}} {
    inner: gaxi::grpc::Client,
}

{{#Codec.PerServiceFeatures}}
#[cfg(any({{#Codec.Services}}feature = "{{Codec.ModuleName}}",{{/Codec.Services}}))]
{{/Codec.PerServiceFeatures}}
impl std::fmt::Debug for {{Codec.Name}} {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        f.debug_struct("{{Codec.Name}}")
            .field("inner", &self.inner)
            .finish()
    }
}

{{#Codec.PerServiceFeatures}}
#[cfg(any({{#Codec.Services}}feature = "{{Codec.ModuleName}}",{{/Codec.Services}}))]
{{/Codec.PerServiceFeatures}}
impl {{Codec.Name}} {
    pub async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = gaxi::grpc::Client::new(config, DEFAULT_HOST).await?;
        Ok(Self { inner })
    }
}

{{#Codec.PerServiceFeatures}}
#[cfg(any({{#Codec.Services}}feature = "{{Codec.ModuleName}}",{{/Codec.Services}}))]
{{/Codec.PerServiceFeatures}}
impl super::stub::{{Codec.Name}} for {{Codec.Name}} {
    {{#Codec.Methods}}
    async fn {{Codec.Name}}(
        &self,
        req: {{InputType.Codec.QualifiedName}},
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<{{Codec.ReturnType}}>> {
        let options = gax::options::internal::set_default_idempotency(
            options,
            {{PathInfo.Codec.IsIdempotent}},
        );
        let extensions = {
            let mut e = tonic::Extensions::new();
            e.insert(tonic::GrpcMethod::new("{{Service.Package}}.{{Service.Name}}", "{{Name}}"));
            e
        };
        let path = http::uri::PathAndQuery::from_static(
            "/{{Service.Package}}.{{Service.Name}}/{{Name}}"
        );
        let x_goog_request_params = [
            {{#PathInfo.Codec.PathArgs}}
            format!("{{Name}}={}", req{{{Accessor}}}),
            {{/PathInfo.Codec.PathArgs}}
            {{^PathInfo.Codec.PathArgs}}
            ""; 0
            {{/PathInfo.Codec.PathArgs}}
        ].into_iter().fold(String::new(), |b, p| b + "&" + &p);

        self.inner
          .execute(
              extensions,
              path,
              req.cnv(),
              options,
              &info::X_GOOG_API_CLIENT_HEADER,
              &x_goog_request_params,
          )
          .await
          .map(gaxi::grpc::to_gax_response::<
          {{#ReturnsEmpty}}
          (),
          {{/ReturnsEmpty}}
          {{^ReturnsEmpty}}
          crate::{{Service.Codec.PackageModuleName}}::{{OutputType.Codec.RelativeName}},
          {{/ReturnsEmpty}}
          {{Codec.ReturnType}}>)
    }

    {{/Codec.Methods}}
}

{{/Codec.Services}}
