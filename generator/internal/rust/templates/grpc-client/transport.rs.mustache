{{!
Copyright 2025 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}
// Copyright {{Codec.CopyrightYear}} Google LLC
{{#Codec.BoilerPlate}}
//{{{.}}}
{{/Codec.BoilerPlate}}
{{#Codec.HasServices}}

use crate::Result;
{{! Disable warnings about unused imports: sometimes there are no RPCs with query parameters and this goes unused }}
#[allow(unused_imports)]
use gax::error::Error;
use std::sync::Arc;

const DEFAULT_HOST: &str = "https://{{Codec.DefaultHost}}";

mod info {
    const NAME: &str = env!("CARGO_PKG_NAME");
    const VERSION: &str = env!("CARGO_PKG_VERSION");
    lazy_static::lazy_static! {
        pub(crate) static ref X_GOOG_API_CLIENT_HEADER: String = {
            let ac = gax::api_header::XGoogApiClient{
                name:          NAME,
                version:       VERSION,
                library_type:  gax::api_header::GAPIC,
            };
            ac.header_value()
        };
    }
}

{{/Codec.HasServices}}
{{#Codec.Services}}
/// Implements [{{Codec.Name}}](super::stubs::{{Codec.Name}}) using a Tonic-generated client.
#[derive(Clone)]
pub struct {{Codec.Name}} {
    inner: tonic::client::Grpc<tonic::transport::Channel>,
    cred: auth::credentials::Credential,
    retry_policy: Option<Arc<dyn gax::retry_policy::RetryPolicy>>,
    backoff_policy: Option<Arc<dyn gax::backoff_policy::BackoffPolicy>>,
    retry_throttler: gax::retry_throttler::SharedRetryThrottler,
}

impl std::fmt::Debug for {{Codec.Name}} {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        f.debug_struct("{{Codec.Name}}")
            .field("inner", &self.inner)
            .finish()
    }
}

impl {{Codec.Name}} {
    pub async fn new(config: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::make_inner(&config).await?;
        let cred = Self::make_credentials(&config).await?;
        Ok(Self {
            inner,
            cred,
            retry_policy: config.retry_policy().clone(),
            backoff_policy: config.backoff_policy().clone(),
            retry_throttler: config.retry_throttler(),
        })
    }

    async fn make_inner(config: &gax::options::ClientConfig) -> Result<tonic::client::Grpc<tonic::transport::Channel>> {
        let endpoint = tonic::transport::Endpoint::new(
            config
            .endpoint()
            .clone()
            .unwrap_or_else(|| DEFAULT_HOST.to_string())
        ).map_err(Error::other)?;
        let conn = endpoint.connect().await.map_err(Error::other)?;
        Ok(tonic::client::Grpc::new(conn))
    }

    async fn make_credentials(config: &gax::options::ClientConfig) -> Result<auth::credentials::Credential> {
        if let Some(c) = config.credential().clone() {
            return Ok(c);
        }
        auth::credentials::create_access_token_credential()
                .await
                .map_err(Error::authentication)
    }

    async fn make_headers(
        &self,
        options: &gax::options::RequestOptions,
        request_params: &str,
    ) -> Result<http::header::HeaderMap> {
        let mut headers = self
            .cred
            .get_headers()
            .await
            .map_err(Error::authentication)?;
        headers.push((
            http::header::HeaderName::from_static("x-goog-api-client"),
            http::header::HeaderValue::from_static(&info::X_GOOG_API_CLIENT_HEADER),
        ));
        headers.push((
            http::header::HeaderName::from_static("x-goog-request-params"),
            http::header::HeaderValue::from_str(request_params).map_err(Error::other)?,
        ));
        if let Some(user_agent) = options.user_agent() {
            headers.push((
                http::header::USER_AGENT,
                http::header::HeaderValue::from_str(user_agent).map_err(Error::other)?,
            ));
        }
        Ok(http::header::HeaderMap::from_iter(headers))
    }

    async fn execute<Request, Response, F, RF>(
        &self,
        call: F,
        req: Request,
        options: &gax::options::RequestOptions,
        request_params: String,
    ) -> Result<Response>
    where
        F: Fn(Request, http::header::HeaderMap) -> RF + Send + Sync,
        RF: std::future::Future<Output = Result<Response>>,
        Request: std::clone::Clone,
    {
        match self.get_retry_policy(options) {
            None => {
                let headers = self.make_headers(options, &request_params).await?;
                call(req, headers).await
            },
            Some(policy) => {
                self.retry_loop(call, req, options, request_params, policy).await
            },
        }
    }

    async fn retry_loop<Request, Response, F, RF>(&self, call: F,
         req: Request,
         options: &gax::options::RequestOptions,
         request_params: String,
         retry_policy: Arc<dyn gax::retry_policy::RetryPolicy>,
    ) -> Result<Response>
    where
        F: Fn(Request, http::header::HeaderMap) -> RF + Send + Sync,
        RF: std::future::Future<Output = Result<Response>>,
        Request: std::clone::Clone,
    {
        let loop_start = std::time::Instant::now();
        let throttler = self.get_retry_throttler(options);
        let backoff = self.get_backoff_policy(options);
        let mut attempt_count = 0;
        loop {
            let request = req.clone();
            let remaining_time = retry_policy.remaining_time(loop_start, attempt_count);
            let throttle = if attempt_count == 0 {
                false
            } else {
                let t = throttler.lock().expect("retry throttler lock is poisoned");
                t.throttle_retry_attempt()
            };
            if throttle {
                // This counts as an error for the purposes of the retry policy.
                if let Some(error) = retry_policy.on_throttle(loop_start, attempt_count) {
                    return Err(error);
                }
                let delay = backoff.on_failure(loop_start, attempt_count);
                tokio::time::sleep(delay).await;
                continue;
            }
            attempt_count += 1;
            match self.request_attempt(&call, request, options, &request_params, remaining_time).await {
                Ok(r) => {
                    throttler
                        .lock()
                        .expect("retry throttler lock is poisoned")
                        .on_success();
                    return Ok(r);
                }
                Err(e) => {
                    let flow = retry_policy.on_error(
                        loop_start,
                        attempt_count,
                        options.idempotent().unwrap_or(false),
                        e,
                    );
                    let delay = backoff.on_failure(loop_start, attempt_count);
                    {
                        throttler
                            .lock()
                            .expect("retry throttler lock is poisoned")
                            .on_retry_failure(&flow);
                    };
                    self.on_error(flow, delay).await?;
                }
            };
        }
    }

    async fn request_attempt<Request, Response, F, RF>(
        &self,
        call: &F,
        req: Request,
        options: &gax::options::RequestOptions,
        request_params: &str,
        _remaining_time: Option<std::time::Duration>,
    ) -> Result<Response>
    where
        F: Fn(Request, http::header::HeaderMap) -> RF + Send + Sync,
        RF: std::future::Future<Output = Result<Response>>,
        Request: std::clone::Clone,
    {
        {{! TODO(#1384) - we need to add the timeout handling }}
        let headers = self.make_headers(options, request_params).await?;
        call(req, headers).await
    }

    async fn on_error(
        &self,
        retry_flow: gax::loop_state::LoopState,
        backoff_delay: std::time::Duration,
    ) -> Result<()> {
        use gax::loop_state::LoopState;
        match retry_flow {
            LoopState::Permanent(e) | LoopState::Exhausted(e) => {
                return Err(e);
            }
            LoopState::Continue(_e) => {
                tokio::time::sleep(backoff_delay).await;
            }
        }
        Ok(())
    }

    fn get_retry_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Option<Arc<dyn gax::retry_policy::RetryPolicy>> {
        options
            .retry_policy()
            .clone()
            .or_else(|| self.retry_policy.clone())
    }

    fn get_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::backoff_policy::BackoffPolicy> {
        options
            .backoff_policy()
            .clone()
            .or_else(|| self.backoff_policy.clone())
            .unwrap_or_else(|| Arc::new(gax::exponential_backoff::ExponentialBackoff::default()))
    }

    fn get_retry_throttler(
        &self,
        options: &gax::options::RequestOptions,
    ) -> gax::retry_throttler::SharedRetryThrottler {
        options
            .retry_throttler()
            .clone()
            .unwrap_or_else(|| self.retry_throttler.clone())
    }
}

impl super::stubs::{{Codec.Name}} for {{Codec.Name}} {
    {{#Codec.Methods}}
    async fn {{Codec.Name}}(
        &self,
        req: {{InputType.Codec.QualifiedName}},
        options: gax::options::RequestOptions,
    ) -> Result<{{Codec.ReturnType}}> {
        use wkt::prost::Convert;
        let inner = self.inner.clone();
        let call = |r: {{InputType.Codec.QualifiedName}}, h: http::header::HeaderMap| async {
            let extensions = {
                let mut e = tonic::Extensions::new();
                e.insert(tonic::GrpcMethod::new("{{Service.Package}}.{{Service.Name}}", "{{Name}}"));
                e
            };
            let metadata = tonic::metadata::MetadataMap::from_headers(h);
            let request = tonic::Request::from_parts(metadata, extensions, r.cnv());
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/{{Service.Package}}.{{Service.Name}}/{{Name}}"
            );
            let mut inner = inner.clone();
            inner.ready().await.map_err(Error::rpc)?;
            {{#ReturnsEmpty}}
            let _ : tonic::Response<()> =
                inner.unary(request, path, codec).await.map_err(Error::rpc)?;
            Ok(())
            {{/ReturnsEmpty}}
            {{^ReturnsEmpty}}
            let response : tonic::Response<crate::{{Service.Codec.PackageModuleName}}::{{OutputType.Codec.RelativeName}}> =
                inner.unary(request, path, codec).await.map_err(Error::rpc)?;
            let response = response.into_inner();
            Ok(response.cnv())
            {{/ReturnsEmpty}}
        };
        let x_goog_request_params = [
            {{#PathInfo.Codec.PathArgs}}
            format!("{{Name}}={}", req{{{Accessor}}}),
            {{/PathInfo.Codec.PathArgs}}
            {{^PathInfo.Codec.PathArgs}}
            ""; 0
            {{/PathInfo.Codec.PathArgs}}
        ].into_iter().fold(String::new(), |b, p| b + "&" + &p);

        {{! TODO(#1384) - we should do something with the metadata }}
        self.execute(call, req, &options, x_goog_request_params)
            .await
    }

    {{/Codec.Methods}}
}

{{/Codec.Services}}
