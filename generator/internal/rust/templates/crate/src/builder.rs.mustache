{{!
Copyright 2024 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}
// Copyright {{Codec.CopyrightYear}} Google LLC
{{#Codec.BoilerPlate}}
//{{{.}}}
{{/Codec.BoilerPlate}}
{{#Codec.Services}}

{{#Codec.PerServiceFeatures}}
#[cfg(feature = "{{Codec.FeatureName}}")]
#[cfg_attr(docsrs, doc(cfg(feature = "{{Codec.FeatureName}}")))]
{{/Codec.PerServiceFeatures}}
pub mod {{Codec.ModuleName}} {
    use crate::Result;

    {{^Codec.SkipBuilderDocs}}
    /// A builder for [{{Codec.Name}}][super::super::client::{{Codec.Name}}].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use {{Model.Codec.PackageNamespace}}::*;
    /// # use builder::{{Codec.ModuleName}}::ClientBuilder;
    /// # use client::{{Codec.Name}};
    /// let builder : ClientBuilder = {{Codec.Name}}::builder();
    /// let client = builder
    ///     .with_endpoint("https://{{Model.Codec.DefaultHost}}")
    ///     .build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    {{/Codec.SkipBuilderDocs}}
    pub type ClientBuilder =
        gax::client_builder::ClientBuilder<client::Factory, gaxi::options::Credentials>;

    pub(crate) mod client {
        use super::super::super::client::{{Codec.Name}};
        pub struct Factory;
        impl gax::client_builder::internal::ClientFactory for Factory {
            type Client = {{Codec.Name}};
            type Credentials = gaxi::options::Credentials;
            async fn build(self, config: gaxi::options::ClientConfig) -> gax::Result<Self::Client> {
                Self::Client::new(config).await
            }
        }
    }

    /// Common implementation for [super::super::client::{{Codec.Name}}] request builders.
    #[derive(Clone, Debug)]
    pub(crate) struct RequestBuilder<R: std::default::Default> {
        stub: std::sync::Arc<dyn super::super::stub::dynamic::{{Codec.Name}}>,
        request: R,
        options: gax::options::RequestOptions,
    }

    impl<R> RequestBuilder<R>
    where R: std::default::Default {
        pub(crate) fn new(stub: std::sync::Arc<dyn super::super::stub::dynamic::{{Codec.Name}}>) -> Self {
            Self {
                stub,
                request: R::default(),
                options: gax::options::RequestOptions::default(),
            }
        }
    }

    {{#Codec.Methods}}
    {{^Codec.SkipBuilderDocs}}
    /// The request builder for [{{Codec.ServiceNameToPascal}}::{{Codec.Name}}][super::super::client::{{Codec.ServiceNameToPascal}}::{{Codec.Name}}] calls.
    {{/Codec.SkipBuilderDocs}}
    #[derive(Clone, Debug)]
    pub struct {{Codec.BuilderName}}(RequestBuilder<{{InputType.Codec.QualifiedName}}>);

    impl {{Codec.BuilderName}} {
        pub(crate) fn new(stub: std::sync::Arc<dyn super::super::stub::dynamic::{{Codec.ServiceNameToPascal}}>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<{{InputType.Codec.QualifiedName}}>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        {{#OperationInfo}}
        ///
        /// # Long running operations
        ///
        /// This starts, but does not poll, a longrunning operation. More information
        /// on [{{Method.Codec.Name}}][super::super::client::{{Method.Codec.ServiceNameToPascal}}::{{Method.Codec.Name}}].
        {{/OperationInfo}}
        pub async fn send(self) -> Result<{{Codec.ReturnType}}> {
            {{!
                In rare cases `self.0.stub.foo` is ambiguous: we are calling
                via `Arc<dyn T>` which implements `T` but also implements other
                traits (e.g. `std::clone::Clone`) making the call ambiguous.
                Using `*self.0.stub` makes the call not-ambiguous.
            }}
            (*self.0.stub).{{Codec.Name}}(self.0.request, self.0.options).await.map(gax::response::Response::into_body)
        }
        {{#Pagination}}

        /// Streams the responses back.
        pub async fn paginator(self) -> impl gax::paginator::Paginator<{{OutputType.Codec.QualifiedName}}, gax::error::Error> {
            use std::clone::Clone;
            {{#Optional}}
            let token = self.0.request.{{Codec.FieldName}}.clone().unwrap_or_default();
            {{/Optional}}
            {{^Optional}}
            let token = self.0.request.{{Codec.FieldName}}.clone();
            {{/Optional}}
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_{{Codec.SetterName}}(token);
                builder.send()
            };
            gax::paginator::internal::new_paginator(token, execute)
        }
        {{/Pagination}}
        {{#OperationInfo}}

        /// Creates a [Poller][lro::Poller] to work with `{{Method.Codec.Name}}`.
        pub fn poller(
            self
        ) -> impl lro::Poller<{{Codec.ResponseType}}, {{Codec.MetadataType}}>
        {
            type Operation = lro::internal::Operation<{{Codec.ResponseType}}, {{Codec.MetadataType}}>;
            let polling_error_policy = self.0.stub.get_polling_error_policy(&self.0.options);
            let polling_backoff_policy = self.0.stub.get_polling_backoff_policy(&self.0.options);

            let stub = self.0.stub.clone();
            let mut options = self.0.options.clone();
            options.set_retry_policy(gax::retry_policy::NeverRetry);
            let query = move |name| {
                let stub = stub.clone();
                let options = options.clone();
                async {
                    let op = GetOperation::new(stub)
                        .set_name(name)
                        .with_options(options)
                        .send()
                        .await?;
                    Ok(Operation::new(op))
                }
            };

            let start = move || async {
                let op = self.send().await?;
                Ok(Operation::new(op))
            };

            lro::internal::new_poller(polling_error_policy, polling_backoff_policy, start, query)
        }
        {{/OperationInfo}}
        {{#InputType.Codec.BasicFields}}

        /// Sets the value of [{{Codec.FieldName}}][{{Codec.FQMessageName}}::{{Codec.SetterName}}].
        {{#DocumentAsRequired}}
        ///
        /// This is a **required** field for requests.
        {{/DocumentAsRequired}}
        {{#Deprecated}}
        #[deprecated]
        {{/Deprecated}}
        {{#Singular}}
        pub fn set_{{Codec.SetterName}}<T: Into<{{{Codec.FieldType}}}>>(mut self, v: T) -> Self {
            self.0.request.{{Codec.FieldName}} = v.into();
            self
        }
        {{/Singular}}
        {{#Repeated}}
        pub fn set_{{Codec.SetterName}}<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<{{{Codec.PrimitiveFieldType}}}>
        {
            use std::iter::Iterator;
            self.0.request.{{Codec.FieldName}} = v.into_iter().map(|i| i.into()).collect();
            self
        }
        {{/Repeated}}
        {{#Map}}
        pub fn set_{{Codec.SetterName}}<T, K, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = (K, V)>,
            K: std::convert::Into<{{{Codec.KeyType}}}>,
            V: std::convert::Into<{{{Codec.ValueType}}}>,
        {
            self.0.request.{{Codec.FieldName}} = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
            self
        }
        {{/Map}}
        {{/InputType.Codec.BasicFields}}
        {{#InputType.OneOfs}}

        /// Sets the value of [{{Codec.FieldName}}][{{Codec.StructQualifiedName}}::{{Codec.SetterName}}].
        ///
        /// Note that all the setters affecting `{{Codec.FieldName}}` are
        /// mutually exclusive.
        pub fn set_{{Codec.SetterName}}<T: Into<Option<{{{Codec.FieldType}}}>>>(mut self, v: T) ->Self {
            self.0.request.{{Codec.FieldName}} = v.into();
            self
        }
        {{#Fields}}

        /// Sets the value of [{{Group.Codec.FieldName}}][{{Codec.FQMessageName}}::{{Group.Codec.FieldName}}]
        /// to hold a `{{Codec.BranchName}}`.
        ///
        /// Note that all the setters affecting `{{Group.Codec.FieldName}}` are
        /// mutually exclusive.
        {{#Deprecated}}
        #[deprecated]
        {{/Deprecated}}
        {{#Singular}}
        pub fn set_{{Codec.SetterName}}<T: std::convert::Into<{{{Codec.FieldType}}}>>(mut self, v: T) -> Self {
            self.0.request = self.0.request.set_{{Codec.SetterName}}(v);
            self
        }
        {{/Singular}}
        {{#Repeated}}
        pub fn set_{{Codec.SetterName}}<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<{{{Codec.PrimitiveFieldType}}}>
        {
            use std::iter::Iterator;
            self.{{Group.Codec.FieldName}} = std::option::Option::Some(
                {{Group.Codec.QualifiedName}}::{{Codec.BranchName}}(
                    v.into_iter().map(|i| i.into()).collect()
                )
            );
            self
        }
        {{/Repeated}}
        {{#Map}}
        pub fn set_{{Codec.SetterName}}<T, K, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = (K, V)>,
            K: std::convert::Into<{{{Codec.KeyType}}}>,
            V: std::convert::Into<{{{Codec.ValueType}}}>,
        {
            use std::iter::Iterator;
            self.{{Group.Codec.FieldName}} = std::option::Option::Some(
                {{Group.Codec.QualifiedName}}::{{Codec.BranchName}}(
                    v.into_iter().map(|(k, v)| (k.into(), v.into())).collect()
                )
            );
            self
        }
        {{/Map}}
        {{/Fields}}
        {{/InputType.OneOfs}}
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for {{Codec.BuilderName}} {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    {{/Codec.Methods}}
}
{{/Codec.Services}}
