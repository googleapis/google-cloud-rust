{{!
Copyright 2025 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}
// Copyright {{Codec.Storage.Codec.CopyrightYear}} Google LLC
{{#Codec.Storage.Codec.BoilerPlate}}
//{{{.}}}
{{/Codec.Storage.Codec.BoilerPlate}}

/// Defines the trait used to implement [crate::client::StorageControl].
///
/// Application developers may need to implement this trait to mock
/// `client::StorageControl`. In other use-cases, application developers only
/// use `client::StorageControl` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait StorageControl: std::fmt::Debug + Send + Sync {
    {{#Codec.Storage.Services}}
    {{#Methods}}

    /// Implements [crate::client::StorageControl::{{Codec.Name}}].
    fn {{Codec.Name}}(
        &self,
        _req: {{InputType.Codec.QualifiedName}},
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<{{Codec.ReturnType}}>>> + Send {
        gaxi::unimplemented::unimplemented_stub()
    }
    {{/Methods}}
    {{/Codec.Storage.Services}}
    {{#Codec.Control.Services}}
    {{#Methods}}

    /// Implements [crate::client::StorageControl::{{Codec.Name}}].
    fn {{Codec.Name}}(
        &self,
        _req: {{InputType.Codec.QualifiedName}},
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<{{Codec.ReturnType}}>>> + Send {
        gaxi::unimplemented::unimplemented_stub()
    }
    {{/Methods}}
    {{/Codec.Control.Services}}
}

impl<T> crate::generated::gapic::stub::StorageControl for std::sync::Arc<T>
where
    T: StorageControl,
{
    {{#Codec.Storage.Services}}
    {{#Methods}}

    fn {{Codec.Name}}(
        &self,
        req: {{InputType.Codec.QualifiedName}},
        options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<{{Codec.ReturnType}}>>> + Send {
        T::{{Codec.Name}}(self, req, options)
    }
    {{/Methods}}
    {{/Codec.Storage.Services}}
}

impl<T> crate::generated::gapic_control::stub::StorageControl for std::sync::Arc<T>
where
    T: StorageControl,
{
    {{#Codec.Control.Services}}
    {{#Methods}}

    fn {{Codec.Name}}(
        &self,
        req: {{InputType.Codec.QualifiedName}},
        options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<{{Codec.ReturnType}}>>> + Send {
        T::{{Codec.Name}}(self, req, options)
    }
    {{/Methods}}
    {{/Codec.Control.Services}}
}
