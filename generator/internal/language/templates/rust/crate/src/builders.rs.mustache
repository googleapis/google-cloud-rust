{{!
Copyright 2024 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}
// Copyright {{CopyrightYear}} Google LLC
{{#BoilerPlate}}
//{{{.}}}
{{/BoilerPlate}}
{{#HasServices}}

use crate::Result;
use std::sync::Arc;
{{/HasServices}}
{{#Services}}

/// Common implementation for [crate::client::{{NameToPascal}}] request builders.
#[derive(Clone, Debug)]
pub struct {{NameToPascal}}RequestBuilder<R: std::default::Default> {
    stub: Arc<dyn crate::traits::dyntraits::{{NameToPascal}}>,
    request: R,
    options: gax::options::RequestOptions,
}

impl<R> {{NameToPascal}}RequestBuilder<R>
where R: std::default::Default {
    pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::{{NameToPascal}}>) -> Self {
        Self {
            stub,
            request: R::default(),
            options: gax::options::RequestOptions::default(),
        }
    }
}

{{#Methods}}
/// The request builder for a {{ServiceNameToPascal}}::{{NameToSnake}} call.
#[derive(Clone, Debug)]
pub struct {{NameToPascal}}({{ServiceNameToPascal}}RequestBuilder<{{InputTypeName}}>);

impl {{NameToPascal}} {
    pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::{{ServiceNameToPascal}}>) -> Self {
        Self(
            {{ServiceNameToPascal}}RequestBuilder::new(stub)
        )
    }

    /// Set the full request.
    pub fn with_request<V: Into<{{InputTypeName}}>>(mut self, v: V) -> Self {
        self.0.request = v.into();
        self
    }

    /// Sends the request.
    {{#OperationInfo}}
    ///
    /// # Long running operations
    ///
    /// This starts, but does not poll, a longrunning operation. More information
    /// on [{{NameToSnake}}][crate::client::{{ServiceNameToPascal}}::{{NameToSnake}}].
    {{/OperationInfo}}
    pub async fn send(self) -> Result<{{OutputTypeName}}> {
        self.0.stub.{{NameToSnake}}(self.0.request, self.0.options).await
    }
    {{#IsPageable}}

    /// Streams the responses back.
    #[cfg(feature = "unstable-stream")]
    pub async fn stream(self) -> gax::paginator::Paginator<{{OutputTypeName}}, gax::error::Error> {
        let token = gax::paginator::extract_token(&self.0.request.page_token);
        let execute = move |token: String| {
            let builder = self.clone();
            builder.0.request.clone().set_page_token(token);
            builder.send()
        };
        gax::paginator::Paginator::new(token, execute)
    }
    {{/IsPageable}}
    {{#OperationInfo}}

    /// Creates a [Poller][lro::Poller] to work with `{{NameToSnake}}`.
    pub fn poller(
        self
    ) -> impl lro::Poller<{{ResponseType}}, {{MetadataType}}>
    {
        type Operation = lro::Operation<{{ResponseType}}, {{MetadataType}}>;
        let polling_policy = self.0.stub.get_polling_policy(&self.0.options);
        let polling_backoff_policy = self.0.stub.get_polling_backoff_policy(&self.0.options);

        let stub = self.0.stub.clone();
        let query = move |name| {
            let stub = stub.clone();
            async {
                let op = crate::builders::GetOperation::new(stub)
                    .set_name(name)
                    .send()
                    .await?;
                Ok(Operation::new(op))
            }
        };

        let start = move || async {
            let op = self.send().await?;
            Ok(Operation::new(op))
        };

        lro::new_poller(polling_policy, polling_backoff_policy, start, query)
    }
    {{/OperationInfo}}
    {{#InputType.BasicFields}}

    /// Sets the value of `{{NameToSnake}}`.
    pub fn set_{{NameToSnakeNoMangling}}<T: Into<{{{FieldType}}}>>(mut self, v: T) -> Self {
        self.0.request.{{NameToSnake}} = v.into();
        self
    }
    {{/InputType.BasicFields}}
    {{#InputType.ExplicitOneOfs}}

    /// Sets the value of `{{NameToSnake}}`.
    pub fn set_{{NameToSnakeNoMangling}}<T: Into<Option<{{{FieldType}}}>>>(mut self, v: T) ->Self {
        self.0.request.{{NameToSnake}} = v.into();
        self
    }
    {{/InputType.ExplicitOneOfs}}
}

impl gax::options::RequestBuilder for {{NameToPascal}} {
    fn request_options(&mut self) -> &mut gax::options::RequestOptions {
        &mut self.0.options
    }
}

{{/Methods}}
{{/Services}}
