{{!
Copyright 2024 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}
// Copyright {{CopyrightYear}} Google LLC
{{#BoilerPlate}}
//{{{.}}}
{{/BoilerPlate}}
{{#HasServices}}

use crate::Result;
{{! Disable warnings about unused imports: sometimes there are no RPCs with query parameters and this goes unused }}
#[allow(unused_imports)]
use gax::error::Error;

{{/HasServices}}
{{#Services}}
/// Implements [{{NameToPascal}}](crate::traits::{{NameToPascal}}) using a [gax::http_client::ReqwestClient].
#[derive(Clone)]
pub struct {{NameToPascal}} {
    inner: gax::http_client::ReqwestClient,
}

impl std::fmt::Debug for {{NameToPascal}} {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        f.debug_struct("{{NameToPascal}}")
            .field("inner", &self.inner)
            .finish()
    }
}

impl {{NameToPascal}} {
    pub async fn new(config: gax::http_client::ClientConfig) -> Result<Self> {
        let inner = gax::http_client::ReqwestClient::new(config, crate::DEFAULT_HOST).await?;
        Ok(Self { inner })
    }
}

impl crate::traits::{{NameToPascal}} for {{NameToPascal}} {
    {{#Methods}}
    async fn {{NameToSnake}}(
        &self,
        req: {{InputTypeName}},
        options: gax::options::RequestOptions,
    ) -> Result<{{OutputTypeName}}> {
        let options = options.set_default_idempotency(reqwest::Method::{{HTTPMethod}}.is_idempotent());
        let builder = self.inner.builder(
            reqwest::Method::{{HTTPMethod}}, format!("{{HTTPPathFmt}}"
               {{#HTTPPathArgs}}
               , {{{.}}}
               {{/HTTPPathArgs}}
            ))
            .query(&[("alt", "json")])
            .header("x-goog-api-client", reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER));
        {{#QueryParams}}
        let builder = gax::query_parameter::add(builder, "{{JSONName}}", {{{AsQueryParameter}}}).map_err(Error::other)?;
        {{/QueryParams}}
        self.inner.execute(
            builder,
            {{#HasBody}}Some(req{{BodyAccessor}}){{/HasBody}}{{^HasBody}}None::<gax::http_client::NoBody>{{/HasBody}},
            options,
        ).await
    }

    {{/Methods}}
}

{{/Services}}
