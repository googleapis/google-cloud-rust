{{!
Copyright 2024 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}
// Copyright {{CopyrightYear}} Google LLC
{{#BoilerPlate}}
//{{{.}}}
{{/BoilerPlate}}
{{#HasServices}}

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

{{! TODO(#742) - remove this workaround once the bug is fixed }}
#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;
{{#HasLROs}}
use std::sync::Arc;
{{/HasLROs}}

pub(crate) mod dynamic;

{{/HasServices}}
{{#Services}}
/// Defines the trait used to implement [crate::client::{{NameToPascal}}].
///
/// Application developers may need to implement this trait to mock
/// `client::{{NameToPascal}}`.  In other use-cases, application developers only
/// use `client::{{NameToPascal}}` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait {{NameToPascal}}: std::fmt::Debug + Send + Sync {
    {{#Methods}}

    /// Implements [crate::client::{{ServiceNameToPascal}}::{{NameToSnake}}].
    fn {{NameToSnake}}(
        &self,
        _req: {{InputTypeName}},
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<{{OutputTypeName}}>> + Send {
        std::future::ready::<crate::Result<{{OutputTypeName}}>>(Err(Error::other("unimplemented")))
    }
    {{/Methods}}
    {{#HasLROs}}

    /// Returns the polling policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        Arc::new(gax::polling_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
    {{/HasLROs}}
}

{{/Services}}
