{{!
Copyright 2024 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}
// Copyright {{CopyrightYear}} Google LLC
{{#BoilerPlate}}
//{{{.}}}
{{/BoilerPlate}}
{{#HasServices}}

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application responds. Such applications should define mocks that
//! implement one of the traits defined in this module, initialize the client
//! with an instance of this mock in their tests, and verify their application
//! responds as expected.

{{! TODO(#742) - remove this workaround once the bug is fixed }}
#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dynamic;

{{/HasServices}}
{{#Services}}
{{#DocLines}}
{{{.}}}
{{/DocLines}}
///
/// # Mocking
///
/// Application developers may use this trait to mock the {{Name}} clients.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation for each method. These implementations return an error.
pub trait {{NameToPascal}}: std::fmt::Debug + Send + Sync {
    {{#Methods}}

    {{#DocLines}}
    {{{.}}}
    {{/DocLines}}
    fn {{NameToSnake}}(
        &self,
        _req: {{InputTypeName}},
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<{{OutputTypeName}}>> + Send {
        std::future::ready::<crate::Result<{{OutputTypeName}}>>(Err(Error::other("unimplemented")))
    }
    {{/Methods}}
    {{#HasLROs}}

    /// Returns the polling policy.
    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_policy::PollingPolicy>;

    /// Returns the polling backoff policy.
    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
    {{/HasLROs}}
}

{{/Services}}
