{{!
Copyright 2024 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}
// Copyright {{CopyrightYear}} Google LLC
{{#BoilerPlate}}
//{{{.}}}
{{/BoilerPlate}}
{{#HasServices}}

use crate::Result;
use std::sync::Arc;
{{/HasServices}}
{{#Services}}

/// An implementation of [crate::traits::{{NameToPascal}}] to make requests with.
///
/// `{{NameToPascal}}` has various configuration parameters, but the defaults
/// are set to work with most applications.
///
/// `{{NameToPascal}}` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `{{NameToPascal}}` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
///
{{#DocLines}}
{{{.}}}
{{/DocLines}}
#[derive(Clone, Debug)]
pub struct {{NameToPascal}} {
    inner: Arc<dyn crate::traits::dyntraits::{{NameToPascal}}>,
}

impl {{NameToPascal}} {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner }) 
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where T: crate::traits::{{NameToPascal}} + 'static {
        Self { inner: Arc::new(stub) }
    }

    async fn build_inner(conf: gax::options::ClientConfig) -> Result<Arc<dyn crate::traits::dyntraits::{{NameToPascal}}>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(conf: gax::options::ClientConfig) -> Result<impl crate::traits::{{NameToPascal}}> {
        crate::transport::{{NameToPascal}}::new(conf).await
    }

    async fn build_with_tracing(conf: gax::options::ClientConfig) -> Result<impl crate::traits::{{NameToPascal}}> {
        Self::build_transport(conf).await.map(crate::tracing::{{NameToPascal}}::new)
    }

    {{#Methods}}
    {{#DocLines}}
    {{{.}}}
    {{/DocLines}}
    {{#OperationInfo}}
    ///
    /// # Long running operations
    ///
    /// Calling `send()` on the resulting builder starts a longrunning operation.
    /// Long running operations run in the background, and the application may
    /// poll them periodically to find out their completion status.
    ///
    /// To poll the operation use the [get_operation] method. Use the [name]
    /// field in the [Operation] returned from [send()]. When the operation
    /// completes successfully, the [result] field will contain a
    /// [{{ResponseType}}]. If the operation completes with an error it will
    /// contain a `Status` with the error information.
    ///
    /// If the operation is still pending, the [metadata] field will contain a
    /// [{{MetadataType}}]. In many services this provides an indication of
    /// progress.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::{{NameToPascal}}::send
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    {{/OperationInfo}}
    pub fn {{NameToSnake}}(
        &self,
        {{#PathParams}}
        {{{NameToSnake}}}: impl Into<{{{PrimitiveFieldType}}}>,
        {{/PathParams}}
    ) -> crate::builders::{{NameToPascal}}
    {
        crate::builders::{{NameToPascal}}::new(self.inner.clone())
        {{#PathParams}}
            .set_{{NameToSnakeNoMangling}} ( {{NameToSnake}}.into() )
        {{/PathParams}}
    }

    {{/Methods}}
}
{{/Services}}
