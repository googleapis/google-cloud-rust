// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package language

import (
	"fmt"
	"strings"

	"github.com/googleapis/google-cloud-rust/generator/internal/api"
	"github.com/googleapis/google-cloud-rust/generator/internal/license"
	"github.com/iancoleman/strcase"
)

type GoTemplateData struct {
	Name              string
	Title             string
	Description       string
	PackageName       string
	SourcePackageName string
	HasServices       bool
	CopyrightYear     string
	BoilerPlate       []string
	Imports           []string
	DefaultHost       string
	Services          []*GoService
	Messages          []*GoMessage
	Enums             []*api.Enum
	GoPackage         string
}

type GoService struct {
	Methods             []*GoMethod
	NameToPascal        string
	ServiceNameToPascal string
	NameToCamel         string
	ServiceName         string
	DocLines            []string
	DefaultHost         string
}

type GoMessage struct {
	Fields             []*api.Field
	BasicFields        []*api.Field
	ExplicitOneOfs     []*api.OneOf
	NestedMessages     []*GoMessage
	Enums              []*api.Enum
	Name               string
	QualifiedName      string
	HasNestedTypes     bool
	DocLines           []string
	IsMap              bool
	IsPageableResponse bool
	PageableItem       *api.Field
	ID                 string
	// The FQN is the source specification
	SourceFQN string
}

type GoMethod struct {
	NameToCamel         string
	NameToPascal        string
	DocLines            []string
	InputTypeName       string
	OutputTypeName      string
	PathInfo            *api.PathInfo
	PathParams          []*api.Field
	QueryParams         []*api.Field
	BodyAccessor        string
	IsPageable          bool
	ServiceNameToPascal string
	ServiceNameToCamel  string
	InputTypeID         string
	InputType           *GoMessage
	OperationInfo       *GoOperationInfo
}

type goPathInfoAnnotation struct {
	Method      string
	PathFmt     string
	PathArgs    []string
	HasPathArgs bool
	HasBody     bool
}

type GoOperationInfo struct {
	MetadataType string
	ResponseType string
}

type goOneOfAnnotation struct {
	NameToPascal string
	DocLines     []string
}

type goFieldAnnotation struct {
	Name             string
	DocLines         []string
	FieldType        string
	AsQueryParameter string
}

type goEnumAnnotation struct {
	Name     string
	DocLines []string
}

type goEnumValueAnnotation struct {
	DocLines []string
	Name     string
	EnumType string
}

// newGoTemplateData creates a struct used as input for Mustache templates.
// Fields and methods defined in this struct directly correspond to Mustache
// tags. For example, the Mustache tag {{#Services}} uses the
// [Template.Services] field.
func newGoTemplateData(model *api.API, options map[string]string) (*GoTemplateData, error) {
	var (
		sourceSpecificationPackageName string
		packageNameOverride            string
		packageName                    string
		generationYear                 string
		importMap                      = map[string]*goImport{}
	)

	for key, definition := range options {
		switch {
		case key == "package-name-override":
			packageNameOverride = definition
		case key == "go-package-name":
			packageName = definition
		case key == "copyright-year":
			generationYear = definition
		case strings.HasPrefix(key, "import-mapping"):
			keys := strings.Split(key, ":")
			if len(keys) != 2 {
				return nil, fmt.Errorf("key should be in the format import-mapping:proto.path, got=%q", key)
			}
			defs := strings.Split(definition, ";")
			if len(defs) != 2 {
				return nil, fmt.Errorf("%s should be in the format path;name, got=%q", definition, keys[1])
			}
			importMap[keys[1]] = &goImport{
				path: defs[0],
				name: defs[1],
			}
		}
	}
	goValidate(model, sourceSpecificationPackageName)

	goLoadWellKnownTypes(model.State)
	for _, e := range model.State.EnumByID {
		goAnnotateEnum(e, model.State, importMap)
	}
	data := &GoTemplateData{
		Name:              model.Name,
		Title:             model.Title,
		Description:       model.Description,
		PackageName:       goPackageName(model, packageNameOverride),
		SourcePackageName: sourceSpecificationPackageName,
		HasServices:       len(model.Services) > 0,
		CopyrightYear:     generationYear,
		BoilerPlate: append(license.LicenseHeaderBulk(),
			"",
			" Code generated by sidekick. DO NOT EDIT."),
		Imports: goImports(importMap),
		DefaultHost: func() string {
			if len(model.Services) > 0 {
				return model.Services[0].DefaultHost
			}
			return ""
		}(),
		Services: mapSlice(model.Services, func(s *api.Service) *GoService {
			return newGoService(s, model.State)
		}),
		Messages: mapSlice(model.Messages, func(m *api.Message) *GoMessage {
			return newGoMessage(m, model.State, importMap)
		}),
		Enums:     model.Enums,
		GoPackage: packageName,
	}

	messagesByID := map[string]*GoMessage{}
	for _, m := range data.Messages {
		messagesByID[m.ID] = m
	}
	for _, s := range data.Services {
		for _, method := range s.Methods {
			if msg, ok := messagesByID[method.InputTypeID]; ok {
				method.InputType = msg
			} else if m, ok := model.State.MessageByID[method.InputTypeID]; ok {
				method.InputType = newGoMessage(m, model.State, importMap)
			}
		}
	}
	return data, nil
}

func newGoService(s *api.Service, state *api.APIState) *GoService {
	// Some codecs skip some methods.
	methods := filterSlice(s.Methods, func(m *api.Method) bool {
		return goGenerateMethod(m)
	})
	return &GoService{
		Methods: mapSlice(methods, func(m *api.Method) *GoMethod {
			return newGoMethod(m, s, state)
		}),
		NameToPascal:        goToPascal(s.Name),
		ServiceNameToPascal: goToPascal(s.Name), // Alias for clarity
		NameToCamel:         strcase.ToLowerCamel(s.Name),
		ServiceName:         s.Name,
		DocLines:            goFormatDocComments(s.Documentation, state),
		DefaultHost:         s.DefaultHost,
	}
}

func newGoMessage(m *api.Message, state *api.APIState, importMap map[string]*goImport) *GoMessage {
	fields := mapSlice(m.Fields, func(s *api.Field) *api.Field {
		return newGoField(s, state, importMap)
	})
	return &GoMessage{
		Fields: fields,
		BasicFields: filterSlice(m.Fields, func(s *api.Field) bool {
			return !s.IsOneOf
		}),
		ExplicitOneOfs: mapSlice(m.OneOfs, func(s *api.OneOf) *api.OneOf {
			s.Codec = &goOneOfAnnotation{
				NameToPascal: goToPascal(s.Name),
				DocLines:     goFormatDocComments(s.Documentation, state),
			}
			return s
		}),
		NestedMessages: mapSlice(m.Messages, func(s *api.Message) *GoMessage {
			return newGoMessage(s, state, importMap)
		}),
		Enums:         m.Enums,
		Name:          goMessageName(m, importMap),
		QualifiedName: goMessageName(m, importMap),
		HasNestedTypes: func() bool {
			if len(m.Enums) > 0 || len(m.OneOfs) > 0 {
				return true
			}
			for _, child := range m.Messages {
				if !child.IsMap {
					return true
				}
			}
			return false
		}(),
		DocLines:           goFormatDocComments(m.Documentation, state),
		IsMap:              m.IsMap,
		IsPageableResponse: m.IsPageableResponse,
		PageableItem:       newGoField(m.PageableItem, state, importMap),
		ID:                 m.ID,
		SourceFQN:          strings.TrimPrefix(m.ID, "."),
	}
}

func newGoMethod(m *api.Method, s *api.Service, state *api.APIState) *GoMethod {
	pathInfoAnnotation := &goPathInfoAnnotation{
		Method:   m.PathInfo.Verb,
		PathFmt:  goHTTPPathFmt(m.PathInfo),
		PathArgs: goHTTPPathArgs(m.PathInfo),
		HasBody:  m.PathInfo.BodyFieldPath != "",
	}
	m.PathInfo.Codec = pathInfoAnnotation
	method := &GoMethod{
		BodyAccessor:        goBodyAccessor(m),
		DocLines:            goFormatDocComments(m.Documentation, state),
		PathInfo:            m.PathInfo,
		InputTypeName:       goMethodInOutTypeName(m.InputTypeID, state),
		NameToCamel:         strcase.ToCamel(m.Name),
		NameToPascal:        goToPascal(m.Name),
		OutputTypeName:      goMethodInOutTypeName(m.OutputTypeID, state),
		PathParams:          PathParams(m, state),
		QueryParams:         QueryParams(m, state),
		IsPageable:          m.IsPageable,
		ServiceNameToPascal: goToPascal(s.Name),
		InputTypeID:         m.InputTypeID,
	}
	if m.OperationInfo != nil {
		method.OperationInfo = &GoOperationInfo{
			MetadataType: goMethodInOutTypeName(m.OperationInfo.MetadataTypeID, state),
			ResponseType: goMethodInOutTypeName(m.OperationInfo.ResponseTypeID, state),
		}
	}
	return method
}

func newGoField(field *api.Field, state *api.APIState, importMap map[string]*goImport) *api.Field {
	if field == nil {
		return nil
	}
	field.Codec = &goFieldAnnotation{
		Name:             goToPascal(field.Name),
		DocLines:         goFormatDocComments(field.Documentation, state),
		FieldType:        goFieldType(field, state, importMap),
		AsQueryParameter: goAsQueryParameter(field),
	}
	return field
}

func goAnnotateEnum(e *api.Enum, state *api.APIState, importMap map[string]*goImport) {
	for _, ev := range e.Values {
		goAnnotateEnumValue(ev, e, state, importMap)
	}
	e.Codec = &goEnumAnnotation{
		Name:     goEnumName(e, importMap),
		DocLines: goFormatDocComments(e.Documentation, state),
	}
}

func goAnnotateEnumValue(ev *api.EnumValue, e *api.Enum, state *api.APIState, importMap map[string]*goImport) {
	ev.Codec = &goEnumValueAnnotation{
		DocLines: goFormatDocComments(ev.Documentation, state),
		Name:     goEnumValueName(ev, importMap),
		EnumType: goEnumName(e, importMap),
	}
}
