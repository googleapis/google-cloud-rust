// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package rust_prost

import (
	"strings"

	"github.com/googleapis/google-cloud-rust/generator/internal/api"
	"github.com/googleapis/google-cloud-rust/generator/internal/config"
	"github.com/googleapis/google-cloud-rust/generator/internal/license"
	"github.com/googleapis/google-cloud-rust/generator/internal/protobuf"
	"github.com/googleapis/google-cloud-rust/generator/internal/rust"
)

type modelAnnotations struct {
	CopyrightYear string
	BoilerPlate   []string
	PackageName   string
	Files         []string
}

type serviceAnnotations struct {
	ID string
}

type methodAnnotations struct {
	ID string
}

func (codec *codec) annotateModel(model *api.API, cfg *config.Config) error {
	googleapisRoot := cfg.Source["googleapis-root"]
	files, err := protobuf.DetermineInputFiles(cfg.General.SpecificationSource, cfg.Source)
	if err != nil {
		return err
	}
	for i, f := range files {
		files[i] = strings.TrimPrefix(f, googleapisRoot+"/")
	}
	annotations := &modelAnnotations{
		CopyrightYear: codec.GenerationYear,
		BoilerPlate: append(license.LicenseHeaderBulk(),
			"",
			" Code generated by sidekick. DO NOT EDIT."),
		PackageName: rust.PackageName(model, codec.PackageName),
		Files:       files,
	}
	for _, s := range model.Services {
		codec.annotateService(s)
	}
	model.Codec = annotations
	return nil
}

func (codec *codec) annotateService(service *api.Service) {
	annotations := &serviceAnnotations{
		ID: strings.TrimPrefix(service.ID, "."),
	}
	for _, method := range service.Methods {
		codec.annotateMethod(method)
	}
	service.Codec = annotations
}

func (codec *codec) annotateMethod(method *api.Method) {
	annotations := &methodAnnotations{
		ID: strings.TrimPrefix(method.ID, "."),
	}
	method.Codec = annotations
}
