{{!
Copyright 2024 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}
// Copyright {{CopyrightYear}} Google LLC
{{#BoilerPlate}}
//{{{.}}}
{{/BoilerPlate}}

/// The messages and enums that are part of this client library.
pub mod model;

{{#HasServices}}
use std::sync::Arc;
use gax::error::{Error, HttpError};

/// A `Result` alias where the `Err` case is an [Error].
pub type Result<T> = std::result::Result<T, Error>;

#[derive(Clone, Debug)]
pub struct Client {
    inner: Arc<ClientRef>,
}

#[derive(Debug)]
struct ClientRef {
    http_client: reqwest::Client,
    token: String,
}

impl Client {
    pub fn new(tok: String) -> Self {
        let client = reqwest::Client::builder().build().unwrap();
        let inner = ClientRef {
            http_client: client,
            token: tok,
        };
        Self {
            inner: Arc::new(inner),
        }
    }
    {{#Services}}

    {{#DocLines}}
    {{{.}}}
    {{/DocLines}}
    pub fn {{NameToSnake}}(&self) -> {{NameToPascal}} {
        {{NameToPascal}} {
            client: self.clone(),
            base_path: "https://{{DefaultHost}}/".to_string(),
        }
    }
    {{/Services}}
}
{{/HasServices}}

{{#Services}}
{{#DocLines}}
{{{.}}}
{{/DocLines}}
#[derive(Debug)]
pub struct {{NameToPascal}} {
    client: Client,
    base_path: String,
}

impl {{NameToPascal}} {
    {{#Methods}}

    {{#DocLines}}
    {{{.}}}
    {{/DocLines}}
    pub async fn {{NameToSnake}}(&self, req: {{InputTypeName}}) -> Result<{{OutputTypeName}}> {
        let client = self.client.inner.clone();
        let builder = client.http_client
            .{{HTTPMethodToLower}}(format!(
               "{}{{HTTPPathFmt}}",
               self.base_path,
               {{#HTTPPathArgs}}
               {{{.}}},
               {{/HTTPPathArgs}}
            ))
            .query(&[("alt", "json")]);
        {{#QueryParams}}
        let builder = gax::query_parameter::add(builder, "{{JSONName}}", {{{AsQueryParameter}}}).map_err(Error::other)?;
        {{/QueryParams}}
        let res = builder
            .bearer_auth(&client.token)
            {{#HasBody}}
            .json(&req{{BodyAccessor}})
            {{/HasBody}}
            .send()
            .await
            .map_err(Error::io)?;
        if !res.status().is_success() {
            let status = res.status().as_u16();
            let headers = gax::error::convert_headers(res.headers());
            let body = res.bytes().await.map_err(Error::io)?;
            return Err(HttpError::new(status, headers, Some(body)).into());
        }
        let response = res.json::<{{OutputTypeName}}>().await.map_err(Error::serde)?;
        Ok(response)
    }
    {{/Methods}}
}
{{/Services}}
