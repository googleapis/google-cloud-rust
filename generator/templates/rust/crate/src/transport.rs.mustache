{{!
Copyright 2024 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}
// Copyright {{CopyrightYear}} Google LLC
{{#BoilerPlate}}
//{{{.}}}
{{/BoilerPlate}}
{{#HasServices}}

use gax::error::{Error, HttpError};
use crate::{Credential, Result};
use std::sync::Arc;

// Shared implementation across clients.
struct InnerClient {
    http_client: reqwest::Client,
    cred: Credential,
    endpoint: String,
}

#[derive(serde::Serialize)]
#[allow(dead_code)]
struct NoBody {}
{{/HasServices}}
{{#Services}}

{{#DocLines}}
{{{.}}}
{{/DocLines}}
#[derive(Clone)]
pub struct {{NameToPascal}} {
    inner: Arc<InnerClient>,
}

impl std::fmt::Debug for {{NameToPascal}} {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        write!(f, "{{NameToPascal}}[{}]", self.inner.endpoint)
    }
}

impl {{NameToPascal}} {
    pub async fn new() -> Result<Self> {
        Self::new_with_config(crate::ConfigBuilder::default()).await
    }

    pub async fn new_with_config(conf: crate::ConfigBuilder) -> Result<Self> {
        let inner = InnerClient {
            http_client: conf.client.unwrap_or(crate::ConfigBuilder::default_client()),
            cred: conf
                .cred
                .unwrap_or(crate::ConfigBuilder::default_credential().await?),
            endpoint: conf.endpoint.unwrap_or(crate::DEFAULT_HOST.to_string()),
        };
        Ok(Self {
            inner: Arc::new(inner),
        })
    }

    async fn fetch_token(&self) -> Result<String> {
        let tok = self
            .inner
            .cred
            .access_token()
            .await
            .map_err(Error::authentication)?;
        Ok(tok.value)
    }

    async fn execute<I: serde::ser::Serialize, O: serde::de::DeserializeOwned>(
        access_token: String,
        mut builder: reqwest::RequestBuilder,
        body: Option<I>,
    ) -> Result<O> {
        builder = builder.bearer_auth(access_token);
        if let Some(body) = body {
            builder = builder.json(&body);
        }
        let resp = builder.send().await.map_err(Error::io)?;
        if !resp.status().is_success() {
            let status = resp.status().as_u16();
            let headers = gax::error::convert_headers(resp.headers());
            let body = resp.bytes().await.map_err(Error::io)?;
            return Err(HttpError::new(status, headers, Some(body)).into());
        }
        let response = resp.json::<O>().await.map_err(Error::serde)?;
        Ok(response)
    }
}

impl crate::client::{{NameToPascal}} for {{NameToPascal}} {
    {{#Methods}}
    {{#DocLines}}
    {{{.}}}
    {{/DocLines}}
    async fn {{NameToSnake}}(&self, req: {{InputTypeName}}) -> Result<{{OutputTypeName}}> {
        let inner_client = self.inner.clone();
        let builder = inner_client.http_client
            .{{HTTPMethodToLower}}(format!(
               "{}{{HTTPPathFmt}}",
               inner_client.endpoint,
               {{#HTTPPathArgs}}
               {{{.}}},
               {{/HTTPPathArgs}}
            ))
            .query(&[("alt", "json")]);
        {{#QueryParams}}
        let builder = gax::query_parameter::add(builder, "{{JSONName}}", {{{AsQueryParameter}}}).map_err(Error::other)?;
        {{/QueryParams}}
        let access_token = self.fetch_token().await?;
        Self::execute(access_token, builder, {{#HasBody}}Some(req{{BodyAccessor}}){{/HasBody}}{{^HasBody}}None::<NoBody>{{/HasBody}}).await
    }

    {{/Methods}}
}

{{/Services}}
