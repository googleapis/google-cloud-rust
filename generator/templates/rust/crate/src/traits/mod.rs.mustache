{{!
Copyright 2024 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}
// Copyright {{CopyrightYear}} Google LLC
{{#BoilerPlate}}
//{{{.}}}
{{/BoilerPlate}}
{{#HasServices}}

use gax::error::Error;

 {{! TODO(#370) - enable the warning once the new structure is fully in place }}
 #[allow(dead_code)]
pub(crate) mod dyntraits;

{{/HasServices}}
{{#Services}}
{{#DocLines}}
{{{.}}}
{{/DocLines}}
///
/// # Notes
///
/// Application developers may use this trait to mock the {{Name}} clients.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation for each method. These implementations return an error.
pub trait {{NameToPascal}}: Send + Sync {
    {{#Methods}}

    {{#DocLines}}
    {{{.}}}
    {{/DocLines}}
    fn {{NameToSnake}}(
        &self,
        _req: {{InputTypeName}},
    ) -> impl std::future::Future<Output = crate::Result<{{OutputTypeName}}>> + Send {
        std::future::ready::<crate::Result<{{OutputTypeName}}>>(Err(Error::other("unimplemented")))
    }
    {{/Methods}}
}

{{/Services}}
