{{!
Copyright 2024 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}
{{! TODO(#120) - re-enable dead_code warnings once OpenAPI generates some functions }}
#![allow(dead_code)]

use std::sync::Arc;

pub mod model;

#[derive(Clone, Debug)]
pub struct Client {
    inner: Arc<ClientRef>,
}

#[derive(Debug)]
struct ClientRef {
    http_client: reqwest::Client,
    token: String,
}

impl Client {
    pub fn new(tok: String) -> Self {
        let client = reqwest::Client::builder().build().unwrap();
        let inner = ClientRef {
            http_client: client,
            token: tok,
        };
        Self {
            inner: Arc::new(inner),
        }
    }
    {{#Services}}

    {{#DocLines}}
    {{{.}}}
    {{/DocLines}}
    pub fn {{NameToSnake}}(&self) -> {{NameToPascal}} {
        {{NameToPascal}} {
            client: self.clone(),
            base_path: "https://{{DefaultHost}}/".to_string(),
        }
    }
    {{/Services}}
}

{{#Services}}
{{#DocLines}}
{{{.}}}
{{/DocLines}}
#[derive(Debug)]
pub struct {{NameToPascal}} {
    client: Client,
    base_path: String,
}

impl {{NameToPascal}} {
    {{#Methods}}

    {{#DocLines}}
    {{{.}}}
    {{/DocLines}}
    pub async fn {{NameToSnake}}(&self, req: {{InputTypeName}}) -> Result<{{OutputTypeName}}, Box<dyn std::error::Error>> {
        let query_parameters = [
                    {{^QueryParams}}
                    None::<(&str, String)>; 0
                    {{/QueryParams}}
                    {{#QueryParams}}
                    gax::query_parameter::format("{{Key}}", &req.{{Value}})?,
                    {{/QueryParams}}
        ];
        let client = self.client.inner.clone();
        let res = client.http_client
            .{{HTTPMethodToLower}}(format!(
               "{}{{HTTPPathFmt}}",
               self.base_path,
               {{#HTTPPathArgs}}
               {{{.}}},
               {{/HTTPPathArgs}}
            ))
            .query(&[("alt", "json")])
            .query(
                &query_parameters
                    .into_iter()
                    .flatten()
                    .collect::<Vec<(&str, String)>>()
            )
            .bearer_auth(&client.token)
            {{#HasBody}}
            .json(&req{{BodyAccessor}})
            {{/HasBody}}
            .send().await?;
        if !res.status().is_success() {
            return Err("sorry the api you are looking for is not available, please try again".into());
        }
        let response = res.json::<{{OutputTypeName}}>().await?;
        Ok(response)
    }
    {{/Methods}}
}
{{/Services}}
