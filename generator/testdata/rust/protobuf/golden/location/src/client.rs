// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Cloud Metadata API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use location_golden_protobuf::client::Locations;
/// let client = Locations::builder().build().await?;
/// // use `client` to make requests to the {Codec.APITitle}}.
/// # gax::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// An abstract interface that provides location-related information for
/// a service. Service-specific metadata is provided through the
/// [Location.metadata][google.cloud.location.Location.metadata] field.
///
/// [google.cloud.location.Location.metadata]: crate::model::Location::metadata
///
/// # Configuration
///
/// To configure `Locations` use the `with_*` methods in the type returned
/// by [builder()][Locations::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://cloud.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::locations::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::locations::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `Locations` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Locations` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Locations {
    inner: Arc<dyn super::stub::dynamic::Locations>,
}

impl Locations {
    /// Returns a builder for [Locations].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use location_golden_protobuf::client::Locations;
    /// let client = Locations::builder().build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::locations::ClientBuilder {
        gax::client_builder::internal::new_builder(super::builder::locations::client::Factory)
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where T: super::stub::Locations + 'static {
        Self { inner: Arc::new(stub) }
    }

    pub(crate) async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(conf: gaxi::options::ClientConfig) -> Result<Arc<dyn super::stub::dynamic::Locations>> {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(conf: gaxi::options::ClientConfig) -> Result<impl super::stub::Locations> {
        super::transport::Locations::new(conf).await
    }

    async fn build_with_tracing(conf: gaxi::options::ClientConfig) -> Result<impl super::stub::Locations> {
        Self::build_transport(conf).await.map(super::tracing::Locations::new)
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::locations::ListLocations
    {
        super::builder::locations::ListLocations::new(self.inner.clone())
            .set_name ( name.into() )
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::locations::GetLocation
    {
        super::builder::locations::GetLocation::new(self.inner.clone())
            .set_name ( name.into() )
    }
}
