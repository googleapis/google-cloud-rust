// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use crate::Result;
use std::sync::Arc;

/// Common implementation for [crate::client::SecretManagerService] request builders.
#[derive(Clone, Debug)]
pub struct SecretManagerServiceRequestBuilder<R: std::default::Default> {
    stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>,
    request: R,
    options: gax::options::RequestOptions,
}

impl<R> SecretManagerServiceRequestBuilder<R>
where R: std::default::Default {
    pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
        Self {
            stub,
            request: R::default(),
            options: gax::options::RequestOptions::default(),
        }
    }
}

/// The request builder for a SecretManagerService::list_secrets call.
#[derive(Clone, Debug)]
pub struct ListSecrets(SecretManagerServiceRequestBuilder<crate::model::ListSecretsRequest>);

impl ListSecrets {
    pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
        Self(
            SecretManagerServiceRequestBuilder::new(stub)
        )
    }

    /// Set the full request.
    pub fn with_request<V: Into<crate::model::ListSecretsRequest>>(mut self, v: V) -> Self {
        self.0.request = v.into();
        self
    }

    /// Sends the request.
    pub async fn send(self) -> Result<crate::model::ListSecretsResponse> {
        self.0.stub.list_secrets(self.0.request, self.0.options).await
    }

    /// Streams the responses back.
    #[cfg(feature = "unstable-stream")]
    pub async fn stream(self) -> gax::paginator::Paginator<crate::model::ListSecretsResponse, gax::error::Error> {
        let token = gax::paginator::extract_token(&self.0.request.page_token);
        let execute = move |token: String| {
            let builder = self.clone();
            builder.0.request.clone().set_page_token(token);
            builder.send()
        };
        gax::paginator::Paginator::new(token, execute)
    }

    /// Sets the value of `parent`.
    pub fn set_parent<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.parent = v.into();
        self
    }

    /// Sets the value of `page_size`.
    pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
        self.0.request.page_size = v.into();
        self
    }

    /// Sets the value of `page_token`.
    pub fn set_page_token<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.page_token = v.into();
        self
    }

    /// Sets the value of `filter`.
    pub fn set_filter<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.filter = v.into();
        self
    }
}

impl gax::options::RequestBuilder for ListSecrets {
    fn request_options(&mut self) -> &mut gax::options::RequestOptions {
        &mut self.0.options
    }
}

/// The request builder for a SecretManagerService::create_secret call.
#[derive(Clone, Debug)]
pub struct CreateSecret(SecretManagerServiceRequestBuilder<crate::model::CreateSecretRequest>);

impl CreateSecret {
    pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
        Self(
            SecretManagerServiceRequestBuilder::new(stub)
        )
    }

    /// Set the full request.
    pub fn with_request<V: Into<crate::model::CreateSecretRequest>>(mut self, v: V) -> Self {
        self.0.request = v.into();
        self
    }

    /// Sends the request.
    pub async fn send(self) -> Result<crate::model::Secret> {
        self.0.stub.create_secret(self.0.request, self.0.options).await
    }

    /// Sets the value of `parent`.
    pub fn set_parent<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.parent = v.into();
        self
    }

    /// Sets the value of `secret_id`.
    pub fn set_secret_id<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.secret_id = v.into();
        self
    }

    /// Sets the value of `secret`.
    pub fn set_secret<T: Into<Option<crate::model::Secret>>>(mut self, v: T) -> Self {
        self.0.request.secret = v.into();
        self
    }
}

impl gax::options::RequestBuilder for CreateSecret {
    fn request_options(&mut self) -> &mut gax::options::RequestOptions {
        &mut self.0.options
    }
}

/// The request builder for a SecretManagerService::add_secret_version call.
#[derive(Clone, Debug)]
pub struct AddSecretVersion(SecretManagerServiceRequestBuilder<crate::model::AddSecretVersionRequest>);

impl AddSecretVersion {
    pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
        Self(
            SecretManagerServiceRequestBuilder::new(stub)
        )
    }

    /// Set the full request.
    pub fn with_request<V: Into<crate::model::AddSecretVersionRequest>>(mut self, v: V) -> Self {
        self.0.request = v.into();
        self
    }

    /// Sends the request.
    pub async fn send(self) -> Result<crate::model::SecretVersion> {
        self.0.stub.add_secret_version(self.0.request, self.0.options).await
    }

    /// Sets the value of `parent`.
    pub fn set_parent<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.parent = v.into();
        self
    }

    /// Sets the value of `payload`.
    pub fn set_payload<T: Into<Option<crate::model::SecretPayload>>>(mut self, v: T) -> Self {
        self.0.request.payload = v.into();
        self
    }
}

impl gax::options::RequestBuilder for AddSecretVersion {
    fn request_options(&mut self) -> &mut gax::options::RequestOptions {
        &mut self.0.options
    }
}

/// The request builder for a SecretManagerService::get_secret call.
#[derive(Clone, Debug)]
pub struct GetSecret(SecretManagerServiceRequestBuilder<crate::model::GetSecretRequest>);

impl GetSecret {
    pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
        Self(
            SecretManagerServiceRequestBuilder::new(stub)
        )
    }

    /// Set the full request.
    pub fn with_request<V: Into<crate::model::GetSecretRequest>>(mut self, v: V) -> Self {
        self.0.request = v.into();
        self
    }

    /// Sends the request.
    pub async fn send(self) -> Result<crate::model::Secret> {
        self.0.stub.get_secret(self.0.request, self.0.options).await
    }

    /// Sets the value of `name`.
    pub fn set_name<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.name = v.into();
        self
    }
}

impl gax::options::RequestBuilder for GetSecret {
    fn request_options(&mut self) -> &mut gax::options::RequestOptions {
        &mut self.0.options
    }
}

/// The request builder for a SecretManagerService::update_secret call.
#[derive(Clone, Debug)]
pub struct UpdateSecret(SecretManagerServiceRequestBuilder<crate::model::UpdateSecretRequest>);

impl UpdateSecret {
    pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
        Self(
            SecretManagerServiceRequestBuilder::new(stub)
        )
    }

    /// Set the full request.
    pub fn with_request<V: Into<crate::model::UpdateSecretRequest>>(mut self, v: V) -> Self {
        self.0.request = v.into();
        self
    }

    /// Sends the request.
    pub async fn send(self) -> Result<crate::model::Secret> {
        self.0.stub.update_secret(self.0.request, self.0.options).await
    }

    /// Sets the value of `secret`.
    pub fn set_secret<T: Into<Option<crate::model::Secret>>>(mut self, v: T) -> Self {
        self.0.request.secret = v.into();
        self
    }

    /// Sets the value of `update_mask`.
    pub fn set_update_mask<T: Into<Option<wkt::FieldMask>>>(mut self, v: T) -> Self {
        self.0.request.update_mask = v.into();
        self
    }
}

impl gax::options::RequestBuilder for UpdateSecret {
    fn request_options(&mut self) -> &mut gax::options::RequestOptions {
        &mut self.0.options
    }
}

/// The request builder for a SecretManagerService::delete_secret call.
#[derive(Clone, Debug)]
pub struct DeleteSecret(SecretManagerServiceRequestBuilder<crate::model::DeleteSecretRequest>);

impl DeleteSecret {
    pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
        Self(
            SecretManagerServiceRequestBuilder::new(stub)
        )
    }

    /// Set the full request.
    pub fn with_request<V: Into<crate::model::DeleteSecretRequest>>(mut self, v: V) -> Self {
        self.0.request = v.into();
        self
    }

    /// Sends the request.
    pub async fn send(self) -> Result<wkt::Empty> {
        self.0.stub.delete_secret(self.0.request, self.0.options).await
    }

    /// Sets the value of `name`.
    pub fn set_name<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.name = v.into();
        self
    }

    /// Sets the value of `etag`.
    pub fn set_etag<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.etag = v.into();
        self
    }
}

impl gax::options::RequestBuilder for DeleteSecret {
    fn request_options(&mut self) -> &mut gax::options::RequestOptions {
        &mut self.0.options
    }
}

/// The request builder for a SecretManagerService::list_secret_versions call.
#[derive(Clone, Debug)]
pub struct ListSecretVersions(SecretManagerServiceRequestBuilder<crate::model::ListSecretVersionsRequest>);

impl ListSecretVersions {
    pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
        Self(
            SecretManagerServiceRequestBuilder::new(stub)
        )
    }

    /// Set the full request.
    pub fn with_request<V: Into<crate::model::ListSecretVersionsRequest>>(mut self, v: V) -> Self {
        self.0.request = v.into();
        self
    }

    /// Sends the request.
    pub async fn send(self) -> Result<crate::model::ListSecretVersionsResponse> {
        self.0.stub.list_secret_versions(self.0.request, self.0.options).await
    }

    /// Streams the responses back.
    #[cfg(feature = "unstable-stream")]
    pub async fn stream(self) -> gax::paginator::Paginator<crate::model::ListSecretVersionsResponse, gax::error::Error> {
        let token = gax::paginator::extract_token(&self.0.request.page_token);
        let execute = move |token: String| {
            let builder = self.clone();
            builder.0.request.clone().set_page_token(token);
            builder.send()
        };
        gax::paginator::Paginator::new(token, execute)
    }

    /// Sets the value of `parent`.
    pub fn set_parent<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.parent = v.into();
        self
    }

    /// Sets the value of `page_size`.
    pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
        self.0.request.page_size = v.into();
        self
    }

    /// Sets the value of `page_token`.
    pub fn set_page_token<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.page_token = v.into();
        self
    }

    /// Sets the value of `filter`.
    pub fn set_filter<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.filter = v.into();
        self
    }
}

impl gax::options::RequestBuilder for ListSecretVersions {
    fn request_options(&mut self) -> &mut gax::options::RequestOptions {
        &mut self.0.options
    }
}

/// The request builder for a SecretManagerService::get_secret_version call.
#[derive(Clone, Debug)]
pub struct GetSecretVersion(SecretManagerServiceRequestBuilder<crate::model::GetSecretVersionRequest>);

impl GetSecretVersion {
    pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
        Self(
            SecretManagerServiceRequestBuilder::new(stub)
        )
    }

    /// Set the full request.
    pub fn with_request<V: Into<crate::model::GetSecretVersionRequest>>(mut self, v: V) -> Self {
        self.0.request = v.into();
        self
    }

    /// Sends the request.
    pub async fn send(self) -> Result<crate::model::SecretVersion> {
        self.0.stub.get_secret_version(self.0.request, self.0.options).await
    }

    /// Sets the value of `name`.
    pub fn set_name<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.name = v.into();
        self
    }
}

impl gax::options::RequestBuilder for GetSecretVersion {
    fn request_options(&mut self) -> &mut gax::options::RequestOptions {
        &mut self.0.options
    }
}

/// The request builder for a SecretManagerService::access_secret_version call.
#[derive(Clone, Debug)]
pub struct AccessSecretVersion(SecretManagerServiceRequestBuilder<crate::model::AccessSecretVersionRequest>);

impl AccessSecretVersion {
    pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
        Self(
            SecretManagerServiceRequestBuilder::new(stub)
        )
    }

    /// Set the full request.
    pub fn with_request<V: Into<crate::model::AccessSecretVersionRequest>>(mut self, v: V) -> Self {
        self.0.request = v.into();
        self
    }

    /// Sends the request.
    pub async fn send(self) -> Result<crate::model::AccessSecretVersionResponse> {
        self.0.stub.access_secret_version(self.0.request, self.0.options).await
    }

    /// Sets the value of `name`.
    pub fn set_name<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.name = v.into();
        self
    }
}

impl gax::options::RequestBuilder for AccessSecretVersion {
    fn request_options(&mut self) -> &mut gax::options::RequestOptions {
        &mut self.0.options
    }
}

/// The request builder for a SecretManagerService::disable_secret_version call.
#[derive(Clone, Debug)]
pub struct DisableSecretVersion(SecretManagerServiceRequestBuilder<crate::model::DisableSecretVersionRequest>);

impl DisableSecretVersion {
    pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
        Self(
            SecretManagerServiceRequestBuilder::new(stub)
        )
    }

    /// Set the full request.
    pub fn with_request<V: Into<crate::model::DisableSecretVersionRequest>>(mut self, v: V) -> Self {
        self.0.request = v.into();
        self
    }

    /// Sends the request.
    pub async fn send(self) -> Result<crate::model::SecretVersion> {
        self.0.stub.disable_secret_version(self.0.request, self.0.options).await
    }

    /// Sets the value of `name`.
    pub fn set_name<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.name = v.into();
        self
    }

    /// Sets the value of `etag`.
    pub fn set_etag<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.etag = v.into();
        self
    }
}

impl gax::options::RequestBuilder for DisableSecretVersion {
    fn request_options(&mut self) -> &mut gax::options::RequestOptions {
        &mut self.0.options
    }
}

/// The request builder for a SecretManagerService::enable_secret_version call.
#[derive(Clone, Debug)]
pub struct EnableSecretVersion(SecretManagerServiceRequestBuilder<crate::model::EnableSecretVersionRequest>);

impl EnableSecretVersion {
    pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
        Self(
            SecretManagerServiceRequestBuilder::new(stub)
        )
    }

    /// Set the full request.
    pub fn with_request<V: Into<crate::model::EnableSecretVersionRequest>>(mut self, v: V) -> Self {
        self.0.request = v.into();
        self
    }

    /// Sends the request.
    pub async fn send(self) -> Result<crate::model::SecretVersion> {
        self.0.stub.enable_secret_version(self.0.request, self.0.options).await
    }

    /// Sets the value of `name`.
    pub fn set_name<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.name = v.into();
        self
    }

    /// Sets the value of `etag`.
    pub fn set_etag<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.etag = v.into();
        self
    }
}

impl gax::options::RequestBuilder for EnableSecretVersion {
    fn request_options(&mut self) -> &mut gax::options::RequestOptions {
        &mut self.0.options
    }
}

/// The request builder for a SecretManagerService::destroy_secret_version call.
#[derive(Clone, Debug)]
pub struct DestroySecretVersion(SecretManagerServiceRequestBuilder<crate::model::DestroySecretVersionRequest>);

impl DestroySecretVersion {
    pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
        Self(
            SecretManagerServiceRequestBuilder::new(stub)
        )
    }

    /// Set the full request.
    pub fn with_request<V: Into<crate::model::DestroySecretVersionRequest>>(mut self, v: V) -> Self {
        self.0.request = v.into();
        self
    }

    /// Sends the request.
    pub async fn send(self) -> Result<crate::model::SecretVersion> {
        self.0.stub.destroy_secret_version(self.0.request, self.0.options).await
    }

    /// Sets the value of `name`.
    pub fn set_name<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.name = v.into();
        self
    }

    /// Sets the value of `etag`.
    pub fn set_etag<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.etag = v.into();
        self
    }
}

impl gax::options::RequestBuilder for DestroySecretVersion {
    fn request_options(&mut self) -> &mut gax::options::RequestOptions {
        &mut self.0.options
    }
}

/// The request builder for a SecretManagerService::set_iam_policy call.
#[derive(Clone, Debug)]
pub struct SetIamPolicy(SecretManagerServiceRequestBuilder<iam::model::SetIamPolicyRequest>);

impl SetIamPolicy {
    pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
        Self(
            SecretManagerServiceRequestBuilder::new(stub)
        )
    }

    /// Set the full request.
    pub fn with_request<V: Into<iam::model::SetIamPolicyRequest>>(mut self, v: V) -> Self {
        self.0.request = v.into();
        self
    }

    /// Sends the request.
    pub async fn send(self) -> Result<iam::model::Policy> {
        self.0.stub.set_iam_policy(self.0.request, self.0.options).await
    }

    /// Sets the value of `resource`.
    pub fn set_resource<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.resource = v.into();
        self
    }

    /// Sets the value of `policy`.
    pub fn set_policy<T: Into<Option<iam::model::Policy>>>(mut self, v: T) -> Self {
        self.0.request.policy = v.into();
        self
    }

    /// Sets the value of `update_mask`.
    pub fn set_update_mask<T: Into<Option<wkt::FieldMask>>>(mut self, v: T) -> Self {
        self.0.request.update_mask = v.into();
        self
    }
}

impl gax::options::RequestBuilder for SetIamPolicy {
    fn request_options(&mut self) -> &mut gax::options::RequestOptions {
        &mut self.0.options
    }
}

/// The request builder for a SecretManagerService::get_iam_policy call.
#[derive(Clone, Debug)]
pub struct GetIamPolicy(SecretManagerServiceRequestBuilder<iam::model::GetIamPolicyRequest>);

impl GetIamPolicy {
    pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
        Self(
            SecretManagerServiceRequestBuilder::new(stub)
        )
    }

    /// Set the full request.
    pub fn with_request<V: Into<iam::model::GetIamPolicyRequest>>(mut self, v: V) -> Self {
        self.0.request = v.into();
        self
    }

    /// Sends the request.
    pub async fn send(self) -> Result<iam::model::Policy> {
        self.0.stub.get_iam_policy(self.0.request, self.0.options).await
    }

    /// Sets the value of `resource`.
    pub fn set_resource<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.resource = v.into();
        self
    }

    /// Sets the value of `options`.
    pub fn set_options<T: Into<Option<iam::model::GetPolicyOptions>>>(mut self, v: T) -> Self {
        self.0.request.options = v.into();
        self
    }
}

impl gax::options::RequestBuilder for GetIamPolicy {
    fn request_options(&mut self) -> &mut gax::options::RequestOptions {
        &mut self.0.options
    }
}

/// The request builder for a SecretManagerService::test_iam_permissions call.
#[derive(Clone, Debug)]
pub struct TestIamPermissions(SecretManagerServiceRequestBuilder<iam::model::TestIamPermissionsRequest>);

impl TestIamPermissions {
    pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
        Self(
            SecretManagerServiceRequestBuilder::new(stub)
        )
    }

    /// Set the full request.
    pub fn with_request<V: Into<iam::model::TestIamPermissionsRequest>>(mut self, v: V) -> Self {
        self.0.request = v.into();
        self
    }

    /// Sends the request.
    pub async fn send(self) -> Result<iam::model::TestIamPermissionsResponse> {
        self.0.stub.test_iam_permissions(self.0.request, self.0.options).await
    }

    /// Sets the value of `resource`.
    pub fn set_resource<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.resource = v.into();
        self
    }

    /// Sets the value of `permissions`.
    pub fn set_permissions<T: Into<Vec<String>>>(mut self, v: T) -> Self {
        self.0.request.permissions = v.into();
        self
    }
}

impl gax::options::RequestBuilder for TestIamPermissions {
    fn request_options(&mut self) -> &mut gax::options::RequestOptions {
        &mut self.0.options
    }
}

/// The request builder for a SecretManagerService::list_locations call.
#[derive(Clone, Debug)]
pub struct ListLocations(SecretManagerServiceRequestBuilder<location::model::ListLocationsRequest>);

impl ListLocations {
    pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
        Self(
            SecretManagerServiceRequestBuilder::new(stub)
        )
    }

    /// Set the full request.
    pub fn with_request<V: Into<location::model::ListLocationsRequest>>(mut self, v: V) -> Self {
        self.0.request = v.into();
        self
    }

    /// Sends the request.
    pub async fn send(self) -> Result<location::model::ListLocationsResponse> {
        self.0.stub.list_locations(self.0.request, self.0.options).await
    }

    /// Streams the responses back.
    #[cfg(feature = "unstable-stream")]
    pub async fn stream(self) -> gax::paginator::Paginator<location::model::ListLocationsResponse, gax::error::Error> {
        let token = gax::paginator::extract_token(&self.0.request.page_token);
        let execute = move |token: String| {
            let builder = self.clone();
            builder.0.request.clone().set_page_token(token);
            builder.send()
        };
        gax::paginator::Paginator::new(token, execute)
    }

    /// Sets the value of `name`.
    pub fn set_name<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.name = v.into();
        self
    }

    /// Sets the value of `filter`.
    pub fn set_filter<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.filter = v.into();
        self
    }

    /// Sets the value of `page_size`.
    pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
        self.0.request.page_size = v.into();
        self
    }

    /// Sets the value of `page_token`.
    pub fn set_page_token<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.page_token = v.into();
        self
    }
}

impl gax::options::RequestBuilder for ListLocations {
    fn request_options(&mut self) -> &mut gax::options::RequestOptions {
        &mut self.0.options
    }
}

/// The request builder for a SecretManagerService::get_location call.
#[derive(Clone, Debug)]
pub struct GetLocation(SecretManagerServiceRequestBuilder<location::model::GetLocationRequest>);

impl GetLocation {
    pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
        Self(
            SecretManagerServiceRequestBuilder::new(stub)
        )
    }

    /// Set the full request.
    pub fn with_request<V: Into<location::model::GetLocationRequest>>(mut self, v: V) -> Self {
        self.0.request = v.into();
        self
    }

    /// Sends the request.
    pub async fn send(self) -> Result<location::model::Location> {
        self.0.stub.get_location(self.0.request, self.0.options).await
    }

    /// Sets the value of `name`.
    pub fn set_name<T: Into<String>>(mut self, v: T) -> Self {
        self.0.request.name = v.into();
        self
    }
}

impl gax::options::RequestBuilder for GetLocation {
    fn request_options(&mut self) -> &mut gax::options::RequestOptions {
        &mut self.0.options
    }
}

