// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

pub mod secret_manager_service {
    use crate::Result;
    use std::sync::Arc;

    /// Common implementation for [crate::client::SecretManagerService] request builders.
    #[derive(Clone, Debug)]
    pub struct RequestBuilder<R: std::default::Default> {
        stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>,
        request: R,
        options: gax::options::RequestOptions,
    }

    impl<R> RequestBuilder<R>
    where R: std::default::Default {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self {
                stub,
                request: R::default(),
                options: gax::options::RequestOptions::default(),
            }
        }
    }

    /// The request builder for a SecretManagerService::list_locations call.
    #[derive(Clone, Debug)]
    pub struct ListLocations(RequestBuilder<crate::model::ListLocationsRequest>);

    impl ListLocations {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListLocationsRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListLocationsResponse> {
            (*self.0.stub).list_locations(self.0.request, self.0.options).await
        }

        /// Streams the responses back.
        #[cfg(feature = "unstable-stream")]
        pub async fn stream(self) -> gax::paginator::Paginator<crate::model::ListLocationsResponse, gax::error::Error> {
            let token = gax::paginator::extract_token(&self.0.request.page_token);
            let execute = move |token: String| {
                let builder = self.clone();
                builder.0.request.clone().set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `filter`.
        pub fn set_filter<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.filter = v.into();
            self
        }

        /// Sets the value of `page_size`.
        pub fn set_page_size<T: Into<std::option::Option<i32>>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of `page_token`.
        pub fn set_page_token<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ListLocations {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::get_location call.
    #[derive(Clone, Debug)]
    pub struct GetLocation(RequestBuilder<crate::model::GetLocationRequest>);

    impl GetLocation {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetLocationRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Location> {
            (*self.0.stub).get_location(self.0.request, self.0.options).await
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `location`.
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetLocation {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::list_secrets call.
    #[derive(Clone, Debug)]
    pub struct ListSecrets(RequestBuilder<crate::model::ListSecretsRequest>);

    impl ListSecrets {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListSecretsRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListSecretsResponse> {
            (*self.0.stub).list_secrets(self.0.request, self.0.options).await
        }

        /// Streams the responses back.
        #[cfg(feature = "unstable-stream")]
        pub async fn stream(self) -> gax::paginator::Paginator<crate::model::ListSecretsResponse, gax::error::Error> {
            let token = gax::paginator::extract_token(&self.0.request.page_token);
            let execute = move |token: String| {
                let builder = self.clone();
                builder.0.request.clone().set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `page_size`.
        pub fn set_page_size<T: Into<std::option::Option<i32>>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of `page_token`.
        pub fn set_page_token<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }

        /// Sets the value of `filter`.
        pub fn set_filter<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.filter = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ListSecrets {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::create_secret call.
    #[derive(Clone, Debug)]
    pub struct CreateSecret(RequestBuilder<crate::model::CreateSecretRequest>);

    impl CreateSecret {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CreateSecretRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Secret> {
            (*self.0.stub).create_secret(self.0.request, self.0.options).await
        }

        /// Sets the value of `request_body`.
        pub fn set_request_body<T: Into<std::option::Option<crate::model::Secret>>>(mut self, v: T) -> Self {
            self.0.request.request_body = v.into();
            self
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `secret_id`.
        pub fn set_secret_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret_id = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for CreateSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::list_secrets_by_project_and_location call.
    #[derive(Clone, Debug)]
    pub struct ListSecretsByProjectAndLocation(RequestBuilder<crate::model::ListSecretsByProjectAndLocationRequest>);

    impl ListSecretsByProjectAndLocation {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListSecretsByProjectAndLocationRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListSecretsResponse> {
            (*self.0.stub).list_secrets_by_project_and_location(self.0.request, self.0.options).await
        }

        /// Streams the responses back.
        #[cfg(feature = "unstable-stream")]
        pub async fn stream(self) -> gax::paginator::Paginator<crate::model::ListSecretsResponse, gax::error::Error> {
            let token = gax::paginator::extract_token(&self.0.request.page_token);
            let execute = move |token: String| {
                let builder = self.clone();
                builder.0.request.clone().set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `location`.
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }

        /// Sets the value of `page_size`.
        pub fn set_page_size<T: Into<std::option::Option<i32>>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of `page_token`.
        pub fn set_page_token<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }

        /// Sets the value of `filter`.
        pub fn set_filter<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.filter = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ListSecretsByProjectAndLocation {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::create_secret_by_project_and_location call.
    #[derive(Clone, Debug)]
    pub struct CreateSecretByProjectAndLocation(RequestBuilder<crate::model::CreateSecretByProjectAndLocationRequest>);

    impl CreateSecretByProjectAndLocation {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CreateSecretByProjectAndLocationRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Secret> {
            (*self.0.stub).create_secret_by_project_and_location(self.0.request, self.0.options).await
        }

        /// Sets the value of `request_body`.
        pub fn set_request_body<T: Into<std::option::Option<crate::model::Secret>>>(mut self, v: T) -> Self {
            self.0.request.request_body = v.into();
            self
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `location`.
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }

        /// Sets the value of `secret_id`.
        pub fn set_secret_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret_id = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for CreateSecretByProjectAndLocation {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::add_secret_version call.
    #[derive(Clone, Debug)]
    pub struct AddSecretVersion(RequestBuilder<crate::model::AddSecretVersionRequest>);

    impl AddSecretVersion {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::AddSecretVersionRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SecretVersion> {
            (*self.0.stub).add_secret_version(self.0.request, self.0.options).await
        }

        /// Sets the value of `payload`.
        pub fn set_payload<T: Into<std::option::Option<crate::model::SecretPayload>>>(mut self, v: T) -> Self {
            self.0.request.payload = v.into();
            self
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of `location`.
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for AddSecretVersion {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::add_secret_version_by_project_and_location_and_secret call.
    #[derive(Clone, Debug)]
    pub struct AddSecretVersionByProjectAndLocationAndSecret(RequestBuilder<crate::model::AddSecretVersionRequest>);

    impl AddSecretVersionByProjectAndLocationAndSecret {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::AddSecretVersionRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SecretVersion> {
            (*self.0.stub).add_secret_version_by_project_and_location_and_secret(self.0.request, self.0.options).await
        }

        /// Sets the value of `payload`.
        pub fn set_payload<T: Into<std::option::Option<crate::model::SecretPayload>>>(mut self, v: T) -> Self {
            self.0.request.payload = v.into();
            self
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of `location`.
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for AddSecretVersionByProjectAndLocationAndSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::get_secret call.
    #[derive(Clone, Debug)]
    pub struct GetSecret(RequestBuilder<crate::model::GetSecretRequest>);

    impl GetSecret {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetSecretRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Secret> {
            (*self.0.stub).get_secret(self.0.request, self.0.options).await
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::delete_secret call.
    #[derive(Clone, Debug)]
    pub struct DeleteSecret(RequestBuilder<crate::model::DeleteSecretRequest>);

    impl DeleteSecret {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DeleteSecretRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Empty> {
            (*self.0.stub).delete_secret(self.0.request, self.0.options).await
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of `etag`.
        pub fn set_etag<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.etag = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for DeleteSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::update_secret call.
    #[derive(Clone, Debug)]
    pub struct UpdateSecret(RequestBuilder<crate::model::UpdateSecretRequest>);

    impl UpdateSecret {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::UpdateSecretRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Secret> {
            (*self.0.stub).update_secret(self.0.request, self.0.options).await
        }

        /// Sets the value of `request_body`.
        pub fn set_request_body<T: Into<std::option::Option<crate::model::Secret>>>(mut self, v: T) -> Self {
            self.0.request.request_body = v.into();
            self
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of `update_mask`.
        pub fn set_update_mask<T: Into<wkt::FieldMask>>(mut self, v: T) -> Self {
            self.0.request.update_mask = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for UpdateSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::get_secret_by_project_and_location_and_secret call.
    #[derive(Clone, Debug)]
    pub struct GetSecretByProjectAndLocationAndSecret(RequestBuilder<crate::model::GetSecretByProjectAndLocationAndSecretRequest>);

    impl GetSecretByProjectAndLocationAndSecret {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetSecretByProjectAndLocationAndSecretRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Secret> {
            (*self.0.stub).get_secret_by_project_and_location_and_secret(self.0.request, self.0.options).await
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `location`.
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetSecretByProjectAndLocationAndSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::delete_secret_by_project_and_location_and_secret call.
    #[derive(Clone, Debug)]
    pub struct DeleteSecretByProjectAndLocationAndSecret(RequestBuilder<crate::model::DeleteSecretByProjectAndLocationAndSecretRequest>);

    impl DeleteSecretByProjectAndLocationAndSecret {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DeleteSecretByProjectAndLocationAndSecretRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Empty> {
            (*self.0.stub).delete_secret_by_project_and_location_and_secret(self.0.request, self.0.options).await
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `location`.
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of `etag`.
        pub fn set_etag<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.etag = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for DeleteSecretByProjectAndLocationAndSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::update_secret_by_project_and_location_and_secret call.
    #[derive(Clone, Debug)]
    pub struct UpdateSecretByProjectAndLocationAndSecret(RequestBuilder<crate::model::UpdateSecretByProjectAndLocationAndSecretRequest>);

    impl UpdateSecretByProjectAndLocationAndSecret {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::UpdateSecretByProjectAndLocationAndSecretRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Secret> {
            (*self.0.stub).update_secret_by_project_and_location_and_secret(self.0.request, self.0.options).await
        }

        /// Sets the value of `request_body`.
        pub fn set_request_body<T: Into<std::option::Option<crate::model::Secret>>>(mut self, v: T) -> Self {
            self.0.request.request_body = v.into();
            self
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `location`.
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of `update_mask`.
        pub fn set_update_mask<T: Into<wkt::FieldMask>>(mut self, v: T) -> Self {
            self.0.request.update_mask = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for UpdateSecretByProjectAndLocationAndSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::list_secret_versions call.
    #[derive(Clone, Debug)]
    pub struct ListSecretVersions(RequestBuilder<crate::model::ListSecretVersionsRequest>);

    impl ListSecretVersions {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListSecretVersionsRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListSecretVersionsResponse> {
            (*self.0.stub).list_secret_versions(self.0.request, self.0.options).await
        }

        /// Streams the responses back.
        #[cfg(feature = "unstable-stream")]
        pub async fn stream(self) -> gax::paginator::Paginator<crate::model::ListSecretVersionsResponse, gax::error::Error> {
            let token = gax::paginator::extract_token(&self.0.request.page_token);
            let execute = move |token: String| {
                let builder = self.clone();
                builder.0.request.clone().set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of `page_size`.
        pub fn set_page_size<T: Into<std::option::Option<i32>>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of `page_token`.
        pub fn set_page_token<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }

        /// Sets the value of `filter`.
        pub fn set_filter<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.filter = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ListSecretVersions {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::list_secret_versions_by_project_and_location_and_secret call.
    #[derive(Clone, Debug)]
    pub struct ListSecretVersionsByProjectAndLocationAndSecret(RequestBuilder<crate::model::ListSecretVersionsByProjectAndLocationAndSecretRequest>);

    impl ListSecretVersionsByProjectAndLocationAndSecret {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListSecretVersionsByProjectAndLocationAndSecretRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListSecretVersionsResponse> {
            (*self.0.stub).list_secret_versions_by_project_and_location_and_secret(self.0.request, self.0.options).await
        }

        /// Streams the responses back.
        #[cfg(feature = "unstable-stream")]
        pub async fn stream(self) -> gax::paginator::Paginator<crate::model::ListSecretVersionsResponse, gax::error::Error> {
            let token = gax::paginator::extract_token(&self.0.request.page_token);
            let execute = move |token: String| {
                let builder = self.clone();
                builder.0.request.clone().set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `location`.
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of `page_size`.
        pub fn set_page_size<T: Into<std::option::Option<i32>>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of `page_token`.
        pub fn set_page_token<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }

        /// Sets the value of `filter`.
        pub fn set_filter<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.filter = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ListSecretVersionsByProjectAndLocationAndSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::get_secret_version call.
    #[derive(Clone, Debug)]
    pub struct GetSecretVersion(RequestBuilder<crate::model::GetSecretVersionRequest>);

    impl GetSecretVersion {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetSecretVersionRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SecretVersion> {
            (*self.0.stub).get_secret_version(self.0.request, self.0.options).await
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of `version`.
        pub fn set_version<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.version = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetSecretVersion {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::get_secret_version_by_project_and_location_and_secret_and_version call.
    #[derive(Clone, Debug)]
    pub struct GetSecretVersionByProjectAndLocationAndSecretAndVersion(RequestBuilder<crate::model::GetSecretVersionByProjectAndLocationAndSecretAndVersionRequest>);

    impl GetSecretVersionByProjectAndLocationAndSecretAndVersion {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetSecretVersionByProjectAndLocationAndSecretAndVersionRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SecretVersion> {
            (*self.0.stub).get_secret_version_by_project_and_location_and_secret_and_version(self.0.request, self.0.options).await
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `location`.
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of `version`.
        pub fn set_version<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.version = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetSecretVersionByProjectAndLocationAndSecretAndVersion {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::access_secret_version call.
    #[derive(Clone, Debug)]
    pub struct AccessSecretVersion(RequestBuilder<crate::model::AccessSecretVersionRequest>);

    impl AccessSecretVersion {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::AccessSecretVersionRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::AccessSecretVersionResponse> {
            (*self.0.stub).access_secret_version(self.0.request, self.0.options).await
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of `version`.
        pub fn set_version<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.version = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for AccessSecretVersion {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::access_secret_version_by_project_and_location_and_secret_and_version call.
    #[derive(Clone, Debug)]
    pub struct AccessSecretVersionByProjectAndLocationAndSecretAndVersion(RequestBuilder<crate::model::AccessSecretVersionByProjectAndLocationAndSecretAndVersionRequest>);

    impl AccessSecretVersionByProjectAndLocationAndSecretAndVersion {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::AccessSecretVersionByProjectAndLocationAndSecretAndVersionRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::AccessSecretVersionResponse> {
            (*self.0.stub).access_secret_version_by_project_and_location_and_secret_and_version(self.0.request, self.0.options).await
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `location`.
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of `version`.
        pub fn set_version<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.version = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for AccessSecretVersionByProjectAndLocationAndSecretAndVersion {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::disable_secret_version call.
    #[derive(Clone, Debug)]
    pub struct DisableSecretVersion(RequestBuilder<crate::model::DisableSecretVersionRequest>);

    impl DisableSecretVersion {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DisableSecretVersionRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SecretVersion> {
            (*self.0.stub).disable_secret_version(self.0.request, self.0.options).await
        }

        /// Sets the value of `etag`.
        pub fn set_etag<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.etag = v.into();
            self
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of `version`.
        pub fn set_version<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.version = v.into();
            self
        }

        /// Sets the value of `location`.
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for DisableSecretVersion {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::disable_secret_version_by_project_and_location_and_secret_and_version call.
    #[derive(Clone, Debug)]
    pub struct DisableSecretVersionByProjectAndLocationAndSecretAndVersion(RequestBuilder<crate::model::DisableSecretVersionRequest>);

    impl DisableSecretVersionByProjectAndLocationAndSecretAndVersion {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DisableSecretVersionRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SecretVersion> {
            (*self.0.stub).disable_secret_version_by_project_and_location_and_secret_and_version(self.0.request, self.0.options).await
        }

        /// Sets the value of `etag`.
        pub fn set_etag<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.etag = v.into();
            self
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of `version`.
        pub fn set_version<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.version = v.into();
            self
        }

        /// Sets the value of `location`.
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for DisableSecretVersionByProjectAndLocationAndSecretAndVersion {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::enable_secret_version call.
    #[derive(Clone, Debug)]
    pub struct EnableSecretVersion(RequestBuilder<crate::model::EnableSecretVersionRequest>);

    impl EnableSecretVersion {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::EnableSecretVersionRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SecretVersion> {
            (*self.0.stub).enable_secret_version(self.0.request, self.0.options).await
        }

        /// Sets the value of `etag`.
        pub fn set_etag<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.etag = v.into();
            self
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of `version`.
        pub fn set_version<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.version = v.into();
            self
        }

        /// Sets the value of `location`.
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for EnableSecretVersion {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::enable_secret_version_by_project_and_location_and_secret_and_version call.
    #[derive(Clone, Debug)]
    pub struct EnableSecretVersionByProjectAndLocationAndSecretAndVersion(RequestBuilder<crate::model::EnableSecretVersionRequest>);

    impl EnableSecretVersionByProjectAndLocationAndSecretAndVersion {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::EnableSecretVersionRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SecretVersion> {
            (*self.0.stub).enable_secret_version_by_project_and_location_and_secret_and_version(self.0.request, self.0.options).await
        }

        /// Sets the value of `etag`.
        pub fn set_etag<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.etag = v.into();
            self
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of `version`.
        pub fn set_version<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.version = v.into();
            self
        }

        /// Sets the value of `location`.
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for EnableSecretVersionByProjectAndLocationAndSecretAndVersion {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::destroy_secret_version call.
    #[derive(Clone, Debug)]
    pub struct DestroySecretVersion(RequestBuilder<crate::model::DestroySecretVersionRequest>);

    impl DestroySecretVersion {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DestroySecretVersionRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SecretVersion> {
            (*self.0.stub).destroy_secret_version(self.0.request, self.0.options).await
        }

        /// Sets the value of `etag`.
        pub fn set_etag<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.etag = v.into();
            self
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of `version`.
        pub fn set_version<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.version = v.into();
            self
        }

        /// Sets the value of `location`.
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for DestroySecretVersion {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::destroy_secret_version_by_project_and_location_and_secret_and_version call.
    #[derive(Clone, Debug)]
    pub struct DestroySecretVersionByProjectAndLocationAndSecretAndVersion(RequestBuilder<crate::model::DestroySecretVersionRequest>);

    impl DestroySecretVersionByProjectAndLocationAndSecretAndVersion {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DestroySecretVersionRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SecretVersion> {
            (*self.0.stub).destroy_secret_version_by_project_and_location_and_secret_and_version(self.0.request, self.0.options).await
        }

        /// Sets the value of `etag`.
        pub fn set_etag<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.etag = v.into();
            self
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of `version`.
        pub fn set_version<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.version = v.into();
            self
        }

        /// Sets the value of `location`.
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for DestroySecretVersionByProjectAndLocationAndSecretAndVersion {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::set_iam_policy call.
    #[derive(Clone, Debug)]
    pub struct SetIamPolicy(RequestBuilder<crate::model::SetIamPolicyRequest>);

    impl SetIamPolicy {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::SetIamPolicyRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Policy> {
            (*self.0.stub).set_iam_policy(self.0.request, self.0.options).await
        }

        /// Sets the value of `policy`.
        pub fn set_policy<T: Into<std::option::Option<crate::model::Policy>>>(mut self, v: T) -> Self {
            self.0.request.policy = v.into();
            self
        }

        /// Sets the value of `update_mask`.
        pub fn set_update_mask<T: Into<std::option::Option<wkt::FieldMask>>>(mut self, v: T) -> Self {
            self.0.request.update_mask = v.into();
            self
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of `location`.
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for SetIamPolicy {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::set_iam_policy_by_project_and_location_and_secret call.
    #[derive(Clone, Debug)]
    pub struct SetIamPolicyByProjectAndLocationAndSecret(RequestBuilder<crate::model::SetIamPolicyRequest>);

    impl SetIamPolicyByProjectAndLocationAndSecret {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::SetIamPolicyRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Policy> {
            (*self.0.stub).set_iam_policy_by_project_and_location_and_secret(self.0.request, self.0.options).await
        }

        /// Sets the value of `policy`.
        pub fn set_policy<T: Into<std::option::Option<crate::model::Policy>>>(mut self, v: T) -> Self {
            self.0.request.policy = v.into();
            self
        }

        /// Sets the value of `update_mask`.
        pub fn set_update_mask<T: Into<std::option::Option<wkt::FieldMask>>>(mut self, v: T) -> Self {
            self.0.request.update_mask = v.into();
            self
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of `location`.
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for SetIamPolicyByProjectAndLocationAndSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::get_iam_policy call.
    #[derive(Clone, Debug)]
    pub struct GetIamPolicy(RequestBuilder<crate::model::GetIamPolicyRequest>);

    impl GetIamPolicy {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetIamPolicyRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Policy> {
            (*self.0.stub).get_iam_policy(self.0.request, self.0.options).await
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of `options_requested_policy_version`.
        pub fn set_options_requested_policy_version<T: Into<std::option::Option<i32>>>(mut self, v: T) -> Self {
            self.0.request.options_requested_policy_version = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetIamPolicy {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::get_iam_policy_by_project_and_location_and_secret call.
    #[derive(Clone, Debug)]
    pub struct GetIamPolicyByProjectAndLocationAndSecret(RequestBuilder<crate::model::GetIamPolicyByProjectAndLocationAndSecretRequest>);

    impl GetIamPolicyByProjectAndLocationAndSecret {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetIamPolicyByProjectAndLocationAndSecretRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Policy> {
            (*self.0.stub).get_iam_policy_by_project_and_location_and_secret(self.0.request, self.0.options).await
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `location`.
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of `options_requested_policy_version`.
        pub fn set_options_requested_policy_version<T: Into<std::option::Option<i32>>>(mut self, v: T) -> Self {
            self.0.request.options_requested_policy_version = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetIamPolicyByProjectAndLocationAndSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::test_iam_permissions call.
    #[derive(Clone, Debug)]
    pub struct TestIamPermissions(RequestBuilder<crate::model::TestIamPermissionsRequest>);

    impl TestIamPermissions {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::TestIamPermissionsRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::TestIamPermissionsResponse> {
            (*self.0.stub).test_iam_permissions(self.0.request, self.0.options).await
        }

        /// Sets the value of `permissions`.
        pub fn set_permissions<T: Into<std::vec::Vec<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.permissions = v.into();
            self
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of `location`.
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for TestIamPermissions {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a SecretManagerService::test_iam_permissions_by_project_and_location_and_secret call.
    #[derive(Clone, Debug)]
    pub struct TestIamPermissionsByProjectAndLocationAndSecret(RequestBuilder<crate::model::TestIamPermissionsRequest>);

    impl TestIamPermissionsByProjectAndLocationAndSecret {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::TestIamPermissionsRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::TestIamPermissionsResponse> {
            (*self.0.stub).test_iam_permissions_by_project_and_location_and_secret(self.0.request, self.0.options).await
        }

        /// Sets the value of `permissions`.
        pub fn set_permissions<T: Into<std::vec::Vec<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.permissions = v.into();
            self
        }

        /// Sets the value of `project`.
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of `secret`.
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of `location`.
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for TestIamPermissionsByProjectAndLocationAndSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

}
