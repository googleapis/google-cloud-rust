// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

pub mod secret_manager_service {
    use crate::Result;
    use std::sync::Arc;

    /// A builder for [SecretManagerService][super::super::client::SecretManagerService].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use secretmanager_golden_openapi::*;
    /// # use builder::secret_manager_service::ClientBuilder;
    /// # use client::SecretManagerService;
    /// let builder : ClientBuilder = SecretManagerService::builder();
    /// let client = builder
    ///     .with_endpoint("https://secretmanager.googleapis.com")
    ///     .build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub type ClientBuilder =
        gax::client_builder::ClientBuilder<client::Factory, gaxi::options::Credentials>;

    pub(crate) mod client {
        use super::super::super::client::SecretManagerService;
        pub struct Factory;
        impl gax::client_builder::internal::ClientFactory for Factory {
            type Client = SecretManagerService;
            type Credentials = gaxi::options::Credentials;
            async fn build(self, config: gaxi::options::ClientConfig) -> gax::Result<Self::Client> {
                Self::Client::new(config).await
            }
        }
    }

    /// Common implementation for [super::super::client::SecretManagerService] request builders.
    #[derive(Clone, Debug)]
    pub(crate) struct RequestBuilder<R: std::default::Default> {
        stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>,
        request: R,
        options: gax::options::RequestOptions,
    }

    impl<R> RequestBuilder<R>
    where R: std::default::Default {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self {
                stub,
                request: R::default(),
                options: gax::options::RequestOptions::default(),
            }
        }
    }

    /// The request builder for [SecretManagerService::list_locations][super::super::client::SecretManagerService::list_locations] calls.
    #[derive(Clone, Debug)]
    pub struct ListLocations(RequestBuilder<crate::model::ListLocationsRequest>);

    impl ListLocations {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListLocationsRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListLocationsResponse> {
            (*self.0.stub).list_locations(self.0.request, self.0.options).await
        }

        /// Streams the responses back.
        pub async fn paginator(self) -> gax::paginator::Paginator<crate::model::ListLocationsResponse, gax::error::Error> {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone().unwrap_or_default();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [project][crate::model::ListLocationsRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [filter][crate::model::ListLocationsRequest::filter].
        pub fn set_filter<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.filter = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListLocationsRequest::page_size].
        pub fn set_page_size<T: Into<std::option::Option<i32>>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListLocationsRequest::page_token].
        pub fn set_page_token<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for ListLocations {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::get_location][super::super::client::SecretManagerService::get_location] calls.
    #[derive(Clone, Debug)]
    pub struct GetLocation(RequestBuilder<crate::model::GetLocationRequest>);

    impl GetLocation {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetLocationRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Location> {
            (*self.0.stub).get_location(self.0.request, self.0.options).await
        }

        /// Sets the value of [project][crate::model::GetLocationRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [location][crate::model::GetLocationRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for GetLocation {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::list_secrets][super::super::client::SecretManagerService::list_secrets] calls.
    #[derive(Clone, Debug)]
    pub struct ListSecrets(RequestBuilder<crate::model::ListSecretsRequest>);

    impl ListSecrets {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListSecretsRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListSecretsResponse> {
            (*self.0.stub).list_secrets(self.0.request, self.0.options).await
        }

        /// Streams the responses back.
        pub async fn paginator(self) -> gax::paginator::Paginator<crate::model::ListSecretsResponse, gax::error::Error> {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone().unwrap_or_default();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [project][crate::model::ListSecretsRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListSecretsRequest::page_size].
        pub fn set_page_size<T: Into<std::option::Option<i32>>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListSecretsRequest::page_token].
        pub fn set_page_token<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }

        /// Sets the value of [filter][crate::model::ListSecretsRequest::filter].
        pub fn set_filter<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.filter = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for ListSecrets {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::create_secret][super::super::client::SecretManagerService::create_secret] calls.
    #[derive(Clone, Debug)]
    pub struct CreateSecret(RequestBuilder<crate::model::CreateSecretRequest>);

    impl CreateSecret {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CreateSecretRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Secret> {
            (*self.0.stub).create_secret(self.0.request, self.0.options).await
        }

        /// Sets the value of [request_body][crate::model::CreateSecretRequest::request_body].
        pub fn set_request_body<T: Into<std::option::Option<crate::model::Secret>>>(mut self, v: T) -> Self {
            self.0.request.request_body = v.into();
            self
        }

        /// Sets the value of [project][crate::model::CreateSecretRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [secret_id][crate::model::CreateSecretRequest::secret_id].
        pub fn set_secret_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret_id = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for CreateSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::list_secrets_by_project_and_location][super::super::client::SecretManagerService::list_secrets_by_project_and_location] calls.
    #[derive(Clone, Debug)]
    pub struct ListSecretsByProjectAndLocation(RequestBuilder<crate::model::ListSecretsByProjectAndLocationRequest>);

    impl ListSecretsByProjectAndLocation {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListSecretsByProjectAndLocationRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListSecretsResponse> {
            (*self.0.stub).list_secrets_by_project_and_location(self.0.request, self.0.options).await
        }

        /// Streams the responses back.
        pub async fn paginator(self) -> gax::paginator::Paginator<crate::model::ListSecretsResponse, gax::error::Error> {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone().unwrap_or_default();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [project][crate::model::ListSecretsByProjectAndLocationRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [location][crate::model::ListSecretsByProjectAndLocationRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListSecretsByProjectAndLocationRequest::page_size].
        pub fn set_page_size<T: Into<std::option::Option<i32>>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListSecretsByProjectAndLocationRequest::page_token].
        pub fn set_page_token<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }

        /// Sets the value of [filter][crate::model::ListSecretsByProjectAndLocationRequest::filter].
        pub fn set_filter<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.filter = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for ListSecretsByProjectAndLocation {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::create_secret_by_project_and_location][super::super::client::SecretManagerService::create_secret_by_project_and_location] calls.
    #[derive(Clone, Debug)]
    pub struct CreateSecretByProjectAndLocation(RequestBuilder<crate::model::CreateSecretByProjectAndLocationRequest>);

    impl CreateSecretByProjectAndLocation {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CreateSecretByProjectAndLocationRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Secret> {
            (*self.0.stub).create_secret_by_project_and_location(self.0.request, self.0.options).await
        }

        /// Sets the value of [request_body][crate::model::CreateSecretByProjectAndLocationRequest::request_body].
        pub fn set_request_body<T: Into<std::option::Option<crate::model::Secret>>>(mut self, v: T) -> Self {
            self.0.request.request_body = v.into();
            self
        }

        /// Sets the value of [project][crate::model::CreateSecretByProjectAndLocationRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [location][crate::model::CreateSecretByProjectAndLocationRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }

        /// Sets the value of [secret_id][crate::model::CreateSecretByProjectAndLocationRequest::secret_id].
        pub fn set_secret_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret_id = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for CreateSecretByProjectAndLocation {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::add_secret_version][super::super::client::SecretManagerService::add_secret_version] calls.
    #[derive(Clone, Debug)]
    pub struct AddSecretVersion(RequestBuilder<crate::model::AddSecretVersionRequest>);

    impl AddSecretVersion {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::AddSecretVersionRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SecretVersion> {
            (*self.0.stub).add_secret_version(self.0.request, self.0.options).await
        }

        /// Sets the value of [payload][crate::model::AddSecretVersionRequest::payload].
        pub fn set_payload<T: Into<std::option::Option<crate::model::SecretPayload>>>(mut self, v: T) -> Self {
            self.0.request.payload = v.into();
            self
        }

        /// Sets the value of [project][crate::model::AddSecretVersionRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::AddSecretVersionRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of [location][crate::model::AddSecretVersionRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for AddSecretVersion {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::add_secret_version_by_project_and_location_and_secret][super::super::client::SecretManagerService::add_secret_version_by_project_and_location_and_secret] calls.
    #[derive(Clone, Debug)]
    pub struct AddSecretVersionByProjectAndLocationAndSecret(RequestBuilder<crate::model::AddSecretVersionRequest>);

    impl AddSecretVersionByProjectAndLocationAndSecret {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::AddSecretVersionRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SecretVersion> {
            (*self.0.stub).add_secret_version_by_project_and_location_and_secret(self.0.request, self.0.options).await
        }

        /// Sets the value of [payload][crate::model::AddSecretVersionRequest::payload].
        pub fn set_payload<T: Into<std::option::Option<crate::model::SecretPayload>>>(mut self, v: T) -> Self {
            self.0.request.payload = v.into();
            self
        }

        /// Sets the value of [project][crate::model::AddSecretVersionRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::AddSecretVersionRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of [location][crate::model::AddSecretVersionRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for AddSecretVersionByProjectAndLocationAndSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::get_secret][super::super::client::SecretManagerService::get_secret] calls.
    #[derive(Clone, Debug)]
    pub struct GetSecret(RequestBuilder<crate::model::GetSecretRequest>);

    impl GetSecret {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetSecretRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Secret> {
            (*self.0.stub).get_secret(self.0.request, self.0.options).await
        }

        /// Sets the value of [project][crate::model::GetSecretRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::GetSecretRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for GetSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::delete_secret][super::super::client::SecretManagerService::delete_secret] calls.
    #[derive(Clone, Debug)]
    pub struct DeleteSecret(RequestBuilder<crate::model::DeleteSecretRequest>);

    impl DeleteSecret {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DeleteSecretRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Empty> {
            (*self.0.stub).delete_secret(self.0.request, self.0.options).await
        }

        /// Sets the value of [project][crate::model::DeleteSecretRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::DeleteSecretRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of [etag][crate::model::DeleteSecretRequest::etag].
        pub fn set_etag<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.etag = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for DeleteSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::update_secret][super::super::client::SecretManagerService::update_secret] calls.
    #[derive(Clone, Debug)]
    pub struct UpdateSecret(RequestBuilder<crate::model::UpdateSecretRequest>);

    impl UpdateSecret {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::UpdateSecretRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Secret> {
            (*self.0.stub).update_secret(self.0.request, self.0.options).await
        }

        /// Sets the value of [request_body][crate::model::UpdateSecretRequest::request_body].
        pub fn set_request_body<T: Into<std::option::Option<crate::model::Secret>>>(mut self, v: T) -> Self {
            self.0.request.request_body = v.into();
            self
        }

        /// Sets the value of [project][crate::model::UpdateSecretRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::UpdateSecretRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of [update_mask][crate::model::UpdateSecretRequest::update_mask].
        pub fn set_update_mask<T: Into<wkt::FieldMask>>(mut self, v: T) -> Self {
            self.0.request.update_mask = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for UpdateSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::get_secret_by_project_and_location_and_secret][super::super::client::SecretManagerService::get_secret_by_project_and_location_and_secret] calls.
    #[derive(Clone, Debug)]
    pub struct GetSecretByProjectAndLocationAndSecret(RequestBuilder<crate::model::GetSecretByProjectAndLocationAndSecretRequest>);

    impl GetSecretByProjectAndLocationAndSecret {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetSecretByProjectAndLocationAndSecretRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Secret> {
            (*self.0.stub).get_secret_by_project_and_location_and_secret(self.0.request, self.0.options).await
        }

        /// Sets the value of [project][crate::model::GetSecretByProjectAndLocationAndSecretRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [location][crate::model::GetSecretByProjectAndLocationAndSecretRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::GetSecretByProjectAndLocationAndSecretRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for GetSecretByProjectAndLocationAndSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::delete_secret_by_project_and_location_and_secret][super::super::client::SecretManagerService::delete_secret_by_project_and_location_and_secret] calls.
    #[derive(Clone, Debug)]
    pub struct DeleteSecretByProjectAndLocationAndSecret(RequestBuilder<crate::model::DeleteSecretByProjectAndLocationAndSecretRequest>);

    impl DeleteSecretByProjectAndLocationAndSecret {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DeleteSecretByProjectAndLocationAndSecretRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Empty> {
            (*self.0.stub).delete_secret_by_project_and_location_and_secret(self.0.request, self.0.options).await
        }

        /// Sets the value of [project][crate::model::DeleteSecretByProjectAndLocationAndSecretRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [location][crate::model::DeleteSecretByProjectAndLocationAndSecretRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::DeleteSecretByProjectAndLocationAndSecretRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of [etag][crate::model::DeleteSecretByProjectAndLocationAndSecretRequest::etag].
        pub fn set_etag<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.etag = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for DeleteSecretByProjectAndLocationAndSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::update_secret_by_project_and_location_and_secret][super::super::client::SecretManagerService::update_secret_by_project_and_location_and_secret] calls.
    #[derive(Clone, Debug)]
    pub struct UpdateSecretByProjectAndLocationAndSecret(RequestBuilder<crate::model::UpdateSecretByProjectAndLocationAndSecretRequest>);

    impl UpdateSecretByProjectAndLocationAndSecret {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::UpdateSecretByProjectAndLocationAndSecretRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Secret> {
            (*self.0.stub).update_secret_by_project_and_location_and_secret(self.0.request, self.0.options).await
        }

        /// Sets the value of [request_body][crate::model::UpdateSecretByProjectAndLocationAndSecretRequest::request_body].
        pub fn set_request_body<T: Into<std::option::Option<crate::model::Secret>>>(mut self, v: T) -> Self {
            self.0.request.request_body = v.into();
            self
        }

        /// Sets the value of [project][crate::model::UpdateSecretByProjectAndLocationAndSecretRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [location][crate::model::UpdateSecretByProjectAndLocationAndSecretRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::UpdateSecretByProjectAndLocationAndSecretRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of [update_mask][crate::model::UpdateSecretByProjectAndLocationAndSecretRequest::update_mask].
        pub fn set_update_mask<T: Into<wkt::FieldMask>>(mut self, v: T) -> Self {
            self.0.request.update_mask = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for UpdateSecretByProjectAndLocationAndSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::list_secret_versions][super::super::client::SecretManagerService::list_secret_versions] calls.
    #[derive(Clone, Debug)]
    pub struct ListSecretVersions(RequestBuilder<crate::model::ListSecretVersionsRequest>);

    impl ListSecretVersions {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListSecretVersionsRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListSecretVersionsResponse> {
            (*self.0.stub).list_secret_versions(self.0.request, self.0.options).await
        }

        /// Streams the responses back.
        pub async fn paginator(self) -> gax::paginator::Paginator<crate::model::ListSecretVersionsResponse, gax::error::Error> {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone().unwrap_or_default();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [project][crate::model::ListSecretVersionsRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::ListSecretVersionsRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListSecretVersionsRequest::page_size].
        pub fn set_page_size<T: Into<std::option::Option<i32>>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListSecretVersionsRequest::page_token].
        pub fn set_page_token<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }

        /// Sets the value of [filter][crate::model::ListSecretVersionsRequest::filter].
        pub fn set_filter<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.filter = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for ListSecretVersions {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::list_secret_versions_by_project_and_location_and_secret][super::super::client::SecretManagerService::list_secret_versions_by_project_and_location_and_secret] calls.
    #[derive(Clone, Debug)]
    pub struct ListSecretVersionsByProjectAndLocationAndSecret(RequestBuilder<crate::model::ListSecretVersionsByProjectAndLocationAndSecretRequest>);

    impl ListSecretVersionsByProjectAndLocationAndSecret {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListSecretVersionsByProjectAndLocationAndSecretRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListSecretVersionsResponse> {
            (*self.0.stub).list_secret_versions_by_project_and_location_and_secret(self.0.request, self.0.options).await
        }

        /// Streams the responses back.
        pub async fn paginator(self) -> gax::paginator::Paginator<crate::model::ListSecretVersionsResponse, gax::error::Error> {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone().unwrap_or_default();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [project][crate::model::ListSecretVersionsByProjectAndLocationAndSecretRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [location][crate::model::ListSecretVersionsByProjectAndLocationAndSecretRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::ListSecretVersionsByProjectAndLocationAndSecretRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListSecretVersionsByProjectAndLocationAndSecretRequest::page_size].
        pub fn set_page_size<T: Into<std::option::Option<i32>>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListSecretVersionsByProjectAndLocationAndSecretRequest::page_token].
        pub fn set_page_token<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }

        /// Sets the value of [filter][crate::model::ListSecretVersionsByProjectAndLocationAndSecretRequest::filter].
        pub fn set_filter<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.filter = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for ListSecretVersionsByProjectAndLocationAndSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::get_secret_version][super::super::client::SecretManagerService::get_secret_version] calls.
    #[derive(Clone, Debug)]
    pub struct GetSecretVersion(RequestBuilder<crate::model::GetSecretVersionRequest>);

    impl GetSecretVersion {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetSecretVersionRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SecretVersion> {
            (*self.0.stub).get_secret_version(self.0.request, self.0.options).await
        }

        /// Sets the value of [project][crate::model::GetSecretVersionRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::GetSecretVersionRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of [version][crate::model::GetSecretVersionRequest::version].
        pub fn set_version<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.version = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for GetSecretVersion {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::get_secret_version_by_project_and_location_and_secret_and_version][super::super::client::SecretManagerService::get_secret_version_by_project_and_location_and_secret_and_version] calls.
    #[derive(Clone, Debug)]
    pub struct GetSecretVersionByProjectAndLocationAndSecretAndVersion(RequestBuilder<crate::model::GetSecretVersionByProjectAndLocationAndSecretAndVersionRequest>);

    impl GetSecretVersionByProjectAndLocationAndSecretAndVersion {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetSecretVersionByProjectAndLocationAndSecretAndVersionRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SecretVersion> {
            (*self.0.stub).get_secret_version_by_project_and_location_and_secret_and_version(self.0.request, self.0.options).await
        }

        /// Sets the value of [project][crate::model::GetSecretVersionByProjectAndLocationAndSecretAndVersionRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [location][crate::model::GetSecretVersionByProjectAndLocationAndSecretAndVersionRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::GetSecretVersionByProjectAndLocationAndSecretAndVersionRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of [version][crate::model::GetSecretVersionByProjectAndLocationAndSecretAndVersionRequest::version].
        pub fn set_version<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.version = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for GetSecretVersionByProjectAndLocationAndSecretAndVersion {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::access_secret_version][super::super::client::SecretManagerService::access_secret_version] calls.
    #[derive(Clone, Debug)]
    pub struct AccessSecretVersion(RequestBuilder<crate::model::AccessSecretVersionRequest>);

    impl AccessSecretVersion {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::AccessSecretVersionRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::AccessSecretVersionResponse> {
            (*self.0.stub).access_secret_version(self.0.request, self.0.options).await
        }

        /// Sets the value of [project][crate::model::AccessSecretVersionRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::AccessSecretVersionRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of [version][crate::model::AccessSecretVersionRequest::version].
        pub fn set_version<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.version = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for AccessSecretVersion {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::access_secret_version_by_project_and_location_and_secret_and_version][super::super::client::SecretManagerService::access_secret_version_by_project_and_location_and_secret_and_version] calls.
    #[derive(Clone, Debug)]
    pub struct AccessSecretVersionByProjectAndLocationAndSecretAndVersion(RequestBuilder<crate::model::AccessSecretVersionByProjectAndLocationAndSecretAndVersionRequest>);

    impl AccessSecretVersionByProjectAndLocationAndSecretAndVersion {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::AccessSecretVersionByProjectAndLocationAndSecretAndVersionRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::AccessSecretVersionResponse> {
            (*self.0.stub).access_secret_version_by_project_and_location_and_secret_and_version(self.0.request, self.0.options).await
        }

        /// Sets the value of [project][crate::model::AccessSecretVersionByProjectAndLocationAndSecretAndVersionRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [location][crate::model::AccessSecretVersionByProjectAndLocationAndSecretAndVersionRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::AccessSecretVersionByProjectAndLocationAndSecretAndVersionRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of [version][crate::model::AccessSecretVersionByProjectAndLocationAndSecretAndVersionRequest::version].
        pub fn set_version<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.version = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for AccessSecretVersionByProjectAndLocationAndSecretAndVersion {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::disable_secret_version][super::super::client::SecretManagerService::disable_secret_version] calls.
    #[derive(Clone, Debug)]
    pub struct DisableSecretVersion(RequestBuilder<crate::model::DisableSecretVersionRequest>);

    impl DisableSecretVersion {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DisableSecretVersionRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SecretVersion> {
            (*self.0.stub).disable_secret_version(self.0.request, self.0.options).await
        }

        /// Sets the value of [etag][crate::model::DisableSecretVersionRequest::etag].
        pub fn set_etag<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.etag = v.into();
            self
        }

        /// Sets the value of [project][crate::model::DisableSecretVersionRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::DisableSecretVersionRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of [version][crate::model::DisableSecretVersionRequest::version].
        pub fn set_version<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.version = v.into();
            self
        }

        /// Sets the value of [location][crate::model::DisableSecretVersionRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for DisableSecretVersion {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::disable_secret_version_by_project_and_location_and_secret_and_version][super::super::client::SecretManagerService::disable_secret_version_by_project_and_location_and_secret_and_version] calls.
    #[derive(Clone, Debug)]
    pub struct DisableSecretVersionByProjectAndLocationAndSecretAndVersion(RequestBuilder<crate::model::DisableSecretVersionRequest>);

    impl DisableSecretVersionByProjectAndLocationAndSecretAndVersion {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DisableSecretVersionRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SecretVersion> {
            (*self.0.stub).disable_secret_version_by_project_and_location_and_secret_and_version(self.0.request, self.0.options).await
        }

        /// Sets the value of [etag][crate::model::DisableSecretVersionRequest::etag].
        pub fn set_etag<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.etag = v.into();
            self
        }

        /// Sets the value of [project][crate::model::DisableSecretVersionRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::DisableSecretVersionRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of [version][crate::model::DisableSecretVersionRequest::version].
        pub fn set_version<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.version = v.into();
            self
        }

        /// Sets the value of [location][crate::model::DisableSecretVersionRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for DisableSecretVersionByProjectAndLocationAndSecretAndVersion {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::enable_secret_version][super::super::client::SecretManagerService::enable_secret_version] calls.
    #[derive(Clone, Debug)]
    pub struct EnableSecretVersion(RequestBuilder<crate::model::EnableSecretVersionRequest>);

    impl EnableSecretVersion {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::EnableSecretVersionRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SecretVersion> {
            (*self.0.stub).enable_secret_version(self.0.request, self.0.options).await
        }

        /// Sets the value of [etag][crate::model::EnableSecretVersionRequest::etag].
        pub fn set_etag<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.etag = v.into();
            self
        }

        /// Sets the value of [project][crate::model::EnableSecretVersionRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::EnableSecretVersionRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of [version][crate::model::EnableSecretVersionRequest::version].
        pub fn set_version<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.version = v.into();
            self
        }

        /// Sets the value of [location][crate::model::EnableSecretVersionRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for EnableSecretVersion {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::enable_secret_version_by_project_and_location_and_secret_and_version][super::super::client::SecretManagerService::enable_secret_version_by_project_and_location_and_secret_and_version] calls.
    #[derive(Clone, Debug)]
    pub struct EnableSecretVersionByProjectAndLocationAndSecretAndVersion(RequestBuilder<crate::model::EnableSecretVersionRequest>);

    impl EnableSecretVersionByProjectAndLocationAndSecretAndVersion {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::EnableSecretVersionRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SecretVersion> {
            (*self.0.stub).enable_secret_version_by_project_and_location_and_secret_and_version(self.0.request, self.0.options).await
        }

        /// Sets the value of [etag][crate::model::EnableSecretVersionRequest::etag].
        pub fn set_etag<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.etag = v.into();
            self
        }

        /// Sets the value of [project][crate::model::EnableSecretVersionRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::EnableSecretVersionRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of [version][crate::model::EnableSecretVersionRequest::version].
        pub fn set_version<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.version = v.into();
            self
        }

        /// Sets the value of [location][crate::model::EnableSecretVersionRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for EnableSecretVersionByProjectAndLocationAndSecretAndVersion {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::destroy_secret_version][super::super::client::SecretManagerService::destroy_secret_version] calls.
    #[derive(Clone, Debug)]
    pub struct DestroySecretVersion(RequestBuilder<crate::model::DestroySecretVersionRequest>);

    impl DestroySecretVersion {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DestroySecretVersionRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SecretVersion> {
            (*self.0.stub).destroy_secret_version(self.0.request, self.0.options).await
        }

        /// Sets the value of [etag][crate::model::DestroySecretVersionRequest::etag].
        pub fn set_etag<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.etag = v.into();
            self
        }

        /// Sets the value of [project][crate::model::DestroySecretVersionRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::DestroySecretVersionRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of [version][crate::model::DestroySecretVersionRequest::version].
        pub fn set_version<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.version = v.into();
            self
        }

        /// Sets the value of [location][crate::model::DestroySecretVersionRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for DestroySecretVersion {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::destroy_secret_version_by_project_and_location_and_secret_and_version][super::super::client::SecretManagerService::destroy_secret_version_by_project_and_location_and_secret_and_version] calls.
    #[derive(Clone, Debug)]
    pub struct DestroySecretVersionByProjectAndLocationAndSecretAndVersion(RequestBuilder<crate::model::DestroySecretVersionRequest>);

    impl DestroySecretVersionByProjectAndLocationAndSecretAndVersion {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DestroySecretVersionRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SecretVersion> {
            (*self.0.stub).destroy_secret_version_by_project_and_location_and_secret_and_version(self.0.request, self.0.options).await
        }

        /// Sets the value of [etag][crate::model::DestroySecretVersionRequest::etag].
        pub fn set_etag<T: Into<std::option::Option<std::string::String>>>(mut self, v: T) -> Self {
            self.0.request.etag = v.into();
            self
        }

        /// Sets the value of [project][crate::model::DestroySecretVersionRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::DestroySecretVersionRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of [version][crate::model::DestroySecretVersionRequest::version].
        pub fn set_version<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.version = v.into();
            self
        }

        /// Sets the value of [location][crate::model::DestroySecretVersionRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for DestroySecretVersionByProjectAndLocationAndSecretAndVersion {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::set_iam_policy][super::super::client::SecretManagerService::set_iam_policy] calls.
    #[derive(Clone, Debug)]
    pub struct SetIamPolicy(RequestBuilder<crate::model::SetIamPolicyRequest>);

    impl SetIamPolicy {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::SetIamPolicyRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Policy> {
            (*self.0.stub).set_iam_policy(self.0.request, self.0.options).await
        }

        /// Sets the value of [policy][crate::model::SetIamPolicyRequest::policy].
        pub fn set_policy<T: Into<std::option::Option<crate::model::Policy>>>(mut self, v: T) -> Self {
            self.0.request.policy = v.into();
            self
        }

        /// Sets the value of [update_mask][crate::model::SetIamPolicyRequest::update_mask].
        pub fn set_update_mask<T: Into<std::option::Option<wkt::FieldMask>>>(mut self, v: T) -> Self {
            self.0.request.update_mask = v.into();
            self
        }

        /// Sets the value of [project][crate::model::SetIamPolicyRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::SetIamPolicyRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of [location][crate::model::SetIamPolicyRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for SetIamPolicy {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::set_iam_policy_by_project_and_location_and_secret][super::super::client::SecretManagerService::set_iam_policy_by_project_and_location_and_secret] calls.
    #[derive(Clone, Debug)]
    pub struct SetIamPolicyByProjectAndLocationAndSecret(RequestBuilder<crate::model::SetIamPolicyRequest>);

    impl SetIamPolicyByProjectAndLocationAndSecret {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::SetIamPolicyRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Policy> {
            (*self.0.stub).set_iam_policy_by_project_and_location_and_secret(self.0.request, self.0.options).await
        }

        /// Sets the value of [policy][crate::model::SetIamPolicyRequest::policy].
        pub fn set_policy<T: Into<std::option::Option<crate::model::Policy>>>(mut self, v: T) -> Self {
            self.0.request.policy = v.into();
            self
        }

        /// Sets the value of [update_mask][crate::model::SetIamPolicyRequest::update_mask].
        pub fn set_update_mask<T: Into<std::option::Option<wkt::FieldMask>>>(mut self, v: T) -> Self {
            self.0.request.update_mask = v.into();
            self
        }

        /// Sets the value of [project][crate::model::SetIamPolicyRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::SetIamPolicyRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of [location][crate::model::SetIamPolicyRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for SetIamPolicyByProjectAndLocationAndSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::get_iam_policy][super::super::client::SecretManagerService::get_iam_policy] calls.
    #[derive(Clone, Debug)]
    pub struct GetIamPolicy(RequestBuilder<crate::model::GetIamPolicyRequest>);

    impl GetIamPolicy {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetIamPolicyRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Policy> {
            (*self.0.stub).get_iam_policy(self.0.request, self.0.options).await
        }

        /// Sets the value of [project][crate::model::GetIamPolicyRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::GetIamPolicyRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of [options_requested_policy_version][crate::model::GetIamPolicyRequest::options_requested_policy_version].
        pub fn set_options_requested_policy_version<T: Into<std::option::Option<i32>>>(mut self, v: T) -> Self {
            self.0.request.options_requested_policy_version = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for GetIamPolicy {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::get_iam_policy_by_project_and_location_and_secret][super::super::client::SecretManagerService::get_iam_policy_by_project_and_location_and_secret] calls.
    #[derive(Clone, Debug)]
    pub struct GetIamPolicyByProjectAndLocationAndSecret(RequestBuilder<crate::model::GetIamPolicyByProjectAndLocationAndSecretRequest>);

    impl GetIamPolicyByProjectAndLocationAndSecret {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetIamPolicyByProjectAndLocationAndSecretRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Policy> {
            (*self.0.stub).get_iam_policy_by_project_and_location_and_secret(self.0.request, self.0.options).await
        }

        /// Sets the value of [project][crate::model::GetIamPolicyByProjectAndLocationAndSecretRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [location][crate::model::GetIamPolicyByProjectAndLocationAndSecretRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::GetIamPolicyByProjectAndLocationAndSecretRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of [options_requested_policy_version][crate::model::GetIamPolicyByProjectAndLocationAndSecretRequest::options_requested_policy_version].
        pub fn set_options_requested_policy_version<T: Into<std::option::Option<i32>>>(mut self, v: T) -> Self {
            self.0.request.options_requested_policy_version = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for GetIamPolicyByProjectAndLocationAndSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::test_iam_permissions][super::super::client::SecretManagerService::test_iam_permissions] calls.
    #[derive(Clone, Debug)]
    pub struct TestIamPermissions(RequestBuilder<crate::model::TestIamPermissionsRequest>);

    impl TestIamPermissions {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::TestIamPermissionsRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::TestIamPermissionsResponse> {
            (*self.0.stub).test_iam_permissions(self.0.request, self.0.options).await
        }

        /// Sets the value of [project][crate::model::TestIamPermissionsRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::TestIamPermissionsRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of [location][crate::model::TestIamPermissionsRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }

        /// Sets the value of [permissions][crate::model::TestIamPermissionsRequest::permissions].
        pub fn set_permissions<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>
        {
            use std::iter::Iterator;
            self.0.request.permissions = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for TestIamPermissions {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for [SecretManagerService::test_iam_permissions_by_project_and_location_and_secret][super::super::client::SecretManagerService::test_iam_permissions_by_project_and_location_and_secret] calls.
    #[derive(Clone, Debug)]
    pub struct TestIamPermissionsByProjectAndLocationAndSecret(RequestBuilder<crate::model::TestIamPermissionsRequest>);

    impl TestIamPermissionsByProjectAndLocationAndSecret {
        pub(crate) fn new(stub: Arc<dyn super::super::stub::dynamic::SecretManagerService>) -> Self {
            Self(
                RequestBuilder::new(stub)
            )
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::TestIamPermissionsRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::TestIamPermissionsResponse> {
            (*self.0.stub).test_iam_permissions_by_project_and_location_and_secret(self.0.request, self.0.options).await
        }

        /// Sets the value of [project][crate::model::TestIamPermissionsRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [secret][crate::model::TestIamPermissionsRequest::secret].
        pub fn set_secret<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.secret = v.into();
            self
        }

        /// Sets the value of [location][crate::model::TestIamPermissionsRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }

        /// Sets the value of [permissions][crate::model::TestIamPermissionsRequest::permissions].
        pub fn set_permissions<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>
        {
            use std::iter::Iterator;
            self.0.request.permissions = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for TestIamPermissionsByProjectAndLocationAndSecret {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

}
