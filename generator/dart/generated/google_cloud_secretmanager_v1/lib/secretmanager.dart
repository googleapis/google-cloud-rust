// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

/// The Google Cloud client for the Secret Manager API.
///
/// Stores sensitive data such as API keys, passwords, and certificates.
/// Provides convenience while improving security.
library;

import 'dart:typed_data';

import 'package:google_cloud_gax/common.dart';
import 'package:google_cloud_gax/src/encoding.dart';
import 'package:google_cloud_iam_v1/iam.dart';
import 'package:google_cloud_location/location.dart';
import 'package:google_cloud_protobuf/protobuf.dart';
import 'package:http/http.dart' as http;

/// Secret Manager Service
///
/// Manages secrets and operations using those secrets. Implements a REST
/// model with the following objects:
///
/// * `Secret`
/// * `SecretVersion`
class SecretManagerService {
  static const String _host = 'secretmanager.googleapis.com';

  final ServiceClient _client;

  SecretManagerService({required http.Client client})
      : _client = ServiceClient(client: client);

  /// Lists `Secrets`.
  Future<ListSecretsResponse> listSecrets(ListSecretsRequest request) async {
    final url = Uri.https(_host, '/v1/${request.parent}/secrets');
    final response = await _client.get(url);
    return ListSecretsResponse.fromJson(response);
  }

  /// Creates a new `Secret` containing no
  /// `SecretVersions`.
  Future<Secret> createSecret(CreateSecretRequest request) async {
    final url = Uri.https(_host, '/v1/${request.parent}/secrets');
    final response = await _client.post(url, body: request.secret);
    return Secret.fromJson(response);
  }

  /// Creates a new `SecretVersion`
  /// containing secret data and attaches it to an existing
  /// `Secret`.
  Future<SecretVersion> addSecretVersion(
      AddSecretVersionRequest request) async {
    final url = Uri.https(_host, '/v1/${request.parent}:addVersion');
    final response = await _client.post(url, body: request);
    return SecretVersion.fromJson(response);
  }

  /// Gets metadata for a given `Secret`.
  Future<Secret> getSecret(GetSecretRequest request) async {
    final url = Uri.https(_host, '/v1/${request.name}');
    final response = await _client.get(url);
    return Secret.fromJson(response);
  }

  /// Updates metadata of an existing
  /// `Secret`.
  Future<Secret> updateSecret(UpdateSecretRequest request) async {
    final url = Uri.https(_host, '/v1/${request.secret.name}');
    final response = await _client.patch(url, body: request.secret);
    return Secret.fromJson(response);
  }

  /// Deletes a `Secret`.
  Future<void> deleteSecret(DeleteSecretRequest request) async {
    final url = Uri.https(_host, '/v1/${request.name}');
    await _client.delete(url);
  }

  /// Lists `SecretVersions`. This
  /// call does not return secret data.
  Future<ListSecretVersionsResponse> listSecretVersions(
      ListSecretVersionsRequest request) async {
    final url = Uri.https(_host, '/v1/${request.parent}/versions');
    final response = await _client.get(url);
    return ListSecretVersionsResponse.fromJson(response);
  }

  /// Gets metadata for a
  /// `SecretVersion`.
  ///
  /// `projects/*/secrets/*/versions/latest` is an alias to the most recently
  /// created `SecretVersion`.
  Future<SecretVersion> getSecretVersion(
      GetSecretVersionRequest request) async {
    final url = Uri.https(_host, '/v1/${request.name}');
    final response = await _client.get(url);
    return SecretVersion.fromJson(response);
  }

  /// Accesses a `SecretVersion`.
  /// This call returns the secret data.
  ///
  /// `projects/*/secrets/*/versions/latest` is an alias to the most recently
  /// created `SecretVersion`.
  Future<AccessSecretVersionResponse> accessSecretVersion(
      AccessSecretVersionRequest request) async {
    final url = Uri.https(_host, '/v1/${request.name}:access');
    final response = await _client.get(url);
    return AccessSecretVersionResponse.fromJson(response);
  }

  /// Disables a `SecretVersion`.
  ///
  /// Sets the `state` of the
  /// `SecretVersion` to
  /// `DISABLED`.
  Future<SecretVersion> disableSecretVersion(
      DisableSecretVersionRequest request) async {
    final url = Uri.https(_host, '/v1/${request.name}:disable');
    final response = await _client.post(url, body: request);
    return SecretVersion.fromJson(response);
  }

  /// Enables a `SecretVersion`.
  ///
  /// Sets the `state` of the
  /// `SecretVersion` to
  /// `ENABLED`.
  Future<SecretVersion> enableSecretVersion(
      EnableSecretVersionRequest request) async {
    final url = Uri.https(_host, '/v1/${request.name}:enable');
    final response = await _client.post(url, body: request);
    return SecretVersion.fromJson(response);
  }

  /// Destroys a `SecretVersion`.
  ///
  /// Sets the `state` of the
  /// `SecretVersion` to
  /// `DESTROYED`
  /// and irrevocably destroys the secret data.
  Future<SecretVersion> destroySecretVersion(
      DestroySecretVersionRequest request) async {
    final url = Uri.https(_host, '/v1/${request.name}:destroy');
    final response = await _client.post(url, body: request);
    return SecretVersion.fromJson(response);
  }

  /// Sets the access control policy on the specified secret. Replaces any
  /// existing policy.
  ///
  /// Permissions on
  /// `SecretVersions` are enforced
  /// according to the policy set on the associated
  /// `Secret`.
  Future<Policy> setIamPolicy(SetIamPolicyRequest request) async {
    final url = Uri.https(_host, '/v1/${request.resource}:setIamPolicy');
    final response = await _client.post(url, body: request);
    return Policy.fromJson(response);
  }

  /// Gets the access control policy for a secret.
  /// Returns empty policy if the secret exists and does not have a policy set.
  Future<Policy> getIamPolicy(GetIamPolicyRequest request) async {
    final url = Uri.https(_host, '/v1/${request.resource}:getIamPolicy');
    final response = await _client.get(url);
    return Policy.fromJson(response);
  }

  /// Returns permissions that a caller has for the specified secret.
  /// If the secret does not exist, this call returns an empty set of
  /// permissions, not a NOT_FOUND error.
  ///
  /// Note: This operation is designed to be used for building permission-aware
  /// UIs and command-line tools, not for authorization checking. This operation
  /// may "fail open" without warning.
  Future<TestIamPermissionsResponse> testIamPermissions(
      TestIamPermissionsRequest request) async {
    final url = Uri.https(_host, '/v1/${request.resource}:testIamPermissions');
    final response = await _client.post(url, body: request);
    return TestIamPermissionsResponse.fromJson(response);
  }

  /// Lists information about the supported locations for this service.
  Future<ListLocationsResponse> listLocations(
      ListLocationsRequest request) async {
    final url = Uri.https(_host, '/v1/${request.name}/locations');
    final response = await _client.get(url);
    return ListLocationsResponse.fromJson(response);
  }

  /// Gets information about a location.
  Future<Location> getLocation(GetLocationRequest request) async {
    final url = Uri.https(_host, '/v1/${request.name}');
    final response = await _client.get(url);
    return Location.fromJson(response);
  }

  /// Closes the client and cleans up any resources associated with it.
  ///
  /// Once [close] is called, no other methods should be called.
  void close() => _client.close();
}

/// A `Secret` is a logical secret whose
/// value and versions can be accessed.
///
/// A `Secret` is made up of zero or more
/// `SecretVersions` that represent
/// the secret data.
class Secret extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.Secret';

  /// Output only. The resource name of the
  /// `Secret` in the format
  /// `projects/*/secrets/*`.
  final String? name;

  /// Optional. Immutable. The replication policy of the secret data attached to
  /// the `Secret`.
  ///
  /// The replication policy cannot be changed after the Secret has been created.
  final Replication? replication;

  /// Output only. The time at which the
  /// `Secret` was created.
  final Timestamp? createTime;

  /// The labels assigned to this Secret.
  ///
  /// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding
  /// of maximum 128 bytes, and must conform to the following PCRE regular
  /// expression: `[\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}`
  ///
  /// Label values must be between 0 and 63 characters long, have a UTF-8
  /// encoding of maximum 128 bytes, and must conform to the following PCRE
  /// regular expression: `[\p{Ll}\p{Lo}\p{N}_-]{0,63}`
  ///
  /// No more than 64 labels can be assigned to a given resource.
  final Map<String, String>? labels;

  /// Optional. A list of up to 10 Pub/Sub topics to which messages are published
  /// when control plane operations are called on the secret or its versions.
  final List<Topic>? topics;

  /// Optional. Timestamp in UTC when the
  /// `Secret` is scheduled to expire.
  /// This is always provided on output, regardless of what was sent on input.
  final Timestamp? expireTime;

  /// Input only. The TTL for the
  /// `Secret`.
  final Duration? ttl;

  /// Optional. Etag of the currently stored
  /// `Secret`.
  final String? etag;

  /// Optional. Rotation policy attached to the
  /// `Secret`. May be excluded if there is
  /// no rotation policy.
  final Rotation? rotation;

  /// Optional. Mapping from version alias to version name.
  ///
  /// A version alias is a string with a maximum length of 63 characters and can
  /// contain uppercase and lowercase letters, numerals, and the hyphen (`-`)
  /// and underscore ('_') characters. An alias string must start with a
  /// letter and cannot be the string 'latest' or 'NEW'.
  /// No more than 50 aliases can be assigned to a given secret.
  ///
  /// Version-Alias pairs will be viewable via GetSecret and modifiable via
  /// UpdateSecret. Access by alias is only be supported on
  /// GetSecretVersion and AccessSecretVersion.
  final Map<String, int>? versionAliases;

  /// Optional. Custom metadata about the secret.
  ///
  /// Annotations are distinct from various forms of labels.
  /// Annotations exist to allow client tools to store their own state
  /// information without requiring a database.
  ///
  /// Annotation keys must be between 1 and 63 characters long, have a UTF-8
  /// encoding of maximum 128 bytes, begin and end with an alphanumeric character
  /// ([a-z0-9A-Z]), and may have dashes (-), underscores (_), dots (.), and
  /// alphanumerics in between these symbols.
  ///
  /// The total size of annotation keys and values must be less than 16KiB.
  final Map<String, String>? annotations;

  /// Optional. Secret Version TTL after destruction request
  ///
  /// This is a part of the Delayed secret version destroy feature.
  /// For secret with TTL>0, version destruction doesn't happen immediately
  /// on calling destroy instead the version goes to a disabled state and
  /// destruction happens after the TTL expires.
  final Duration? versionDestroyTtl;

  /// Optional. The customer-managed encryption configuration of the regionalized
  /// secrets. If no configuration is provided, Google-managed default encryption
  /// is used.
  ///
  /// Updates to the `Secret` encryption
  /// configuration only apply to
  /// `SecretVersions` added
  /// afterwards. They do not apply retroactively to existing
  /// `SecretVersions`.
  final CustomerManagedEncryption? customerManagedEncryption;

  Secret({
    this.name,
    this.replication,
    this.createTime,
    this.labels,
    this.topics,
    this.expireTime,
    this.ttl,
    this.etag,
    this.rotation,
    this.versionAliases,
    this.annotations,
    this.versionDestroyTtl,
    this.customerManagedEncryption,
  }) : super(fullyQualifiedName);

  factory Secret.fromJson(Map<String, dynamic> json) {
    return Secret(
      name: json['name'],
      replication: decode(json['replication'], Replication.fromJson),
      createTime: decodeCustom(json['createTime'], Timestamp.fromJson),
      labels: decodeMap(json['labels']),
      topics: decodeListMessage(json['topics'], Topic.fromJson),
      expireTime: decodeCustom(json['expireTime'], Timestamp.fromJson),
      ttl: decodeCustom(json['ttl'], Duration.fromJson),
      etag: json['etag'],
      rotation: decode(json['rotation'], Rotation.fromJson),
      versionAliases: decodeMap(json['versionAliases']),
      annotations: decodeMap(json['annotations']),
      versionDestroyTtl:
          decodeCustom(json['versionDestroyTtl'], Duration.fromJson),
      customerManagedEncryption: decode(json['customerManagedEncryption'],
          CustomerManagedEncryption.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (name != null) 'name': name,
      if (replication != null) 'replication': replication!.toJson(),
      if (createTime != null) 'createTime': createTime!.toJson(),
      if (labels != null) 'labels': labels,
      if (topics != null) 'topics': encodeList(topics),
      if (expireTime != null) 'expireTime': expireTime!.toJson(),
      if (ttl != null) 'ttl': ttl!.toJson(),
      if (etag != null) 'etag': etag,
      if (rotation != null) 'rotation': rotation!.toJson(),
      if (versionAliases != null) 'versionAliases': versionAliases,
      if (annotations != null) 'annotations': annotations,
      if (versionDestroyTtl != null)
        'versionDestroyTtl': versionDestroyTtl!.toJson(),
      if (customerManagedEncryption != null)
        'customerManagedEncryption': customerManagedEncryption!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [
      if (name != null) 'name=$name',
      if (etag != null) 'etag=$etag',
    ].join(',');
    return 'Secret($contents)';
  }
}

/// A secret version resource in the Secret Manager API.
class SecretVersion extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.SecretVersion';

  /// Output only. The resource name of the
  /// `SecretVersion` in the format
  /// `projects/*/secrets/*/versions/*`.
  ///
  /// `SecretVersion` IDs in a
  /// `Secret` start at 1 and are
  /// incremented for each subsequent version of the secret.
  final String? name;

  /// Output only. The time at which the
  /// `SecretVersion` was created.
  final Timestamp? createTime;

  /// Output only. The time this
  /// `SecretVersion` was destroyed.
  /// Only present if `state`
  /// is
  /// `DESTROYED`.
  final Timestamp? destroyTime;

  /// Output only. The current state of the
  /// `SecretVersion`.
  final SecretVersion_State? state;

  /// The replication status of the
  /// `SecretVersion`.
  final ReplicationStatus? replicationStatus;

  /// Output only. Etag of the currently stored
  /// `SecretVersion`.
  final String? etag;

  /// Output only. True if payload checksum specified in
  /// `SecretPayload` object has
  /// been received by
  /// `SecretManagerService`
  /// on
  /// `SecretManagerService.AddSecretVersion`.
  final bool? clientSpecifiedPayloadChecksum;

  /// Optional. Output only. Scheduled destroy time for secret version.
  /// This is a part of the Delayed secret version destroy feature. For a
  /// Secret with a valid version destroy TTL, when a secert version is
  /// destroyed, version is moved to disabled state and it is scheduled for
  /// destruction Version is destroyed only after the scheduled_destroy_time.
  final Timestamp? scheduledDestroyTime;

  /// Output only. The customer-managed encryption status of the
  /// `SecretVersion`. Only
  /// populated if customer-managed encryption is used and
  /// `Secret` is a regionalized secret.
  final CustomerManagedEncryptionStatus? customerManagedEncryption;

  SecretVersion({
    this.name,
    this.createTime,
    this.destroyTime,
    this.state,
    this.replicationStatus,
    this.etag,
    this.clientSpecifiedPayloadChecksum,
    this.scheduledDestroyTime,
    this.customerManagedEncryption,
  }) : super(fullyQualifiedName);

  factory SecretVersion.fromJson(Map<String, dynamic> json) {
    return SecretVersion(
      name: json['name'],
      createTime: decodeCustom(json['createTime'], Timestamp.fromJson),
      destroyTime: decodeCustom(json['destroyTime'], Timestamp.fromJson),
      state: decodeEnum(json['state'], SecretVersion_State.fromJson),
      replicationStatus:
          decode(json['replicationStatus'], ReplicationStatus.fromJson),
      etag: json['etag'],
      clientSpecifiedPayloadChecksum: json['clientSpecifiedPayloadChecksum'],
      scheduledDestroyTime:
          decodeCustom(json['scheduledDestroyTime'], Timestamp.fromJson),
      customerManagedEncryption: decode(json['customerManagedEncryption'],
          CustomerManagedEncryptionStatus.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (name != null) 'name': name,
      if (createTime != null) 'createTime': createTime!.toJson(),
      if (destroyTime != null) 'destroyTime': destroyTime!.toJson(),
      if (state != null) 'state': state!.toJson(),
      if (replicationStatus != null)
        'replicationStatus': replicationStatus!.toJson(),
      if (etag != null) 'etag': etag,
      if (clientSpecifiedPayloadChecksum != null)
        'clientSpecifiedPayloadChecksum': clientSpecifiedPayloadChecksum,
      if (scheduledDestroyTime != null)
        'scheduledDestroyTime': scheduledDestroyTime!.toJson(),
      if (customerManagedEncryption != null)
        'customerManagedEncryption': customerManagedEncryption!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [
      if (name != null) 'name=$name',
      if (state != null) 'state=$state',
      if (etag != null) 'etag=$etag',
      if (clientSpecifiedPayloadChecksum != null)
        'clientSpecifiedPayloadChecksum=$clientSpecifiedPayloadChecksum',
    ].join(',');
    return 'SecretVersion($contents)';
  }
}

/// The state of a
/// `SecretVersion`, indicating if
/// it can be accessed.
class SecretVersion_State extends Enum {
  /// Not specified. This value is unused and invalid.
  static const stateUnspecified = SecretVersion_State('STATE_UNSPECIFIED');

  /// The `SecretVersion` may be
  /// accessed.
  static const enabled = SecretVersion_State('ENABLED');

  /// The `SecretVersion` may not
  /// be accessed, but the secret data is still available and can be placed
  /// back into the
  /// `ENABLED`
  /// state.
  static const disabled = SecretVersion_State('DISABLED');

  /// The `SecretVersion` is
  /// destroyed and the secret data is no longer stored. A version may not
  /// leave this state once entered.
  static const destroyed = SecretVersion_State('DESTROYED');

  const SecretVersion_State(super.value);

  factory SecretVersion_State.fromJson(String json) =>
      SecretVersion_State(json);

  @override
  String toString() => 'State.$value';
}

/// A policy that defines the replication and encryption configuration of data.
class Replication extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.Replication';

  /// The `Secret` will automatically be
  /// replicated without any restrictions.
  final Replication_Automatic? automatic;

  /// The `Secret` will only be
  /// replicated into the locations specified.
  final Replication_UserManaged? userManaged;

  Replication({
    this.automatic,
    this.userManaged,
  }) : super(fullyQualifiedName);

  factory Replication.fromJson(Map<String, dynamic> json) {
    return Replication(
      automatic: decode(json['automatic'], Replication_Automatic.fromJson),
      userManaged:
          decode(json['userManaged'], Replication_UserManaged.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (automatic != null) 'automatic': automatic!.toJson(),
      if (userManaged != null) 'userManaged': userManaged!.toJson(),
    };
  }

  @override
  String toString() => 'Replication()';
}

/// A replication policy that replicates the
/// `Secret` payload without any
/// restrictions.
class Replication_Automatic extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.Replication.Automatic';

  /// Optional. The customer-managed encryption configuration of the
  /// `Secret`. If no configuration is
  /// provided, Google-managed default encryption is used.
  ///
  /// Updates to the `Secret` encryption
  /// configuration only apply to
  /// `SecretVersions` added
  /// afterwards. They do not apply retroactively to existing
  /// `SecretVersions`.
  final CustomerManagedEncryption? customerManagedEncryption;

  Replication_Automatic({
    this.customerManagedEncryption,
  }) : super(fullyQualifiedName);

  factory Replication_Automatic.fromJson(Map<String, dynamic> json) {
    return Replication_Automatic(
      customerManagedEncryption: decode(json['customerManagedEncryption'],
          CustomerManagedEncryption.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (customerManagedEncryption != null)
        'customerManagedEncryption': customerManagedEncryption!.toJson(),
    };
  }

  @override
  String toString() => 'Automatic()';
}

/// A replication policy that replicates the
/// `Secret` payload into the locations
/// specified in
/// `Replication.UserManaged.replicas`
class Replication_UserManaged extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.Replication.UserManaged';

  /// Required. The list of Replicas for this
  /// `Secret`.
  ///
  /// Cannot be empty.
  final List<Replication_UserManaged_Replica>? replicas;

  Replication_UserManaged({
    this.replicas,
  }) : super(fullyQualifiedName);

  factory Replication_UserManaged.fromJson(Map<String, dynamic> json) {
    return Replication_UserManaged(
      replicas: decodeListMessage(
          json['replicas'], Replication_UserManaged_Replica.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (replicas != null) 'replicas': encodeList(replicas),
    };
  }

  @override
  String toString() => 'UserManaged()';
}

/// Represents a Replica for this
/// `Secret`.
class Replication_UserManaged_Replica extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.Replication.UserManaged.Replica';

  /// The canonical IDs of the location to replicate data.
  /// For example: `"us-east1"`.
  final String? location;

  /// Optional. The customer-managed encryption configuration of the
  /// [User-Managed Replica][Replication.UserManaged.Replica]. If no
  /// configuration is provided, Google-managed default encryption is used.
  ///
  /// Updates to the `Secret`
  /// encryption configuration only apply to
  /// `SecretVersions` added
  /// afterwards. They do not apply retroactively to existing
  /// `SecretVersions`.
  final CustomerManagedEncryption? customerManagedEncryption;

  Replication_UserManaged_Replica({
    this.location,
    this.customerManagedEncryption,
  }) : super(fullyQualifiedName);

  factory Replication_UserManaged_Replica.fromJson(Map<String, dynamic> json) {
    return Replication_UserManaged_Replica(
      location: json['location'],
      customerManagedEncryption: decode(json['customerManagedEncryption'],
          CustomerManagedEncryption.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (location != null) 'location': location,
      if (customerManagedEncryption != null)
        'customerManagedEncryption': customerManagedEncryption!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [
      if (location != null) 'location=$location',
    ].join(',');
    return 'Replica($contents)';
  }
}

/// Configuration for encrypting secret payloads using customer-managed
/// encryption keys (CMEK).
class CustomerManagedEncryption extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.CustomerManagedEncryption';

  /// Required. The resource name of the Cloud KMS CryptoKey used to encrypt
  /// secret payloads.
  ///
  /// For secrets using the
  /// `UserManaged`
  /// replication policy type, Cloud KMS CryptoKeys must reside in the same
  /// location as the [replica location][Secret.UserManaged.Replica.location].
  ///
  /// For secrets using the
  /// `Automatic`
  /// replication policy type, Cloud KMS CryptoKeys must reside in `global`.
  ///
  /// The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
  final String? kmsKeyName;

  CustomerManagedEncryption({
    this.kmsKeyName,
  }) : super(fullyQualifiedName);

  factory CustomerManagedEncryption.fromJson(Map<String, dynamic> json) {
    return CustomerManagedEncryption(
      kmsKeyName: json['kmsKeyName'],
    );
  }

  @override
  Object toJson() {
    return {
      if (kmsKeyName != null) 'kmsKeyName': kmsKeyName,
    };
  }

  @override
  String toString() {
    final contents = [
      if (kmsKeyName != null) 'kmsKeyName=$kmsKeyName',
    ].join(',');
    return 'CustomerManagedEncryption($contents)';
  }
}

/// The replication status of a
/// `SecretVersion`.
class ReplicationStatus extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.ReplicationStatus';

  /// Describes the replication status of a
  /// `SecretVersion` with
  /// automatic replication.
  ///
  /// Only populated if the parent
  /// `Secret` has an automatic
  /// replication policy.
  final ReplicationStatus_AutomaticStatus? automatic;

  /// Describes the replication status of a
  /// `SecretVersion` with
  /// user-managed replication.
  ///
  /// Only populated if the parent
  /// `Secret` has a user-managed
  /// replication policy.
  final ReplicationStatus_UserManagedStatus? userManaged;

  ReplicationStatus({
    this.automatic,
    this.userManaged,
  }) : super(fullyQualifiedName);

  factory ReplicationStatus.fromJson(Map<String, dynamic> json) {
    return ReplicationStatus(
      automatic:
          decode(json['automatic'], ReplicationStatus_AutomaticStatus.fromJson),
      userManaged: decode(
          json['userManaged'], ReplicationStatus_UserManagedStatus.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (automatic != null) 'automatic': automatic!.toJson(),
      if (userManaged != null) 'userManaged': userManaged!.toJson(),
    };
  }

  @override
  String toString() => 'ReplicationStatus()';
}

/// The replication status of a
/// `SecretVersion` using
/// automatic replication.
///
/// Only populated if the parent `Secret`
/// has an automatic replication policy.
class ReplicationStatus_AutomaticStatus extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.ReplicationStatus.AutomaticStatus';

  /// Output only. The customer-managed encryption status of the
  /// `SecretVersion`. Only
  /// populated if customer-managed encryption is used.
  final CustomerManagedEncryptionStatus? customerManagedEncryption;

  ReplicationStatus_AutomaticStatus({
    this.customerManagedEncryption,
  }) : super(fullyQualifiedName);

  factory ReplicationStatus_AutomaticStatus.fromJson(
      Map<String, dynamic> json) {
    return ReplicationStatus_AutomaticStatus(
      customerManagedEncryption: decode(json['customerManagedEncryption'],
          CustomerManagedEncryptionStatus.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (customerManagedEncryption != null)
        'customerManagedEncryption': customerManagedEncryption!.toJson(),
    };
  }

  @override
  String toString() => 'AutomaticStatus()';
}

/// The replication status of a
/// `SecretVersion` using
/// user-managed replication.
///
/// Only populated if the parent `Secret`
/// has a user-managed replication policy.
class ReplicationStatus_UserManagedStatus extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.ReplicationStatus.UserManagedStatus';

  /// Output only. The list of replica statuses for the
  /// `SecretVersion`.
  final List<ReplicationStatus_UserManagedStatus_ReplicaStatus>? replicas;

  ReplicationStatus_UserManagedStatus({
    this.replicas,
  }) : super(fullyQualifiedName);

  factory ReplicationStatus_UserManagedStatus.fromJson(
      Map<String, dynamic> json) {
    return ReplicationStatus_UserManagedStatus(
      replicas: decodeListMessage(json['replicas'],
          ReplicationStatus_UserManagedStatus_ReplicaStatus.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (replicas != null) 'replicas': encodeList(replicas),
    };
  }

  @override
  String toString() => 'UserManagedStatus()';
}

/// Describes the status of a user-managed replica for the
/// `SecretVersion`.
class ReplicationStatus_UserManagedStatus_ReplicaStatus extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.ReplicationStatus.UserManagedStatus.ReplicaStatus';

  /// Output only. The canonical ID of the replica location.
  /// For example: `"us-east1"`.
  final String? location;

  /// Output only. The customer-managed encryption status of the
  /// `SecretVersion`. Only
  /// populated if customer-managed encryption is used.
  final CustomerManagedEncryptionStatus? customerManagedEncryption;

  ReplicationStatus_UserManagedStatus_ReplicaStatus({
    this.location,
    this.customerManagedEncryption,
  }) : super(fullyQualifiedName);

  factory ReplicationStatus_UserManagedStatus_ReplicaStatus.fromJson(
      Map<String, dynamic> json) {
    return ReplicationStatus_UserManagedStatus_ReplicaStatus(
      location: json['location'],
      customerManagedEncryption: decode(json['customerManagedEncryption'],
          CustomerManagedEncryptionStatus.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (location != null) 'location': location,
      if (customerManagedEncryption != null)
        'customerManagedEncryption': customerManagedEncryption!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [
      if (location != null) 'location=$location',
    ].join(',');
    return 'ReplicaStatus($contents)';
  }
}

/// Describes the status of customer-managed encryption.
class CustomerManagedEncryptionStatus extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.CustomerManagedEncryptionStatus';

  /// Required. The resource name of the Cloud KMS CryptoKeyVersion used to
  /// encrypt the secret payload, in the following format:
  /// `projects/*/locations/*/keyRings/*/cryptoKeys/*/versions/*`.
  final String? kmsKeyVersionName;

  CustomerManagedEncryptionStatus({
    this.kmsKeyVersionName,
  }) : super(fullyQualifiedName);

  factory CustomerManagedEncryptionStatus.fromJson(Map<String, dynamic> json) {
    return CustomerManagedEncryptionStatus(
      kmsKeyVersionName: json['kmsKeyVersionName'],
    );
  }

  @override
  Object toJson() {
    return {
      if (kmsKeyVersionName != null) 'kmsKeyVersionName': kmsKeyVersionName,
    };
  }

  @override
  String toString() {
    final contents = [
      if (kmsKeyVersionName != null) 'kmsKeyVersionName=$kmsKeyVersionName',
    ].join(',');
    return 'CustomerManagedEncryptionStatus($contents)';
  }
}

/// A Pub/Sub topic which Secret Manager will publish to when control plane
/// events occur on this secret.
class Topic extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.Topic';

  /// Identifier. The resource name of the Pub/Sub topic that will be published
  /// to, in the following format: `projects/*/topics/*`. For publication to
  /// succeed, the Secret Manager service agent must have the
  /// `pubsub.topic.publish` permission on the topic. The Pub/Sub Publisher role
  /// (`roles/pubsub.publisher`) includes this permission.
  final String? name;

  Topic({
    this.name,
  }) : super(fullyQualifiedName);

  factory Topic.fromJson(Map<String, dynamic> json) {
    return Topic(
      name: json['name'],
    );
  }

  @override
  Object toJson() {
    return {
      if (name != null) 'name': name,
    };
  }

  @override
  String toString() {
    final contents = [
      if (name != null) 'name=$name',
    ].join(',');
    return 'Topic($contents)';
  }
}

/// The rotation time and period for a
/// `Secret`. At next_rotation_time, Secret
/// Manager will send a Pub/Sub notification to the topics configured on the
/// Secret. `Secret.topics` must be
/// set to configure rotation.
class Rotation extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.Rotation';

  /// Optional. Timestamp in UTC at which the
  /// `Secret` is scheduled to rotate.
  /// Cannot be set to less than 300s (5 min) in the future and at most
  /// 3153600000s (100 years).
  ///
  /// `next_rotation_time`
  /// MUST  be set if
  /// `rotation_period`
  /// is set.
  final Timestamp? nextRotationTime;

  /// Input only. The Duration between rotation notifications. Must be in seconds
  /// and at least 3600s (1h) and at most 3153600000s (100 years).
  ///
  /// If
  /// `rotation_period`
  /// is set,
  /// `next_rotation_time`
  /// must be set.
  /// `next_rotation_time`
  /// will be advanced by this period when the service automatically sends
  /// rotation notifications.
  final Duration? rotationPeriod;

  Rotation({
    this.nextRotationTime,
    this.rotationPeriod,
  }) : super(fullyQualifiedName);

  factory Rotation.fromJson(Map<String, dynamic> json) {
    return Rotation(
      nextRotationTime:
          decodeCustom(json['nextRotationTime'], Timestamp.fromJson),
      rotationPeriod: decodeCustom(json['rotationPeriod'], Duration.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (nextRotationTime != null)
        'nextRotationTime': nextRotationTime!.toJson(),
      if (rotationPeriod != null) 'rotationPeriod': rotationPeriod!.toJson(),
    };
  }

  @override
  String toString() => 'Rotation()';
}

/// A secret payload resource in the Secret Manager API. This contains the
/// sensitive secret payload that is associated with a
/// `SecretVersion`.
class SecretPayload extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.SecretPayload';

  /// The secret data. Must be no larger than 64KiB.
  final Uint8List? data;

  /// Optional. If specified,
  /// `SecretManagerService`
  /// will verify the integrity of the received
  /// `data` on
  /// `SecretManagerService.AddSecretVersion`
  /// calls using the crc32c checksum and store it to include in future
  /// `SecretManagerService.AccessSecretVersion`
  /// responses. If a checksum is not provided in the
  /// `SecretManagerService.AddSecretVersion`
  /// request, the
  /// `SecretManagerService`
  /// will generate and store one for you.
  ///
  /// The CRC32C value is encoded as a Int64 for compatibility, and can be
  /// safely downconverted to uint32 in languages that support this type.
  /// https://cloud.google.com/apis/design/design_patterns#integer_types
  final int? dataCrc32C;

  SecretPayload({
    this.data,
    this.dataCrc32C,
  }) : super(fullyQualifiedName);

  factory SecretPayload.fromJson(Map<String, dynamic> json) {
    return SecretPayload(
      data: decodeBytes(json['data']),
      dataCrc32C: decodeInt64(json['dataCrc32c']),
    );
  }

  @override
  Object toJson() {
    return {
      if (data != null) 'data': encodeBytes(data),
      if (dataCrc32C != null) 'dataCrc32c': encodeInt64(dataCrc32C),
    };
  }

  @override
  String toString() {
    final contents = [
      if (data != null) 'data=$data',
      if (dataCrc32C != null) 'dataCrc32c=$dataCrc32C',
    ].join(',');
    return 'SecretPayload($contents)';
  }
}

/// Request message for
/// `SecretManagerService.ListSecrets`.
class ListSecretsRequest extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.ListSecretsRequest';

  /// Required. The resource name of the project associated with the
  /// `Secrets`, in the format `projects/*`
  /// or `projects/*/locations/*`
  final String parent;

  /// Optional. The maximum number of results to be returned in a single page. If
  /// set to 0, the server decides the number of results to return. If the
  /// number is greater than 25000, it is capped at 25000.
  final int? pageSize;

  /// Optional. Pagination token, returned earlier via
  /// `ListSecretsResponse.next_page_token`.
  final String? pageToken;

  /// Optional. Filter string, adhering to the rules in
  /// [List-operation
  /// filtering](https://cloud.google.com/secret-manager/docs/filtering). List
  /// only secrets matching the filter. If filter is empty, all secrets are
  /// listed.
  final String? filter;

  ListSecretsRequest({
    required this.parent,
    this.pageSize,
    this.pageToken,
    this.filter,
  }) : super(fullyQualifiedName);

  factory ListSecretsRequest.fromJson(Map<String, dynamic> json) {
    return ListSecretsRequest(
      parent: json['parent'],
      pageSize: json['pageSize'],
      pageToken: json['pageToken'],
      filter: json['filter'],
    );
  }

  @override
  Object toJson() {
    return {
      'parent': parent,
      if (pageSize != null) 'pageSize': pageSize,
      if (pageToken != null) 'pageToken': pageToken,
      if (filter != null) 'filter': filter,
    };
  }

  @override
  String toString() {
    final contents = [
      'parent=$parent',
      if (pageSize != null) 'pageSize=$pageSize',
      if (pageToken != null) 'pageToken=$pageToken',
      if (filter != null) 'filter=$filter',
    ].join(',');
    return 'ListSecretsRequest($contents)';
  }
}

/// Response message for
/// `SecretManagerService.ListSecrets`.
class ListSecretsResponse extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.ListSecretsResponse';

  /// The list of `Secrets` sorted in
  /// reverse by create_time (newest first).
  final List<Secret>? secrets;

  /// A token to retrieve the next page of results. Pass this value in
  /// `ListSecretsRequest.page_token`
  /// to retrieve the next page.
  final String? nextPageToken;

  /// The total number of `Secrets` but 0
  /// when the
  /// `ListSecretsRequest.filter`
  /// field is set.
  final int? totalSize;

  ListSecretsResponse({
    this.secrets,
    this.nextPageToken,
    this.totalSize,
  }) : super(fullyQualifiedName);

  factory ListSecretsResponse.fromJson(Map<String, dynamic> json) {
    return ListSecretsResponse(
      secrets: decodeListMessage(json['secrets'], Secret.fromJson),
      nextPageToken: json['nextPageToken'],
      totalSize: json['totalSize'],
    );
  }

  @override
  Object toJson() {
    return {
      if (secrets != null) 'secrets': encodeList(secrets),
      if (nextPageToken != null) 'nextPageToken': nextPageToken,
      if (totalSize != null) 'totalSize': totalSize,
    };
  }

  @override
  String toString() {
    final contents = [
      if (nextPageToken != null) 'nextPageToken=$nextPageToken',
      if (totalSize != null) 'totalSize=$totalSize',
    ].join(',');
    return 'ListSecretsResponse($contents)';
  }
}

/// Request message for
/// `SecretManagerService.CreateSecret`.
class CreateSecretRequest extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.CreateSecretRequest';

  /// Required. The resource name of the project to associate with the
  /// `Secret`, in the format `projects/*`
  /// or `projects/*/locations/*`.
  final String parent;

  /// Required. This must be unique within the project.
  ///
  /// A secret ID is a string with a maximum length of 255 characters and can
  /// contain uppercase and lowercase letters, numerals, and the hyphen (`-`) and
  /// underscore (`_`) characters.
  final String? secretId;

  /// Required. A `Secret` with initial
  /// field values.
  final Secret secret;

  CreateSecretRequest({
    required this.parent,
    this.secretId,
    required this.secret,
  }) : super(fullyQualifiedName);

  factory CreateSecretRequest.fromJson(Map<String, dynamic> json) {
    return CreateSecretRequest(
      parent: json['parent'],
      secretId: json['secretId'],
      secret: decode(json['secret'], Secret.fromJson)!,
    );
  }

  @override
  Object toJson() {
    return {
      'parent': parent,
      if (secretId != null) 'secretId': secretId,
      'secret': secret.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [
      'parent=$parent',
      if (secretId != null) 'secretId=$secretId',
    ].join(',');
    return 'CreateSecretRequest($contents)';
  }
}

/// Request message for
/// `SecretManagerService.AddSecretVersion`.
class AddSecretVersionRequest extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.AddSecretVersionRequest';

  /// Required. The resource name of the
  /// `Secret` to associate with the
  /// `SecretVersion` in the format
  /// `projects/*/secrets/*` or `projects/*/locations/*/secrets/*`.
  final String parent;

  /// Required. The secret payload of the
  /// `SecretVersion`.
  final SecretPayload? payload;

  AddSecretVersionRequest({
    required this.parent,
    this.payload,
  }) : super(fullyQualifiedName);

  factory AddSecretVersionRequest.fromJson(Map<String, dynamic> json) {
    return AddSecretVersionRequest(
      parent: json['parent'],
      payload: decode(json['payload'], SecretPayload.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      'parent': parent,
      if (payload != null) 'payload': payload!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [
      'parent=$parent',
    ].join(',');
    return 'AddSecretVersionRequest($contents)';
  }
}

/// Request message for
/// `SecretManagerService.GetSecret`.
class GetSecretRequest extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.GetSecretRequest';

  /// Required. The resource name of the
  /// `Secret`, in the format
  /// `projects/*/secrets/*` or `projects/*/locations/*/secrets/*`.
  final String name;

  GetSecretRequest({
    required this.name,
  }) : super(fullyQualifiedName);

  factory GetSecretRequest.fromJson(Map<String, dynamic> json) {
    return GetSecretRequest(
      name: json['name'],
    );
  }

  @override
  Object toJson() {
    return {
      'name': name,
    };
  }

  @override
  String toString() {
    final contents = [
      'name=$name',
    ].join(',');
    return 'GetSecretRequest($contents)';
  }
}

/// Request message for
/// `SecretManagerService.ListSecretVersions`.
class ListSecretVersionsRequest extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.ListSecretVersionsRequest';

  /// Required. The resource name of the
  /// `Secret` associated with the
  /// `SecretVersions` to list, in
  /// the format `projects/*/secrets/*` or `projects/*/locations/*/secrets/*`.
  final String parent;

  /// Optional. The maximum number of results to be returned in a single page. If
  /// set to 0, the server decides the number of results to return. If the
  /// number is greater than 25000, it is capped at 25000.
  final int? pageSize;

  /// Optional. Pagination token, returned earlier via
  /// ListSecretVersionsResponse.next_page_token][].
  final String? pageToken;

  /// Optional. Filter string, adhering to the rules in
  /// [List-operation
  /// filtering](https://cloud.google.com/secret-manager/docs/filtering). List
  /// only secret versions matching the filter. If filter is empty, all secret
  /// versions are listed.
  final String? filter;

  ListSecretVersionsRequest({
    required this.parent,
    this.pageSize,
    this.pageToken,
    this.filter,
  }) : super(fullyQualifiedName);

  factory ListSecretVersionsRequest.fromJson(Map<String, dynamic> json) {
    return ListSecretVersionsRequest(
      parent: json['parent'],
      pageSize: json['pageSize'],
      pageToken: json['pageToken'],
      filter: json['filter'],
    );
  }

  @override
  Object toJson() {
    return {
      'parent': parent,
      if (pageSize != null) 'pageSize': pageSize,
      if (pageToken != null) 'pageToken': pageToken,
      if (filter != null) 'filter': filter,
    };
  }

  @override
  String toString() {
    final contents = [
      'parent=$parent',
      if (pageSize != null) 'pageSize=$pageSize',
      if (pageToken != null) 'pageToken=$pageToken',
      if (filter != null) 'filter=$filter',
    ].join(',');
    return 'ListSecretVersionsRequest($contents)';
  }
}

/// Response message for
/// `SecretManagerService.ListSecretVersions`.
class ListSecretVersionsResponse extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.ListSecretVersionsResponse';

  /// The list of `SecretVersions`
  /// sorted in reverse by create_time (newest first).
  final List<SecretVersion>? versions;

  /// A token to retrieve the next page of results. Pass this value in
  /// `ListSecretVersionsRequest.page_token`
  /// to retrieve the next page.
  final String? nextPageToken;

  /// The total number of
  /// `SecretVersions` but 0 when
  /// the
  /// `ListSecretsRequest.filter`
  /// field is set.
  final int? totalSize;

  ListSecretVersionsResponse({
    this.versions,
    this.nextPageToken,
    this.totalSize,
  }) : super(fullyQualifiedName);

  factory ListSecretVersionsResponse.fromJson(Map<String, dynamic> json) {
    return ListSecretVersionsResponse(
      versions: decodeListMessage(json['versions'], SecretVersion.fromJson),
      nextPageToken: json['nextPageToken'],
      totalSize: json['totalSize'],
    );
  }

  @override
  Object toJson() {
    return {
      if (versions != null) 'versions': encodeList(versions),
      if (nextPageToken != null) 'nextPageToken': nextPageToken,
      if (totalSize != null) 'totalSize': totalSize,
    };
  }

  @override
  String toString() {
    final contents = [
      if (nextPageToken != null) 'nextPageToken=$nextPageToken',
      if (totalSize != null) 'totalSize=$totalSize',
    ].join(',');
    return 'ListSecretVersionsResponse($contents)';
  }
}

/// Request message for
/// `SecretManagerService.GetSecretVersion`.
class GetSecretVersionRequest extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.GetSecretVersionRequest';

  /// Required. The resource name of the
  /// `SecretVersion` in the format
  /// `projects/*/secrets/*/versions/*` or
  /// `projects/*/locations/*/secrets/*/versions/*`.
  ///
  /// `projects/*/secrets/*/versions/latest` or
  /// `projects/*/locations/*/secrets/*/versions/latest` is an alias to the most
  /// recently created
  /// `SecretVersion`.
  final String name;

  GetSecretVersionRequest({
    required this.name,
  }) : super(fullyQualifiedName);

  factory GetSecretVersionRequest.fromJson(Map<String, dynamic> json) {
    return GetSecretVersionRequest(
      name: json['name'],
    );
  }

  @override
  Object toJson() {
    return {
      'name': name,
    };
  }

  @override
  String toString() {
    final contents = [
      'name=$name',
    ].join(',');
    return 'GetSecretVersionRequest($contents)';
  }
}

/// Request message for
/// `SecretManagerService.UpdateSecret`.
class UpdateSecretRequest extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.UpdateSecretRequest';

  /// Required. `Secret` with updated field
  /// values.
  final Secret secret;

  /// Required. Specifies the fields to be updated.
  final FieldMask? updateMask;

  UpdateSecretRequest({
    required this.secret,
    this.updateMask,
  }) : super(fullyQualifiedName);

  factory UpdateSecretRequest.fromJson(Map<String, dynamic> json) {
    return UpdateSecretRequest(
      secret: decode(json['secret'], Secret.fromJson)!,
      updateMask: decodeCustom(json['updateMask'], FieldMask.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      'secret': secret.toJson(),
      if (updateMask != null) 'updateMask': updateMask!.toJson(),
    };
  }

  @override
  String toString() => 'UpdateSecretRequest()';
}

/// Request message for
/// `SecretManagerService.AccessSecretVersion`.
class AccessSecretVersionRequest extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.AccessSecretVersionRequest';

  /// Required. The resource name of the
  /// `SecretVersion` in the format
  /// `projects/*/secrets/*/versions/*` or
  /// `projects/*/locations/*/secrets/*/versions/*`.
  ///
  /// `projects/*/secrets/*/versions/latest` or
  /// `projects/*/locations/*/secrets/*/versions/latest` is an alias to the most
  /// recently created
  /// `SecretVersion`.
  final String name;

  AccessSecretVersionRequest({
    required this.name,
  }) : super(fullyQualifiedName);

  factory AccessSecretVersionRequest.fromJson(Map<String, dynamic> json) {
    return AccessSecretVersionRequest(
      name: json['name'],
    );
  }

  @override
  Object toJson() {
    return {
      'name': name,
    };
  }

  @override
  String toString() {
    final contents = [
      'name=$name',
    ].join(',');
    return 'AccessSecretVersionRequest($contents)';
  }
}

/// Response message for
/// `SecretManagerService.AccessSecretVersion`.
class AccessSecretVersionResponse extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.AccessSecretVersionResponse';

  /// The resource name of the
  /// `SecretVersion` in the format
  /// `projects/*/secrets/*/versions/*` or
  /// `projects/*/locations/*/secrets/*/versions/*`.
  final String? name;

  /// Secret payload
  final SecretPayload? payload;

  AccessSecretVersionResponse({
    this.name,
    this.payload,
  }) : super(fullyQualifiedName);

  factory AccessSecretVersionResponse.fromJson(Map<String, dynamic> json) {
    return AccessSecretVersionResponse(
      name: json['name'],
      payload: decode(json['payload'], SecretPayload.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (name != null) 'name': name,
      if (payload != null) 'payload': payload!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [
      if (name != null) 'name=$name',
    ].join(',');
    return 'AccessSecretVersionResponse($contents)';
  }
}

/// Request message for
/// `SecretManagerService.DeleteSecret`.
class DeleteSecretRequest extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.DeleteSecretRequest';

  /// Required. The resource name of the
  /// `Secret` to delete in the format
  /// `projects/*/secrets/*`.
  final String name;

  /// Optional. Etag of the `Secret`. The
  /// request succeeds if it matches the etag of the currently stored secret
  /// object. If the etag is omitted, the request succeeds.
  final String? etag;

  DeleteSecretRequest({
    required this.name,
    this.etag,
  }) : super(fullyQualifiedName);

  factory DeleteSecretRequest.fromJson(Map<String, dynamic> json) {
    return DeleteSecretRequest(
      name: json['name'],
      etag: json['etag'],
    );
  }

  @override
  Object toJson() {
    return {
      'name': name,
      if (etag != null) 'etag': etag,
    };
  }

  @override
  String toString() {
    final contents = [
      'name=$name',
      if (etag != null) 'etag=$etag',
    ].join(',');
    return 'DeleteSecretRequest($contents)';
  }
}

/// Request message for
/// `SecretManagerService.DisableSecretVersion`.
class DisableSecretVersionRequest extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.DisableSecretVersionRequest';

  /// Required. The resource name of the
  /// `SecretVersion` to disable in
  /// the format `projects/*/secrets/*/versions/*` or
  /// `projects/*/locations/*/secrets/*/versions/*`.
  final String name;

  /// Optional. Etag of the
  /// `SecretVersion`. The request
  /// succeeds if it matches the etag of the currently stored secret version
  /// object. If the etag is omitted, the request succeeds.
  final String? etag;

  DisableSecretVersionRequest({
    required this.name,
    this.etag,
  }) : super(fullyQualifiedName);

  factory DisableSecretVersionRequest.fromJson(Map<String, dynamic> json) {
    return DisableSecretVersionRequest(
      name: json['name'],
      etag: json['etag'],
    );
  }

  @override
  Object toJson() {
    return {
      'name': name,
      if (etag != null) 'etag': etag,
    };
  }

  @override
  String toString() {
    final contents = [
      'name=$name',
      if (etag != null) 'etag=$etag',
    ].join(',');
    return 'DisableSecretVersionRequest($contents)';
  }
}

/// Request message for
/// `SecretManagerService.EnableSecretVersion`.
class EnableSecretVersionRequest extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.EnableSecretVersionRequest';

  /// Required. The resource name of the
  /// `SecretVersion` to enable in
  /// the format `projects/*/secrets/*/versions/*` or
  /// `projects/*/locations/*/secrets/*/versions/*`.
  final String name;

  /// Optional. Etag of the
  /// `SecretVersion`. The request
  /// succeeds if it matches the etag of the currently stored secret version
  /// object. If the etag is omitted, the request succeeds.
  final String? etag;

  EnableSecretVersionRequest({
    required this.name,
    this.etag,
  }) : super(fullyQualifiedName);

  factory EnableSecretVersionRequest.fromJson(Map<String, dynamic> json) {
    return EnableSecretVersionRequest(
      name: json['name'],
      etag: json['etag'],
    );
  }

  @override
  Object toJson() {
    return {
      'name': name,
      if (etag != null) 'etag': etag,
    };
  }

  @override
  String toString() {
    final contents = [
      'name=$name',
      if (etag != null) 'etag=$etag',
    ].join(',');
    return 'EnableSecretVersionRequest($contents)';
  }
}

/// Request message for
/// `SecretManagerService.DestroySecretVersion`.
class DestroySecretVersionRequest extends Message {
  static const String fullyQualifiedName =
      'google.cloud.secretmanager.v1.DestroySecretVersionRequest';

  /// Required. The resource name of the
  /// `SecretVersion` to destroy in
  /// the format `projects/*/secrets/*/versions/*` or
  /// `projects/*/locations/*/secrets/*/versions/*`.
  final String name;

  /// Optional. Etag of the
  /// `SecretVersion`. The request
  /// succeeds if it matches the etag of the currently stored secret version
  /// object. If the etag is omitted, the request succeeds.
  final String? etag;

  DestroySecretVersionRequest({
    required this.name,
    this.etag,
  }) : super(fullyQualifiedName);

  factory DestroySecretVersionRequest.fromJson(Map<String, dynamic> json) {
    return DestroySecretVersionRequest(
      name: json['name'],
      etag: json['etag'],
    );
  }

  @override
  Object toJson() {
    return {
      'name': name,
      if (etag != null) 'etag': etag,
    };
  }

  @override
  String toString() {
    final contents = [
      'name=$name',
      if (etag != null) 'etag=$etag',
    ].join(',');
    return 'DestroySecretVersionRequest($contents)';
  }
}
